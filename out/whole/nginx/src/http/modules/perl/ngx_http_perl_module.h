# 0 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h"
# 0 "<built-in>"
#define __STDC__ 1
# 0 "<built-in>"
#define __STDC_VERSION__ 201710L
# 0 "<built-in>"
#define __STDC_UTF_16__ 1
# 0 "<built-in>"
#define __STDC_UTF_32__ 1
# 0 "<built-in>"
#define __STDC_HOSTED__ 1
# 0 "<built-in>"
#define __GNUC__ 11
# 0 "<built-in>"
#define __GNUC_MINOR__ 2
# 0 "<built-in>"
#define __GNUC_PATCHLEVEL__ 0
# 0 "<built-in>"
#define __VERSION__ "11.2.0"
# 0 "<built-in>"
#define __ATOMIC_RELAXED 0
# 0 "<built-in>"
#define __ATOMIC_SEQ_CST 5
# 0 "<built-in>"
#define __ATOMIC_ACQUIRE 2
# 0 "<built-in>"
#define __ATOMIC_RELEASE 3
# 0 "<built-in>"
#define __ATOMIC_ACQ_REL 4
# 0 "<built-in>"
#define __ATOMIC_CONSUME 1
# 0 "<built-in>"
#define __pic__ 2
# 0 "<built-in>"
#define __PIC__ 2
# 0 "<built-in>"
#define __FINITE_MATH_ONLY__ 0
# 0 "<built-in>"
#define _LP64 1
# 0 "<built-in>"
#define __LP64__ 1
# 0 "<built-in>"
#define __SIZEOF_INT__ 4
# 0 "<built-in>"
#define __SIZEOF_LONG__ 8
# 0 "<built-in>"
#define __SIZEOF_LONG_LONG__ 8
# 0 "<built-in>"
#define __SIZEOF_SHORT__ 2
# 0 "<built-in>"
#define __SIZEOF_FLOAT__ 4
# 0 "<built-in>"
#define __SIZEOF_DOUBLE__ 8
# 0 "<built-in>"
#define __SIZEOF_LONG_DOUBLE__ 16
# 0 "<built-in>"
#define __SIZEOF_SIZE_T__ 8
# 0 "<built-in>"
#define __CHAR_BIT__ 8
# 0 "<built-in>"
#define __BIGGEST_ALIGNMENT__ 16
# 0 "<built-in>"
#define __ORDER_LITTLE_ENDIAN__ 1234
# 0 "<built-in>"
#define __ORDER_BIG_ENDIAN__ 4321
# 0 "<built-in>"
#define __ORDER_PDP_ENDIAN__ 3412
# 0 "<built-in>"
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __SIZEOF_POINTER__ 8
# 0 "<built-in>"
#define __GNUC_EXECUTION_CHARSET_NAME "UTF-8"
# 0 "<built-in>"
#define __GNUC_WIDE_EXECUTION_CHARSET_NAME "UTF-32LE"
# 0 "<built-in>"
#define __SIZE_TYPE__ long unsigned int
# 0 "<built-in>"
#define __PTRDIFF_TYPE__ long int
# 0 "<built-in>"
#define __WCHAR_TYPE__ int
# 0 "<built-in>"
#define __WINT_TYPE__ int
# 0 "<built-in>"
#define __INTMAX_TYPE__ long int
# 0 "<built-in>"
#define __UINTMAX_TYPE__ long unsigned int
# 0 "<built-in>"
#define __CHAR16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __CHAR32_TYPE__ unsigned int
# 0 "<built-in>"
#define __SIG_ATOMIC_TYPE__ int
# 0 "<built-in>"
#define __INT8_TYPE__ signed char
# 0 "<built-in>"
#define __INT16_TYPE__ short int
# 0 "<built-in>"
#define __INT32_TYPE__ int
# 0 "<built-in>"
#define __INT64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INT_LEAST8_TYPE__ signed char
# 0 "<built-in>"
#define __INT_LEAST16_TYPE__ short int
# 0 "<built-in>"
#define __INT_LEAST32_TYPE__ int
# 0 "<built-in>"
#define __INT_LEAST64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT_LEAST8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT_LEAST16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT_LEAST32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_LEAST64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INT_FAST8_TYPE__ signed char
# 0 "<built-in>"
#define __INT_FAST16_TYPE__ short int
# 0 "<built-in>"
#define __INT_FAST32_TYPE__ int
# 0 "<built-in>"
#define __INT_FAST64_TYPE__ long long int
# 0 "<built-in>"
#define __UINT_FAST8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT_FAST16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT_FAST32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_FAST64_TYPE__ long long unsigned int
# 0 "<built-in>"
#define __INTPTR_TYPE__ long int
# 0 "<built-in>"
#define __UINTPTR_TYPE__ long unsigned int
# 0 "<built-in>"
#define __GXX_ABI_VERSION 1016
# 0 "<built-in>"
#define __SCHAR_MAX__ 0x7f
# 0 "<built-in>"
#define __SHRT_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __LONG_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __WCHAR_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
# 0 "<built-in>"
#define __WINT_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __WINT_MIN__ (-__WINT_MAX__ - 1)
# 0 "<built-in>"
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __SIZE_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __SCHAR_WIDTH__ 8
# 0 "<built-in>"
#define __SHRT_WIDTH__ 16
# 0 "<built-in>"
#define __INT_WIDTH__ 32
# 0 "<built-in>"
#define __LONG_WIDTH__ 64
# 0 "<built-in>"
#define __LONG_LONG_WIDTH__ 64
# 0 "<built-in>"
#define __WCHAR_WIDTH__ 32
# 0 "<built-in>"
#define __WINT_WIDTH__ 32
# 0 "<built-in>"
#define __PTRDIFF_WIDTH__ 64
# 0 "<built-in>"
#define __SIZE_WIDTH__ 64
# 0 "<built-in>"
#define __INTMAX_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INTMAX_C(c) c ## L
# 0 "<built-in>"
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __UINTMAX_C(c) c ## UL
# 0 "<built-in>"
#define __INTMAX_WIDTH__ 64
# 0 "<built-in>"
#define __SIG_ATOMIC_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
# 0 "<built-in>"
#define __SIG_ATOMIC_WIDTH__ 32
# 0 "<built-in>"
#define __INT8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __UINT8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __INT_LEAST8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT8_C(c) c
# 0 "<built-in>"
#define __INT_LEAST8_WIDTH__ 8
# 0 "<built-in>"
#define __INT_LEAST16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT16_C(c) c
# 0 "<built-in>"
#define __INT_LEAST16_WIDTH__ 16
# 0 "<built-in>"
#define __INT_LEAST32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT32_C(c) c
# 0 "<built-in>"
#define __INT_LEAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INT64_C(c) c ## LL
# 0 "<built-in>"
#define __INT_LEAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_LEAST8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT8_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT16_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT32_C(c) c ## U
# 0 "<built-in>"
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __UINT64_C(c) c ## ULL
# 0 "<built-in>"
#define __INT_FAST8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT_FAST8_WIDTH__ 8
# 0 "<built-in>"
#define __INT_FAST16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT_FAST16_WIDTH__ 16
# 0 "<built-in>"
#define __INT_FAST32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT_FAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __INT_FAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_FAST8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT_FAST16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT_FAST32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
# 0 "<built-in>"
#define __INTPTR_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INTPTR_WIDTH__ 64
# 0 "<built-in>"
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __GCC_IEC_559 2
# 0 "<built-in>"
#define __GCC_IEC_559_COMPLEX 2
# 0 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
# 0 "<built-in>"
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
# 0 "<built-in>"
#define __DEC_EVAL_METHOD__ 2
# 0 "<built-in>"
#define __FLT_RADIX__ 2
# 0 "<built-in>"
#define __FLT_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT_DIG__ 6
# 0 "<built-in>"
#define __FLT_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
# 0 "<built-in>"
#define __FLT_NORM_MAX__ 3.40282346638528859811704183484516925e+38F
# 0 "<built-in>"
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
# 0 "<built-in>"
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
# 0 "<built-in>"
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
# 0 "<built-in>"
#define __FLT_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __DBL_MANT_DIG__ 53
# 0 "<built-in>"
#define __DBL_DIG__ 15
# 0 "<built-in>"
#define __DBL_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __DBL_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __DBL_MAX_EXP__ 1024
# 0 "<built-in>"
#define __DBL_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __DBL_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __DBL_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
# 0 "<built-in>"
#define __DBL_NORM_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
# 0 "<built-in>"
#define __DBL_MIN__ ((double)2.22507385850720138309023271733240406e-308L)
# 0 "<built-in>"
#define __DBL_EPSILON__ ((double)2.22044604925031308084726333618164062e-16L)
# 0 "<built-in>"
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544176568792868221372e-324L)
# 0 "<built-in>"
#define __DBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __DBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __DBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __DBL_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __LDBL_MANT_DIG__ 64
# 0 "<built-in>"
#define __LDBL_DIG__ 18
# 0 "<built-in>"
#define __LDBL_MIN_EXP__ (-16381)
# 0 "<built-in>"
#define __LDBL_MIN_10_EXP__ (-4931)
# 0 "<built-in>"
#define __LDBL_MAX_EXP__ 16384
# 0 "<built-in>"
#define __LDBL_MAX_10_EXP__ 4932
# 0 "<built-in>"
#define __DECIMAL_DIG__ 21
# 0 "<built-in>"
#define __LDBL_DECIMAL_DIG__ 21
# 0 "<built-in>"
#define __LDBL_MAX__ 1.18973149535723176502126385303097021e+4932L
# 0 "<built-in>"
#define __LDBL_NORM_MAX__ 1.18973149535723176502126385303097021e+4932L
# 0 "<built-in>"
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
# 0 "<built-in>"
#define __LDBL_EPSILON__ 1.08420217248550443400745280086994171e-19L
# 0 "<built-in>"
#define __LDBL_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951L
# 0 "<built-in>"
#define __LDBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __LDBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __LDBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __LDBL_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT32_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT32_DIG__ 6
# 0 "<built-in>"
#define __FLT32_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT32_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT32_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT32_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT32_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
# 0 "<built-in>"
#define __FLT32_NORM_MAX__ 3.40282346638528859811704183484516925e+38F32
# 0 "<built-in>"
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
# 0 "<built-in>"
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
# 0 "<built-in>"
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
# 0 "<built-in>"
#define __FLT32_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT32_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT64_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT64_DIG__ 15
# 0 "<built-in>"
#define __FLT64_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT64_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT64_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT64_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT64_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
# 0 "<built-in>"
#define __FLT64_NORM_MAX__ 1.79769313486231570814527423731704357e+308F64
# 0 "<built-in>"
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
# 0 "<built-in>"
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
# 0 "<built-in>"
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
# 0 "<built-in>"
#define __FLT64_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT64_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT64_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT64_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT128_MANT_DIG__ 113
# 0 "<built-in>"
#define __FLT128_DIG__ 33
# 0 "<built-in>"
#define __FLT128_MIN_EXP__ (-16381)
# 0 "<built-in>"
#define __FLT128_MIN_10_EXP__ (-4931)
# 0 "<built-in>"
#define __FLT128_MAX_EXP__ 16384
# 0 "<built-in>"
#define __FLT128_MAX_10_EXP__ 4932
# 0 "<built-in>"
#define __FLT128_DECIMAL_DIG__ 36
# 0 "<built-in>"
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
# 0 "<built-in>"
#define __FLT128_NORM_MAX__ 1.18973149535723176508575932662800702e+4932F128
# 0 "<built-in>"
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
# 0 "<built-in>"
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
# 0 "<built-in>"
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
# 0 "<built-in>"
#define __FLT128_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT128_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT128_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT128_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT32X_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT32X_DIG__ 15
# 0 "<built-in>"
#define __FLT32X_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT32X_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT32X_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT32X_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT32X_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
# 0 "<built-in>"
#define __FLT32X_NORM_MAX__ 1.79769313486231570814527423731704357e+308F32x
# 0 "<built-in>"
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
# 0 "<built-in>"
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
# 0 "<built-in>"
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
# 0 "<built-in>"
#define __FLT32X_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT32X_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __FLT64X_MANT_DIG__ 64
# 0 "<built-in>"
#define __FLT64X_DIG__ 18
# 0 "<built-in>"
#define __FLT64X_MIN_EXP__ (-16381)
# 0 "<built-in>"
#define __FLT64X_MIN_10_EXP__ (-4931)
# 0 "<built-in>"
#define __FLT64X_MAX_EXP__ 16384
# 0 "<built-in>"
#define __FLT64X_MAX_10_EXP__ 4932
# 0 "<built-in>"
#define __FLT64X_DECIMAL_DIG__ 21
# 0 "<built-in>"
#define __FLT64X_MAX__ 1.18973149535723176502126385303097021e+4932F64x
# 0 "<built-in>"
#define __FLT64X_NORM_MAX__ 1.18973149535723176502126385303097021e+4932F64x
# 0 "<built-in>"
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
# 0 "<built-in>"
#define __FLT64X_EPSILON__ 1.08420217248550443400745280086994171e-19F64x
# 0 "<built-in>"
#define __FLT64X_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951F64x
# 0 "<built-in>"
#define __FLT64X_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT64X_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT64X_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT64X_IS_IEC_60559__ 2
# 0 "<built-in>"
#define __REGISTER_PREFIX__ 
# 0 "<built-in>"
#define __USER_LABEL_PREFIX__ _
# 0 "<built-in>"
#define __GNUC_STDC_INLINE__ 1
# 0 "<built-in>"
#define __NO_INLINE__ 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
# 0 "<built-in>"
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_INT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
# 0 "<built-in>"
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
# 0 "<built-in>"
#define __HAVE_SPECULATION_SAFE_VALUE 1
# 0 "<built-in>"
#define __PRAGMA_REDEFINE_EXTNAME 1
# 0 "<built-in>"
#define __SIZEOF_INT128__ 16
# 0 "<built-in>"
#define __SIZEOF_WCHAR_T__ 4
# 0 "<built-in>"
#define __SIZEOF_WINT_T__ 4
# 0 "<built-in>"
#define __SIZEOF_PTRDIFF_T__ 8
# 0 "<built-in>"
#define __amd64 1
# 0 "<built-in>"
#define __amd64__ 1
# 0 "<built-in>"
#define __x86_64 1
# 0 "<built-in>"
#define __x86_64__ 1
# 0 "<built-in>"
#define __SIZEOF_FLOAT80__ 16
# 0 "<built-in>"
#define __SIZEOF_FLOAT128__ 16
# 0 "<built-in>"
#define __ATOMIC_HLE_ACQUIRE 65536
# 0 "<built-in>"
#define __ATOMIC_HLE_RELEASE 131072
# 0 "<built-in>"
#define __GCC_ASM_FLAG_OUTPUTS__ 1
# 0 "<built-in>"
#define __k8 1
# 0 "<built-in>"
#define __k8__ 1
# 0 "<built-in>"
#define __tune_core2__ 1
# 0 "<built-in>"
#define __code_model_small__ 1
# 0 "<built-in>"
#define __MMX__ 1
# 0 "<built-in>"
#define __SSE__ 1
# 0 "<built-in>"
#define __SSE2__ 1
# 0 "<built-in>"
#define __SSE3__ 1
# 0 "<built-in>"
#define __FXSR__ 1
# 0 "<built-in>"
#define __SSE_MATH__ 1
# 0 "<built-in>"
#define __SSE2_MATH__ 1
# 0 "<built-in>"
#define __MMX_WITH_SSE__ 1
# 0 "<built-in>"
#define __SEG_FS 1
# 0 "<built-in>"
#define __SEG_GS 1
# 0 "<built-in>"
#define __LITTLE_ENDIAN__ 1
# 0 "<built-in>"
#define __MACH__ 1
# 0 "<built-in>"
#define __APPLE__ 1
# 0 "<built-in>"
#define __APPLE_CC__ 1
# 0 "<built-in>"
#define __CONSTANT_CFSTRINGS__ 1
# 0 "<built-in>"
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 110500
# 0 "<built-in>"
#define __strong 
# 0 "<built-in>"
#define __weak 
# 0 "<command-line>"
#define __DYNAMIC__ 1
# 1 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h"
# 9 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h"
#define _NGX_HTTP_PERL_MODULE_H_INCLUDED_ 


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 3 4
#define _NGX_CONFIG_H_INCLUDED_ 


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/objs/ngx_auto_headers.h" 1 3 4

# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/objs/ngx_auto_headers.h" 3 4
<ngx_http_perl_module.h>


#define NGX_HAVE_UNISTD_H 1




#define NGX_HAVE_INTTYPES_H 1




#define NGX_HAVE_LIMITS_H 1




#define NGX_HAVE_SYS_FILIO_H 1




#define NGX_HAVE_SYS_PARAM_H 1




#define NGX_HAVE_SYS_MOUNT_H 1




#define NGX_HAVE_SYS_STATVFS_H 1




#define NGX_DARWIN 1
# 13 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 2 3 4
# 34 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 3 4
#define _NGX_DARWIN_CONFIG_H_INCLUDED_ 


#define __APPLE_USE_RFC_3542 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 3 4
#define _SYS_TYPES_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/appleapiopts.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/appleapiopts.h" 3 4
#define __SYS_APPLEAPIOPTS_H__ 



#define __APPLE_API_STANDARD 



#define __APPLE_API_STABLE 





#define __APPLE_API_EVOLVING 



#define __APPLE_API_UNSTABLE 



#define __APPLE_API_PRIVATE 



#define __APPLE_API_OBSOLETE 
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define _CDEFS_H_ 





#define __BEGIN_DECLS 
#define __END_DECLS 
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __has_feature(x) 0





#define __has_extension(x) 0
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __P(protos) protos
#define __CONCAT(x,y) x ## y
#define __STRING(x) #x

#define __const const
#define __signed signed
#define __volatile volatile
# 155 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))




#define __unused __attribute__((__unused__))




#define __used __attribute__((__used__))





#define __cold __attribute__((__cold__))
# 182 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __exported __attribute__((__visibility__("default")))
#define __exported_push _Pragma("GCC visibility push(default)")
#define __exported_pop _Pragma("GCC visibility pop")
# 196 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __deprecated __attribute__((__deprecated__))



#define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))







#define __deprecated_enum_msg(_msg) 


#define __kpi_deprecated(_msg) 







#define __unavailable 


#define __kpi_unavailable 

#define __kpi_deprecated_arm64_macos_unavailable 



#define __dead 
#define __pure 
# 239 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __restrict restrict
# 248 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __nullable 


#define __nonnull 


#define __null_unspecified 


#define _Nullable 


#define _Nonnull 


#define _Null_unspecified 
# 274 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __disable_tail_calls 
# 286 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __not_tail_called 
# 295 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __result_use_check __attribute__((__warn_unused_result__))
# 307 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __swift_unavailable(_msg) 
# 316 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __abortlike __dead2 __cold __not_tail_called
# 341 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __header_inline extern __inline __attribute__((__gnu_inline__))
# 352 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __header_always_inline __header_inline __attribute__ ((__always_inline__))
# 371 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __unreachable_ok_push _Pragma("GCC diagnostic push") _Pragma("GCC diagnostic ignored \"-Wunreachable-code\"")


#define __unreachable_ok_pop _Pragma("GCC diagnostic pop")
# 389 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __printf0like(fmtarg,firstvararg) __attribute__((__format__ (__printf0__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))


#define __IDSTRING(name,string) static const char name[] __used = string


#define __COPYRIGHT(s) __IDSTRING(copyright,s)



#define __RCSID(s) __IDSTRING(rcsid,s)



#define __SCCSID(s) __IDSTRING(sccsid,s)



#define __PROJECT_VERSION(s) __IDSTRING(project_version,s)




#define __FBSDID(s) 



#define __DECONST(type,var) __CAST_AWAY_QUALIFIER(var, const, type)



#define __DEVOLATILE(type,var) __CAST_AWAY_QUALIFIER(var, volatile, type)



#define __DEQUALIFY(type,var) __CAST_AWAY_QUALIFIER(var, const volatile, type)
# 446 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __alloc_size(...) __attribute__((alloc_size(__VA_ARGS__)))
# 496 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_ONLY_64_BIT_INO_T 0
#define __DARWIN_ONLY_UNIX_CONFORMANCE 1
#define __DARWIN_ONLY_VERS_1050 0
# 528 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_UNIX03 1
# 564 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_64_BIT_INO_T 1
# 575 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_VERS_1050 1




#define __DARWIN_NON_CANCELABLE 0







#define __DARWIN_SUF_UNIX03 
# 597 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_64_BIT_INO_T "$INODE64"
# 607 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_1050 "$1050"
# 616 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_NON_CANCELABLE 
# 626 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"




#define __DARWIN_ALIAS(sym) __asm("_" __STRING(sym) __DARWIN_SUF_UNIX03)
#define __DARWIN_ALIAS_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03)
#define __DARWIN_ALIAS_I(sym) __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03)
#define __DARWIN_NOCANCEL(sym) __asm("_" __STRING(sym) __DARWIN_SUF_NON_CANCELABLE)
#define __DARWIN_INODE64(sym) __asm("_" __STRING(sym) __DARWIN_SUF_64_BIT_INO_T)

#define __DARWIN_1050(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050)
#define __DARWIN_1050ALIAS(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_UNIX03)
#define __DARWIN_1050ALIAS_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_NON_CANCELABLE __DARWIN_SUF_UNIX03)
#define __DARWIN_1050ALIAS_I(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T __DARWIN_SUF_UNIX03)
#define __DARWIN_1050INODE64(sym) __asm("_" __STRING(sym) __DARWIN_SUF_1050 __DARWIN_SUF_64_BIT_INO_T)

#define __DARWIN_EXTSN(sym) __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN)
#define __DARWIN_EXTSN_C(sym) __asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE)




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_symbol_aliasing.h" 3 4
#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_4(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_4(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_5(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_6(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_7(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_0(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_1(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_2(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_3(x) 





#define __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_5(x) 



#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_9(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_10(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_2(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_3(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_11(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_2(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_3(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_4(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_12(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_2(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_4(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_13(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_2(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_4(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_14(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_4(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_5(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_6(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_15(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_10_16(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_11_0(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_11_1(x) x





#define __DARWIN_ALIAS_STARTING_MAC___MAC_11_3(x) x
# 650 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 2 3 4




#define __DARWIN_ALIAS_STARTING(_mac,_iphone,x) __DARWIN_ALIAS_STARTING_MAC_ ##_mac(x)
# 715 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_posix_availability.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_posix_availability.h" 3 4
#define ___POSIX_C_DEPRECATED_STARTING_198808L 





#define ___POSIX_C_DEPRECATED_STARTING_199009L 





#define ___POSIX_C_DEPRECATED_STARTING_199209L 





#define ___POSIX_C_DEPRECATED_STARTING_199309L 





#define ___POSIX_C_DEPRECATED_STARTING_199506L 





#define ___POSIX_C_DEPRECATED_STARTING_200112L 





#define ___POSIX_C_DEPRECATED_STARTING_200809L 
# 716 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 2 3 4

#define __POSIX_C_DEPRECATED(ver) ___POSIX_C_DEPRECATED_STARTING_ ##ver







#define __DARWIN_C_ANSI 010000L
#define __DARWIN_C_FULL 900000L






#define __DARWIN_C_LEVEL __DARWIN_C_FULL







#define __STDC_WANT_LIB_EXT1__ 1
# 752 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __DARWIN_NO_LONG_LONG 0
# 764 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define _DARWIN_FEATURE_64_BIT_INODE 1
# 790 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1







#define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
# 809 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __CAST_AWAY_QUALIFIER(variable,qualifier,type) (type) (long)(variable)







#define __XNU_PRIVATE_EXTERN __attribute__((visibility("hidden")))
# 833 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __compiler_barrier() __asm__ __volatile__("" ::: "memory")





#define __enum_open 
#define __enum_closed 





#define __enum_options 
# 866 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/cdefs.h" 3 4
#define __enum_decl(_name,_type,...) typedef _type _name; enum __VA_ARGS__ __enum_open

#define __enum_closed_decl(_name,_type,...) typedef _type _name; enum __VA_ARGS__ __enum_closed

#define __options_decl(_name,_type,...) typedef _type _name; enum __VA_ARGS__ __enum_open __enum_options

#define __options_closed_decl(_name,_type,...) typedef _type _name; enum __VA_ARGS__ __enum_closed __enum_options
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/types.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/types.h" 3 4
#define _BSD_MACHINE_TYPES_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 3 4
#define _MACHTYPES_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_types.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_types.h" 3 4
#define _BSD_I386__TYPES_H_ 







typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int8_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int8_t.h" 3 4
#define _INT8_T 
typedef signed char int8_t;
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int16_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int16_t.h" 3 4
#define _INT16_T 
typedef short int16_t;
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int32_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int32_t.h" 3 4
#define _INT32_T 
typedef int int32_t;
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int64_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_int64_t.h" 3 4
#define _INT64_T 
typedef long long int64_t;
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int8_t.h" 3 4
#define _U_INT8_T 
typedef unsigned char u_int8_t;
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int16_t.h" 3 4
#define _U_INT16_T 
typedef unsigned short u_int16_t;
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int32_t.h" 3 4
#define _U_INT32_T 
typedef unsigned int u_int32_t;
# 84 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int64_t.h" 3 4
#define _U_INT64_T 
typedef unsigned long long u_int64_t;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4


typedef int64_t register_t;




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_intptr_t.h" 3 4
#define _INTPTR_T 
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/types.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_intptr_t.h" 2 3 4

typedef __darwin_intptr_t intptr_t;
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_uintptr_t.h" 3 4
#define _UINTPTR_T 
typedef unsigned long uintptr_t;
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/types.h" 2 3 4



typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;
#define USER_ADDR_NULL ((user_addr_t) 0)
#define CAST_USER_ADDR_T(a_ptr) ((user_addr_t)((uintptr_t)(a_ptr)))





typedef u_int64_t syscall_arg_t;
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/types.h" 2 3 4
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types.h" 3 4
#define _SYS__TYPES_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_types.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_types.h" 3 4
#define _BSD_MACHINE__TYPES_H_ 
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types.h" 2 3 4
# 52 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types.h" 3 4
#define __DARWIN_NULL ((void *)0)


typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_types.h" 3 4
#define _SYS__PTHREAD_TYPES_H_ 





#define __PTHREAD_SIZE__ 8176
#define __PTHREAD_ATTR_SIZE__ 56
#define __PTHREAD_MUTEXATTR_SIZE__ 8
#define __PTHREAD_MUTEX_SIZE__ 56
#define __PTHREAD_CONDATTR_SIZE__ 8
#define __PTHREAD_COND_SIZE__ 40
#define __PTHREAD_ONCE_SIZE__ 8
#define __PTHREAD_RWLOCK_SIZE__ 192
#define __PTHREAD_RWLOCKATTR_SIZE__ 16
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types.h" 2 3 4


#define __offsetof(type,field) __builtin_offsetof(type, field)
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/endian.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/endian.h" 3 4
#define _BSD_MACHINE_ENDIAN_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/endian.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/endian.h" 3 4
#define _I386__ENDIAN_H_ 
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/endian.h" 3 4
#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0





#define __DARWIN_LITTLE_ENDIAN 1234
#define __DARWIN_BIG_ENDIAN 4321
#define __DARWIN_PDP_ENDIAN 3412

#define __DARWIN_BYTE_ORDER __DARWIN_LITTLE_ENDIAN



#define LITTLE_ENDIAN __DARWIN_LITTLE_ENDIAN
#define BIG_ENDIAN __DARWIN_BIG_ENDIAN
#define PDP_ENDIAN __DARWIN_PDP_ENDIAN

#define BYTE_ORDER __DARWIN_BYTE_ORDER

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_endian.h" 1 3 4
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_endian.h" 3 4
#define _SYS__ENDIAN_H_ 
# 130 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_endian.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
#define _OS__OSBYTEORDER_H 
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
#define __DARWIN_OSSwapConstInt16(x) ((__uint16_t)((((__uint16_t)(x) & 0xff00U) >> 8) | (((__uint16_t)(x) & 0x00ffU) << 8)))



#define __DARWIN_OSSwapConstInt32(x) ((__uint32_t)((((__uint32_t)(x) & 0xff000000U) >> 24) | (((__uint32_t)(x) & 0x00ff0000U) >> 8) | (((__uint32_t)(x) & 0x0000ff00U) << 8) | (((__uint32_t)(x) & 0x000000ffU) << 24)))





#define __DARWIN_OSSwapConstInt64(x) ((__uint64_t)((((__uint64_t)(x) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(x) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(x) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(x) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(x) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(x) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(x) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(x) & 0x00000000000000ffULL) << 56)))
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
#define __DARWIN_OS_INLINE static inline
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/i386/_OSByteOrder.h" 3 4
#define _OS__OSBYTEORDERI386_H 
# 44 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
 __uint16_t _data
 )
{
 return (__uint16_t)((_data << 8) | (_data >> 8));
}

static inline
__uint32_t
_OSSwapInt32(
 __uint32_t _data
 )
{



 __asm__ ("bswap   %0" : "+r" (_data));
 return _data;

}
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint64_t
_OSSwapInt64(
 __uint64_t _data
 )
{
 __asm__ ("bswap   %0" : "+r" (_data));
 return _data;
}
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/libkern/_OSByteOrder.h" 2 3 4







#define __DARWIN_OSSwapInt16(x) ((__uint16_t)(__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt16(x) : _OSSwapInt16(x)))


#define __DARWIN_OSSwapInt32(x) (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt32(x) : _OSSwapInt32(x))


#define __DARWIN_OSSwapInt64(x) (__builtin_constant_p(x) ? __DARWIN_OSSwapConstInt64(x) : _OSSwapInt64(x))
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_endian.h" 2 3 4

#define ntohs(x) __DARWIN_OSSwapInt16(x)
#define htons(x) __DARWIN_OSSwapInt16(x)

#define ntohl(x) __DARWIN_OSSwapInt32(x)
#define htonl(x) __DARWIN_OSSwapInt32(x)



#define ntohll(x) __DARWIN_OSSwapInt64(x)
#define htonll(x) __DARWIN_OSSwapInt64(x)

#define NTOHL(x) (x) = ntohl((__uint32_t)x)
#define NTOHS(x) (x) = ntohs((__uint16_t)x)
#define NTOHLL(x) (x) = ntohll((__uint64_t)x)
#define HTONL(x) (x) = htonl((__uint32_t)x)
#define HTONS(x) (x) = htons((__uint16_t)x)
#define HTONLL(x) (x) = htonll((__uint64_t)x)
# 100 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/endian.h" 2 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/endian.h" 2 3 4
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_char.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_char.h" 3 4
#define _U_CHAR 
typedef unsigned char u_char;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_short.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_short.h" 3 4
#define _U_SHORT 
typedef unsigned short u_short;
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_u_int.h" 3 4
#define _U_INT 
typedef unsigned int u_int;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

typedef unsigned long u_long;
#define _U_LONG 

typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_caddr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_caddr_t.h" 3 4
#define _CADDR_T 
typedef char * caddr_t;
# 100 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t daddr_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_dev_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_dev_t.h" 3 4
#define _DEV_T 

typedef __darwin_dev_t dev_t;
# 104 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

typedef u_int32_t fixpt_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_blkcnt_t.h" 3 4
#define _BLKCNT_T 

typedef __darwin_blkcnt_t blkcnt_t;
# 108 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_blksize_t.h" 3 4
#define _BLKSIZE_T 

typedef __darwin_blksize_t blksize_t;
# 109 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_gid_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_gid_t.h" 3 4
#define _GID_T 

typedef __darwin_gid_t gid_t;
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_in_addr_t.h" 3 4
#define _IN_ADDR_T 

typedef __uint32_t in_addr_t;
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_in_port_t.h" 3 4
#define _IN_PORT_T 

typedef __uint16_t in_port_t;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ino_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ino_t.h" 3 4
#define _INO_T 

typedef __darwin_ino_t ino_t;
# 113 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ino64_t.h" 3 4
#define _INO64_T 

typedef __darwin_ino64_t ino64_t;
# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_key_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_key_t.h" 3 4
#define _KEY_T 

typedef __int32_t key_t;
# 119 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_mode_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_mode_t.h" 3 4
#define _MODE_T 

typedef __darwin_mode_t mode_t;
# 120 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_nlink_t.h" 3 4
#define _NLINK_T 

typedef __uint16_t nlink_t;
# 121 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_id_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_id_t.h" 3 4
#define _ID_T 

typedef __darwin_id_t id_t;
# 122 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_pid_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_pid_t.h" 3 4
#define _PID_T 

typedef __darwin_pid_t pid_t;
# 123 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_off_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_off_t.h" 3 4
#define _OFF_T 

typedef __darwin_off_t off_t;
# 124 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

typedef int32_t segsz_t;
typedef int32_t swblk_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_uid_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_uid_t.h" 3 4
#define _UID_T 

typedef __darwin_uid_t uid_t;
# 129 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 158 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 3 4
#define major(x) ((int32_t)(((u_int32_t)(x) >> 24) & 0xff))
#define minor(x) ((int32_t)((x) & 0xffffff))
#define makedev(x,y) ((dev_t)(((x) << 24) | (y)))




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_clock_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_clock_t.h" 3 4
#define _CLOCK_T 

typedef __darwin_clock_t clock_t;
# 166 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_size_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_size_t.h" 3 4
#define _SIZE_T 

typedef __darwin_size_t size_t;
# 167 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ssize_t.h" 3 4
#define _SSIZE_T 

typedef __darwin_ssize_t ssize_t;
# 168 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_time_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_time_t.h" 3 4
#define _TIME_T 

typedef __darwin_time_t time_t;
# 169 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_useconds_t.h" 3 4
#define _USECONDS_T 

typedef __darwin_useconds_t useconds_t;
# 171 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_suseconds_t.h" 3 4
#define _SUSECONDS_T 

typedef __darwin_suseconds_t suseconds_t;
# 172 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_rsize_t.h" 3 4
#define _RSIZE_T 

typedef __darwin_size_t rsize_t;
# 175 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_errno_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_errno_t.h" 3 4
#define _ERRNO_T 
typedef int errno_t;
# 176 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 184 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_def.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_def.h" 3 4
#define _FD_SET 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __AVAILABILITY__ 
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __API_TO_BE_DEPRECATED 100000


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/AvailabilityVersions.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/AvailabilityVersions.h" 3 4
#define __AVAILABILITY_VERSIONS__ 

#define __MAC_10_0 1000
#define __MAC_10_1 1010
#define __MAC_10_2 1020
#define __MAC_10_3 1030
#define __MAC_10_4 1040
#define __MAC_10_5 1050
#define __MAC_10_6 1060
#define __MAC_10_7 1070
#define __MAC_10_8 1080
#define __MAC_10_9 1090
#define __MAC_10_10 101000
#define __MAC_10_10_2 101002
#define __MAC_10_10_3 101003
#define __MAC_10_11 101100
#define __MAC_10_11_2 101102
#define __MAC_10_11_3 101103
#define __MAC_10_11_4 101104
#define __MAC_10_12 101200
#define __MAC_10_12_1 101201
#define __MAC_10_12_2 101202
#define __MAC_10_12_4 101204
#define __MAC_10_13 101300
#define __MAC_10_13_1 101301
#define __MAC_10_13_2 101302
#define __MAC_10_13_4 101304
#define __MAC_10_14 101400
#define __MAC_10_14_1 101401
#define __MAC_10_14_4 101404
#define __MAC_10_14_6 101406
#define __MAC_10_15 101500
#define __MAC_10_15_1 101501
#define __MAC_10_15_4 101504
#define __MAC_10_16 101600
#define __MAC_11_0 110000
#define __MAC_11_1 110100
#define __MAC_11_3 110300


#define __IPHONE_2_0 20000
#define __IPHONE_2_1 20100
#define __IPHONE_2_2 20200
#define __IPHONE_3_0 30000
#define __IPHONE_3_1 30100
#define __IPHONE_3_2 30200
#define __IPHONE_4_0 40000
#define __IPHONE_4_1 40100
#define __IPHONE_4_2 40200
#define __IPHONE_4_3 40300
#define __IPHONE_5_0 50000
#define __IPHONE_5_1 50100
#define __IPHONE_6_0 60000
#define __IPHONE_6_1 60100
#define __IPHONE_7_0 70000
#define __IPHONE_7_1 70100
#define __IPHONE_8_0 80000
#define __IPHONE_8_1 80100
#define __IPHONE_8_2 80200
#define __IPHONE_8_3 80300
#define __IPHONE_8_4 80400
#define __IPHONE_9_0 90000
#define __IPHONE_9_1 90100
#define __IPHONE_9_2 90200
#define __IPHONE_9_3 90300
#define __IPHONE_10_0 100000
#define __IPHONE_10_1 100100
#define __IPHONE_10_2 100200
#define __IPHONE_10_3 100300
#define __IPHONE_11_0 110000
#define __IPHONE_11_1 110100
#define __IPHONE_11_2 110200
#define __IPHONE_11_3 110300
#define __IPHONE_11_4 110400
#define __IPHONE_12_0 120000
#define __IPHONE_12_1 120100
#define __IPHONE_12_2 120200
#define __IPHONE_12_3 120300
#define __IPHONE_12_4 120400
#define __IPHONE_13_0 130000
#define __IPHONE_13_1 130100
#define __IPHONE_13_2 130200
#define __IPHONE_13_3 130300
#define __IPHONE_13_4 130400
#define __IPHONE_13_5 130500
#define __IPHONE_13_6 130600
#define __IPHONE_13_7 130700
#define __IPHONE_14_0 140000
#define __IPHONE_14_1 140100
#define __IPHONE_14_2 140200
#define __IPHONE_14_3 140300
#define __IPHONE_14_5 140500


#define __TVOS_9_0 90000
#define __TVOS_9_1 90100
#define __TVOS_9_2 90200
#define __TVOS_10_0 100000
#define __TVOS_10_0_1 100001
#define __TVOS_10_1 100100
#define __TVOS_10_2 100200
#define __TVOS_11_0 110000
#define __TVOS_11_1 110100
#define __TVOS_11_2 110200
#define __TVOS_11_3 110300
#define __TVOS_11_4 110400
#define __TVOS_12_0 120000
#define __TVOS_12_1 120100
#define __TVOS_12_2 120200
#define __TVOS_12_3 120300
#define __TVOS_12_4 120400
#define __TVOS_13_0 130000
#define __TVOS_13_2 130200
#define __TVOS_13_3 130300
#define __TVOS_13_4 130400
#define __TVOS_14_0 140000
#define __TVOS_14_1 140100
#define __TVOS_14_2 140200
#define __TVOS_14_3 140300
#define __TVOS_14_5 140500

#define __WATCHOS_1_0 10000
#define __WATCHOS_2_0 20000
#define __WATCHOS_2_1 20100
#define __WATCHOS_2_2 20200
#define __WATCHOS_3_0 30000
#define __WATCHOS_3_1 30100
#define __WATCHOS_3_1_1 30101
#define __WATCHOS_3_2 30200
#define __WATCHOS_4_0 40000
#define __WATCHOS_4_1 40100
#define __WATCHOS_4_2 40200
#define __WATCHOS_4_3 40300
#define __WATCHOS_5_0 50000
#define __WATCHOS_5_1 50100
#define __WATCHOS_5_2 50200
#define __WATCHOS_5_3 50300
#define __WATCHOS_6_0 60000
#define __WATCHOS_6_1 60100
#define __WATCHOS_6_2 60200
#define __WATCHOS_7_0 70000
#define __WATCHOS_7_1 70100
#define __WATCHOS_7_2 70200
#define __WATCHOS_7_3 70300
#define __WATCHOS_7_4 70400







#define MAC_OS_X_VERSION_10_0 1000
#define MAC_OS_X_VERSION_10_1 1010
#define MAC_OS_X_VERSION_10_2 1020
#define MAC_OS_X_VERSION_10_3 1030
#define MAC_OS_X_VERSION_10_4 1040
#define MAC_OS_X_VERSION_10_5 1050
#define MAC_OS_X_VERSION_10_6 1060
#define MAC_OS_X_VERSION_10_7 1070
#define MAC_OS_X_VERSION_10_8 1080
#define MAC_OS_X_VERSION_10_9 1090
#define MAC_OS_X_VERSION_10_10 101000
#define MAC_OS_X_VERSION_10_10_2 101002
#define MAC_OS_X_VERSION_10_10_3 101003
#define MAC_OS_X_VERSION_10_11 101100
#define MAC_OS_X_VERSION_10_11_2 101102
#define MAC_OS_X_VERSION_10_11_3 101103
#define MAC_OS_X_VERSION_10_11_4 101104
#define MAC_OS_X_VERSION_10_12 101200
#define MAC_OS_X_VERSION_10_12_1 101201
#define MAC_OS_X_VERSION_10_12_2 101202
#define MAC_OS_X_VERSION_10_12_4 101204
#define MAC_OS_X_VERSION_10_13 101300
#define MAC_OS_X_VERSION_10_13_1 101301
#define MAC_OS_X_VERSION_10_13_2 101302
#define MAC_OS_X_VERSION_10_13_4 101304
#define MAC_OS_X_VERSION_10_14 101400
#define MAC_OS_X_VERSION_10_14_1 101401
#define MAC_OS_X_VERSION_10_14_4 101404
#define MAC_OS_X_VERSION_10_14_6 101406
#define MAC_OS_X_VERSION_10_15 101500
#define MAC_OS_X_VERSION_10_15_1 101501
#define MAC_OS_X_VERSION_10_16 101600
#define MAC_OS_VERSION_11_0 110000



#define __DRIVERKIT_19_0 190000
#define __DRIVERKIT_20_0 200000
# 136 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 2 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 1 3 4
# 40 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL__ 
# 49 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
# 102 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __MAC_OS_X_VERSION_MAX_ALLOWED __MAC_11_3
# 118 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __AVAILABILITY_INTERNAL_DEPRECATED __attribute__((deprecated))




#define __AVAILABILITY_INTERNAL_DEPRECATED_MSG(_msg) __attribute__((deprecated))






#define __AVAILABILITY_INTERNAL_UNAVAILABLE __attribute__((unavailable))
#define __AVAILABILITY_INTERNAL_WEAK_IMPORT __attribute__((weak_import))
#define __AVAILABILITY_INTERNAL_REGULAR 
# 157 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __ENABLE_LEGACY_MAC_AVAILABILITY 1
# 4703 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __API_AVAILABLE_GET_MACRO(...) 
#define __API_AVAILABLE_BEGIN_GET_MACRO(...) 
#define __API_DEPRECATED_MSG_GET_MACRO(...) 
#define __API_DEPRECATED_REP_GET_MACRO(...) 
#define __API_DEPRECATED_BEGIN_MSG_GET_MACRO(...) 
#define __API_DEPRECATED_BEGIN_REP_GET_MACRO 
#define __API_UNAVAILABLE_GET_MACRO(...) 
#define __API_UNAVAILABLE_BEGIN_GET_MACRO(...) 
# 4745 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/AvailabilityInternal.h" 3 4
#define __swift_compiler_version_at_least(...) 1







#define __SPI_AVAILABLE(...) 
# 137 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 2 3 4
# 178 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __OSX_AVAILABLE_STARTING(_osx,_ios) 
#define __OSX_AVAILABLE_BUT_DEPRECATED(_osxIntro,_osxDep,_iosIntro,_iosDep) 
#define __OSX_AVAILABLE_BUT_DEPRECATED_MSG(_osxIntro,_osxDep,_iosIntro,_iosDep,_msg) 
# 204 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __OS_AVAILABILITY(_target,_availability) 
#define __OS_AVAILABILITY_MSG(_target,_availability,_msg) 
# 219 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __OSX_EXTENSION_UNAVAILABLE(_msg) 
#define __IOS_EXTENSION_UNAVAILABLE(_msg) 






#define __OS_EXTENSION_UNAVAILABLE(_msg) __OSX_EXTENSION_UNAVAILABLE(_msg) __IOS_EXTENSION_UNAVAILABLE(_msg)
# 241 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __OSX_UNAVAILABLE 



#define __OSX_AVAILABLE(_vers) 



#define __OSX_DEPRECATED(_start,_dep,_msg) 
# 264 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __IOS_UNAVAILABLE 



#define __IOS_PROHIBITED 



#define __IOS_AVAILABLE(_vers) 



#define __IOS_DEPRECATED(_start,_dep,_msg) 
# 291 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __TVOS_UNAVAILABLE 



#define __TVOS_PROHIBITED 



#define __TVOS_AVAILABLE(_vers) 



#define __TVOS_DEPRECATED(_start,_dep,_msg) 
# 318 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __WATCHOS_UNAVAILABLE 



#define __WATCHOS_PROHIBITED 



#define __WATCHOS_AVAILABLE(_vers) 



#define __WATCHOS_DEPRECATED(_start,_dep,_msg) 
# 343 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __SWIFT_UNAVAILABLE 



#define __SWIFT_UNAVAILABLE_MSG(_msg) 
# 429 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __API_AVAILABLE(...) 
#define __API_AVAILABLE_BEGIN(...) 
#define __API_AVAILABLE_END 
#define __API_DEPRECATED(...) 
#define __API_DEPRECATED_WITH_REPLACEMENT(...) 
#define __API_DEPRECATED_BEGIN(...) 
#define __API_DEPRECATED_END 
#define __API_DEPRECATED_WITH_REPLACEMENT_BEGIN(...) 
#define __API_DEPRECATED_WITH_REPLACEMENT_END 
#define __API_UNAVAILABLE(...) 
#define __API_UNAVAILABLE_BEGIN(...) 
#define __API_UNAVAILABLE_END 
# 475 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/Availability.h" 3 4
#define __SPI_DEPRECATED(...) 



#define __SPI_DEPRECATED_WITH_REPLACEMENT(...) 
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_def.h" 2 3 4
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_def.h" 3 4
#define __DARWIN_FD_SETSIZE 1024

#define __DARWIN_NBBY 8
#define __DARWIN_NFDBITS (sizeof(__int32_t) * __DARWIN_NBBY)
#define __DARWIN_howmany(x,y) ((((x) % (y)) == 0) ? ((x) / (y)) : (((x) / (y)) + 1))


typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;

int __darwin_check_fd_set_overflow(int, const void *, int) ;


extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int
__darwin_check_fd_set(int _a, const void *_b)
{




 if ((uintptr_t)&__darwin_check_fd_set_overflow != (uintptr_t) 0) {



  return __darwin_check_fd_set_overflow(_a, _b, 0);

 } else {
  return 1;
 }



}


extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int
__darwin_fd_isset(int _fd, const struct fd_set *_p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  return _p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8))));
 }

 return 0;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void
__darwin_fd_set(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] |= ((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void
__darwin_fd_clr(int _fd, struct fd_set *const _p)
{
 if (__darwin_check_fd_set(_fd, (const void *) _p)) {
  (_p->fds_bits[(unsigned long)_fd / (sizeof(__int32_t) * 8)] &= ~((__int32_t)(((unsigned long)1) << ((unsigned long)_fd % (sizeof(__int32_t) * 8)))));
 }
}


#define __DARWIN_FD_SET(n,p) __darwin_fd_set((n), (p))
#define __DARWIN_FD_CLR(n,p) __darwin_fd_clr((n), (p))
#define __DARWIN_FD_ISSET(n,p) __darwin_fd_isset((n), (p))






#define __DARWIN_FD_ZERO(p) __builtin_bzero(p, sizeof(*(p)))




#define __DARWIN_FD_COPY(f,t) bcopy(f, t, sizeof(*(f)))
# 185 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4

#define NBBY __DARWIN_NBBY
#define NFDBITS __DARWIN_NFDBITS
#define howmany(x,y) __DARWIN_howmany(x, y)
typedef __int32_t fd_mask;







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_setsize.h" 3 4
#define FD_SETSIZE __DARWIN_FD_SETSIZE
# 198 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_set.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_set.h" 3 4
#define FD_SET(n,p) __DARWIN_FD_SET(n, p)
# 199 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_clr.h" 3 4
#define FD_CLR(n,p) __DARWIN_FD_CLR(n, p)
# 200 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_zero.h" 3 4
#define FD_ZERO(p) __DARWIN_FD_ZERO(p)
# 201 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_isset.h" 3 4
#define FD_ISSET(n,p) __DARWIN_FD_ISSET(n, p)
# 202 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fd_copy.h" 3 4
#define FD_COPY(f,t) __DARWIN_FD_COPY(f, t)
# 205 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 215 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
#define _PTHREAD_ATTR_T 

typedef __darwin_pthread_attr_t pthread_attr_t;
# 216 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
#define _PTHREAD_COND_T 

typedef __darwin_pthread_cond_t pthread_cond_t;
# 217 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
#define _PTHREAD_CONDATTR_T 

typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 218 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
#define _PTHREAD_MUTEX_T 

typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 219 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
#define _PTHREAD_MUTEXATTR_T 

typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 220 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
#define _PTHREAD_ONCE_T 

typedef __darwin_pthread_once_t pthread_once_t;
# 221 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
#define _PTHREAD_RWLOCK_T 

typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 222 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
#define _PTHREAD_RWLOCKATTR_T 

typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 223 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_t.h" 3 4
#define _PTHREAD_T 

typedef __darwin_pthread_t pthread_t;
# 224 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
#define _PTHREAD_KEY_T 

typedef __darwin_pthread_key_t pthread_key_t;
# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
#define _FSBLKCNT_T 

typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 233 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
#define _FSFILCNT_T 

typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 234 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/types.h" 2 3 4
# 16 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 3 4
#define _SYS_TIME_H_ 
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_timespec.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_timespec.h" 3 4
#define _STRUCT_TIMESPEC struct timespec



struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_timeval.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_timeval.h" 3 4
#define _STRUCT_TIMEVAL struct timeval




struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_timeval64.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_timeval64.h" 3 4
#define _STRUCT_TIMEVAL64 



struct timeval64 {
 __int64_t tv_sec;
 __int64_t tv_usec;
};
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 2 3 4
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 3 4
struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};





#define ITIMER_REAL 0
#define ITIMER_VIRTUAL 1
#define ITIMER_PROF 2
# 120 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 3 4
#define TIMEVAL_TO_TIMESPEC(tv,ts) { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; }



#define TIMESPEC_TO_TIMEVAL(tv,ts) { (tv)->tv_sec = (ts)->tv_sec; (tv)->tv_usec = (ts)->tv_nsec / 1000; }




struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
#define DST_NONE 0
#define DST_USA 1
#define DST_AUST 2
#define DST_WET 3
#define DST_MET 4
#define DST_EET 5
#define DST_CAN 6


#define timerclear(tvp) (tvp)->tv_sec = (tvp)->tv_usec = 0
#define timerisset(tvp) ((tvp)->tv_sec || (tvp)->tv_usec)
#define timercmp(tvp,uvp,cmp) (((tvp)->tv_sec == (uvp)->tv_sec) ? ((tvp)->tv_usec cmp (uvp)->tv_usec) : ((tvp)->tv_sec cmp (uvp)->tv_sec))



#define timeradd(tvp,uvp,vvp) do { (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec; if ((vvp)->tv_usec >= 1000000) { (vvp)->tv_sec++; (vvp)->tv_usec -= 1000000; } } while (0)
# 157 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 3 4
#define timersub(tvp,uvp,vvp) do { (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec; if ((vvp)->tv_usec < 0) { (vvp)->tv_sec--; (vvp)->tv_usec += 1000000; } } while (0)
# 167 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 3 4
#define timevalcmp(l,r,cmp) timercmp(l, r, cmp)




struct clockinfo {
 int hz;
 int tick;
 int tickadj;
 int stathz;
 int profhz;
};





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/time.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/time.h" 3 4
#define _TIME_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types.h" 3 4
#define __TYPES_H_ 





#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg) __attribute__((__format__ (__strftime__, fmtarg, 0)))






typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;





#define __DARWIN_WCHAR_MAX __WCHAR_MAX__





#define __DARWIN_WCHAR_MIN (-0x7fffffff - 1)



#define __DARWIN_WEOF ((__darwin_wint_t)-1)





#define _FORTIFY_SOURCE 2
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/time.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_null.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_null.h" 3 4
#define NULL __DARWIN_NULL
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/time.h" 2 3 4




struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};


#define CLOCKS_PER_SEC 1000000







extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * restrict, char * restrict);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
struct tm *localtime_r(const time_t * restrict, struct tm * restrict);


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );







#define __CLOCK_AVAILABILITY 


typedef enum {
_CLOCK_REALTIME = 0,
#define CLOCK_REALTIME _CLOCK_REALTIME
_CLOCK_MONOTONIC = 6,
#define CLOCK_MONOTONIC _CLOCK_MONOTONIC

_CLOCK_MONOTONIC_RAW = 4,
#define CLOCK_MONOTONIC_RAW _CLOCK_MONOTONIC_RAW
_CLOCK_MONOTONIC_RAW_APPROX = 5,
#define CLOCK_MONOTONIC_RAW_APPROX _CLOCK_MONOTONIC_RAW_APPROX
_CLOCK_UPTIME_RAW = 8,
#define CLOCK_UPTIME_RAW _CLOCK_UPTIME_RAW
_CLOCK_UPTIME_RAW_APPROX = 9,
#define CLOCK_UPTIME_RAW_APPROX _CLOCK_UPTIME_RAW_APPROX

_CLOCK_PROCESS_CPUTIME_ID = 12,
#define CLOCK_PROCESS_CPUTIME_ID _CLOCK_PROCESS_CPUTIME_ID
_CLOCK_THREAD_CPUTIME_ID = 16
#define CLOCK_THREAD_CPUTIME_ID _CLOCK_THREAD_CPUTIME_ID
} clockid_t;


int clock_getres(clockid_t __clock_id, struct timespec *__res);


int clock_gettime(clockid_t __clock_id, struct timespec *__tp);



__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);




int clock_settime(clockid_t __clock_id, const struct timespec *__tp);

#undef __CLOCK_AVAILABILITY







#define TIME_UTC 1

int timespec_get(struct timespec *ts, int base);



# 185 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 2 3 4





int adjtime(const struct timeval *, struct timeval *);
int futimes(int, const struct timeval *);
int lutimes(const char *, const struct timeval *) ;
int settimeofday(const struct timeval *, const struct timezone *);


int getitimer(int, struct itimerval *);
int gettimeofday(struct timeval * restrict, void * restrict);

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_select.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_select.h" 3 4
#define _SYS__SELECT_H_ 





int select(int, fd_set * restrict, fd_set * restrict,
    fd_set * restrict, struct timeval * restrict)





__asm("_" "select" "$1050")




;
# 200 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/time.h" 2 3 4

int setitimer(int, const struct itimerval * restrict,
    struct itimerval * restrict);
int utimes(const char *, const struct timeval *);


# 17 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 1 3 4
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4
#define _UNISTD_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 3 4
#define _SYS_UNISTD_H_ 
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 3 4
#define _POSIX_VERSION 200112L
#define _POSIX2_VERSION 200112L



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_posix_vdisable.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_posix_vdisable.h" 3 4
#define _POSIX_VDISABLE ((unsigned char)'\377')
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 2 3 4

#define _POSIX_THREAD_KEYS_MAX 128


#define F_OK 0
#define X_OK (1<<0)
#define W_OK (1<<1)
#define R_OK (1<<2)







#define _READ_OK (1<<9)
#define _WRITE_OK (1<<10)
#define _EXECUTE_OK (1<<11)
#define _DELETE_OK (1<<12)
#define _APPEND_OK (1<<13)
#define _RMFILE_OK (1<<14)
#define _RATTR_OK (1<<15)
#define _WATTR_OK (1<<16)
#define _REXT_OK (1<<17)
#define _WEXT_OK (1<<18)
#define _RPERM_OK (1<<19)
#define _WPERM_OK (1<<20)
#define _CHOWN_OK (1<<21)

#define _ACCESS_EXTENDED_MASK (_READ_OK | _WRITE_OK | _EXECUTE_OK | _DELETE_OK | _APPEND_OK | _RMFILE_OK | _REXT_OK | _WEXT_OK | _RATTR_OK | _WATTR_OK | _RPERM_OK | _WPERM_OK | _CHOWN_OK)







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_seek_set.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_seek_set.h" 3 4
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2




#define SEEK_HOLE 3



#define SEEK_DATA 4
# 123 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 2 3 4



#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END



struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
#define ACCESSX_MAX_DESCRIPTORS 100
#define ACCESSX_MAX_TABLESIZE (16 * 1024)



#define _PC_LINK_MAX 1
#define _PC_MAX_CANON 2
#define _PC_MAX_INPUT 3
#define _PC_NAME_MAX 4
#define _PC_PATH_MAX 5
#define _PC_PIPE_BUF 6
#define _PC_CHOWN_RESTRICTED 7
#define _PC_NO_TRUNC 8
#define _PC_VDISABLE 9


#define _PC_NAME_CHARS_MAX 10
#define _PC_CASE_SENSITIVE 11
#define _PC_CASE_PRESERVING 12
#define _PC_EXTENDED_SECURITY_NP 13
#define _PC_AUTH_OPAQUE_NP 14


#define _PC_2_SYMLINKS 15
#define _PC_ALLOC_SIZE_MIN 16
#define _PC_ASYNC_IO 17
#define _PC_FILESIZEBITS 18
#define _PC_PRIO_IO 19
#define _PC_REC_INCR_XFER_SIZE 20
#define _PC_REC_MAX_XFER_SIZE 21
#define _PC_REC_MIN_XFER_SIZE 22
#define _PC_REC_XFER_ALIGN 23
#define _PC_SYMLINK_MAX 24
#define _PC_SYNC_IO 25
#define _PC_XATTR_SIZE_BITS 26
#define _PC_MIN_HOLE_SIZE 27


#define _CS_PATH 1





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint64_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint64_t.h" 3 4
#define _UINT64_T 
typedef unsigned long long uint64_t;
# 182 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint32_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint32_t.h" 3 4
#define _UINT32_T 
typedef unsigned int uint32_t;
# 183 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 2 3 4




int getattrlistbulk(int, void *, void *, size_t, uint64_t) ;
int getattrlistat(int, const char *, void *, void *, size_t, unsigned long) ;
int setattrlistat(int, const char *, void *, void *, size_t, uint32_t) ;


# 205 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/unistd.h" 3 4


int faccessat(int, const char *, int, int) ;
int fchownat(int, const char *, uid_t, gid_t, int) ;
int linkat(int, const char *, int, const char *, int) ;
ssize_t readlinkat(int, const char *, char *, size_t) ;
int symlinkat(const char *, int, const char *) ;
int unlinkat(int, const char *, int) ;


# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 2 3 4
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4
#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2




#define _XOPEN_VERSION 600
#define _XOPEN_XCU_VERSION 4



#define _POSIX_ADVISORY_INFO (-1)
#define _POSIX_ASYNCHRONOUS_IO (-1)
#define _POSIX_BARRIERS (-1)
#define _POSIX_CHOWN_RESTRICTED 200112L
#define _POSIX_CLOCK_SELECTION (-1)
#define _POSIX_CPUTIME (-1)
#define _POSIX_FSYNC 200112L
#define _POSIX_IPV6 200112L
#define _POSIX_JOB_CONTROL 200112L
#define _POSIX_MAPPED_FILES 200112L
#define _POSIX_MEMLOCK (-1)
#define _POSIX_MEMLOCK_RANGE (-1)
#define _POSIX_MEMORY_PROTECTION 200112L
#define _POSIX_MESSAGE_PASSING (-1)
#define _POSIX_MONOTONIC_CLOCK (-1)
#define _POSIX_NO_TRUNC 200112L
#define _POSIX_PRIORITIZED_IO (-1)
#define _POSIX_PRIORITY_SCHEDULING (-1)
#define _POSIX_RAW_SOCKETS (-1)
#define _POSIX_READER_WRITER_LOCKS 200112L
#define _POSIX_REALTIME_SIGNALS (-1)
#define _POSIX_REGEXP 200112L
#define _POSIX_SAVED_IDS 200112L
#define _POSIX_SEMAPHORES (-1)
#define _POSIX_SHARED_MEMORY_OBJECTS (-1)
#define _POSIX_SHELL 200112L
#define _POSIX_SPAWN (-1)
#define _POSIX_SPIN_LOCKS (-1)
#define _POSIX_SPORADIC_SERVER (-1)
#define _POSIX_SYNCHRONIZED_IO (-1)
#define _POSIX_THREAD_ATTR_STACKADDR 200112L
#define _POSIX_THREAD_ATTR_STACKSIZE 200112L
#define _POSIX_THREAD_CPUTIME (-1)
#define _POSIX_THREAD_PRIO_INHERIT (-1)
#define _POSIX_THREAD_PRIO_PROTECT (-1)
#define _POSIX_THREAD_PRIORITY_SCHEDULING (-1)
#define _POSIX_THREAD_PROCESS_SHARED 200112L
#define _POSIX_THREAD_SAFE_FUNCTIONS 200112L
#define _POSIX_THREAD_SPORADIC_SERVER (-1)
#define _POSIX_THREADS 200112L
#define _POSIX_TIMEOUTS (-1)
#define _POSIX_TIMERS (-1)
#define _POSIX_TRACE (-1)
#define _POSIX_TRACE_EVENT_FILTER (-1)
#define _POSIX_TRACE_INHERIT (-1)
#define _POSIX_TRACE_LOG (-1)
#define _POSIX_TYPED_MEMORY_OBJECTS (-1)





#define _POSIX2_C_BIND 200112L
#define _POSIX2_C_DEV 200112L
#define _POSIX2_CHAR_TERM 200112L
#define _POSIX2_FORT_DEV (-1)
#define _POSIX2_FORT_RUN 200112L
#define _POSIX2_LOCALEDEF 200112L
#define _POSIX2_PBS (-1)
#define _POSIX2_PBS_ACCOUNTING (-1)
#define _POSIX2_PBS_CHECKPOINT (-1)
#define _POSIX2_PBS_LOCATE (-1)
#define _POSIX2_PBS_MESSAGE (-1)
#define _POSIX2_PBS_TRACK (-1)
#define _POSIX2_SW_DEV 200112L
#define _POSIX2_UPE 200112L


#define __ILP32_OFF32 (-1)
#define __ILP32_OFFBIG (-1)

#define __LP64_OFF64 (1)
#define __LPBIG_OFFBIG (1)


#define _POSIX_V6_ILP32_OFF32 __ILP32_OFF32
#define _POSIX_V6_ILP32_OFFBIG __ILP32_OFFBIG
#define _POSIX_V6_LP64_OFF64 __LP64_OFF64
#define _POSIX_V6_LPBIG_OFFBIG __LPBIG_OFFBIG



#define _POSIX_V7_ILP32_OFF32 __ILP32_OFF32
#define _POSIX_V7_ILP32_OFFBIG __ILP32_OFFBIG
#define _POSIX_V7_LP64_OFF64 __LP64_OFF64
#define _POSIX_V7_LPBIG_OFFBIG __LPBIG_OFFBIG



#define _V6_ILP32_OFF32 __ILP32_OFF32
#define _V6_ILP32_OFFBIG __ILP32_OFFBIG
#define _V6_LP64_OFF64 __LP64_OFF64
#define _V6_LPBIG_OFFBIG __LPBIG_OFFBIG




#define _XBS5_ILP32_OFF32 __ILP32_OFF32
#define _XBS5_ILP32_OFFBIG __ILP32_OFFBIG
#define _XBS5_LP64_OFF64 __LP64_OFF64
#define _XBS5_LPBIG_OFFBIG __LPBIG_OFFBIG



#define _XOPEN_CRYPT (1)
#define _XOPEN_ENH_I18N (1)
#define _XOPEN_LEGACY (-1)
#define _XOPEN_REALTIME (-1)
#define _XOPEN_REALTIME_THREADS (-1)
#define _XOPEN_SHM (1)
#define _XOPEN_STREAMS (-1)
#define _XOPEN_UNIX (1)



#define _SC_ARG_MAX 1
#define _SC_CHILD_MAX 2
#define _SC_CLK_TCK 3
#define _SC_NGROUPS_MAX 4
#define _SC_OPEN_MAX 5
#define _SC_JOB_CONTROL 6
#define _SC_SAVED_IDS 7
#define _SC_VERSION 8
#define _SC_BC_BASE_MAX 9
#define _SC_BC_DIM_MAX 10
#define _SC_BC_SCALE_MAX 11
#define _SC_BC_STRING_MAX 12
#define _SC_COLL_WEIGHTS_MAX 13
#define _SC_EXPR_NEST_MAX 14
#define _SC_LINE_MAX 15
#define _SC_RE_DUP_MAX 16
#define _SC_2_VERSION 17
#define _SC_2_C_BIND 18
#define _SC_2_C_DEV 19
#define _SC_2_CHAR_TERM 20
#define _SC_2_FORT_DEV 21
#define _SC_2_FORT_RUN 22
#define _SC_2_LOCALEDEF 23
#define _SC_2_SW_DEV 24
#define _SC_2_UPE 25
#define _SC_STREAM_MAX 26
#define _SC_TZNAME_MAX 27


#define _SC_ASYNCHRONOUS_IO 28
#define _SC_PAGESIZE 29
#define _SC_MEMLOCK 30
#define _SC_MEMLOCK_RANGE 31
#define _SC_MEMORY_PROTECTION 32
#define _SC_MESSAGE_PASSING 33
#define _SC_PRIORITIZED_IO 34
#define _SC_PRIORITY_SCHEDULING 35
#define _SC_REALTIME_SIGNALS 36
#define _SC_SEMAPHORES 37
#define _SC_FSYNC 38
#define _SC_SHARED_MEMORY_OBJECTS 39
#define _SC_SYNCHRONIZED_IO 40
#define _SC_TIMERS 41
#define _SC_AIO_LISTIO_MAX 42
#define _SC_AIO_MAX 43
#define _SC_AIO_PRIO_DELTA_MAX 44
#define _SC_DELAYTIMER_MAX 45
#define _SC_MQ_OPEN_MAX 46
#define _SC_MAPPED_FILES 47
#define _SC_RTSIG_MAX 48
#define _SC_SEM_NSEMS_MAX 49
#define _SC_SEM_VALUE_MAX 50
#define _SC_SIGQUEUE_MAX 51
#define _SC_TIMER_MAX 52



#define _SC_NPROCESSORS_CONF 57
#define _SC_NPROCESSORS_ONLN 58



#define _SC_2_PBS 59
#define _SC_2_PBS_ACCOUNTING 60
#define _SC_2_PBS_CHECKPOINT 61
#define _SC_2_PBS_LOCATE 62
#define _SC_2_PBS_MESSAGE 63
#define _SC_2_PBS_TRACK 64
#define _SC_ADVISORY_INFO 65
#define _SC_BARRIERS 66
#define _SC_CLOCK_SELECTION 67
#define _SC_CPUTIME 68
#define _SC_FILE_LOCKING 69
#define _SC_GETGR_R_SIZE_MAX 70
#define _SC_GETPW_R_SIZE_MAX 71
#define _SC_HOST_NAME_MAX 72
#define _SC_LOGIN_NAME_MAX 73
#define _SC_MONOTONIC_CLOCK 74
#define _SC_MQ_PRIO_MAX 75
#define _SC_READER_WRITER_LOCKS 76
#define _SC_REGEXP 77
#define _SC_SHELL 78
#define _SC_SPAWN 79
#define _SC_SPIN_LOCKS 80
#define _SC_SPORADIC_SERVER 81
#define _SC_THREAD_ATTR_STACKADDR 82
#define _SC_THREAD_ATTR_STACKSIZE 83
#define _SC_THREAD_CPUTIME 84
#define _SC_THREAD_DESTRUCTOR_ITERATIONS 85
#define _SC_THREAD_KEYS_MAX 86
#define _SC_THREAD_PRIO_INHERIT 87
#define _SC_THREAD_PRIO_PROTECT 88
#define _SC_THREAD_PRIORITY_SCHEDULING 89
#define _SC_THREAD_PROCESS_SHARED 90
#define _SC_THREAD_SAFE_FUNCTIONS 91
#define _SC_THREAD_SPORADIC_SERVER 92
#define _SC_THREAD_STACK_MIN 93
#define _SC_THREAD_THREADS_MAX 94
#define _SC_TIMEOUTS 95
#define _SC_THREADS 96
#define _SC_TRACE 97
#define _SC_TRACE_EVENT_FILTER 98
#define _SC_TRACE_INHERIT 99
#define _SC_TRACE_LOG 100
#define _SC_TTY_NAME_MAX 101
#define _SC_TYPED_MEMORY_OBJECTS 102
#define _SC_V6_ILP32_OFF32 103
#define _SC_V6_ILP32_OFFBIG 104
#define _SC_V6_LP64_OFF64 105
#define _SC_V6_LPBIG_OFFBIG 106
#define _SC_IPV6 118
#define _SC_RAW_SOCKETS 119
#define _SC_SYMLOOP_MAX 120



#define _SC_ATEXIT_MAX 107
#define _SC_IOV_MAX 56
#define _SC_PAGE_SIZE _SC_PAGESIZE
#define _SC_XOPEN_CRYPT 108
#define _SC_XOPEN_ENH_I18N 109
#define _SC_XOPEN_LEGACY 110
#define _SC_XOPEN_REALTIME 111
#define _SC_XOPEN_REALTIME_THREADS 112
#define _SC_XOPEN_SHM 113
#define _SC_XOPEN_STREAMS 114
#define _SC_XOPEN_UNIX 115
#define _SC_XOPEN_VERSION 116
#define _SC_XOPEN_XCU_VERSION 121




#define _SC_XBS5_ILP32_OFF32 122
#define _SC_XBS5_ILP32_OFFBIG 123
#define _SC_XBS5_LP64_OFF64 124
#define _SC_XBS5_LPBIG_OFFBIG 125



#define _SC_SS_REPL_MAX 126
#define _SC_TRACE_EVENT_NAME_MAX 127
#define _SC_TRACE_NAME_MAX 128
#define _SC_TRACE_SYS_MAX 129
#define _SC_TRACE_USER_EVENT_MAX 130




#define _SC_PASS_MAX 131




#define _SC_PHYS_PAGES 200
# 377 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4
#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3
#define _CS_POSIX_V6_ILP32_OFF32_LIBS 4
#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5
#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6
#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7
#define _CS_POSIX_V6_LP64_OFF64_CFLAGS 8
#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9
#define _CS_POSIX_V6_LP64_OFF64_LIBS 10
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13
#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14




#define _CS_XBS5_ILP32_OFF32_CFLAGS 20
#define _CS_XBS5_ILP32_OFF32_LDFLAGS 21
#define _CS_XBS5_ILP32_OFF32_LIBS 22
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS 23
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS 24
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25
#define _CS_XBS5_ILP32_OFFBIG_LIBS 26
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27
#define _CS_XBS5_LP64_OFF64_CFLAGS 28
#define _CS_XBS5_LP64_OFF64_LDFLAGS 29
#define _CS_XBS5_LP64_OFF64_LIBS 30
#define _CS_XBS5_LP64_OFF64_LINTFLAGS 31
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33
#define _CS_XBS5_LPBIG_OFFBIG_LIBS 34
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35



#define _CS_DARWIN_USER_DIR 65536
#define _CS_DARWIN_USER_TEMP_DIR 65537
#define _CS_DARWIN_USER_CACHE_DIR 65538
# 429 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4

void _exit(int) __attribute__((__noreturn__));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char * __path, const char * __arg0, ...) ;
int execle(const char * __path, const char * __arg0, ...) ;
int execlp(const char * __file, const char * __arg0, ...) ;
int execv(const char * __path, char * const * __argv) ;
int execve(const char * __file, char * const * __argv, char * const * __envp) ;
int execvp(const char * __file, char * const * __argv) ;
pid_t fork(void) ;
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int __fd, const void * __buf, size_t __nbyte) __asm("_" "write" );

# 506 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4

size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;

# 525 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctermid.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctermid.h" 3 4
#define _CTERMID_H_ 





char *ctermid(char *);


# 526 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 2 3 4

#define F_ULOCK 0
#define F_LOCK 1
#define F_TLOCK 2
#define F_TEST 3







__attribute__((__deprecated__))

void *brk(const void *);
int chroot(const char *) ;


char *crypt(const char *, const char *);

void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);



int getdtablesize(void) ;
int getpagesize(void) __attribute__((__const__)) ;
char *getpass(const char *) ;




char *getwd(char *) ;


int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int __fd, void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pread" );

ssize_t pwrite(int __fd, const void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pwrite" );






__attribute__((__deprecated__))

void *sbrk(int);



pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * restrict, void * restrict, ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );
pid_t vfork(void) ;


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);

# 620 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4

int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * restrict, char * restrict, size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);








# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/select.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/select.h" 3 4
#define _SYS_SELECT_H_ 
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/select.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_sigset_t.h" 3 4
#define _SIGSET_T 

typedef __darwin_sigset_t sigset_t;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/select.h" 2 3 4
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/select.h" 3 4



int pselect(int, fd_set * restrict, fd_set * restrict,
    fd_set * restrict, const struct timespec * restrict,
    const sigset_t * restrict)




__asm("_" "pselect" "$1050")




;





# 636 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_uuid_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_uuid_t.h" 3 4
#define _UUID_T 

typedef __darwin_uuid_t uuid_t;
# 640 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 2 3 4


void _Exit(int) __attribute__((__noreturn__));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int) ;
void endusershell(void);
int execvP(const char * __file, const char * __searchpath, char * const * __argv) ;
char *fflagstostr(unsigned long);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/gethostuuid.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/gethostuuid.h" 3 4
#define __GETHOSTUUID_H 
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/gethostuuid.h" 3 4
int gethostuuid(uuid_t, const struct timespec *) ;
# 656 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 2 3 4




mode_t getmode(const void *, mode_t);
int getpeereid(int, uid_t *, gid_t *);
int getsgroups_np(int *, uuid_t);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkpath_np(const char *path, mode_t omode) ;
int mkpathat_np(int dfd, const char *path, mode_t omode)
 
  ;
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int mkostemp(char *path, int oflags)
 
  ;
int mkostemps(char *path, int slen, int oflags)
 
  ;

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
 
  ;
char *mkdtempat_np(int dfd, char *path)
 
  ;
int mkstempsat_np(int dfd, char *path, int slen)
 
  ;
int mkostempsat_np(int dfd, char *path, int slen, int oflags)
 
  ;
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);

__attribute__((__deprecated__("Use of per-thread security contexts is error-prone and discouraged.")))
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);

int reboot(int);
int revoke(const char *);

__attribute__((__deprecated__)) int rcmd(char **, int, const char *, const char *, const char *, int *);
__attribute__((__deprecated__)) int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
__attribute__((__deprecated__)) int rresvport(int *);
__attribute__((__deprecated__)) int rresvport_af(int *, int);
__attribute__((__deprecated__)) int iruserok(unsigned long, int, const char *, const char *);
__attribute__((__deprecated__)) int iruserok_sa(const void *, int, int, const char *, const char *);
__attribute__((__deprecated__)) int ruserok(const char *, int, const char *, const char *);

int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" );



int setlogin(const char *);
void *setmode(const char *) __asm("_" "setmode" );
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);






int syscall(int, ...);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);



int fgetattrlist(int,void*,void*,size_t,unsigned int) ;
int fsetattrlist(int,void*,void*,size_t,unsigned int) ;
int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
int exchangedata(const char*,const char*,unsigned int) ;
int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int) ;
# 769 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/unistd.h" 3 4
struct fssearchblock;
struct searchstate;

int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) ;
int fsctl(const char *,unsigned long,void*,unsigned int);
int ffsctl(int,unsigned long,void*,unsigned int) ;

#define SYNC_VOLUME_FULLSYNC 0x01
#define SYNC_VOLUME_WAIT 0x02

int fsync_volume_np(int, int) ;
int sync_volume_np(const char *, int) ;

extern int optreset;


# 18 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/inttypes.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/inttypes.h" 3 4
#define _INTTYPES_H_ 

#define __PRI_8_LENGTH_MODIFIER__ "hh"
#define __PRI_64_LENGTH_MODIFIER__ "ll"
#define __SCN_64_LENGTH_MODIFIER__ "ll"
#define __PRI_MAX_LENGTH_MODIFIER__ "j"
#define __SCN_MAX_LENGTH_MODIFIER__ "j"

#define PRId8 __PRI_8_LENGTH_MODIFIER__ "d"
#define PRIi8 __PRI_8_LENGTH_MODIFIER__ "i"
#define PRIo8 __PRI_8_LENGTH_MODIFIER__ "o"
#define PRIu8 __PRI_8_LENGTH_MODIFIER__ "u"
#define PRIx8 __PRI_8_LENGTH_MODIFIER__ "x"
#define PRIX8 __PRI_8_LENGTH_MODIFIER__ "X"

#define PRId16 "hd"
#define PRIi16 "hi"
#define PRIo16 "ho"
#define PRIu16 "hu"
#define PRIx16 "hx"
#define PRIX16 "hX"

#define PRId32 "d"
#define PRIi32 "i"
#define PRIo32 "o"
#define PRIu32 "u"
#define PRIx32 "x"
#define PRIX32 "X"

#define PRId64 __PRI_64_LENGTH_MODIFIER__ "d"
#define PRIi64 __PRI_64_LENGTH_MODIFIER__ "i"
#define PRIo64 __PRI_64_LENGTH_MODIFIER__ "o"
#define PRIu64 __PRI_64_LENGTH_MODIFIER__ "u"
#define PRIx64 __PRI_64_LENGTH_MODIFIER__ "x"
#define PRIX64 __PRI_64_LENGTH_MODIFIER__ "X"

#define PRIdLEAST8 PRId8
#define PRIiLEAST8 PRIi8
#define PRIoLEAST8 PRIo8
#define PRIuLEAST8 PRIu8
#define PRIxLEAST8 PRIx8
#define PRIXLEAST8 PRIX8

#define PRIdLEAST16 PRId16
#define PRIiLEAST16 PRIi16
#define PRIoLEAST16 PRIo16
#define PRIuLEAST16 PRIu16
#define PRIxLEAST16 PRIx16
#define PRIXLEAST16 PRIX16

#define PRIdLEAST32 PRId32
#define PRIiLEAST32 PRIi32
#define PRIoLEAST32 PRIo32
#define PRIuLEAST32 PRIu32
#define PRIxLEAST32 PRIx32
#define PRIXLEAST32 PRIX32

#define PRIdLEAST64 PRId64
#define PRIiLEAST64 PRIi64
#define PRIoLEAST64 PRIo64
#define PRIuLEAST64 PRIu64
#define PRIxLEAST64 PRIx64
#define PRIXLEAST64 PRIX64

#define PRIdFAST8 PRId8
#define PRIiFAST8 PRIi8
#define PRIoFAST8 PRIo8
#define PRIuFAST8 PRIu8
#define PRIxFAST8 PRIx8
#define PRIXFAST8 PRIX8

#define PRIdFAST16 PRId16
#define PRIiFAST16 PRIi16
#define PRIoFAST16 PRIo16
#define PRIuFAST16 PRIu16
#define PRIxFAST16 PRIx16
#define PRIXFAST16 PRIX16

#define PRIdFAST32 PRId32
#define PRIiFAST32 PRIi32
#define PRIoFAST32 PRIo32
#define PRIuFAST32 PRIu32
#define PRIxFAST32 PRIx32
#define PRIXFAST32 PRIX32

#define PRIdFAST64 PRId64
#define PRIiFAST64 PRIi64
#define PRIoFAST64 PRIo64
#define PRIuFAST64 PRIu64
#define PRIxFAST64 PRIx64
#define PRIXFAST64 PRIX64


#define PRIdPTR "ld"
#define PRIiPTR "li"
#define PRIoPTR "lo"
#define PRIuPTR "lu"
#define PRIxPTR "lx"
#define PRIXPTR "lX"

#define PRIdMAX __PRI_MAX_LENGTH_MODIFIER__ "d"
#define PRIiMAX __PRI_MAX_LENGTH_MODIFIER__ "i"
#define PRIoMAX __PRI_MAX_LENGTH_MODIFIER__ "o"
#define PRIuMAX __PRI_MAX_LENGTH_MODIFIER__ "u"
#define PRIxMAX __PRI_MAX_LENGTH_MODIFIER__ "x"
#define PRIXMAX __PRI_MAX_LENGTH_MODIFIER__ "X"

#define SCNd8 __PRI_8_LENGTH_MODIFIER__ "d"
#define SCNi8 __PRI_8_LENGTH_MODIFIER__ "i"
#define SCNo8 __PRI_8_LENGTH_MODIFIER__ "o"
#define SCNu8 __PRI_8_LENGTH_MODIFIER__ "u"
#define SCNx8 __PRI_8_LENGTH_MODIFIER__ "x"

#define SCNd16 "hd"
#define SCNi16 "hi"
#define SCNo16 "ho"
#define SCNu16 "hu"
#define SCNx16 "hx"

#define SCNd32 "d"
#define SCNi32 "i"
#define SCNo32 "o"
#define SCNu32 "u"
#define SCNx32 "x"

#define SCNd64 __SCN_64_LENGTH_MODIFIER__ "d"
#define SCNi64 __SCN_64_LENGTH_MODIFIER__ "i"
#define SCNo64 __SCN_64_LENGTH_MODIFIER__ "o"
#define SCNu64 __SCN_64_LENGTH_MODIFIER__ "u"
#define SCNx64 __SCN_64_LENGTH_MODIFIER__ "x"

#define SCNdLEAST8 SCNd8
#define SCNiLEAST8 SCNi8
#define SCNoLEAST8 SCNo8
#define SCNuLEAST8 SCNu8
#define SCNxLEAST8 SCNx8

#define SCNdLEAST16 SCNd16
#define SCNiLEAST16 SCNi16
#define SCNoLEAST16 SCNo16
#define SCNuLEAST16 SCNu16
#define SCNxLEAST16 SCNx16

#define SCNdLEAST32 SCNd32
#define SCNiLEAST32 SCNi32
#define SCNoLEAST32 SCNo32
#define SCNuLEAST32 SCNu32
#define SCNxLEAST32 SCNx32

#define SCNdLEAST64 SCNd64
#define SCNiLEAST64 SCNi64
#define SCNoLEAST64 SCNo64
#define SCNuLEAST64 SCNu64
#define SCNxLEAST64 SCNx64

#define SCNdFAST8 SCNd8
#define SCNiFAST8 SCNi8
#define SCNoFAST8 SCNo8
#define SCNuFAST8 SCNu8
#define SCNxFAST8 SCNx8

#define SCNdFAST16 SCNd16
#define SCNiFAST16 SCNi16
#define SCNoFAST16 SCNo16
#define SCNuFAST16 SCNu16
#define SCNxFAST16 SCNx16

#define SCNdFAST32 SCNd32
#define SCNiFAST32 SCNi32
#define SCNoFAST32 SCNo32
#define SCNuFAST32 SCNu32
#define SCNxFAST32 SCNx32

#define SCNdFAST64 SCNd64
#define SCNiFAST64 SCNi64
#define SCNoFAST64 SCNo64
#define SCNuFAST64 SCNu64
#define SCNxFAST64 SCNx64

#define SCNdPTR "ld"
#define SCNiPTR "li"
#define SCNoPTR "lo"
#define SCNuPTR "lu"
#define SCNxPTR "lx"

#define SCNdMAX __SCN_MAX_LENGTH_MODIFIER__ "d"
#define SCNiMAX __SCN_MAX_LENGTH_MODIFIER__ "i"
#define SCNoMAX __SCN_MAX_LENGTH_MODIFIER__ "o"
#define SCNuMAX __SCN_MAX_LENGTH_MODIFIER__ "u"
#define SCNxMAX __SCN_MAX_LENGTH_MODIFIER__ "x"





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wchar_t.h" 3 4
#define _WCHAR_T 

typedef __darwin_wchar_t wchar_t;
# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/inttypes.h" 2 3 4

# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdint.h" 1 3 4
# 9 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdint.h" 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 1 3 4
# 16 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 3 4
#define _STDINT_H_ 


#define __WORDSIZE 64
# 32 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint8_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint8_t.h" 3 4
#define _UINT8_T 
typedef unsigned char uint8_t;
# 33 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint16_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uint16_t.h" 3 4
#define _UINT16_T 
typedef unsigned short uint16_t;
# 34 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 2 3 4




typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 67 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_intmax_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_intmax_t.h" 3 4
#define _INTMAX_T 

typedef long int intmax_t;
# 68 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uintmax_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_uintmax_t.h" 3 4
#define _UINTMAX_T 

typedef long unsigned int uintmax_t;
# 69 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 2 3 4


#define INT8_C(v) (v)
#define INT16_C(v) (v)
#define INT32_C(v) (v)
#define INT64_C(v) (v ## LL)

#define UINT8_C(v) (v)
#define UINT16_C(v) (v)
#define UINT32_C(v) (v ## U)
#define UINT64_C(v) (v ## ULL)


#define INTMAX_C(v) (v ## L)
#define UINTMAX_C(v) (v ## UL)
# 105 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 3 4
#define INT8_MAX 127
#define INT16_MAX 32767
#define INT32_MAX 2147483647
#define INT64_MAX 9223372036854775807LL

#define INT8_MIN -128
#define INT16_MIN -32768






#define INT32_MIN (-INT32_MAX-1)
#define INT64_MIN (-INT64_MAX-1)

#define UINT8_MAX 255
#define UINT16_MAX 65535
#define UINT32_MAX 4294967295U
#define UINT64_MAX 18446744073709551615ULL


#define INT_LEAST8_MIN INT8_MIN
#define INT_LEAST16_MIN INT16_MIN
#define INT_LEAST32_MIN INT32_MIN
#define INT_LEAST64_MIN INT64_MIN

#define INT_LEAST8_MAX INT8_MAX
#define INT_LEAST16_MAX INT16_MAX
#define INT_LEAST32_MAX INT32_MAX
#define INT_LEAST64_MAX INT64_MAX

#define UINT_LEAST8_MAX UINT8_MAX
#define UINT_LEAST16_MAX UINT16_MAX
#define UINT_LEAST32_MAX UINT32_MAX
#define UINT_LEAST64_MAX UINT64_MAX


#define INT_FAST8_MIN INT8_MIN
#define INT_FAST16_MIN INT16_MIN
#define INT_FAST32_MIN INT32_MIN
#define INT_FAST64_MIN INT64_MIN

#define INT_FAST8_MAX INT8_MAX
#define INT_FAST16_MAX INT16_MAX
#define INT_FAST32_MAX INT32_MAX
#define INT_FAST64_MAX INT64_MAX

#define UINT_FAST8_MAX UINT8_MAX
#define UINT_FAST16_MAX UINT16_MAX
#define UINT_FAST32_MAX UINT32_MAX
#define UINT_FAST64_MAX UINT64_MAX




#define INTPTR_MAX 9223372036854775807L



#define INTPTR_MIN (-INTPTR_MAX-1)


#define UINTPTR_MAX 18446744073709551615UL





#define INTMAX_MAX INTMAX_C(9223372036854775807)
#define UINTMAX_MAX UINTMAX_C(18446744073709551615)
#define INTMAX_MIN (-INTMAX_MAX-1)



#define PTRDIFF_MIN INTMAX_MIN
#define PTRDIFF_MAX INTMAX_MAX





#define SIZE_MAX UINTPTR_MAX


#define RSIZE_MAX (SIZE_MAX >> 1)




#define WCHAR_MAX __WCHAR_MAX__
# 209 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdint.h" 3 4
#define WCHAR_MIN (-WCHAR_MAX-1)



#define WINT_MIN INT32_MIN
#define WINT_MAX INT32_MAX

#define SIG_ATOMIC_MIN INT32_MIN
#define SIG_ATOMIC_MAX INT32_MAX
# 10 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 230 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/inttypes.h" 2 3 4





extern intmax_t
imaxabs(intmax_t j);


typedef struct {
 intmax_t quot;
 intmax_t rem;
} imaxdiv_t;


extern imaxdiv_t
imaxdiv(intmax_t __numer, intmax_t __denom);



extern intmax_t
strtoimax(const char * restrict __nptr,
   char ** restrict __endptr,
   int __base);


extern uintmax_t
strtoumax(const char * restrict __nptr,
   char ** restrict __endptr,
   int __base);



extern intmax_t
wcstoimax(const wchar_t * restrict __nptr,
   wchar_t ** restrict __endptr,
   int __base);


extern uintmax_t
wcstoumax(const wchar_t * restrict __nptr,
   wchar_t ** restrict __endptr,
   int __base);







# 19 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdarg.h" 1 3 4
# 31 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdarg.h" 3 4
#define _STDARG_H 
#define _ANSI_STDARG_H_ 

#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;






#define va_start(v,l) __builtin_va_start(v,l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)


#define va_copy(d,s) __builtin_va_copy(d,s)

#define __va_copy(d,s) __builtin_va_copy(d,s)
# 99 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;





#define _VA_LIST_ 


#define _VA_LIST 


#define _VA_LIST_DEFINED 


#define _VA_LIST_T_H 


#define __va_list__ 
# 20 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 1 3 4
# 39 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 131 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef long int ptrdiff_t;
# 155 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 231 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
#undef __need_size_t
# 340 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
#undef __need_wchar_t
# 390 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 3 4
} max_align_t;
# 21 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 1 3 4
# 11 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define FIXINC_WRAP_STDIO_H_STDIO_STDARG_H 1

#define __need___va_list 
# 76 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define _STDIO_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 3 4
#define __STDIO_H_ 
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_va_list.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_va_list.h" 3 4
#define _VA_LIST_T 

typedef __darwin_va_list va_list;
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stdio.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stdio.h" 3 4
#define _SYS_STDIO_H_ 








int renameat(int, const char *, int, const char *) ;



#define RENAME_SECLUDE 0x00000001
#define RENAME_SWAP 0x00000002
#define RENAME_EXCL 0x00000004
int renamex_np(const char *, const char *, unsigned int) ;
int renameatx_np(int, const char *, int, const char *, unsigned int) ;




# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;

#define _FSTDIO 
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 126 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (* _close)(void *);
 int (* _read) (void *, char *, int);
 fpos_t (* _seek) (void *, fpos_t, int);
 int (* _write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;
# 79 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 2 3 4


extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;


#define __SLBF 0x0001
#define __SNBF 0x0002
#define __SRD 0x0004
#define __SWR 0x0008

#define __SRW 0x0010
#define __SEOF 0x0020
#define __SERR 0x0040
#define __SMBF 0x0080
#define __SAPP 0x0100
#define __SSTR 0x0200
#define __SOPT 0x0400
#define __SNPT 0x0800
#define __SOFF 0x1000
#define __SMOD 0x2000
#define __SALC 0x4000
#define __SIGN 0x8000
# 113 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2

#define BUFSIZ 1024
#define EOF (-1)


#define FOPEN_MAX 20
#define FILENAME_MAX 1024



#define P_tmpdir "/var/tmp/"

#define L_tmpnam 1024
#define TMP_MAX 308915776
# 141 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define stdin __stdinp
#define stdout __stdoutp
#define stderr __stderrp
# 155 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4

void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * restrict, fpos_t *);
char *fgets(char * restrict, int, FILE *);



FILE *fopen(const char * restrict __filename, const char * restrict __mode) __asm("_" "fopen" );

int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs" );
size_t fread(void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream);
FILE *freopen(const char * restrict, const char * restrict,
                 FILE * restrict) __asm("_" "freopen" );
int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *) __attribute__((__cold__));
int printf(const char * restrict, ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *__old, const char *__new);
void rewind(FILE *);
int scanf(const char * restrict, ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * restrict, char * restrict);
int setvbuf(FILE * restrict, char * restrict, int, size_t);
int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) ;
int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);



__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * restrict, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * restrict, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0))) ;

# 216 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define L_ctermid 1024







FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);

# 237 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define __swift_unavailable_on(osx_msg,ios_msg) __swift_unavailable(osx_msg)




int pclose(FILE *) ;



FILE *popen(const char *, const char *) __asm("_" "popen" ) ;




#undef __swift_unavailable_on
# 262 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4

int __srget(FILE *);
int __svfscanf(FILE *, const char *, __gnuc_va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);






#define __sgetc(p) (--(p)->_r < 0 ? __srget(p) : (int)(*(p)->_p++))

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 294 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
#define __sfeof(p) (((p)->_flags & __SEOF) != 0)
#define __sferror(p) (((p)->_flags & __SERR) != 0)
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)


void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);




__attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *__dir, const char *__prefix) __asm("_" "tempnam" );



#define getc_unlocked(fp) __sgetc(fp)
#define putc_unlocked(x,fp) __sputc(x, fp)


#define getchar_unlocked() getc_unlocked(stdin)
#define putchar_unlocked(x) putc_unlocked(x, stdout)
# 340 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4

int fseeko(FILE * __stream, off_t __offset, int __whence);
off_t ftello(FILE * __stream);





int snprintf(char * restrict __str, size_t __size, const char * restrict __format, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * restrict __stream, const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * restrict __str, size_t __size, const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * restrict __str, const char * restrict __format, __gnuc_va_list) __attribute__((__format__ (__scanf__, 2, 0)));

# 365 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4

int dprintf(int, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) ;
int vdprintf(int, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0))) ;
ssize_t getdelim(char ** restrict __linep, size_t * restrict __linecapp, int __delimiter, FILE * restrict __stream) ;
ssize_t getline(char ** restrict __linep, size_t * restrict __linecapp, FILE * restrict __stream) ;
FILE *fmemopen(void * restrict __buf, size_t __size, const char * restrict __mode) ;
FILE *open_memstream(char **__bufp, size_t *__sizep) ;









extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** restrict, const char * restrict, __gnuc_va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (* )(void *, char *, int),
                 int (* )(void *, const char *, int),
                 fpos_t (* )(void *, fpos_t, int),
                 int (* )(void *));

#define fropen(cookie,fn) funopen(cookie, fn, 0, 0, 0)
#define fwopen(cookie,fn) funopen(cookie, 0, fn, 0, 0)

#define feof_unlocked(p) __sfeof(p)
#define ferror_unlocked(p) __sferror(p)
#define clearerr_unlocked(p) __sclearerr(p)
#define fileno_unlocked(p) __sfileno(p)
# 421 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_stdio.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_stdio.h" 3 4
#define _SECURE__STDIO_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_common.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_common.h" 3 4
#define _SECURE__COMMON_H_ 

#undef _USE_FORTIFY_LEVEL


#define _USE_FORTIFY_LEVEL 2







#define __darwin_obsz0(object) __builtin_object_size (object, 0)
#define __darwin_obsz(object) __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1 ? 1 : 0)
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_stdio.h" 2 3 4
# 42 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_stdio.h" 3 4
extern int __sprintf_chk (char * restrict, int, size_t,
     const char * restrict, ...);

#undef sprintf
#define sprintf(str,...) __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)





extern int __snprintf_chk (char * restrict, size_t, int, size_t,
      const char * restrict, ...);

#undef snprintf
#define snprintf(str,len,...) __builtin___snprintf_chk (str, len, 0, __darwin_obsz(str), __VA_ARGS__)




extern int __vsprintf_chk (char * restrict, int, size_t,
      const char * restrict, va_list);

#undef vsprintf
#define vsprintf(str,format,ap) __builtin___vsprintf_chk (str, 0, __darwin_obsz(str), format, ap)




extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,
       const char * restrict, va_list);

#undef vsnprintf
#define vsnprintf(str,len,format,ap) __builtin___vsnprintf_chk (str, len, 0, __darwin_obsz(str), format, ap)
# 422 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/stdio.h" 2 3 4
# 22 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 1 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 3 4
#define _STDLIB_H_ 






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
#define _SYS_WAIT_H_ 
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;
# 109 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 3 4
#define _SYS_SIGNAL_H_ 





#define __DARWIN_NSIG 32


#define NSIG __DARWIN_NSIG


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/signal.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/signal.h" 3 4
#define _BSD_MACHINE_SIGNAL_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/signal.h" 1 3 4
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/signal.h" 3 4
#define _I386_SIGNAL_H_ 1




typedef int sig_atomic_t;
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/signal.h" 2 3 4
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 2 3 4

#define SIGHUP 1
#define SIGINT 2
#define SIGQUIT 3
#define SIGILL 4
#define SIGTRAP 5
#define SIGABRT 6



#define SIGIOT SIGABRT
#define SIGEMT 7

#define SIGFPE 8
#define SIGKILL 9
#define SIGBUS 10
#define SIGSEGV 11
#define SIGSYS 12
#define SIGPIPE 13
#define SIGALRM 14
#define SIGTERM 15
#define SIGURG 16
#define SIGSTOP 17
#define SIGTSTP 18
#define SIGCONT 19
#define SIGCHLD 20
#define SIGTTIN 21
#define SIGTTOU 22

#define SIGIO 23

#define SIGXCPU 24
#define SIGXFSZ 25
#define SIGVTALRM 26
#define SIGPROF 27

#define SIGWINCH 28
#define SIGINFO 29

#define SIGUSR1 30
#define SIGUSR2 31







#define SIG_DFL (void (*)(int))0
#define SIG_IGN (void (*)(int))1
#define SIG_HOLD (void (*)(int))5
#define SIG_ERR ((void (*)(int))-1)
# 146 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_mcontext.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_mcontext.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_mcontext.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_mcontext.h" 3 4
#define __I386_MCONTEXT_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/_structs.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/_structs.h" 3 4
#define _MACH_MACHINE__STRUCTS_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _MACH_I386__STRUCTS_H_ 
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_THREAD_STATE32 struct __darwin_i386_thread_state
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_FP_CONTROL struct __darwin_fp_control
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,

#define FP_PREC_24B 0
#define FP_PREC_53B 2
#define FP_PREC_64B 3

    __rc :2,

#define FP_RND_NEAR 0
#define FP_RND_DOWN 1
#define FP_RND_UP 2
#define FP_CHOP 3

             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 149 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_FP_STATUS struct __darwin_fp_status
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 193 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_MMST_REG struct __darwin_mmst_reg
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 212 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_XMM_REG struct __darwin_xmm_reg
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_YMM_REG struct __darwin_ymm_reg
struct __darwin_ymm_reg
{
 char __ymm_reg[32];
};
# 244 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_ZMM_REG struct __darwin_zmm_reg
struct __darwin_zmm_reg
{
 char __zmm_reg[64];
};
# 258 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_OPMASK_REG struct __darwin_opmask_reg
struct __darwin_opmask_reg
{
 char __opmask_reg[8];
};
# 276 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define FP_STATE_BYTES 512



#define _STRUCT_X86_FLOAT_STATE32 struct __darwin_i386_float_state
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};

#define _STRUCT_X86_AVX_STATE32 struct __darwin_i386_avx_state
struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};

#define _STRUCT_X86_AVX512_STATE32 struct __darwin_i386_avx512_state
struct __darwin_i386_avx512_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
};
# 574 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_EXCEPTION_STATE32 struct __darwin_i386_exception_state
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 594 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_DEBUG_STATE32 struct __darwin_x86_debug_state32
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};

#define _STRUCT_X86_INSTRUCTION_STATE struct __x86_instruction_state
struct __x86_instruction_state
{
        int __insn_stream_valid_bytes;
        int __insn_offset;
 int __out_of_synch;




#define _X86_INSTRUCTION_STATE_MAX_INSN_BYTES (2448 - 64 - 4)
        __uint8_t __insn_bytes[(2448 - 64 - 4)];
#define _X86_INSTRUCTION_STATE_CACHELINE_SIZE 64
 __uint8_t __insn_cacheline[64];
};

#define _STRUCT_LAST_BRANCH_RECORD struct __last_branch_record
struct __last_branch_record
{
 __uint64_t __from_ip;
 __uint64_t __to_ip;
 __uint32_t __mispredict : 1,
   __tsx_abort : 1,
   __in_tsx : 1,
   __cycle_count: 16,
   __reserved : 13;
};

#define _STRUCT_LAST_BRANCH_STATE struct __last_branch_state
struct __last_branch_state
{
        int __lbr_count;
 __uint32_t __lbr_supported_tsx : 1,
     __lbr_supported_cycle_count : 1,
     __reserved : 30;
#define __LASTBRANCH_MAX 32
 struct __last_branch_record __lbrs[32];
};
# 701 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_PAGEIN_STATE struct __x86_pagein_state
struct __x86_pagein_state
{
 int __pagein_error;
};






#define _STRUCT_X86_THREAD_STATE64 struct __darwin_x86_thread_state64
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 770 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_THREAD_FULL_STATE64 struct __darwin_x86_thread_full_state64
struct __darwin_x86_thread_full_state64
{
 struct __darwin_x86_thread_state64 __ss64;
 __uint64_t __ds;
 __uint64_t __es;
 __uint64_t __ss;
 __uint64_t __gsbase;
};
# 793 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_FLOAT_STATE64 struct __darwin_x86_float_state64
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};

#define _STRUCT_X86_AVX_STATE64 struct __darwin_x86_avx_state64
struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};

#define _STRUCT_X86_AVX512_STATE64 struct __darwin_x86_avx512_state64
struct __darwin_x86_avx512_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
 struct __darwin_ymm_reg __fpu_zmmh8;
 struct __darwin_ymm_reg __fpu_zmmh9;
 struct __darwin_ymm_reg __fpu_zmmh10;
 struct __darwin_ymm_reg __fpu_zmmh11;
 struct __darwin_ymm_reg __fpu_zmmh12;
 struct __darwin_ymm_reg __fpu_zmmh13;
 struct __darwin_ymm_reg __fpu_zmmh14;
 struct __darwin_ymm_reg __fpu_zmmh15;
 struct __darwin_zmm_reg __fpu_zmm16;
 struct __darwin_zmm_reg __fpu_zmm17;
 struct __darwin_zmm_reg __fpu_zmm18;
 struct __darwin_zmm_reg __fpu_zmm19;
 struct __darwin_zmm_reg __fpu_zmm20;
 struct __darwin_zmm_reg __fpu_zmm21;
 struct __darwin_zmm_reg __fpu_zmm22;
 struct __darwin_zmm_reg __fpu_zmm23;
 struct __darwin_zmm_reg __fpu_zmm24;
 struct __darwin_zmm_reg __fpu_zmm25;
 struct __darwin_zmm_reg __fpu_zmm26;
 struct __darwin_zmm_reg __fpu_zmm27;
 struct __darwin_zmm_reg __fpu_zmm28;
 struct __darwin_zmm_reg __fpu_zmm29;
 struct __darwin_zmm_reg __fpu_zmm30;
 struct __darwin_zmm_reg __fpu_zmm31;
};
# 1251 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_EXCEPTION_STATE64 struct __darwin_x86_exception_state64
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 1271 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_DEBUG_STATE64 struct __darwin_x86_debug_state64
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 1299 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/_structs.h" 3 4
#define _STRUCT_X86_CPMU_STATE64 struct __darwin_x86_cpmu_state64
struct __darwin_x86_cpmu_state64
{
 __uint64_t __ctrs[16];
};
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/_structs.h" 2 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_mcontext.h" 2 3 4



#define _STRUCT_MCONTEXT32 struct __darwin_mcontext32
struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};

#define _STRUCT_MCONTEXT_AVX32 struct __darwin_mcontext_avx32
struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};


#define _STRUCT_MCONTEXT_AVX512_32 struct __darwin_mcontext_avx512_32
struct __darwin_mcontext_avx512_32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx512_state __fs;
};
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_mcontext.h" 3 4
#define _STRUCT_MCONTEXT64 struct __darwin_mcontext64
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};

#define _STRUCT_MCONTEXT64_FULL struct __darwin_mcontext64_full
struct __darwin_mcontext64_full
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_full_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};

#define _STRUCT_MCONTEXT_AVX64 struct __darwin_mcontext_avx64
struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};

#define _STRUCT_MCONTEXT_AVX64_FULL struct __darwin_mcontext_avx64_full
struct __darwin_mcontext_avx64_full
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_full_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};


#define _STRUCT_MCONTEXT_AVX512_64 struct __darwin_mcontext_avx512_64
struct __darwin_mcontext_avx512_64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx512_state64 __fs;
};

#define _STRUCT_MCONTEXT_AVX512_64_FULL struct __darwin_mcontext_avx512_64_full
struct __darwin_mcontext_avx512_64_full
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_full_state64 __ss;
 struct __darwin_x86_avx512_state64 __fs;
};
# 202 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_mcontext.h" 3 4
#define _MCONTEXT_T 

typedef struct __darwin_mcontext64 *mcontext_t;
#define _STRUCT_MCONTEXT _STRUCT_MCONTEXT64
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_sigaltstack.h" 3 4
#define _STRUCT_SIGALTSTACK struct __darwin_sigaltstack






struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ucontext.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ucontext.h" 3 4
#define _STRUCT_UCONTEXT struct __darwin_ucontext





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_mcontext.h" 1 3 4
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ucontext.h" 2 3 4



struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 2 3 4






union sigval {

 int sival_int;
 void *sival_ptr;
};

#define SIGEV_NONE 0
#define SIGEV_SIGNAL 1
#define SIGEV_THREAD 3

struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 206 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 3 4
#define ILL_NOOP 0

#define ILL_ILLOPC 1
#define ILL_ILLTRP 2
#define ILL_PRVOPC 3
#define ILL_ILLOPN 4
#define ILL_ILLADR 5
#define ILL_PRVREG 6
#define ILL_COPROC 7
#define ILL_BADSTK 8



#define FPE_NOOP 0

#define FPE_FLTDIV 1
#define FPE_FLTOVF 2
#define FPE_FLTUND 3
#define FPE_FLTRES 4
#define FPE_FLTINV 5
#define FPE_FLTSUB 6
#define FPE_INTDIV 7
#define FPE_INTOVF 8



#define SEGV_NOOP 0

#define SEGV_MAPERR 1
#define SEGV_ACCERR 2



#define BUS_NOOP 0

#define BUS_ADRALN 1
#define BUS_ADRERR 2
#define BUS_OBJERR 3


#define TRAP_BRKPT 1
#define TRAP_TRACE 2



#define CLD_NOOP 0

#define CLD_EXITED 1
#define CLD_KILLED 2
#define CLD_DUMPED 3
#define CLD_TRAPPED 4
#define CLD_STOPPED 5
#define CLD_CONTINUED 6


#define POLL_IN 1
#define POLL_OUT 2
#define POLL_MSG 3
#define POLL_ERR 4
#define POLL_PRI 5
#define POLL_HUP 6


union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
     void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};




#define sa_handler __sigaction_u.__sa_handler
#define sa_sigaction __sigaction_u.__sa_sigaction

#define SA_ONSTACK 0x0001
#define SA_RESTART 0x0002
#define SA_RESETHAND 0x0004
#define SA_NOCLDSTOP 0x0008
#define SA_NODEFER 0x0010
#define SA_NOCLDWAIT 0x0020
#define SA_SIGINFO 0x0040

#define SA_USERTRAMP 0x0100

#define SA_64REGSET 0x0200





#define SA_USERSPACE_MASK (SA_ONSTACK | SA_RESTART | SA_RESETHAND | SA_NOCLDSTOP | SA_NODEFER | SA_NOCLDWAIT | SA_SIGINFO)




#define SIG_BLOCK 1
#define SIG_UNBLOCK 2
#define SIG_SETMASK 3


#define SI_USER 0x10001
#define SI_QUEUE 0x10002
#define SI_TIMER 0x10003
#define SI_ASYNCIO 0x10004
#define SI_MESGQ 0x10005


typedef void (*sig_t)(int);






#define SS_ONSTACK 0x0001
#define SS_DISABLE 0x0004
#define MINSIGSTKSZ 32768
#define SIGSTKSZ 131072






struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};

#define SV_ONSTACK SA_ONSTACK
#define SV_INTERRUPT SA_RESTART
#define SV_RESETHAND SA_RESETHAND
#define SV_NODEFER SA_NODEFER
#define SV_NOCLDSTOP SA_NOCLDSTOP
#define SV_SIGINFO SA_SIGINFO

#define sv_onstack sv_flags





struct sigstack {
 char *ss_sp;
 int ss_onstack;
};






#define sigmask(m) (1 << ((m)-1))


#define BADSIG SIG_ERR
# 389 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/signal.h" 3 4

    void(*signal(int, void (*)(int)))(int);

# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
#define _SYS_RESOURCE_H_ 
# 89 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
typedef __uint64_t rlim_t;
# 100 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
#define PRIO_PROCESS 0
#define PRIO_PGRP 1
#define PRIO_USER 2


#define PRIO_DARWIN_THREAD 3
#define PRIO_DARWIN_PROCESS 4





#define PRIO_MIN -20
#define PRIO_MAX 20






#define PRIO_DARWIN_BG 0x1000





#define PRIO_DARWIN_NONUI 0x1001
# 140 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
#define RUSAGE_SELF 0
#define RUSAGE_CHILDREN -1
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
 long ru_maxrss;
#define ru_first ru_ixrss
 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;
#define ru_last ru_nivcsw

};





#define RUSAGE_INFO_V0 0
#define RUSAGE_INFO_V1 1
#define RUSAGE_INFO_V2 2
#define RUSAGE_INFO_V3 3
#define RUSAGE_INFO_V4 4
#define RUSAGE_INFO_V5 5
#define RUSAGE_INFO_CURRENT RUSAGE_INFO_V5




#define RU_PROC_RUNS_RESLIDE 0x00000001

typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

struct rusage_info_v4 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
};

struct rusage_info_v5 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;
 uint64_t ri_interval_max_phys_footprint;
 uint64_t ri_runnable_time;
 uint64_t ri_flags;
};

typedef struct rusage_info_v5 rusage_info_current;
# 382 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/resource.h" 3 4
#define RLIM_INFINITY (((__uint64_t)1 << 63) - 1)
#define RLIM_SAVED_MAX RLIM_INFINITY
#define RLIM_SAVED_CUR RLIM_INFINITY





#define RLIMIT_CPU 0
#define RLIMIT_FSIZE 1
#define RLIMIT_DATA 2
#define RLIMIT_STACK 3
#define RLIMIT_CORE 4
#define RLIMIT_AS 5

#define RLIMIT_RSS RLIMIT_AS
#define RLIMIT_MEMLOCK 6
#define RLIMIT_NPROC 7

#define RLIMIT_NOFILE 8

#define RLIM_NLIMITS 9

#define _RLIMIT_POSIX_FLAG 0x1000





struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};







#define RLIMIT_WAKEUPS_MONITOR 0x1
#define RLIMIT_CPU_USAGE_MONITOR 0x2
#define RLIMIT_THREAD_CPULIMITS 0x3
#define RLIMIT_FOOTPRINT_INTERVAL 0x4




#define WAKEMON_ENABLE 0x01
#define WAKEMON_DISABLE 0x02
#define WAKEMON_GET_PARAMS 0x04
#define WAKEMON_SET_DEFAULTS 0x08
#define WAKEMON_MAKE_FATAL 0x10




#define CPUMON_MAKE_FATAL 0x1000




#define FOOTPRINT_INTERVAL_RESET 0x1

struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};




#define IOPOL_TYPE_DISK 0
#define IOPOL_TYPE_VFS_ATIME_UPDATES 2
#define IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES 3
#define IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME 4
#define IOPOL_TYPE_VFS_TRIGGER_RESOLVE 5
#define IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION 6
#define IOPOL_TYPE_VFS_IGNORE_PERMISSIONS 7
#define IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE 8


#define IOPOL_SCOPE_PROCESS 0
#define IOPOL_SCOPE_THREAD 1
#define IOPOL_SCOPE_DARWIN_BG 2


#define IOPOL_DEFAULT 0
#define IOPOL_IMPORTANT 1
#define IOPOL_PASSIVE 2
#define IOPOL_THROTTLE 3
#define IOPOL_UTILITY 4
#define IOPOL_STANDARD 5


#define IOPOL_APPLICATION IOPOL_STANDARD
#define IOPOL_NORMAL IOPOL_IMPORTANT


#define IOPOL_ATIME_UPDATES_DEFAULT 0
#define IOPOL_ATIME_UPDATES_OFF 1

#define IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT 0
#define IOPOL_MATERIALIZE_DATALESS_FILES_OFF 1
#define IOPOL_MATERIALIZE_DATALESS_FILES_ON 2

#define IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT 0
#define IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME 1

#define IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT 0
#define IOPOL_VFS_TRIGGER_RESOLVE_OFF 1

#define IOPOL_VFS_CONTENT_PROTECTION_DEFAULT 0
#define IOPOL_VFS_CONTENT_PROTECTION_IGNORE 1

#define IOPOL_VFS_IGNORE_PERMISSIONS_OFF 0
#define IOPOL_VFS_IGNORE_PERMISSIONS_ON 1

#define IOPOL_VFS_SKIP_MTIME_UPDATE_OFF 0
#define IOPOL_VFS_SKIP_MTIME_UPDATE_ON 1





int getpriority(int, id_t);

int getiopolicy_np(int, int) ;

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) ;

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );

# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 2 3 4
# 121 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
#define WNOHANG 0x00000001
#define WUNTRACED 0x00000002
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
#define _W_INT(w) (*(int *)&(w))
#define WCOREFLAG 0200



#define _WSTATUS(x) (_W_INT(x) & 0177)
#define _WSTOPPED 0177






#define WEXITSTATUS(x) ((_W_INT(x) >> 8) & 0x000000ff)




#define WSTOPSIG(x) (_W_INT(x) >> 8)
#define WIFCONTINUED(x) (_WSTATUS(x) == _WSTOPPED && WSTOPSIG(x) == 0x13)
#define WIFSTOPPED(x) (_WSTATUS(x) == _WSTOPPED && WSTOPSIG(x) != 0x13)
#define WIFEXITED(x) (_WSTATUS(x) == 0)
#define WIFSIGNALED(x) (_WSTATUS(x) != _WSTOPPED && _WSTATUS(x) != 0)
#define WTERMSIG(x) (_WSTATUS(x))

#define WCOREDUMP(x) (_W_INT(x) & WCOREFLAG)

#define W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
#define W_STOPCODE(sig) ((sig) << 8 | _WSTOPPED)
# 168 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
#define WEXITED 0x00000004


#define WSTOPPED 0x00000008

#define WCONTINUED 0x00000010
#define WNOWAIT 0x00000020
# 183 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
#define WAIT_ANY (-1)
#define WAIT_MYPGRP 0
# 194 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4
union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
      w_Coredump:1,
      w_Retcode:8,
      w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
      w_Stopsig:8,
      w_Filler:16;






 } w_S;
};
#define w_termsig w_T.w_Termsig
#define w_coredump w_T.w_Coredump
#define w_retcode w_T.w_Retcode
#define w_stopval w_S.w_Stopval
#define w_stopsig w_S.w_Stopsig
# 247 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/wait.h" 3 4

pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);


# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/alloca.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/alloca.h" 3 4
#define _ALLOCA_H_ 






void *alloca(size_t);




#undef alloca
#undef __alloca
#define alloca(size) __alloca(size)
#define __alloca(size) __builtin_alloca(size)
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 2 3 4
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_ct_rune_t.h" 3 4
#define _CT_RUNE_T 

typedef __darwin_ct_rune_t ct_rune_t;
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_rune_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_rune_t.h" 3 4
#define _RUNE_T 

typedef __darwin_rune_t rune_t;
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;




#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0

#define RAND_MAX 0x7fffffff
# 118 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
#define MB_CUR_MAX __mb_cur_max
# 128 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/_malloc.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/_malloc.h" 3 4
#define _MALLOC_UNDERSCORE_MALLOC_H_ 
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/_malloc.h" 3 4


void *malloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
void *calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
void free(void *);
void *realloc(void *__ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));

void *valloc(size_t) __attribute__((alloc_size(1)));




void *aligned_alloc(size_t __alignment, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2))) ;

int posix_memalign(void **__memptr, size_t __alignment, size_t __size) ;


# 129 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 2 3 4


void abort(void) __attribute__((__cold__)) __attribute__((__noreturn__));
int abs(int) __attribute__((__const__));
int atexit(void (* )(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* __compar)(const void *, const void *));

div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));

char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);


int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * restrict , const char * restrict, size_t);
int mbtowc(wchar_t * restrict, const char * restrict, size_t);

void qsort(void *__base, size_t __nel, size_t __width,
     int (* __compar)(const void *, const void *));
int rand(void) ;

void srand(unsigned) ;
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);





#define __swift_unavailable_on(osx_msg,ios_msg) __swift_unavailable(osx_msg)





int system(const char *) __asm("_" "system" );

#undef __swift_unavailable_on

size_t wcstombs(char * restrict, const wchar_t * restrict, size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *restrict, int *restrict);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *restrict, int *restrict);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) ;
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) ;
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) ;
long nrand48(unsigned short[3]) ;
int posix_openpt(int);
char *ptsname(int);


int ptsname_r(int fildes, char *buffer, size_t buflen) ;


int putenv(char *) __asm("_" "putenv" );
long random(void) ;
int rand_r(unsigned *) ;

char *realpath(const char * restrict, char * restrict) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );
# 264 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 3 4
uint32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int )
   
   
   
    ;
void arc4random_buf(void * __buf, size_t __nbytes) ;
void arc4random_stir(void);
uint32_t
  arc4random_uniform(uint32_t __upper_bound) ;







char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") ;
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);
void setprogname(const char *);
# 309 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/stdlib.h" 3 4
int heapsort(void *__base, size_t __nel, size_t __width,
     int (* __compar)(const void *, const void *));





int mergesort(void *__base, size_t __nel, size_t __width,
     int (* __compar)(const void *, const void *));





void psort(void *__base, size_t __nel, size_t __width,
     int (* __compar)(const void *, const void *))
     ;





void psort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* __compar)(void *, const void *, const void *))
     ;





void qsort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* __compar)(void *, const void *, const void *));
int radixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
int rpmatch(const char *)
 ;
int sradixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *__ptr, size_t __size) __attribute__((alloc_size(2)));
long long
 strtonum(const char *__numstr, long long __minval, long long __maxval, const char **__errstrp)
 ;

long long
  strtoq(const char *__str, char **__endptr, int __base);
unsigned long long
  strtouq(const char *__str, char **__endptr, int __base);

extern char *suboptarg;








# 23 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/ctype.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/ctype.h" 3 4
#define _CTYPE_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 3 4
#define __CTYPE_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/runetype.h" 1 3 4
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/runetype.h" 3 4
#define _RUNETYPE_H_ 
# 49 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/runetype.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/runetype.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wint_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wint_t.h" 3 4
#define _WINT_T 

typedef __darwin_wint_t wint_t;
# 51 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/runetype.h" 2 3 4



#define _CACHED_RUNES (1 <<8 )
#define _CRMASK (~(_CACHED_RUNES - 1))




typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __name[14];
 __uint32_t __mask;
} _RuneCharClass;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;




 int __ncharclasses;
 _RuneCharClass *__charclasses;
} _RuneLocale;

#define _RUNE_MAGIC_A "RuneMagA"


extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;

# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 2 3 4

#define _CTYPE_A 0x00000100L
#define _CTYPE_C 0x00000200L
#define _CTYPE_D 0x00000400L
#define _CTYPE_G 0x00000800L
#define _CTYPE_L 0x00001000L
#define _CTYPE_P 0x00002000L
#define _CTYPE_S 0x00004000L
#define _CTYPE_U 0x00008000L
#define _CTYPE_X 0x00010000L
#define _CTYPE_B 0x00020000L
#define _CTYPE_R 0x00040000L
#define _CTYPE_I 0x00080000L
#define _CTYPE_T 0x00100000L
#define _CTYPE_Q 0x00200000L
#define _CTYPE_SW0 0x20000000L
#define _CTYPE_SW1 0x40000000L
#define _CTYPE_SW2 0x80000000L
#define _CTYPE_SW3 0xc0000000L
#define _CTYPE_SWM 0xe0000000L
#define _CTYPE_SWS 30
# 117 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 3 4
#define __DARWIN_CTYPE_inline __header_inline

#define __DARWIN_CTYPE_TOP_inline __header_inline
# 128 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 3 4

unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);


extern __inline __attribute__((__gnu_inline__)) int
isascii(int _c)
{
 return ((_c & ~0x7F) == 0);
}
# 147 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 3 4

int __maskrune(__darwin_ct_rune_t, unsigned long);



extern __inline __attribute__((__gnu_inline__)) int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (isascii(_c) ? !!(_DefaultRuneLocale.__runetype[_c] & _f)
  : !!__maskrune(_c, _f));

}

extern __inline __attribute__((__gnu_inline__)) __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 187 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_ctype.h" 3 4

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);



extern __inline __attribute__((__gnu_inline__)) int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}



#define _tolower(c) __tolower(c)
#define _toupper(c) __toupper(c)

extern __inline __attribute__((__gnu_inline__)) int
isalnum(int _c)
{
 return (__istype(_c, 0x00000100L|0x00000400L));
}

extern __inline __attribute__((__gnu_inline__)) int
isalpha(int _c)
{
 return (__istype(_c, 0x00000100L));
}

extern __inline __attribute__((__gnu_inline__)) int
isblank(int _c)
{
 return (__istype(_c, 0x00020000L));
}

extern __inline __attribute__((__gnu_inline__)) int
iscntrl(int _c)
{
 return (__istype(_c, 0x00000200L));
}


extern __inline __attribute__((__gnu_inline__)) int
isdigit(int _c)
{
 return (__isctype(_c, 0x00000400L));
}

extern __inline __attribute__((__gnu_inline__)) int
isgraph(int _c)
{
 return (__istype(_c, 0x00000800L));
}

extern __inline __attribute__((__gnu_inline__)) int
islower(int _c)
{
 return (__istype(_c, 0x00001000L));
}

extern __inline __attribute__((__gnu_inline__)) int
isprint(int _c)
{
 return (__istype(_c, 0x00040000L));
}

extern __inline __attribute__((__gnu_inline__)) int
ispunct(int _c)
{
 return (__istype(_c, 0x00002000L));
}

extern __inline __attribute__((__gnu_inline__)) int
isspace(int _c)
{
 return (__istype(_c, 0x00004000L));
}

extern __inline __attribute__((__gnu_inline__)) int
isupper(int _c)
{
 return (__istype(_c, 0x00008000L));
}


extern __inline __attribute__((__gnu_inline__)) int
isxdigit(int _c)
{
 return (__isctype(_c, 0x00010000L));
}

extern __inline __attribute__((__gnu_inline__)) int
toascii(int _c)
{
 return (_c & 0x7F);
}

extern __inline __attribute__((__gnu_inline__)) int
tolower(int _c)
{
        return (__tolower(_c));
}

extern __inline __attribute__((__gnu_inline__)) int
toupper(int _c)
{
        return (__toupper(_c));
}


extern __inline __attribute__((__gnu_inline__)) int
digittoint(int _c)
{
 return (__maskrune(_c, 0x0F));
}

extern __inline __attribute__((__gnu_inline__)) int
ishexnumber(int _c)
{
 return (__istype(_c, 0x00010000L));
}

extern __inline __attribute__((__gnu_inline__)) int
isideogram(int _c)
{
 return (__istype(_c, 0x00080000L));
}

extern __inline __attribute__((__gnu_inline__)) int
isnumber(int _c)
{
 return (__istype(_c, 0x00000400L));
}

extern __inline __attribute__((__gnu_inline__)) int
isphonogram(int _c)
{
 return (__istype(_c, 0x00200000L));
}

extern __inline __attribute__((__gnu_inline__)) int
isrune(int _c)
{
 return (__istype(_c, 0xFFFFFFF0L));
}

extern __inline __attribute__((__gnu_inline__)) int
isspecial(int _c)
{
 return (__istype(_c, 0x00100000L));
}
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/ctype.h" 2 3 4
# 24 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/errno.h" 1 3 4
# 23 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/errno.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/errno.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/errno.h" 3 4
#define _SYS_ERRNO_H_ 
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/errno.h" 3 4

extern int * __error(void);
#define errno (*__error())






#define EPERM 1
#define ENOENT 2
#define ESRCH 3
#define EINTR 4
#define EIO 5
#define ENXIO 6
#define E2BIG 7
#define ENOEXEC 8
#define EBADF 9
#define ECHILD 10
#define EDEADLK 11

#define ENOMEM 12
#define EACCES 13
#define EFAULT 14

#define ENOTBLK 15

#define EBUSY 16
#define EEXIST 17
#define EXDEV 18
#define ENODEV 19
#define ENOTDIR 20
#define EISDIR 21
#define EINVAL 22
#define ENFILE 23
#define EMFILE 24
#define ENOTTY 25
#define ETXTBSY 26
#define EFBIG 27
#define ENOSPC 28
#define ESPIPE 29
#define EROFS 30
#define EMLINK 31
#define EPIPE 32


#define EDOM 33
#define ERANGE 34


#define EAGAIN 35
#define EWOULDBLOCK EAGAIN
#define EINPROGRESS 36
#define EALREADY 37


#define ENOTSOCK 38
#define EDESTADDRREQ 39
#define EMSGSIZE 40
#define EPROTOTYPE 41
#define ENOPROTOOPT 42
#define EPROTONOSUPPORT 43

#define ESOCKTNOSUPPORT 44

#define ENOTSUP 45
# 158 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/errno.h" 3 4
#define EPFNOSUPPORT 46

#define EAFNOSUPPORT 47
#define EADDRINUSE 48
#define EADDRNOTAVAIL 49


#define ENETDOWN 50
#define ENETUNREACH 51
#define ENETRESET 52
#define ECONNABORTED 53
#define ECONNRESET 54
#define ENOBUFS 55
#define EISCONN 56
#define ENOTCONN 57

#define ESHUTDOWN 58
#define ETOOMANYREFS 59

#define ETIMEDOUT 60
#define ECONNREFUSED 61

#define ELOOP 62
#define ENAMETOOLONG 63



#define EHOSTDOWN 64

#define EHOSTUNREACH 65
#define ENOTEMPTY 66



#define EPROCLIM 67
#define EUSERS 68

#define EDQUOT 69


#define ESTALE 70

#define EREMOTE 71
#define EBADRPC 72
#define ERPCMISMATCH 73
#define EPROGUNAVAIL 74
#define EPROGMISMATCH 75
#define EPROCUNAVAIL 76


#define ENOLCK 77
#define ENOSYS 78


#define EFTYPE 79
#define EAUTH 80
#define ENEEDAUTH 81


#define EPWROFF 82
#define EDEVERR 83


#define EOVERFLOW 84



#define EBADEXEC 85
#define EBADARCH 86
#define ESHLIBVERS 87
#define EBADMACHO 88


#define ECANCELED 89

#define EIDRM 90
#define ENOMSG 91
#define EILSEQ 92

#define ENOATTR 93


#define EBADMSG 94
#define EMULTIHOP 95
#define ENODATA 96
#define ENOLINK 97
#define ENOSR 98
#define ENOSTR 99
#define EPROTO 100
#define ETIME 101



#define EOPNOTSUPP 102


#define ENOPOLICY 103


#define ENOTRECOVERABLE 104
#define EOWNERDEAD 105



#define EQFULL 106
#define ELAST 106
# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/errno.h" 2 3 4
# 25 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 1 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4
#define _STRING_H_ 
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4

void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);

# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4

char *strtok_r(char *__str, const char *__sep, char **__lasts);

# 115 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);

# 129 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4

char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) ;
char *strndup(const char *__s1, size_t __n) ;
size_t strnlen(const char *__s1, size_t __n) ;
char *strsignal(int __sig);

# 144 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n) ;









void *memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len) ;
void memset_pattern4(void *__b, const void *__pattern4, size_t __len) ;
void memset_pattern8(void *__b, const void *__pattern8, size_t __len) ;
void memset_pattern16(void *__b, const void *__pattern16, size_t __len) ;

char *strcasestr(const char *__big, const char *__little);
char *strnstr(const char *__big, const char *__little, size_t __len);
size_t strlcat(char *__dst, const char *__source, size_t __size);
size_t strlcpy(char *__dst, const char *__source, size_t __size);
void strmode(int __mode, char *__bp);
char *strsep(char **__stringp, const char *__delim);


void swab(const void * restrict, void * restrict, ssize_t);



int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len);



int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen);







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/strings.h" 1 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/strings.h" 3 4
#define _STRINGS_H_ 










int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);





int ffsl(long) ;
int ffsll(long long) ;
int fls(int) ;
int flsl(long) ;
int flsll(long long) ;


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 1 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/strings.h" 2 3 4




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_strings.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_strings.h" 3 4
#define _SECURE__STRINGS_H_ 
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_strings.h" 3 4
#undef bcopy

#define bcopy(src,dest,...) __builtin___memmove_chk (dest, src, __VA_ARGS__, __darwin_obsz0 (dest))




#undef bzero

#define bzero(dest,...) __builtin___memset_chk (dest, 0, __VA_ARGS__, __darwin_obsz0 (dest))
# 98 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/strings.h" 2 3 4
# 185 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 2 3 4
# 194 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_string.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_string.h" 3 4
#define _SECURE__STRING_H_ 
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_string.h" 3 4
#define __HAS_FIXED_CHK_PROTOTYPES 0
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_string.h" 3 4
#undef memcpy

#define memcpy(dest,...) __builtin___memcpy_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))




#undef memmove

#define memmove(dest,...) __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))




#undef memset

#define memset(dest,...) __builtin___memset_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))




#undef strcpy

#define strcpy(dest,...) __builtin___strcpy_chk (dest, __VA_ARGS__, __darwin_obsz (dest))





#undef stpcpy

#define stpcpy(dest,...) __builtin___stpcpy_chk (dest, __VA_ARGS__, __darwin_obsz (dest))






#undef stpncpy

#define stpncpy(dest,...) __builtin___stpncpy_chk (dest, __VA_ARGS__, __darwin_obsz (dest))
# 125 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/secure/_string.h" 3 4
#undef strncpy

#define strncpy(dest,...) __builtin___strncpy_chk (dest, __VA_ARGS__, __darwin_obsz (dest))




#undef strcat

#define strcat(dest,...) __builtin___strcat_chk (dest, __VA_ARGS__, __darwin_obsz (dest))





#undef strncat

#define strncat(dest,...) __builtin___strncat_chk (dest, __VA_ARGS__, __darwin_obsz (dest))




#undef __HAS_FIXED_CHK_PROTOTYPES
# 195 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/string.h" 2 3 4
# 26 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/signal.h" 1 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/signal.h" 3 4
#define _USER_SIGNAL_H 
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/signal.h" 3 4
extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];



int raise(int);




void (* bsd_signal(int, void (* )(int)))(int);
int kill(pid_t, int) __asm("_" "kill" );
int killpg(pid_t, int) __asm("_" "killpg" );
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
int sigaction(int, const struct sigaction * restrict,
     struct sigaction * restrict);
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * restrict, stack_t * restrict) __asm("_" "sigaltstack" ) ;
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" );
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * restrict, sigset_t * restrict);
int sigrelse(int);
void (* sigset(int, void (* )(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
int sigwait(const sigset_t * restrict, int * restrict) __asm("_" "sigwait" );

void psignal(unsigned int, const char *);
int sigblock(int);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);




extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int
__sigbits(int __signo)
{
    return __signo > 32 ? 0 : (1 << (__signo - 1));
}

#define sigaddset(set,signo) (*(set) |= __sigbits(signo), 0)
#define sigdelset(set,signo) (*(set) &= ~__sigbits(signo), 0)
#define sigismember(set,signo) ((*(set) & __sigbits(signo)) != 0)
#define sigemptyset(set) (*(set) = 0, 0)
#define sigfillset(set) (*(set) = ~(sigset_t)0, 0)
# 27 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pwd.h" 1 3 4
# 44 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pwd.h" 3 4
#define _PWD_H_ 







#define _PATH_PWD "/etc"
#define _PATH_PASSWD "/etc/passwd"
#define _PASSWD "passwd"
#define _PATH_MASTERPASSWD "/etc/master.passwd"
#define _PATH_MASTERPASSWD_LOCK "/etc/ptmp"
#define _MASTERPASSWD "master.passwd"

#define _PATH_MP_DB "/etc/pwd.db"
#define _MP_DB "pwd.db"
#define _PATH_SMP_DB "/etc/spwd.db"
#define _SMP_DB "spwd.db"

#define _PATH_PWD_MKDB "/usr/sbin/pwd_mkdb"

#define _PW_KEYBYNAME '1'
#define _PW_KEYBYNUM '2'
#define _PW_KEYBYUID '3'

#define _PASSWORD_EFMT1 '_'

#define _PASSWORD_LEN 128

#define _PASSWORD_NOUID 0x01
#define _PASSWORD_NOGID 0x02
#define _PASSWORD_NOCHG 0x04
#define _PASSWORD_NOEXP 0x08

#define _PASSWORD_WARNDAYS 14
#define _PASSWORD_CHGNOW -1



struct passwd {
 char *pw_name;
 char *pw_passwd;
 uid_t pw_uid;
 gid_t pw_gid;
 __darwin_time_t pw_change;
 char *pw_class;
 char *pw_gecos;
 char *pw_dir;
 char *pw_shell;
 __darwin_time_t pw_expire;
};




struct passwd *getpwuid(uid_t);
struct passwd *getpwnam(const char *);
int getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
struct passwd *getpwent(void);
void setpwent(void);
void endpwent(void);



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/uuid/uuid.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/uuid/uuid.h" 3 4
#define _UUID_UUID_H 





#define _UUID_STRING_T 
typedef __darwin_uuid_string_t uuid_string_t;


#define UUID_DEFINE(name,u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,u10,u11,u12,u13,u14,u15) static const uuid_t name __attribute__ ((unused)) = {u0,u1,u2,u3,u4,u5,u6,u7,u8,u9,u10,u11,u12,u13,u14,u15}


static const uuid_t UUID_NULL __attribute__ ((unused)) = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};





void uuid_clear(uuid_t uu);

int uuid_compare(const uuid_t uu1, const uuid_t uu2);

void uuid_copy(uuid_t dst, const uuid_t src);

void uuid_generate(uuid_t out);
void uuid_generate_random(uuid_t out);
void uuid_generate_time(uuid_t out);

void uuid_generate_early_random(uuid_t out);

int uuid_is_null(const uuid_t uu);

int uuid_parse(const uuid_string_t in, uuid_t uu);

void uuid_unparse(const uuid_t uu, uuid_string_t out);
void uuid_unparse_lower(const uuid_t uu, uuid_string_t out);
void uuid_unparse_upper(const uuid_t uu, uuid_string_t out);
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pwd.h" 2 3 4

int setpassent(int);
char *user_from_uid(uid_t, int);
struct passwd *getpwuuid(uuid_t);
int getpwuuid_r(uuid_t, struct passwd *, char *, size_t, struct passwd **);

# 28 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/grp.h" 1 3 4
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/grp.h" 3 4
#define _GRP_H_ 






#define _PATH_GROUP "/etc/group"


struct group {
 char *gr_name;
 char *gr_passwd;
 gid_t gr_gid;
 char **gr_mem;
};





struct group *getgrgid(gid_t);
struct group *getgrnam(const char *);

int getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int getgrnam_r(const char *, struct group *, char *, size_t, struct group **);

struct group *getgrent(void);
void setgrent(void);
void endgrent(void);





char *group_from_gid(gid_t, int);
struct group *getgruuid(uuid_t);
int getgruuid_r(uuid_t, struct group *, char *, size_t, struct group **);






void setgrfile(const char *);

int setgroupent(int);

# 29 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dirent.h" 1 3 4
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dirent.h" 3 4
#define _DIRENT_H_ 





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/dirent.h" 1 3 4
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/dirent.h" 3 4
#define _SYS_DIRENT_H 







#define __DARWIN_MAXNAMLEN 255

#pragma pack(4)
# 98 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/dirent.h" 3 4
#pragma pack()

#define __DARWIN_MAXPATHLEN 1024

#define __DARWIN_STRUCT_DIRENTRY { __uint64_t d_ino; __uint64_t d_seekoff; __uint16_t d_reclen; __uint16_t d_namlen; __uint8_t d_type; char d_name[__DARWIN_MAXPATHLEN]; }
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/dirent.h" 3 4
struct dirent { __uint64_t d_ino; __uint64_t d_seekoff; __uint16_t d_reclen; __uint16_t d_namlen; __uint8_t d_type; char d_name[1024]; };





#define d_fileno d_ino
#define MAXNAMLEN __DARWIN_MAXNAMLEN



#define DT_UNKNOWN 0
#define DT_FIFO 1
#define DT_CHR 2
#define DT_DIR 4
#define DT_BLK 6
#define DT_REG 8
#define DT_LNK 10
#define DT_SOCK 12
#define DT_WHT 14




#define IFTODT(mode) (((mode) & 0170000) >> 12)
#define DTTOIF(dirtype) ((dirtype) << 12)
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dirent.h" 2 3 4




struct _telldir;


typedef struct {
 int __dd_fd;
 long __dd_loc;
 long __dd_size;
 char *__dd_buf;
 int __dd_len;
 long __dd_seek;
 __attribute__((__unused__)) long __padding;
 int __dd_flags;
 __darwin_pthread_mutex_t __dd_lock;
 struct _telldir *__dd_td;
} DIR;




#define DIRBLKSIZ 1024


#define DTF_HIDEW 0x0001
#define DTF_NODUP 0x0002
#define DTF_REWIND 0x0004
#define __DTF_READALL 0x0008
#define __DTF_SKIPREAD 0x0010
#define __DTF_ATEND 0x0020







int closedir(DIR *) __asm("_" "closedir" );

DIR *opendir(const char *) __asm("_" "opendir" "$INODE64" );

struct dirent *readdir(DIR *) __asm("_" "readdir" "$INODE64");
int readdir_r(DIR *, struct dirent *, struct dirent **) __asm("_" "readdir_r" "$INODE64");

void rewinddir(DIR *) __asm("_" "rewinddir" "$INODE64" );

void seekdir(DIR *, long) __asm("_" "seekdir" "$INODE64" );

long telldir(DIR *) __asm("_" "telldir" "$INODE64" );












DIR *fdopendir(int) __asm("_" "fdopendir" "$INODE64" );

int alphasort(const struct dirent **, const struct dirent **) __asm("_" "alphasort" "$INODE64");
# 146 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dirent.h" 3 4
int dirfd(DIR *dirp) ;


int scandir(const char *, struct dirent ***,
    int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **)) __asm("_" "scandir" "$INODE64");
# 164 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dirent.h" 3 4







int getdirentries(int, char *, int, long *)






      __asm("_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect")



;

DIR *__opendir2(const char *, int) __asm("_" "__opendir2" "$INODE64" );


# 30 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/glob.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/glob.h" 3 4
#define _GLOB_H_ 







struct dirent;
struct stat;

typedef struct {
 size_t gl_pathc;
 int gl_matchc;
 size_t gl_offs;
 int gl_flags;
 char **gl_pathv;




  int (*gl_errfunc)(const char *, int);
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/glob.h" 3 4
 void (*gl_closedir)(void *);

 struct dirent *(*gl_readdir)(void *);



 void *(*gl_opendir)(const char *);

 int (*gl_lstat)(const char *, struct stat *);
 int (*gl_stat)(const char *, struct stat *);




} glob_t;


#define GLOB_APPEND 0x0001
#define GLOB_DOOFFS 0x0002
#define GLOB_ERR 0x0004
#define GLOB_MARK 0x0008
#define GLOB_NOCHECK 0x0010
#define GLOB_NOSORT 0x0020
#define GLOB_NOESCAPE 0x2000


#define GLOB_NOSPACE (-1)
#define GLOB_ABORTED (-2)
#define GLOB_NOMATCH (-3)
#define GLOB_NOSYS (-4)

#define GLOB_ALTDIRFUNC 0x0040
#define GLOB_BRACE 0x0080
#define GLOB_MAGCHAR 0x0100
#define GLOB_NOMAGIC 0x0200
#define GLOB_QUOTE 0x0400
#define GLOB_TILDE 0x0800
#define GLOB_LIMIT 0x1000





#define GLOB_MAXPATH GLOB_LIMIT
#define GLOB_ABEND GLOB_ABORTED


int glob(const char * restrict, int, int (*)(const char *, int),
      glob_t * restrict) __asm("_" "glob" "$INODE64");
# 127 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/glob.h" 3 4
void globfree(glob_t *);

# 31 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 3 4
#define _SYS_MOUNT_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 3 4
#define _SYS_ATTR_H_ 





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ucred.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ucred.h" 3 4
#define _SYS_UCRED_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 3 4
#define _SYS_PARAM_H_ 

#define BSD 199506
#define BSD4_3 1
#define BSD4_4 1

#define NeXTBSD 1995064
#define NeXTBSD4_0 0
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/syslimits.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/syslimits.h" 3 4
#define _SYS_SYSLIMITS_H_ 







#define ARG_MAX (1024 * 1024)
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/syslimits.h" 3 4
#define CHILD_MAX 266
#define GID_MAX 2147483647U

#define LINK_MAX 32767
#define MAX_CANON 1024
#define MAX_INPUT 1024
#define NAME_MAX 255
#define NGROUPS_MAX 16

#define UID_MAX 2147483647U

#define OPEN_MAX 10240


#define PATH_MAX 1024
#define PIPE_BUF 512

#define BC_BASE_MAX 99
#define BC_DIM_MAX 2048
#define BC_SCALE_MAX 99
#define BC_STRING_MAX 1000
#define CHARCLASS_NAME_MAX 14
#define COLL_WEIGHTS_MAX 2
#define EQUIV_CLASS_MAX 2
#define EXPR_NEST_MAX 32
#define LINE_MAX 2048
#define RE_DUP_MAX 255


#define NZERO 20
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 2 3 4

#define MAXCOMLEN 16
#define MAXINTERP 64
#define MAXLOGNAME 255
#define MAXUPRC CHILD_MAX
#define NCARGS ARG_MAX
#define NGROUPS NGROUPS_MAX
#define NOFILE 256
#define NOGROUP 65535
#define MAXHOSTNAMELEN 256
#define MAXDOMNAMELEN 256


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/param.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/param.h" 3 4
#define _BSD_MACHINE_PARAM_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/param.h" 1 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/param.h" 3 4
#define _I386_PARAM_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_param.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_param.h" 3 4
#define _I386__PARAM_H_ 
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_param.h" 3 4
#define __DARWIN_ALIGNBYTES (sizeof(__darwin_size_t) - 1)
#define __DARWIN_ALIGN(p) ((__darwin_size_t)((__darwin_size_t)(p) + __DARWIN_ALIGNBYTES) &~ __DARWIN_ALIGNBYTES)

#define __DARWIN_ALIGNBYTES32 (sizeof(__uint32_t) - 1)
#define __DARWIN_ALIGN32(p) ((__darwin_size_t)((__darwin_size_t)(p) + __DARWIN_ALIGNBYTES32) &~ __DARWIN_ALIGNBYTES32)
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/param.h" 2 3 4






#define ALIGNBYTES __DARWIN_ALIGNBYTES
#define ALIGN(p) __DARWIN_ALIGN(p)

#define NBPG 4096
#define PGOFSET (NBPG-1)
#define PGSHIFT 12

#define DEV_BSIZE 512
#define DEV_BSHIFT 9
#define BLKDEV_IOSIZE 2048
#define MAXPHYS (128 * 1024)

#define CLSIZE 1
#define CLSIZELOG2 0
# 104 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/param.h" 3 4
#define MSIZESHIFT 8
#define MSIZE (1 << MSIZESHIFT)
#define MCLSHIFT 11
#define MCLBYTES (1 << MCLSHIFT)
#define MBIGCLSHIFT 12
#define MBIGCLBYTES (1 << MBIGCLSHIFT)
#define M16KCLSHIFT 14
#define M16KCLBYTES (1 << M16KCLSHIFT)

#define MCLOFSET (MCLBYTES - 1)

#define NMBCLUSTERS ((1024 * 1024) / MCLBYTES)






#define ctos(x) (x)
#define stoc(x) (x)


#define ctod(x) ((x)<<(PGSHIFT-DEV_BSHIFT))
#define dtoc(x) ((x)>>(PGSHIFT-DEV_BSHIFT))
#define dtob(x) ((x)<<DEV_BSHIFT)


#define ctob(x) ((x)<<PGSHIFT)


#define btoc(x) (((unsigned)(x)+(NBPG-1))>>PGSHIFT)


#define btodb(bytes,devBlockSize) ((unsigned)(bytes) / devBlockSize)

#define dbtob(db,devBlockSize) ((unsigned)(db) * devBlockSize)
# 154 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/param.h" 3 4
#define bdbtofsb(bn) ((bn) / (BLKDEV_IOSIZE/DEV_BSIZE))




#define STATUS_WORD(rpl,ipl) (((ipl) << 8) | (rpl))
#define USERMODE(x) (((x) & 3) == 3)
#define BASEPRI(x) (((x) & (255 << 8)) == 0)






#define DELAY(n) { int N = (n); while (--N > 0); }
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/param.h" 2 3 4
# 108 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 2 3 4


# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 1 3 4
# 30 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 3 4
#define _GCC_LIMITS_H_ 



# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 1 3 4
# 203 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/limits.h" 1 3 4
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/limits.h" 3 4
#define _LIMITS_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/limits.h" 1 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/limits.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/limits.h" 3 4
#define _I386_LIMITS_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_limits.h" 1 3 4
# 23 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/_limits.h" 3 4
#define _I386__LIMITS_H_ 

#define __DARWIN_CLK_TCK 100
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/limits.h" 2 3 4

#define CHAR_BIT 8
#define MB_LEN_MAX 6


#define CLK_TCK __DARWIN_CLK_TCK
# 59 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/limits.h" 3 4
#define SCHAR_MAX 127
#define SCHAR_MIN (-128)

#define UCHAR_MAX 255
#define CHAR_MAX 127
#define CHAR_MIN (-128)

#define USHRT_MAX 65535
#define SHRT_MAX 32767
#define SHRT_MIN (-32768)

#define UINT_MAX 0xffffffff
#define INT_MAX 2147483647
#define INT_MIN (-2147483647-1)


#define ULONG_MAX 0xffffffffffffffffUL
#define LONG_MAX 0x7fffffffffffffffL
#define LONG_MIN (-0x7fffffffffffffffL-1)






#define ULLONG_MAX 0xffffffffffffffffULL
#define LLONG_MAX 0x7fffffffffffffffLL
#define LLONG_MIN (-0x7fffffffffffffffLL-1)



#define LONG_BIT 64



#define SSIZE_MAX LONG_MAX
#define WORD_BIT 32


#define SIZE_T_MAX ULONG_MAX

#define UQUAD_MAX ULLONG_MAX
#define QUAD_MAX LLONG_MAX
#define QUAD_MIN LLONG_MIN
# 7 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/limits.h" 2 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/limits.h" 2 3 4



#define _POSIX_ARG_MAX 4096
#define _POSIX_CHILD_MAX 25
#define _POSIX_LINK_MAX 8
#define _POSIX_MAX_CANON 255
#define _POSIX_MAX_INPUT 255
#define _POSIX_NAME_MAX 14
#define _POSIX_NGROUPS_MAX 8
#define _POSIX_OPEN_MAX 20
#define _POSIX_PATH_MAX 256
#define _POSIX_PIPE_BUF 512
#define _POSIX_SSIZE_MAX 32767
#define _POSIX_STREAM_MAX 8
#define _POSIX_TZNAME_MAX 6

#define _POSIX2_BC_BASE_MAX 99
#define _POSIX2_BC_DIM_MAX 2048
#define _POSIX2_BC_SCALE_MAX 99
#define _POSIX2_BC_STRING_MAX 1000
#define _POSIX2_EQUIV_CLASS_MAX 2
#define _POSIX2_EXPR_NEST_MAX 32
#define _POSIX2_LINE_MAX 2048
#define _POSIX2_RE_DUP_MAX 255



#define _POSIX_AIO_LISTIO_MAX 2
#define _POSIX_AIO_MAX 1
#define _POSIX_DELAYTIMER_MAX 32
#define _POSIX_MQ_OPEN_MAX 8
#define _POSIX_MQ_PRIO_MAX 32
#define _POSIX_RTSIG_MAX 8
#define _POSIX_SEM_NSEMS_MAX 256
#define _POSIX_SEM_VALUE_MAX 32767
#define _POSIX_SIGQUEUE_MAX 32
#define _POSIX_TIMER_MAX 32

#define _POSIX_CLOCKRES_MIN 20000000



#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
#define _POSIX_THREAD_KEYS_MAX 128
#define _POSIX_THREAD_THREADS_MAX 64

#define PTHREAD_DESTRUCTOR_ITERATIONS 4
#define PTHREAD_KEYS_MAX 512



#define PTHREAD_STACK_MIN 8192




#define _POSIX_HOST_NAME_MAX 255
#define _POSIX_LOGIN_NAME_MAX 9
#define _POSIX_SS_REPL_MAX 4
#define _POSIX_SYMLINK_MAX 255
#define _POSIX_SYMLOOP_MAX 8
#define _POSIX_TRACE_EVENT_NAME_MAX 30
#define _POSIX_TRACE_NAME_MAX 8
#define _POSIX_TRACE_SYS_MAX 8
#define _POSIX_TRACE_USER_EVENT_MAX 32
#define _POSIX_TTY_NAME_MAX 9
#define _POSIX2_CHARCLASS_NAME_MAX 14
#define _POSIX2_COLL_WEIGHTS_MAX 2

#define _POSIX_RE_DUP_MAX _POSIX2_RE_DUP_MAX



#define OFF_MIN LLONG_MIN
#define OFF_MAX LLONG_MAX







#define PASS_MAX 128


#define NL_ARGMAX 9
#define NL_LANGMAX 14
#define NL_MSGMAX 32767
#define NL_NMAX 1
#define NL_SETMAX 255
#define NL_TEXTMAX 2048

#define _XOPEN_IOV_MAX 16
#define IOV_MAX 1024
#define _XOPEN_NAME_MAX 255
#define _XOPEN_PATH_MAX 1024
# 204 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 2 3 4
# 8 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/syslimits.h" 2 3 4
#undef _GCC_NEXT_LIMITS_H
# 35 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 2 3 4
# 60 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 3 4
#define _LIMITS_H___ 


#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__







#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__


#undef UCHAR_MAX



#define UCHAR_MAX (SCHAR_MAX * 2 + 1)
# 96 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 3 4
#undef CHAR_MIN
#define CHAR_MIN SCHAR_MIN
#undef CHAR_MAX
#define CHAR_MAX SCHAR_MAX



#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__


#undef USHRT_MAX



#define USHRT_MAX (SHRT_MAX * 2 + 1)



#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__


#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)



#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__


#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)



#undef LLONG_MIN
#define LLONG_MIN (-LLONG_MAX - 1LL)
#undef LLONG_MAX
#define LLONG_MAX __LONG_LONG_MAX__


#undef ULLONG_MAX
#define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)




#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 2 3 4
# 119 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 3 4
#define PSWP 0
#define PVM 4
#define PINOD 8
#define PRIBIO 16
#define PVFS 20
#define PZERO 22
#define PSOCK 24
#define PWAIT 32
#define PLOCK 36
#define PPAUSE 40
#define PUSER 50
#define MAXPRI 127

#define PRIMASK 0x0ff
#define PCATCH 0x100
#define PTTYBLOCK 0x200
#define PDROP 0x400
#define PSPIN 0x800

#define NBPW sizeof(int)

#define CMASK 022
#define NODEV (dev_t)(-1)






#define CLBYTES (CLSIZE*NBPG)
#define CLOFSET (CLSIZE*NBPG-1)
#define claligned(x) ((((int)(x))&CLOFSET)==0)
#define CLOFF CLOFSET
#define CLSHIFT (PGSHIFT+CLSIZELOG2)


#define clbase(i) (i)
#define clrnd(i) (i)







#define CBLOCK 64
#define CBQSIZE (CBLOCK/NBBY)

#define CBSIZE (CBLOCK - sizeof(struct cblock *) - CBQSIZE)
#define CROUND (CBLOCK - 1)
# 181 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 3 4
#define MAXBSIZE (256 * 4096)
#define MAXPHYSIO MAXPHYS
#define MAXFRAG 8

#define MAXPHYSIO_WIRED (16 * 1024 * 1024)
# 196 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 3 4
#define MAXPATHLEN PATH_MAX
#define MAXSYMLINKS 32


#define setbit(a,i) (((unsigned char *)(a))[(i)/NBBY] |= 1u<<((i)%NBBY))
#define clrbit(a,i) (((unsigned char *)(a))[(i)/NBBY] &= ~(1u<<((i)%NBBY)))
#define isset(a,i) (((unsigned char *)(a))[(i)/NBBY] & (1u<<((i)%NBBY)))
#define isclr(a,i) ((((unsigned char *)(a))[(i)/NBBY] & (1u<<((i)%NBBY))) == 0)





#define roundup(x,y) ((((x) % (y)) == 0) ? (x) : ((x) + ((y) - ((x) % (y)))))

#define powerof2(x) ((((x)-1)&(x))==0)



#define MIN(a,b) (((a)<(b))?(a):(b))


#define MAX(a,b) (((a)>(b))?(a):(b))
# 232 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/param.h" 3 4
#define FSHIFT 11
#define FSCALE (1<<FSHIFT)
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ucred.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 3 4
#define _BSM_AUDIT_H 




#define AUDIT_RECORD_MAGIC 0x828a0f1b
#define MAX_AUDIT_RECORDS 20
#define MAXAUDITDATA (0x8000 - 1)
#define MAX_AUDIT_RECORD_SIZE MAXAUDITDATA
#define MIN_AUDIT_FILE_SIZE (512 * 1024)







#define AUDIT_HARD_LIMIT_FREE_BLOCKS 4




#define AUDIT_TRIGGER_MIN 1
#define AUDIT_TRIGGER_LOW_SPACE 1
#define AUDIT_TRIGGER_ROTATE_KERNEL 2
#define AUDIT_TRIGGER_READ_FILE 3
#define AUDIT_TRIGGER_CLOSE_AND_DIE 4
#define AUDIT_TRIGGER_NO_SPACE 5
#define AUDIT_TRIGGER_ROTATE_USER 6
#define AUDIT_TRIGGER_INITIALIZE 7
#define AUDIT_TRIGGER_EXPIRE_TRAILS 8
#define AUDIT_TRIGGER_MAX 8




#define AUDITDEV_FILENAME "audit"
#define AUDIT_TRIGGER_FILE ("/dev/" AUDITDEV_FILENAME)




#define AU_DEFAUDITID (uid_t)(-1)
#define AU_DEFAUDITSID 0
#define AU_ASSIGN_ASID -1




#define AT_IPC_MSG ((unsigned char)1)
#define AT_IPC_SEM ((unsigned char)2)
#define AT_IPC_SHM ((unsigned char)3)




#define AUC_UNSET 0
#define AUC_AUDITING 1
#define AUC_NOAUDIT 2
#define AUC_DISABLED -1




#define A_OLDGETPOLICY 2
#define A_OLDSETPOLICY 3
#define A_GETKMASK 4
#define A_SETKMASK 5
#define A_OLDGETQCTRL 6
#define A_OLDSETQCTRL 7
#define A_GETCWD 8
#define A_GETCAR 9
#define A_GETSTAT 12
#define A_SETSTAT 13
#define A_SETUMASK 14
#define A_SETSMASK 15
#define A_OLDGETCOND 20
#define A_OLDSETCOND 21
#define A_GETCLASS 22
#define A_SETCLASS 23
#define A_GETPINFO 24
#define A_SETPMASK 25
#define A_SETFSIZE 26
#define A_GETFSIZE 27
#define A_GETPINFO_ADDR 28
#define A_GETKAUDIT 29
#define A_SETKAUDIT 30
#define A_SENDTRIGGER 31
#define A_GETSINFO_ADDR 32
#define A_GETPOLICY 33
#define A_SETPOLICY 34
#define A_GETQCTRL 35
#define A_SETQCTRL 36
#define A_GETCOND 37
#define A_SETCOND 38
#define A_GETSFLAGS 39
#define A_SETSFLAGS 40
#define A_GETCTLMODE 41
#define A_SETCTLMODE 42
#define A_GETEXPAFTER 43
#define A_SETEXPAFTER 44




#define AUDIT_CNT 0x0001
#define AUDIT_AHLT 0x0002
#define AUDIT_ARGV 0x0004
#define AUDIT_ARGE 0x0008
#define AUDIT_SEQ 0x0010
#define AUDIT_WINDATA 0x0020
#define AUDIT_USER 0x0040
#define AUDIT_GROUP 0x0080
#define AUDIT_TRAIL 0x0100
#define AUDIT_PATH 0x0200
#define AUDIT_SCNT 0x0400
#define AUDIT_PUBLIC 0x0800
#define AUDIT_ZONENAME 0x1000
#define AUDIT_PERZONE 0x2000




#define AQ_HIWATER 100
#define AQ_MAXHIGH 10000
#define AQ_LOWATER 10
#define AQ_BUFSZ MAXAUDITDATA
#define AQ_MAXBUFSZ 1048576




#define AU_FS_MINFREE 20





#define AU_IPv4 4
#define AU_IPv6 16





#define AU_CLASS_MASK_RESERVED 0x10000000




#define AUDIT_CTLMODE_NORMAL ((unsigned char)1)
#define AUDIT_CTLMODE_EXTERNAL ((unsigned char)2)




#define AUDIT_EXPIRE_OP_AND ((unsigned char)0)
#define AUDIT_EXPIRE_OP_OR ((unsigned char)1)



typedef uid_t au_id_t;
typedef pid_t au_asid_t;
typedef u_int16_t au_event_t;
typedef u_int16_t au_emod_t;
typedef u_int32_t au_class_t;
typedef u_int64_t au_asflgs_t __attribute__ ((aligned(8)));
typedef unsigned char au_ctlmode_t;

struct au_tid {
 dev_t port;
 u_int32_t machine;
};
typedef struct au_tid au_tid_t;

struct au_tid_addr {
 dev_t at_port;
 u_int32_t at_type;
 u_int32_t at_addr[4];
};
typedef struct au_tid_addr au_tid_addr_t;

struct au_mask {
 unsigned int am_success;
 unsigned int am_failure;
};
typedef struct au_mask au_mask_t;

struct auditinfo {
 au_id_t ai_auid;
 au_mask_t ai_mask;
 au_tid_t ai_termid;
 au_asid_t ai_asid;
};
typedef struct auditinfo auditinfo_t;

struct auditinfo_addr {
 au_id_t ai_auid;
 au_mask_t ai_mask;
 au_tid_addr_t ai_termid;
 au_asid_t ai_asid;
 au_asflgs_t ai_flags;
};
typedef struct auditinfo_addr auditinfo_addr_t;

struct auditpinfo {
 pid_t ap_pid;
 au_id_t ap_auid;
 au_mask_t ap_mask;
 au_tid_t ap_termid;
 au_asid_t ap_asid;
};
typedef struct auditpinfo auditpinfo_t;

struct auditpinfo_addr {
 pid_t ap_pid;
 au_id_t ap_auid;
 au_mask_t ap_mask;
 au_tid_addr_t ap_termid;
 au_asid_t ap_asid;
 au_asflgs_t ap_flags;
};
typedef struct auditpinfo_addr auditpinfo_addr_t;

struct au_session {
 auditinfo_addr_t *as_aia_p;
 au_mask_t as_mask;
};
typedef struct au_session au_session_t;

struct au_expire_after {
 time_t age;
 size_t size;
 unsigned char op_type;
};
typedef struct au_expire_after au_expire_after_t;




typedef struct au_token token_t;
# 283 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 3 4
struct au_qctrl {
 int aq_hiwater;


 int aq_lowater;


 int aq_bufsz;
 int aq_delay;
 int aq_minfree;
};
typedef struct au_qctrl au_qctrl_t;




struct audit_stat {
 unsigned int as_version;
 unsigned int as_numevent;
 int as_generated;
 int as_nonattrib;
 int as_kernel;
 int as_audit;
 int as_auditctl;
 int as_enqueue;
 int as_written;
 int as_wblocked;
 int as_rblocked;
 int as_dropped;
 int as_totalsize;
 unsigned int as_memused;
};
typedef struct audit_stat au_stat_t;




struct audit_fstat {
 u_int64_t af_filesz;
 u_int64_t af_currsz;
};
typedef struct audit_fstat au_fstat_t;




struct au_evclass_map {
 au_event_t ec_number;
 au_class_t ec_class;
};
typedef struct au_evclass_map au_evclass_map_t;




#define __AUDIT_API_DEPRECATED __API_DEPRECATED("audit is deprecated", macos(10.4, 11.0))
# 347 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 3 4
int audit(const void *, int)
;
int auditon(int, void *, int)
;
int auditctl(const char *)
;
int getauid(au_id_t *);
int setauid(const au_id_t *);
int getaudit_addr(struct auditinfo_addr *, int);
int setaudit_addr(const struct auditinfo_addr *, int);
# 366 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 3 4
int getaudit(struct auditinfo *)

                               ;
int setaudit(const struct auditinfo *)

                               ;
# 381 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 1 3 4
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
#define _MACH_PORT_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/boolean.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/boolean.h" 3 4
#define _MACH_BOOLEAN_H_ 






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/boolean.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/boolean.h" 3 4
#define _MACH_MACHINE_BOOLEAN_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/boolean.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/boolean.h" 3 4
#define _MACH_I386_BOOLEAN_H_ 


typedef unsigned int boolean_t;
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/boolean.h" 2 3 4
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/boolean.h" 2 3 4







#define TRUE 1



#define FALSE 0
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/vm_types.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/vm_types.h" 3 4
#define _MACH_MACHINE_VM_TYPES_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_types.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_types.h" 3 4
#define _MACH_I386_VM_TYPES_H_ 
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_types.h" 3 4
typedef __darwin_natural_t natural_t;
typedef int integer_t;






typedef uintptr_t vm_offset_t;
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_types.h" 3 4
typedef uintptr_t vm_size_t;
# 123 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_types.h" 3 4
typedef uint64_t mach_vm_address_t;
typedef uint64_t mach_vm_offset_t;
typedef uint64_t mach_vm_size_t;

typedef uint64_t vm_map_offset_t;
typedef uint64_t vm_map_address_t;
typedef uint64_t vm_map_size_t;

typedef mach_vm_address_t mach_port_context_t;







#define MACH_MSG_TYPE_INTEGER_T MACH_MSG_TYPE_INTEGER_32
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/vm_types.h" 2 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 2 3 4
# 106 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_name_t;
typedef mach_port_name_t *mach_port_name_array_t;
# 127 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_mach_port_t.h" 1 3 4
# 48 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_mach_port_t.h" 3 4
#define _MACH_PORT_T 

typedef __darwin_mach_port_t mach_port_t;
# 128 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 2 3 4


typedef mach_port_t *mach_port_array_t;
# 141 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
#define MACH_PORT_NULL 0
#define MACH_PORT_DEAD ((mach_port_name_t) ~0)
#define MACH_PORT_VALID(name) (((name) != MACH_PORT_NULL) && ((name) != MACH_PORT_DEAD))
# 164 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
#define MACH_PORT_INDEX(name) ((name) >> 8)
#define MACH_PORT_GEN(name) (((name) & 0xff) << 24)
#define MACH_PORT_MAKE(index,gen) (((index) << 8) | (gen) >> 24)
# 188 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_right_t;

#define MACH_PORT_RIGHT_SEND ((mach_port_right_t) 0)
#define MACH_PORT_RIGHT_RECEIVE ((mach_port_right_t) 1)
#define MACH_PORT_RIGHT_SEND_ONCE ((mach_port_right_t) 2)
#define MACH_PORT_RIGHT_PORT_SET ((mach_port_right_t) 3)
#define MACH_PORT_RIGHT_DEAD_NAME ((mach_port_right_t) 4)
#define MACH_PORT_RIGHT_LABELH ((mach_port_right_t) 5)
#define MACH_PORT_RIGHT_NUMBER ((mach_port_right_t) 6)


typedef natural_t mach_port_type_t;
typedef mach_port_type_t *mach_port_type_array_t;

#define MACH_PORT_TYPE(right) ((mach_port_type_t)(((mach_port_type_t) 1) << ((right) + ((mach_port_right_t) 16))))


#define MACH_PORT_TYPE_NONE ((mach_port_type_t) 0L)
#define MACH_PORT_TYPE_SEND MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND)
#define MACH_PORT_TYPE_RECEIVE MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE)
#define MACH_PORT_TYPE_SEND_ONCE MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE)
#define MACH_PORT_TYPE_PORT_SET MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET)
#define MACH_PORT_TYPE_DEAD_NAME MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME)
#define MACH_PORT_TYPE_LABELH MACH_PORT_TYPE(MACH_PORT_RIGHT_LABELH)




#define MACH_PORT_TYPE_SEND_RECEIVE (MACH_PORT_TYPE_SEND|MACH_PORT_TYPE_RECEIVE)

#define MACH_PORT_TYPE_SEND_RIGHTS (MACH_PORT_TYPE_SEND|MACH_PORT_TYPE_SEND_ONCE)

#define MACH_PORT_TYPE_PORT_RIGHTS (MACH_PORT_TYPE_SEND_RIGHTS|MACH_PORT_TYPE_RECEIVE)

#define MACH_PORT_TYPE_PORT_OR_DEAD (MACH_PORT_TYPE_PORT_RIGHTS|MACH_PORT_TYPE_DEAD_NAME)

#define MACH_PORT_TYPE_ALL_RIGHTS (MACH_PORT_TYPE_PORT_OR_DEAD|MACH_PORT_TYPE_PORT_SET)




#define MACH_PORT_TYPE_DNREQUEST 0x80000000
#define MACH_PORT_TYPE_SPREQUEST 0x40000000
#define MACH_PORT_TYPE_SPREQUEST_DELAYED 0x20000000



typedef natural_t mach_port_urefs_t;
typedef integer_t mach_port_delta_t;



typedef natural_t mach_port_seqno_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef natural_t mach_port_rights_t;




#define MACH_PORT_SRIGHTS_NONE 0
#define MACH_PORT_SRIGHTS_PRESENT 1
typedef unsigned int mach_port_srights_t;

typedef struct mach_port_status {
 mach_port_rights_t mps_pset;
 mach_port_seqno_t mps_seqno;
 mach_port_mscount_t mps_mscount;
 mach_port_msgcount_t mps_qlimit;
 mach_port_msgcount_t mps_msgcount;
 mach_port_rights_t mps_sorights;
 boolean_t mps_srights;
 boolean_t mps_pdrequest;
 boolean_t mps_nsrequest;
 natural_t mps_flags;
} mach_port_status_t;


#define MACH_PORT_QLIMIT_ZERO (0)
#define MACH_PORT_QLIMIT_BASIC (5)
#define MACH_PORT_QLIMIT_SMALL (16)
#define MACH_PORT_QLIMIT_LARGE (1024)
#define MACH_PORT_QLIMIT_KERNEL (65534)
#define MACH_PORT_QLIMIT_MIN MACH_PORT_QLIMIT_ZERO
#define MACH_PORT_QLIMIT_DEFAULT MACH_PORT_QLIMIT_BASIC
#define MACH_PORT_QLIMIT_MAX MACH_PORT_QLIMIT_LARGE

typedef struct mach_port_limits {
 mach_port_msgcount_t mpl_qlimit;
} mach_port_limits_t;


#define MACH_PORT_STATUS_FLAG_TEMPOWNER 0x01
#define MACH_PORT_STATUS_FLAG_GUARDED 0x02
#define MACH_PORT_STATUS_FLAG_STRICT_GUARD 0x04
#define MACH_PORT_STATUS_FLAG_IMP_DONATION 0x08
#define MACH_PORT_STATUS_FLAG_REVIVE 0x10
#define MACH_PORT_STATUS_FLAG_TASKPTR 0x20
#define MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE 0x40
#define MACH_PORT_STATUS_FLAG_NO_GRANT 0x80

typedef struct mach_port_info_ext {
 mach_port_status_t mpie_status;
 mach_port_msgcount_t mpie_boost_cnt;
 uint32_t reserved[6];
} mach_port_info_ext_t;

typedef integer_t *mach_port_info_t;


typedef int mach_port_flavor_t;
#define MACH_PORT_LIMITS_INFO 1
#define MACH_PORT_RECEIVE_STATUS 2
#define MACH_PORT_DNREQUESTS_SIZE 3
#define MACH_PORT_TEMPOWNER 4
#define MACH_PORT_IMPORTANCE_RECEIVER 5
#define MACH_PORT_DENAP_RECEIVER 6
#define MACH_PORT_INFO_EXT 7

#define MACH_PORT_LIMITS_INFO_COUNT ((natural_t) (sizeof(mach_port_limits_t)/sizeof(natural_t)))

#define MACH_PORT_RECEIVE_STATUS_COUNT ((natural_t) (sizeof(mach_port_status_t)/sizeof(natural_t)))

#define MACH_PORT_DNREQUESTS_SIZE_COUNT 1
#define MACH_PORT_INFO_EXT_COUNT ((natural_t) (sizeof(mach_port_info_ext_t)/sizeof(natural_t)))





typedef struct mach_port_qos {
 unsigned int name:1;
 unsigned int prealloc:1;
 boolean_t pad1:30;
 natural_t len;
} mach_port_qos_t;
# 333 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/port.h" 3 4
#define MPO_CONTEXT_AS_GUARD 0x01
#define MPO_QLIMIT 0x02
#define MPO_TEMPOWNER 0x04
#define MPO_IMPORTANCE_RECEIVER 0x08
#define MPO_INSERT_SEND_RIGHT 0x10
#define MPO_STRICT 0x20
#define MPO_DENAP_RECEIVER 0x40
#define MPO_IMMOVABLE_RECEIVE 0x80
#define MPO_FILTER_MSG 0x100
#define MPO_TG_BLOCK_TRACKING 0x200





typedef struct mach_port_options {
 uint32_t flags;
 mach_port_limits_t mpl;
 union {
  uint64_t reserved[2];
  mach_port_name_t work_interval_port;
 };
}mach_port_options_t;

typedef mach_port_options_t *mach_port_options_ptr_t;






#define GUARD_TYPE_MACH_PORT 0x1


enum mach_port_guard_exception_codes {
 kGUARD_EXC_DESTROY = 1u << 0,
 kGUARD_EXC_MOD_REFS = 1u << 1,
 kGUARD_EXC_SET_CONTEXT = 1u << 2,
 kGUARD_EXC_UNGUARDED = 1u << 3,
 kGUARD_EXC_INCORRECT_GUARD = 1u << 4,
 kGUARD_EXC_IMMOVABLE = 1u << 5,
 kGUARD_EXC_STRICT_REPLY = 1u << 6,
 kGUARD_EXC_MSG_FILTERED = 1u << 7,

 kGUARD_EXC_INVALID_RIGHT = 1u << 8,
 kGUARD_EXC_INVALID_NAME = 1u << 9,
 kGUARD_EXC_INVALID_VALUE = 1u << 10,
 kGUARD_EXC_INVALID_ARGUMENT = 1u << 11,
 kGUARD_EXC_RIGHT_EXISTS = 1u << 12,
 kGUARD_EXC_KERN_NO_SPACE = 1u << 13,
 kGUARD_EXC_KERN_FAILURE = 1u << 14,
 kGUARD_EXC_KERN_RESOURCE = 1u << 15,
 kGUARD_EXC_SEND_INVALID_REPLY = 1u << 16,
 kGUARD_EXC_SEND_INVALID_VOUCHER = 1u << 17,
 kGUARD_EXC_SEND_INVALID_RIGHT = 1u << 18,
 kGUARD_EXC_RCV_INVALID_NAME = 1u << 19,
 kGUARD_EXC_RCV_GUARDED_DESC = 1u << 20,
 kGUARD_EXC_MOD_REFS_NON_FATAL = 1u << 21,
 kGUARD_EXC_IMMOVABLE_NON_FATAL = 1u << 22,
};

#define MAX_FATAL_kGUARD_EXC_CODE (1u << 7)




#define MPG_FLAGS_NONE (0x00ull)




#define MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP (0x01ull << 56)
#define MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT (0x02ull << 56)
#define MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER (0x04ull << 56)
#define MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR (0x08ull << 56)
#define MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA (0x10ull << 56)
#define MPG_FLAGS_STRICT_REPLY_MASK (0xffull << 56)




#define MPG_FLAGS_MOD_REFS_PINNED_DEALLOC (0x01ull << 56)




#define MPG_FLAGS_IMMOVABLE_PINNED (0x01ull << 56)





#define MPG_STRICT 0x01
#define MPG_IMMOVABLE_RECEIVE 0x02
# 382 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/bsm/audit.h" 2 3 4
mach_port_name_t audit_session_self(void);
au_asid_t audit_session_join(mach_port_name_t port);
int audit_session_port(au_asid_t asid, mach_port_name_t *portname);





# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ucred.h" 2 3 4

struct label;


struct ucred;
struct posix_cred;


#define _KAUTH_CRED_T 
typedef struct ucred *kauth_cred_t;
typedef struct posix_cred *posix_cred_t;





#define CRF_NOMEMBERD 0x00000001
#define CRF_MAC_ENFORCE 0x00000002





struct xucred {
 u_int cr_version;
 uid_t cr_uid;
 short cr_ngroups;
 gid_t cr_groups[16];
};
#define XUCRED_VERSION 0

#define cr_gid cr_groups[0]
#define NOCRED ((kauth_cred_t )0)
#define FSCRED ((kauth_cred_t )-1)

#define IS_VALID_CRED(_cr) ((_cr) != NOCRED && (_cr) != FSCRED)
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 2 3 4



#define FSOPT_NOFOLLOW 0x00000001
#define FSOPT_NOINMEMUPDATE 0x00000002
#define FSOPT_REPORT_FULLSIZE 0x00000004

#define FSOPT_PACK_INVAL_ATTRS 0x00000008


#define FSOPT_ATTR_CMN_EXTENDED 0x00000020
#define FSOPT_RETURN_REALDEV 0x00000200






#define SEARCHFS_MAX_SEARCHPARMS 4096

typedef u_int32_t text_encoding_t;

typedef u_int32_t fsobj_type_t;

typedef u_int32_t fsobj_tag_t;

typedef u_int32_t fsfile_type_t;

typedef u_int32_t fsvolid_t;

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsobj_id_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsobj_id_t.h" 3 4
#define _FSOBJ_ID_T 



typedef struct fsobj_id {
 u_int32_t fid_objno;
 u_int32_t fid_generation;
} fsobj_id_t;
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 2 3 4

typedef u_int32_t attrgroup_t;

struct attrlist {
 u_short bitmapcount;
 u_int16_t reserved;
 attrgroup_t commonattr;
 attrgroup_t volattr;
 attrgroup_t dirattr;
 attrgroup_t fileattr;
 attrgroup_t forkattr;
};
#define ATTR_BIT_MAP_COUNT 5

typedef struct attribute_set {
 attrgroup_t commonattr;
 attrgroup_t volattr;
 attrgroup_t dirattr;
 attrgroup_t fileattr;
 attrgroup_t forkattr;
} attribute_set_t;

typedef struct attrreference {
 int32_t attr_dataoffset;
 u_int32_t attr_length;
} attrreference_t;



struct diskextent {
 u_int32_t startblock;
 u_int32_t blockcount;
};

typedef struct diskextent extentrecord[8];

typedef u_int32_t vol_capabilities_set_t[4];

#define VOL_CAPABILITIES_FORMAT 0
#define VOL_CAPABILITIES_INTERFACES 1
#define VOL_CAPABILITIES_RESERVED1 2
#define VOL_CAPABILITIES_RESERVED2 3

typedef struct vol_capabilities_attr {
 vol_capabilities_set_t capabilities;
 vol_capabilities_set_t valid;
} vol_capabilities_attr_t;




#define ATTR_MAX_BUFFER 8192
# 248 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 3 4
#define VOL_CAP_FMT_PERSISTENTOBJECTIDS 0x00000001
#define VOL_CAP_FMT_SYMBOLICLINKS 0x00000002
#define VOL_CAP_FMT_HARDLINKS 0x00000004
#define VOL_CAP_FMT_JOURNAL 0x00000008
#define VOL_CAP_FMT_JOURNAL_ACTIVE 0x00000010
#define VOL_CAP_FMT_NO_ROOT_TIMES 0x00000020
#define VOL_CAP_FMT_SPARSE_FILES 0x00000040
#define VOL_CAP_FMT_ZERO_RUNS 0x00000080
#define VOL_CAP_FMT_CASE_SENSITIVE 0x00000100
#define VOL_CAP_FMT_CASE_PRESERVING 0x00000200
#define VOL_CAP_FMT_FAST_STATFS 0x00000400
#define VOL_CAP_FMT_2TB_FILESIZE 0x00000800
#define VOL_CAP_FMT_OPENDENYMODES 0x00001000
#define VOL_CAP_FMT_HIDDEN_FILES 0x00002000
#define VOL_CAP_FMT_PATH_FROM_ID 0x00004000
#define VOL_CAP_FMT_NO_VOLUME_SIZES 0x00008000
#define VOL_CAP_FMT_DECMPFS_COMPRESSION 0x00010000
#define VOL_CAP_FMT_64BIT_OBJECT_IDS 0x00020000
#define VOL_CAP_FMT_DIR_HARDLINKS 0x00040000
#define VOL_CAP_FMT_DOCUMENT_ID 0x00080000
#define VOL_CAP_FMT_WRITE_GENERATION_COUNT 0x00100000
#define VOL_CAP_FMT_NO_IMMUTABLE_FILES 0x00200000
#define VOL_CAP_FMT_NO_PERMISSIONS 0x00400000
#define VOL_CAP_FMT_SHARED_SPACE 0x00800000
#define VOL_CAP_FMT_VOL_GROUPS 0x01000000
#define VOL_CAP_FMT_SEALED 0x02000000
# 345 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 3 4
#define VOL_CAP_INT_SEARCHFS 0x00000001
#define VOL_CAP_INT_ATTRLIST 0x00000002
#define VOL_CAP_INT_NFSEXPORT 0x00000004
#define VOL_CAP_INT_READDIRATTR 0x00000008
#define VOL_CAP_INT_EXCHANGEDATA 0x00000010
#define VOL_CAP_INT_COPYFILE 0x00000020
#define VOL_CAP_INT_ALLOCATE 0x00000040
#define VOL_CAP_INT_VOL_RENAME 0x00000080
#define VOL_CAP_INT_ADVLOCK 0x00000100
#define VOL_CAP_INT_FLOCK 0x00000200
#define VOL_CAP_INT_EXTENDED_SECURITY 0x00000400
#define VOL_CAP_INT_USERACCESS 0x00000800
#define VOL_CAP_INT_MANLOCK 0x00001000
#define VOL_CAP_INT_NAMEDSTREAMS 0x00002000
#define VOL_CAP_INT_EXTENDED_ATTR 0x00004000
#define VOL_CAP_INT_CLONE 0x00010000
#define VOL_CAP_INT_SNAPSHOT 0x00020000
#define VOL_CAP_INT_RENAME_SWAP 0x00040000
#define VOL_CAP_INT_RENAME_EXCL 0x00080000
#define VOL_CAP_INT_RENAME_OPENFAIL 0x00100000

typedef struct vol_attributes_attr {
 attribute_set_t validattr;
 attribute_set_t nativeattr;
} vol_attributes_attr_t;

#define ATTR_CMN_NAME 0x00000001
#define ATTR_CMN_DEVID 0x00000002
#define ATTR_CMN_FSID 0x00000004
#define ATTR_CMN_OBJTYPE 0x00000008
#define ATTR_CMN_OBJTAG 0x00000010
#define ATTR_CMN_OBJID 0x00000020
#define ATTR_CMN_OBJPERMANENTID 0x00000040
#define ATTR_CMN_PAROBJID 0x00000080
#define ATTR_CMN_SCRIPT 0x00000100
#define ATTR_CMN_CRTIME 0x00000200
#define ATTR_CMN_MODTIME 0x00000400
#define ATTR_CMN_CHGTIME 0x00000800
#define ATTR_CMN_ACCTIME 0x00001000
#define ATTR_CMN_BKUPTIME 0x00002000
#define ATTR_CMN_FNDRINFO 0x00004000
#define ATTR_CMN_OWNERID 0x00008000
#define ATTR_CMN_GRPID 0x00010000
#define ATTR_CMN_ACCESSMASK 0x00020000
#define ATTR_CMN_FLAGS 0x00040000
# 400 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 3 4
#define ATTR_CMN_GEN_COUNT 0x00080000
#define ATTR_CMN_DOCUMENT_ID 0x00100000

#define ATTR_CMN_USERACCESS 0x00200000
#define ATTR_CMN_EXTENDED_SECURITY 0x00400000
#define ATTR_CMN_UUID 0x00800000
#define ATTR_CMN_GRPUUID 0x01000000
#define ATTR_CMN_FILEID 0x02000000
#define ATTR_CMN_PARENTID 0x04000000
#define ATTR_CMN_FULLPATH 0x08000000
#define ATTR_CMN_ADDEDTIME 0x10000000
#define ATTR_CMN_ERROR 0x20000000
#define ATTR_CMN_DATA_PROTECT_FLAGS 0x40000000





#define ATTR_CMN_RETURNED_ATTRS 0x80000000

#define ATTR_CMN_VALIDMASK 0xFFFFFFFF
# 444 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/attr.h" 3 4
#define ATTR_CMN_SETMASK 0x51C7FF00
#define ATTR_CMN_VOLSETMASK 0x00006700

#define ATTR_VOL_FSTYPE 0x00000001
#define ATTR_VOL_SIGNATURE 0x00000002
#define ATTR_VOL_SIZE 0x00000004
#define ATTR_VOL_SPACEFREE 0x00000008
#define ATTR_VOL_SPACEAVAIL 0x00000010
#define ATTR_VOL_MINALLOCATION 0x00000020
#define ATTR_VOL_ALLOCATIONCLUMP 0x00000040
#define ATTR_VOL_IOBLOCKSIZE 0x00000080
#define ATTR_VOL_OBJCOUNT 0x00000100
#define ATTR_VOL_FILECOUNT 0x00000200
#define ATTR_VOL_DIRCOUNT 0x00000400
#define ATTR_VOL_MAXOBJCOUNT 0x00000800
#define ATTR_VOL_MOUNTPOINT 0x00001000
#define ATTR_VOL_NAME 0x00002000
#define ATTR_VOL_MOUNTFLAGS 0x00004000
#define ATTR_VOL_MOUNTEDDEVICE 0x00008000
#define ATTR_VOL_ENCODINGSUSED 0x00010000
#define ATTR_VOL_CAPABILITIES 0x00020000
#define ATTR_VOL_UUID 0x00040000
#define ATTR_VOL_QUOTA_SIZE 0x10000000
#define ATTR_VOL_RESERVED_SIZE 0x20000000
#define ATTR_VOL_ATTRIBUTES 0x40000000
#define ATTR_VOL_INFO 0x80000000

#define ATTR_VOL_VALIDMASK 0xF007FFFF






#define ATTR_VOL_SETMASK 0x80002000



#define ATTR_DIR_LINKCOUNT 0x00000001
#define ATTR_DIR_ENTRYCOUNT 0x00000002
#define ATTR_DIR_MOUNTSTATUS 0x00000004
#define ATTR_DIR_ALLOCSIZE 0x00000008
#define ATTR_DIR_IOBLOCKSIZE 0x00000010
#define ATTR_DIR_DATALENGTH 0x00000020


#define DIR_MNTSTATUS_MNTPOINT 0x00000001
#define DIR_MNTSTATUS_TRIGGER 0x00000002

#define ATTR_DIR_VALIDMASK 0x0000003f
#define ATTR_DIR_SETMASK 0x00000000

#define ATTR_FILE_LINKCOUNT 0x00000001
#define ATTR_FILE_TOTALSIZE 0x00000002
#define ATTR_FILE_ALLOCSIZE 0x00000004
#define ATTR_FILE_IOBLOCKSIZE 0x00000008
#define ATTR_FILE_DEVTYPE 0x00000020
#define ATTR_FILE_FORKCOUNT 0x00000080
#define ATTR_FILE_FORKLIST 0x00000100
#define ATTR_FILE_DATALENGTH 0x00000200
#define ATTR_FILE_DATAALLOCSIZE 0x00000400
#define ATTR_FILE_RSRCLENGTH 0x00001000
#define ATTR_FILE_RSRCALLOCSIZE 0x00002000

#define ATTR_FILE_VALIDMASK 0x000037FF




#define ATTR_FILE_SETMASK 0x00000020


#define ATTR_CMNEXT_RELPATH 0x00000004
#define ATTR_CMNEXT_PRIVATESIZE 0x00000008
#define ATTR_CMNEXT_LINKID 0x00000010
#define ATTR_CMNEXT_NOFIRMLINKPATH 0x00000020
#define ATTR_CMNEXT_REALDEVID 0x00000040
#define ATTR_CMNEXT_REALFSID 0x00000080
#define ATTR_CMNEXT_CLONEID 0x00000100
#define ATTR_CMNEXT_EXT_FLAGS 0x00000200
#define ATTR_CMNEXT_RECURSIVE_GENCOUNT 0x00000400

#define ATTR_CMNEXT_VALIDMASK 0x000007fc
#define ATTR_CMNEXT_SETMASK 0x00000000


#define ATTR_FORK_TOTALSIZE 0x00000001
#define ATTR_FORK_ALLOCSIZE 0x00000002
#define ATTR_FORK_RESERVED 0xffffffff

#define ATTR_FORK_VALIDMASK 0x00000003
#define ATTR_FORK_SETMASK 0x00000000


#define ATTR_CMN_NAMEDATTRCOUNT 0x00080000
#define ATTR_CMN_NAMEDATTRLIST 0x00100000
#define ATTR_FILE_CLUMPSIZE 0x00000010
#define ATTR_FILE_FILETYPE 0x00000040
#define ATTR_FILE_DATAEXTENTS 0x00000800
#define ATTR_FILE_RSRCEXTENTS 0x00004000


#define ATTR_BULK_REQUIRED (ATTR_CMN_NAME | ATTR_CMN_RETURNED_ATTRS)




#define SRCHFS_START 0x00000001
#define SRCHFS_MATCHPARTIALNAMES 0x00000002
#define SRCHFS_MATCHDIRS 0x00000004
#define SRCHFS_MATCHFILES 0x00000008
#define SRCHFS_SKIPLINKS 0x00000010
#define SRCHFS_SKIPINVISIBLE 0x00000020
#define SRCHFS_SKIPPACKAGES 0x00000040
#define SRCHFS_SKIPINAPPROPRIATE 0x00000080

#define SRCHFS_NEGATEPARAMS 0x80000000
#define SRCHFS_VALIDOPTIONSMASK 0x800000FF

struct fssearchblock {
 struct attrlist *returnattrs;
 void *returnbuffer;
 size_t returnbuffersize;
 u_long maxmatches;
 struct timeval timelimit;
 void *searchparams1;
 size_t sizeofsearchparams1;
 void *searchparams2;
 size_t sizeofsearchparams2;
 struct attrlist searchattrs;
};


struct searchstate {
 uint32_t ss_union_flags;
 uint32_t ss_union_layer;
 u_char ss_fsstate[548];
} __attribute__((packed));

#define FST_EOF (-1)
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 2 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 1 3 4
# 31 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define __OS_BASE__ 
# 55 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#undef OS_INLINE

#define OS_NORETURN __attribute__((__noreturn__))
#define OS_NOTHROW __attribute__((__nothrow__))
#define OS_NONNULL1 __attribute__((__nonnull__(1)))
#define OS_NONNULL2 __attribute__((__nonnull__(2)))
#define OS_NONNULL3 __attribute__((__nonnull__(3)))
#define OS_NONNULL4 __attribute__((__nonnull__(4)))
#define OS_NONNULL5 __attribute__((__nonnull__(5)))
#define OS_NONNULL6 __attribute__((__nonnull__(6)))
#define OS_NONNULL7 __attribute__((__nonnull__(7)))
#define OS_NONNULL8 __attribute__((__nonnull__(8)))
#define OS_NONNULL9 __attribute__((__nonnull__(9)))
#define OS_NONNULL10 __attribute__((__nonnull__(10)))
#define OS_NONNULL11 __attribute__((__nonnull__(11)))
#define OS_NONNULL12 __attribute__((__nonnull__(12)))
#define OS_NONNULL13 __attribute__((__nonnull__(13)))
#define OS_NONNULL14 __attribute__((__nonnull__(14)))
#define OS_NONNULL15 __attribute__((__nonnull__(15)))
#define OS_NONNULL_ALL __attribute__((__nonnull__))
#define OS_SENTINEL __attribute__((__sentinel__))
#define OS_PURE __attribute__((__pure__))
#define OS_CONST __attribute__((__const__))
#define OS_WARN_RESULT __attribute__((__warn_unused_result__))
#define OS_MALLOC __attribute__((__malloc__))
#define OS_USED __attribute__((__used__))
#define OS_UNUSED __attribute__((__unused__))
#define OS_COLD __attribute__((__cold__))
#define OS_WEAK __attribute__((__weak__))
#define OS_WEAK_IMPORT __attribute__((__weak_import__))
#define OS_NOINLINE __attribute__((__noinline__))
#define OS_ALWAYS_INLINE __attribute__((__always_inline__))
#define OS_TRANSPARENT_UNION __attribute__((__transparent_union__))
#define OS_ALIGNED(n) __attribute__((__aligned__((n))))
#define OS_FORMAT_PRINTF(x,y) __attribute__((__format__(printf,x,y)))
#define OS_EXPORT extern __attribute__((__visibility__("default")))
#define OS_INLINE static __inline__
#define OS_EXPECT(x,v) __builtin_expect((x), (v))
# 135 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define OS_NOESCAPE 





#define OS_FALLTHROUGH __attribute__((__fallthrough__))
# 150 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define OS_ASSUME_NONNULL_BEGIN 
#define OS_ASSUME_NONNULL_END 





#define OS_COMPILER_CAN_ASSUME(expr) ((void)(expr))





#define OS_OVERLOADABLE 






#define __OS_ENUM_ATTR 
#define __OS_ENUM_ATTR_CLOSED 
# 184 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define __OS_OPTIONS_ATTR 
# 228 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define __OS_ENUM_C_FALLBACK(_name,_type,...) typedef _type _name ##_t; enum _name { __VA_ARGS__ }


#define OS_ENUM(_name,_type,...) typedef _type _name ##_t; enum { __VA_ARGS__ }

#define OS_CLOSED_ENUM(_name,_type,...) __OS_ENUM_C_FALLBACK(_name, _type, ## __VA_ARGS__) __OS_ENUM_ATTR_CLOSED


#define OS_OPTIONS(_name,_type,...) __OS_ENUM_C_FALLBACK(_name, _type, ## __VA_ARGS__) __OS_ENUM_ATTR __OS_OPTIONS_ATTR


#define OS_CLOSED_OPTIONS(_name,_type,...) __OS_ENUM_C_FALLBACK(_name, _type, ## __VA_ARGS__) __OS_ENUM_ATTR_CLOSED __OS_OPTIONS_ATTR
# 249 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define OS_SWIFT_UNAVAILABLE(_msg) 





#define OS_REFINED_FOR_SWIFT 





#define OS_SWIFT_NAME(_name) 


#define __OS_STRINGIFY(s) #s
#define OS_STRINGIFY(s) __OS_STRINGIFY(s)
#define __OS_CONCAT(x,y) x ## y
#define OS_CONCAT(x,y) __OS_CONCAT(x, y)


#define os_prevent_tail_call_optimization() __asm__("")
#define os_is_compile_time_constant(expr) __builtin_constant_p(expr)
#define os_compiler_barrier() __asm__ __volatile__("" ::: "memory")
# 282 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/os/base.h" 3 4
#define OS_NOT_TAIL_CALLED 



typedef void (*os_function_t)(void *);
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 2 3 4



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 1 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define _SYS_QUEUE_H_ 


#define __improbable(x) (x)
# 174 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define QMD_TRACE_ELEM(elem) 
#define QMD_TRACE_HEAD(head) 
#define TRACEBUF 
#define TRASHIT(x) 
# 201 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define __MISMATCH_TAGS_PUSH 
#define __MISMATCH_TAGS_POP 
# 229 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define __NULLABILITY_COMPLETENESS_PUSH 
#define __NULLABILITY_COMPLETENESS_POP 





#define SLIST_HEAD(name,type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct name { struct type *slh_first; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 245 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define SLIST_HEAD_INITIALIZER(head) { NULL }


#define SLIST_ENTRY(type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct { struct type *sle_next; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 260 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define SLIST_EMPTY(head) ((head)->slh_first == NULL)

#define SLIST_FIRST(head) ((head)->slh_first)

#define SLIST_FOREACH(var,head,field) for ((var) = SLIST_FIRST((head)); (var); (var) = SLIST_NEXT((var), field))




#define SLIST_FOREACH_SAFE(var,head,field,tvar) for ((var) = SLIST_FIRST((head)); (var) && ((tvar) = SLIST_NEXT((var), field), 1); (var) = (tvar))




#define SLIST_FOREACH_PREVPTR(var,varp,head,field) for ((varp) = &SLIST_FIRST((head)); ((var) = *(varp)) != NULL; (varp) = &SLIST_NEXT((var), field))




#define SLIST_INIT(head) do { SLIST_FIRST((head)) = NULL; } while (0)



#define SLIST_INSERT_AFTER(slistelm,elm,field) do { SLIST_NEXT((elm), field) = SLIST_NEXT((slistelm), field); SLIST_NEXT((slistelm), field) = (elm); } while (0)




#define SLIST_INSERT_HEAD(head,elm,field) do { SLIST_NEXT((elm), field) = SLIST_FIRST((head)); SLIST_FIRST((head)) = (elm); } while (0)




#define SLIST_NEXT(elm,field) ((elm)->field.sle_next)

#define SLIST_REMOVE(head,elm,type,field) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH do { if (SLIST_FIRST((head)) == (elm)) { SLIST_REMOVE_HEAD((head), field); } else { struct type *curelm = SLIST_FIRST((head)); while (SLIST_NEXT(curelm, field) != (elm)) curelm = SLIST_NEXT(curelm, field); SLIST_REMOVE_AFTER(curelm, field); } TRASHIT((elm)->field.sle_next); } while (0) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 313 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define SLIST_REMOVE_AFTER(elm,field) do { SLIST_NEXT(elm, field) = SLIST_NEXT(SLIST_NEXT(elm, field), field); } while (0)




#define SLIST_REMOVE_HEAD(head,field) do { SLIST_FIRST((head)) = SLIST_NEXT(SLIST_FIRST((head)), field); } while (0)






#define STAILQ_HEAD(name,type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct name { struct type *stqh_first; struct type **stqh_last; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 335 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define STAILQ_HEAD_INITIALIZER(head) { NULL, &(head).stqh_first }


#define STAILQ_ENTRY(type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct { struct type *stqe_next; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 350 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define STAILQ_CONCAT(head1,head2) do { if (!STAILQ_EMPTY((head2))) { *(head1)->stqh_last = (head2)->stqh_first; (head1)->stqh_last = (head2)->stqh_last; STAILQ_INIT((head2)); } } while (0)







#define STAILQ_EMPTY(head) ((head)->stqh_first == NULL)

#define STAILQ_FIRST(head) ((head)->stqh_first)

#define STAILQ_FOREACH(var,head,field) for((var) = STAILQ_FIRST((head)); (var); (var) = STAILQ_NEXT((var), field))





#define STAILQ_FOREACH_SAFE(var,head,field,tvar) for ((var) = STAILQ_FIRST((head)); (var) && ((tvar) = STAILQ_NEXT((var), field), 1); (var) = (tvar))




#define STAILQ_INIT(head) do { STAILQ_FIRST((head)) = NULL; (head)->stqh_last = &STAILQ_FIRST((head)); } while (0)




#define STAILQ_INSERT_AFTER(head,tqelm,elm,field) do { if ((STAILQ_NEXT((elm), field) = STAILQ_NEXT((tqelm), field)) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); STAILQ_NEXT((tqelm), field) = (elm); } while (0)





#define STAILQ_INSERT_HEAD(head,elm,field) do { if ((STAILQ_NEXT((elm), field) = STAILQ_FIRST((head))) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); STAILQ_FIRST((head)) = (elm); } while (0)





#define STAILQ_INSERT_TAIL(head,elm,field) do { STAILQ_NEXT((elm), field) = NULL; *(head)->stqh_last = (elm); (head)->stqh_last = &STAILQ_NEXT((elm), field); } while (0)





#define STAILQ_LAST(head,type,field) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH (STAILQ_EMPTY((head)) ? NULL : ((struct type *)(void *) ((char *)((head)->stqh_last) - __offsetof(struct type, field))))__NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 406 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define STAILQ_NEXT(elm,field) ((elm)->field.stqe_next)

#define STAILQ_REMOVE(head,elm,type,field) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH do { if (STAILQ_FIRST((head)) == (elm)) { STAILQ_REMOVE_HEAD((head), field); } else { struct type *curelm = STAILQ_FIRST((head)); while (STAILQ_NEXT(curelm, field) != (elm)) curelm = STAILQ_NEXT(curelm, field); STAILQ_REMOVE_AFTER(head, curelm, field); } TRASHIT((elm)->field.stqe_next); } while (0) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 426 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define STAILQ_REMOVE_HEAD(head,field) do { if ((STAILQ_FIRST((head)) = STAILQ_NEXT(STAILQ_FIRST((head)), field)) == NULL) (head)->stqh_last = &STAILQ_FIRST((head)); } while (0)





#define STAILQ_REMOVE_HEAD_UNTIL(head,elm,field) do { if ((STAILQ_FIRST((head)) = STAILQ_NEXT((elm), field)) == NULL) (head)->stqh_last = &STAILQ_FIRST((head)); } while (0)




#define STAILQ_REMOVE_AFTER(head,elm,field) do { if ((STAILQ_NEXT(elm, field) = STAILQ_NEXT(STAILQ_NEXT(elm, field), field)) == NULL) (head)->stqh_last = &STAILQ_NEXT((elm), field); } while (0)





#define STAILQ_SWAP(head1,head2,type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH do { struct type *swap_first = STAILQ_FIRST(head1); struct type **swap_last = (head1)->stqh_last; STAILQ_FIRST(head1) = STAILQ_FIRST(head2); (head1)->stqh_last = (head2)->stqh_last; STAILQ_FIRST(head2) = swap_first; (head2)->stqh_last = swap_last; if (STAILQ_EMPTY(head1)) (head1)->stqh_last = &STAILQ_FIRST(head1); if (STAILQ_EMPTY(head2)) (head2)->stqh_last = &STAILQ_FIRST(head2); } while (0) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 465 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define LIST_HEAD(name,type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct name { struct type *lh_first; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 474 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define LIST_HEAD_INITIALIZER(head) { NULL }


#define LIST_ENTRY(type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct { struct type *le_next; struct type **le_prev; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 491 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define LIST_CHECK_HEAD(head,field) 
#define LIST_CHECK_NEXT(elm,field) 
#define LIST_CHECK_PREV(elm,field) 

#define LIST_EMPTY(head) ((head)->lh_first == NULL)

#define LIST_FIRST(head) ((head)->lh_first)

#define LIST_FOREACH(var,head,field) for ((var) = LIST_FIRST((head)); (var); (var) = LIST_NEXT((var), field))




#define LIST_FOREACH_SAFE(var,head,field,tvar) for ((var) = LIST_FIRST((head)); (var) && ((tvar) = LIST_NEXT((var), field), 1); (var) = (tvar))




#define LIST_INIT(head) do { LIST_FIRST((head)) = NULL; } while (0)



#define LIST_INSERT_AFTER(listelm,elm,field) do { LIST_CHECK_NEXT(listelm, field); if ((LIST_NEXT((elm), field) = LIST_NEXT((listelm), field)) != NULL) LIST_NEXT((listelm), field)->field.le_prev = &LIST_NEXT((elm), field); LIST_NEXT((listelm), field) = (elm); (elm)->field.le_prev = &LIST_NEXT((listelm), field); } while (0)
# 522 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define LIST_INSERT_BEFORE(listelm,elm,field) do { LIST_CHECK_PREV(listelm, field); (elm)->field.le_prev = (listelm)->field.le_prev; LIST_NEXT((elm), field) = (listelm); *(listelm)->field.le_prev = (elm); (listelm)->field.le_prev = &LIST_NEXT((elm), field); } while (0)







#define LIST_INSERT_HEAD(head,elm,field) do { LIST_CHECK_HEAD((head), field); if ((LIST_NEXT((elm), field) = LIST_FIRST((head))) != NULL) LIST_FIRST((head))->field.le_prev = &LIST_NEXT((elm), field); LIST_FIRST((head)) = (elm); (elm)->field.le_prev = &LIST_FIRST((head)); } while (0)







#define LIST_NEXT(elm,field) ((elm)->field.le_next)

#define LIST_REMOVE(elm,field) do { LIST_CHECK_NEXT(elm, field); LIST_CHECK_PREV(elm, field); if (LIST_NEXT((elm), field) != NULL) LIST_NEXT((elm), field)->field.le_prev = (elm)->field.le_prev; *(elm)->field.le_prev = LIST_NEXT((elm), field); TRASHIT((elm)->field.le_next); TRASHIT((elm)->field.le_prev); } while (0)
# 551 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define LIST_SWAP(head1,head2,type,field) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH do { struct type *swap_tmp = LIST_FIRST((head1)); LIST_FIRST((head1)) = LIST_FIRST((head2)); LIST_FIRST((head2)) = swap_tmp; if ((swap_tmp = LIST_FIRST((head1))) != NULL) swap_tmp->field.le_prev = &LIST_FIRST((head1)); if ((swap_tmp = LIST_FIRST((head2))) != NULL) swap_tmp->field.le_prev = &LIST_FIRST((head2)); } while (0) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 569 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_HEAD(name,type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct name { struct type *tqh_first; struct type **tqh_last; TRACEBUF } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 580 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_HEAD_INITIALIZER(head) { NULL, &(head).tqh_first }


#define TAILQ_ENTRY(type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct { struct type *tqe_next; struct type **tqe_prev; TRACEBUF } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 597 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_CHECK_HEAD(head,field) 
#define TAILQ_CHECK_NEXT(elm,field) 
#define TAILQ_CHECK_PREV(elm,field) 

#define TAILQ_CONCAT(head1,head2,field) do { if (!TAILQ_EMPTY(head2)) { *(head1)->tqh_last = (head2)->tqh_first; (head2)->tqh_first->field.tqe_prev = (head1)->tqh_last; (head1)->tqh_last = (head2)->tqh_last; TAILQ_INIT((head2)); QMD_TRACE_HEAD(head1); QMD_TRACE_HEAD(head2); } } while (0)
# 612 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_EMPTY(head) ((head)->tqh_first == NULL)

#define TAILQ_FIRST(head) ((head)->tqh_first)

#define TAILQ_FOREACH(var,head,field) for ((var) = TAILQ_FIRST((head)); (var); (var) = TAILQ_NEXT((var), field))




#define TAILQ_FOREACH_SAFE(var,head,field,tvar) for ((var) = TAILQ_FIRST((head)); (var) && ((tvar) = TAILQ_NEXT((var), field), 1); (var) = (tvar))




#define TAILQ_FOREACH_REVERSE(var,head,headname,field) for ((var) = TAILQ_LAST((head), headname); (var); (var) = TAILQ_PREV((var), headname, field))




#define TAILQ_FOREACH_REVERSE_SAFE(var,head,headname,field,tvar) for ((var) = TAILQ_LAST((head), headname); (var) && ((tvar) = TAILQ_PREV((var), headname, field), 1); (var) = (tvar))





#define TAILQ_INIT(head) do { TAILQ_FIRST((head)) = NULL; (head)->tqh_last = &TAILQ_FIRST((head)); QMD_TRACE_HEAD(head); } while (0)






#define TAILQ_INSERT_AFTER(head,listelm,elm,field) do { TAILQ_CHECK_NEXT(listelm, field); if ((TAILQ_NEXT((elm), field) = TAILQ_NEXT((listelm), field)) != NULL) TAILQ_NEXT((elm), field)->field.tqe_prev = &TAILQ_NEXT((elm), field); else { (head)->tqh_last = &TAILQ_NEXT((elm), field); QMD_TRACE_HEAD(head); } TAILQ_NEXT((listelm), field) = (elm); (elm)->field.tqe_prev = &TAILQ_NEXT((listelm), field); QMD_TRACE_ELEM(&(elm)->field); QMD_TRACE_ELEM(&listelm->field); } while (0)
# 659 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_INSERT_BEFORE(listelm,elm,field) do { TAILQ_CHECK_PREV(listelm, field); (elm)->field.tqe_prev = (listelm)->field.tqe_prev; TAILQ_NEXT((elm), field) = (listelm); *(listelm)->field.tqe_prev = (elm); (listelm)->field.tqe_prev = &TAILQ_NEXT((elm), field); QMD_TRACE_ELEM(&(elm)->field); QMD_TRACE_ELEM(&listelm->field); } while (0)
# 669 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_INSERT_HEAD(head,elm,field) do { TAILQ_CHECK_HEAD(head, field); if ((TAILQ_NEXT((elm), field) = TAILQ_FIRST((head))) != NULL) TAILQ_FIRST((head))->field.tqe_prev = &TAILQ_NEXT((elm), field); else (head)->tqh_last = &TAILQ_NEXT((elm), field); TAILQ_FIRST((head)) = (elm); (elm)->field.tqe_prev = &TAILQ_FIRST((head)); QMD_TRACE_HEAD(head); QMD_TRACE_ELEM(&(elm)->field); } while (0)
# 682 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_INSERT_TAIL(head,elm,field) do { TAILQ_NEXT((elm), field) = NULL; (elm)->field.tqe_prev = (head)->tqh_last; *(head)->tqh_last = (elm); (head)->tqh_last = &TAILQ_NEXT((elm), field); QMD_TRACE_HEAD(head); QMD_TRACE_ELEM(&(elm)->field); } while (0)
# 691 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_LAST(head,headname) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH (*(((struct headname *)((head)->tqh_last))->tqh_last)) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP






#define TAILQ_NEXT(elm,field) ((elm)->field.tqe_next)

#define TAILQ_PREV(elm,headname,field) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH (*(((struct headname *)((elm)->field.tqe_prev))->tqh_last)) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP






#define TAILQ_REMOVE(head,elm,field) do { TAILQ_CHECK_NEXT(elm, field); TAILQ_CHECK_PREV(elm, field); if ((TAILQ_NEXT((elm), field)) != NULL) TAILQ_NEXT((elm), field)->field.tqe_prev = (elm)->field.tqe_prev; else { (head)->tqh_last = (elm)->field.tqe_prev; QMD_TRACE_HEAD(head); } *(elm)->field.tqe_prev = TAILQ_NEXT((elm), field); TRASHIT((elm)->field.tqe_next); TRASHIT((elm)->field.tqe_prev); QMD_TRACE_ELEM(&(elm)->field); } while (0)
# 726 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define TAILQ_SWAP(head1,head2,type,field) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH do { struct type *swap_first = (head1)->tqh_first; struct type **swap_last = (head1)->tqh_last; (head1)->tqh_first = (head2)->tqh_first; (head1)->tqh_last = (head2)->tqh_last; (head2)->tqh_first = swap_first; (head2)->tqh_last = swap_last; if ((swap_first = (head1)->tqh_first) != NULL) swap_first->field.tqe_prev = &(head1)->tqh_first; else (head1)->tqh_last = &(head1)->tqh_first; if ((swap_first = (head2)->tqh_first) != NULL) swap_first->field.tqe_prev = &(head2)->tqh_first; else (head2)->tqh_last = &(head2)->tqh_first; } while (0) __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 751 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_HEAD(name,type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct name { struct type *cqh_first; struct type *cqh_last; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 761 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_ENTRY(type) __MISMATCH_TAGS_PUSH __NULLABILITY_COMPLETENESS_PUSH struct { struct type *cqe_next; struct type *cqe_prev; } __NULLABILITY_COMPLETENESS_POP __MISMATCH_TAGS_POP
# 774 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_CHECK_HEAD(head,field) 
#define CIRCLEQ_CHECK_NEXT(head,elm,field) 
#define CIRCLEQ_CHECK_PREV(head,elm,field) 

#define CIRCLEQ_EMPTY(head) ((head)->cqh_first == (void *)(head))

#define CIRCLEQ_FIRST(head) ((head)->cqh_first)

#define CIRCLEQ_FOREACH(var,head,field) for((var) = (head)->cqh_first; (var) != (void *)(head); (var) = (var)->field.cqe_next)




#define CIRCLEQ_INIT(head) do { (head)->cqh_first = (void *)(head); (head)->cqh_last = (void *)(head); } while (0)




#define CIRCLEQ_INSERT_AFTER(head,listelm,elm,field) do { CIRCLEQ_CHECK_NEXT(head, listelm, field); (elm)->field.cqe_next = (listelm)->field.cqe_next; (elm)->field.cqe_prev = (listelm); if ((listelm)->field.cqe_next == (void *)(head)) (head)->cqh_last = (elm); else (listelm)->field.cqe_next->field.cqe_prev = (elm); (listelm)->field.cqe_next = (elm); } while (0)
# 803 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_INSERT_BEFORE(head,listelm,elm,field) do { CIRCLEQ_CHECK_PREV(head, listelm, field); (elm)->field.cqe_next = (listelm); (elm)->field.cqe_prev = (listelm)->field.cqe_prev; if ((listelm)->field.cqe_prev == (void *)(head)) (head)->cqh_first = (elm); else (listelm)->field.cqe_prev->field.cqe_next = (elm); (listelm)->field.cqe_prev = (elm); } while (0)
# 814 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_INSERT_HEAD(head,elm,field) do { CIRCLEQ_CHECK_HEAD(head, field); (elm)->field.cqe_next = (head)->cqh_first; (elm)->field.cqe_prev = (void *)(head); if ((head)->cqh_last == (void *)(head)) (head)->cqh_last = (elm); else (head)->cqh_first->field.cqe_prev = (elm); (head)->cqh_first = (elm); } while (0)
# 825 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_INSERT_TAIL(head,elm,field) do { (elm)->field.cqe_next = (void *)(head); (elm)->field.cqe_prev = (head)->cqh_last; if ((head)->cqh_first == (void *)(head)) (head)->cqh_first = (elm); else (head)->cqh_last->field.cqe_next = (elm); (head)->cqh_last = (elm); } while (0)
# 835 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/queue.h" 3 4
#define CIRCLEQ_LAST(head) ((head)->cqh_last)

#define CIRCLEQ_NEXT(elm,field) ((elm)->field.cqe_next)

#define CIRCLEQ_PREV(elm,field) ((elm)->field.cqe_prev)

#define CIRCLEQ_REMOVE(head,elm,field) do { CIRCLEQ_CHECK_NEXT(head, elm, field); CIRCLEQ_CHECK_PREV(head, elm, field); if ((elm)->field.cqe_next == (void *)(head)) (head)->cqh_last = (elm)->field.cqe_prev; else (elm)->field.cqe_next->field.cqe_prev = (elm)->field.cqe_prev; if ((elm)->field.cqe_prev == (void *)(head)) (head)->cqh_first = (elm)->field.cqe_next; else (elm)->field.cqe_prev->field.cqe_next = (elm)->field.cqe_next; } while (0)
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsid_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_fsid_t.h" 3 4
#define _FSID_T 

typedef struct fsid { int32_t val[2]; } fsid_t;
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 2 3 4





#define MFSNAMELEN 15
#define MFSTYPENAMELEN 16


#define MNAMELEN MAXPATHLEN




#define MNT_EXT_ROOT_DATA_VOL 0x00000001

#define __DARWIN_STRUCT_STATFS64 { uint32_t f_bsize; int32_t f_iosize; uint64_t f_blocks; uint64_t f_bfree; uint64_t f_bavail; uint64_t f_files; uint64_t f_ffree; fsid_t f_fsid; uid_t f_owner; uint32_t f_type; uint32_t f_flags; uint32_t f_fssubtype; char f_fstypename[MFSTYPENAMELEN]; char f_mntonname[MAXPATHLEN]; char f_mntfromname[MAXPATHLEN]; uint32_t f_flags_ext; uint32_t f_reserved[7]; }
# 123 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 3 4
struct statfs64 { uint32_t f_bsize; int32_t f_iosize; uint64_t f_blocks; uint64_t f_bfree; uint64_t f_bavail; uint64_t f_files; uint64_t f_ffree; fsid_t f_fsid; uid_t f_owner; uint32_t f_type; uint32_t f_flags; uint32_t f_fssubtype; char f_fstypename[16]; char f_mntonname[1024]; char f_mntfromname[1024]; uint32_t f_flags_ext; uint32_t f_reserved[7]; };





struct statfs { uint32_t f_bsize; int32_t f_iosize; uint64_t f_blocks; uint64_t f_bfree; uint64_t f_bavail; uint64_t f_files; uint64_t f_ffree; fsid_t f_fsid; uid_t f_owner; uint32_t f_type; uint32_t f_flags; uint32_t f_fssubtype; char f_fstypename[16]; char f_mntonname[1024]; char f_mntfromname[1024]; uint32_t f_flags_ext; uint32_t f_reserved[7]; };
# 161 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 3 4
#pragma pack(4)

struct vfsstatfs {
 uint32_t f_bsize;
 size_t f_iosize;
 uint64_t f_blocks;
 uint64_t f_bfree;
 uint64_t f_bavail;
 uint64_t f_bused;
 uint64_t f_files;
 uint64_t f_ffree;
 fsid_t f_fsid;
 uid_t f_owner;
 uint64_t f_flags;
 char f_fstypename[16];
 char f_mntonname[1024];
 char f_mntfromname[1024];
 uint32_t f_fssubtype;
 void *f_reserved[2];
};

#pragma pack()







#define MNT_RDONLY 0x00000001
#define MNT_SYNCHRONOUS 0x00000002
#define MNT_NOEXEC 0x00000004
#define MNT_NOSUID 0x00000008
#define MNT_NODEV 0x00000010
#define MNT_UNION 0x00000020
#define MNT_ASYNC 0x00000040
#define MNT_CPROTECT 0x00000080




#define MNT_EXPORTED 0x00000100





#define MNT_REMOVABLE 0x00000200




#define MNT_QUARANTINE 0x00000400




#define MNT_LOCAL 0x00001000
#define MNT_QUOTA 0x00002000
#define MNT_ROOTFS 0x00004000
#define MNT_DOVOLFS 0x00008000


#define MNT_DONTBROWSE 0x00100000
#define MNT_IGNORE_OWNERSHIP 0x00200000
#define MNT_AUTOMOUNTED 0x00400000
#define MNT_JOURNALED 0x00800000
#define MNT_NOUSERXATTR 0x01000000
#define MNT_DEFWRITE 0x02000000
#define MNT_MULTILABEL 0x04000000
#define MNT_NOATIME 0x10000000
#define MNT_SNAPSHOT 0x40000000
#define MNT_STRICTATIME 0x80000000


#define MNT_UNKNOWNPERMISSIONS MNT_IGNORE_OWNERSHIP






#define MNT_VISFLAGMASK (MNT_RDONLY | MNT_SYNCHRONOUS | MNT_NOEXEC | MNT_NOSUID | MNT_NODEV | MNT_UNION | MNT_ASYNC | MNT_EXPORTED | MNT_QUARANTINE | MNT_LOCAL | MNT_QUOTA | MNT_REMOVABLE | MNT_ROOTFS | MNT_DOVOLFS | MNT_DONTBROWSE | MNT_IGNORE_OWNERSHIP | MNT_AUTOMOUNTED | MNT_JOURNALED | MNT_NOUSERXATTR | MNT_DEFWRITE | MNT_MULTILABEL | MNT_NOATIME | MNT_STRICTATIME | MNT_SNAPSHOT | MNT_CPROTECT)
# 257 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 3 4
#define MNT_UPDATE 0x00010000
#define MNT_NOBLOCK 0x00020000
#define MNT_RELOAD 0x00040000
#define MNT_FORCE 0x00080000
#define MNT_CMDFLAGS (MNT_UPDATE|MNT_NOBLOCK|MNT_RELOAD|MNT_FORCE)
# 271 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mount.h" 3 4
#define VFS_GENERIC 0
#define VFS_NUMMNTOPS 1





#define VFS_MAXTYPENUM 1
#define VFS_CONF 2







#define MNT_WAIT 1
#define MNT_NOWAIT 2
#define MNT_DWAIT 4



struct mount;
typedef struct mount * mount_t;
struct vnode;
typedef struct vnode * vnode_t;



struct vfsconf {
 uint32_t vfc_reserved1;
 char vfc_name[15];
 int vfc_typenum;
 int vfc_refcount;
 int vfc_flags;
 uint32_t vfc_reserved2;
 uint32_t vfc_reserved3;
};

struct vfsidctl {
 int vc_vers;
 fsid_t vc_fsid;
 void *vc_ptr;
 size_t vc_len;
 u_int32_t vc_spare[12];
};



#define VFS_CTL_VERS1 0x01






#define VFS_CTL_OSTATFS 0x00010001
#define VFS_CTL_UMOUNT 0x00010002
#define VFS_CTL_QUERY 0x00010003
#define VFS_CTL_NEWADDR 0x00010004
#define VFS_CTL_TIMEO 0x00010005
#define VFS_CTL_NOLOCKS 0x00010006
#define VFS_CTL_SADDR 0x00010007
#define VFS_CTL_DISC 0x00010008
#define VFS_CTL_SERVERINFO 0x00010009
#define VFS_CTL_NSTATUS 0x0001000A
#define VFS_CTL_STATFS64 0x0001000B






#define VFS_CTL_STATFS VFS_CTL_STATFS64




struct vfsquery {
 u_int32_t vq_flags;
 u_int32_t vq_spare[31];
};

struct vfs_server {
 int32_t vs_minutes;
 u_int8_t vs_server_name[256 * 3];
};




struct netfs_status {
 u_int32_t ns_status;
 char ns_mountopts[512];
 uint32_t ns_waittime;
 uint32_t ns_threadcount;
 uint64_t ns_threadids[0];
};


#define VQ_NOTRESP 0x0001
#define VQ_NEEDAUTH 0x0002
#define VQ_LOWDISK 0x0004
#define VQ_MOUNT 0x0008
#define VQ_UNMOUNT 0x0010
#define VQ_DEAD 0x0020
#define VQ_ASSIST 0x0040
#define VQ_NOTRESPLOCK 0x0080
#define VQ_UPDATE 0x0100
#define VQ_VERYLOWDISK 0x0200
#define VQ_SYNCEVENT 0x0400
#define VQ_SERVEREVENT 0x0800
#define VQ_QUOTA 0x1000
#define VQ_NEARLOWDISK 0x2000
#define VQ_DESIRED_DISK 0x4000
#define VQ_FREE_SPACE_CHANGE 0x8000
#define VQ_FLAG10000 0x10000







#define NFS_MAX_FH_SIZE NFSV4_MAX_FH_SIZE
#define NFSV4_MAX_FH_SIZE 128
#define NFSV3_MAX_FH_SIZE 64
#define NFSV2_MAX_FH_SIZE 32
struct fhandle {
 unsigned int fh_len;
 unsigned char fh_data[128];
};
typedef struct fhandle fhandle_t;



int fhopen(const struct fhandle *, int);
int fstatfs(int, struct statfs *) __asm("_" "fstatfs" "$INODE64");

int fstatfs64(int, struct statfs64 *) ;

int getfh(const char *, fhandle_t *);
int getfsstat(struct statfs *, int, int) __asm("_" "getfsstat" "$INODE64");

int getfsstat64(struct statfs64 *, int, int) ;

int getmntinfo(struct statfs **, int) __asm("_" "getmntinfo" "$INODE64");
int getmntinfo_r_np(struct statfs **, int) __asm("_" "getmntinfo_r_np" "$INODE64")

 ;

int getmntinfo64(struct statfs64 **, int) ;

int mount(const char *, const char *, int, void *);
int fmount(const char *, int, int, void *) ;
int statfs(const char *, struct statfs *) __asm("_" "statfs" "$INODE64");

int statfs64(const char *, struct statfs64 *) ;

int unmount(const char *, int);
int getvfsbyname(const char *, struct vfsconf *);

# 32 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/filio.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/filio.h" 3 4
#define _SYS_FILIO_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioccom.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioccom.h" 3 4
#define _SYS_IOCCOM_H_ 
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioccom.h" 3 4
#define IOCPARM_MASK 0x1fff
#define IOCPARM_LEN(x) (((x) >> 16) & IOCPARM_MASK)
#define IOCBASECMD(x) ((x) & ~(IOCPARM_MASK << 16))
#define IOCGROUP(x) (((x) >> 8) & 0xff)

#define IOCPARM_MAX (IOCPARM_MASK + 1)

#define IOC_VOID (__uint32_t)0x20000000

#define IOC_OUT (__uint32_t)0x40000000

#define IOC_IN (__uint32_t)0x80000000

#define IOC_INOUT (IOC_IN|IOC_OUT)

#define IOC_DIRMASK (__uint32_t)0xe0000000

#define _IOC(inout,group,num,len) (inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))

#define _IO(g,n) _IOC(IOC_VOID, (g), (n), 0)
#define _IOR(g,n,t) _IOC(IOC_OUT, (g), (n), sizeof(t))
#define _IOW(g,n,t) _IOC(IOC_IN, (g), (n), sizeof(t))

#define _IOWR(g,n,t) _IOC(IOC_INOUT, (g), (n), sizeof(t))
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/filio.h" 2 3 4


#define FIOCLEX _IO('f', 1)
#define FIONCLEX _IO('f', 2)
#define FIONREAD _IOR('f', 127, int)
#define FIONBIO _IOW('f', 126, int)
#define FIOASYNC _IOW('f', 125, int)
#define FIOSETOWN _IOW('f', 124, int)
#define FIOGETOWN _IOR('f', 123, int)
#define FIODTYPE _IOR('f', 122, int)
# 34 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioctl.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioctl.h" 3 4
#define _SYS_IOCTL_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ttycom.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ttycom.h" 3 4
#define _SYS_TTYCOM_H_ 
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ttycom.h" 3 4
struct winsize {
 unsigned short ws_row;
 unsigned short ws_col;
 unsigned short ws_xpixel;
 unsigned short ws_ypixel;
};

#define TIOCMODG _IOR('t', 3, int)
#define TIOCMODS _IOW('t', 4, int)
#define TIOCM_LE 0001
#define TIOCM_DTR 0002
#define TIOCM_RTS 0004
#define TIOCM_ST 0010
#define TIOCM_SR 0020
#define TIOCM_CTS 0040
#define TIOCM_CAR 0100
#define TIOCM_CD TIOCM_CAR
#define TIOCM_RNG 0200
#define TIOCM_RI TIOCM_RNG
#define TIOCM_DSR 0400

#define TIOCEXCL _IO('t', 13)
#define TIOCNXCL _IO('t', 14)

#define TIOCFLUSH _IOW('t', 16, int)

#define TIOCGETA _IOR('t', 19, struct termios)
#define TIOCSETA _IOW('t', 20, struct termios)
#define TIOCSETAW _IOW('t', 21, struct termios)
#define TIOCSETAF _IOW('t', 22, struct termios)
#define TIOCGETD _IOR('t', 26, int)
#define TIOCSETD _IOW('t', 27, int)
#define TIOCIXON _IO('t', 129)
#define TIOCIXOFF _IO('t', 128)

#define TIOCSBRK _IO('t', 123)
#define TIOCCBRK _IO('t', 122)
#define TIOCSDTR _IO('t', 121)
#define TIOCCDTR _IO('t', 120)
#define TIOCGPGRP _IOR('t', 119, int)
#define TIOCSPGRP _IOW('t', 118, int)

#define TIOCOUTQ _IOR('t', 115, int)
#define TIOCSTI _IOW('t', 114, char)
#define TIOCNOTTY _IO('t', 113)
#define TIOCPKT _IOW('t', 112, int)
#define TIOCPKT_DATA 0x00
#define TIOCPKT_FLUSHREAD 0x01
#define TIOCPKT_FLUSHWRITE 0x02
#define TIOCPKT_STOP 0x04
#define TIOCPKT_START 0x08
#define TIOCPKT_NOSTOP 0x10
#define TIOCPKT_DOSTOP 0x20
#define TIOCPKT_IOCTL 0x40
#define TIOCSTOP _IO('t', 111)
#define TIOCSTART _IO('t', 110)
#define TIOCMSET _IOW('t', 109, int)
#define TIOCMBIS _IOW('t', 108, int)
#define TIOCMBIC _IOW('t', 107, int)
#define TIOCMGET _IOR('t', 106, int)
#define TIOCREMOTE _IOW('t', 105, int)
#define TIOCGWINSZ _IOR('t', 104, struct winsize)
#define TIOCSWINSZ _IOW('t', 103, struct winsize)
#define TIOCUCNTL _IOW('t', 102, int)
#define TIOCSTAT _IO('t', 101)
#define UIOCCMD(n) _IO('u', n)
#define TIOCSCONS _IO('t', 99)
#define TIOCCONS _IOW('t', 98, int)
#define TIOCSCTTY _IO('t', 97)
#define TIOCEXT _IOW('t', 96, int)
#define TIOCSIG _IO('t', 95)
#define TIOCDRAIN _IO('t', 94)
#define TIOCMSDTRWAIT _IOW('t', 91, int)
#define TIOCMGDTRWAIT _IOR('t', 90, int)
#define TIOCTIMESTAMP _IOR('t', 89, struct timeval)

#define TIOCDCDTIMESTAMP _IOR('t', 88, struct timeval)

#define TIOCSDRAINWAIT _IOW('t', 87, int)
#define TIOCGDRAINWAIT _IOR('t', 86, int)
#define TIOCDSIMICROCODE _IO('t', 85)

#define TIOCPTYGRANT _IO('t', 84)
#define TIOCPTYGNAME _IOC(IOC_OUT, 't', 83, 128)
#define TIOCPTYUNLK _IO('t', 82)

#define TTYDISC 0
#define TABLDISC 3
#define SLIPDISC 4
#define PPPDISC 5
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioctl.h" 2 3 4






struct ttysize {
 unsigned short ts_lines;
 unsigned short ts_cols;
 unsigned short ts_xxx;
 unsigned short ts_yyy;
};
#define TIOCGSIZE TIOCGWINSZ
#define TIOCSSIZE TIOCSWINSZ




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sockio.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sockio.h" 3 4
#define _SYS_SOCKIO_H_ 






#define SIOCSHIWAT _IOW('s', 0, int)
#define SIOCGHIWAT _IOR('s', 1, int)
#define SIOCSLOWAT _IOW('s', 2, int)
#define SIOCGLOWAT _IOR('s', 3, int)
#define SIOCATMARK _IOR('s', 7, int)
#define SIOCSPGRP _IOW('s', 8, int)
#define SIOCGPGRP _IOR('s', 9, int)




#define SIOCSIFADDR _IOW('i', 12, struct ifreq)
#define SIOCSIFDSTADDR _IOW('i', 14, struct ifreq)
#define SIOCSIFFLAGS _IOW('i', 16, struct ifreq)
#define SIOCGIFFLAGS _IOWR('i', 17, struct ifreq)
#define SIOCSIFBRDADDR _IOW('i', 19, struct ifreq)
#define SIOCSIFNETMASK _IOW('i', 22, struct ifreq)
#define SIOCGIFMETRIC _IOWR('i', 23, struct ifreq)
#define SIOCSIFMETRIC _IOW('i', 24, struct ifreq)
#define SIOCDIFADDR _IOW('i', 25, struct ifreq)
#define SIOCAIFADDR _IOW('i', 26, struct ifaliasreq)

#define SIOCGIFADDR _IOWR('i', 33, struct ifreq)
#define SIOCGIFDSTADDR _IOWR('i', 34, struct ifreq)
#define SIOCGIFBRDADDR _IOWR('i', 35, struct ifreq)
#define SIOCGIFCONF _IOWR('i', 36, struct ifconf)
#define SIOCGIFNETMASK _IOWR('i', 37, struct ifreq)
#define SIOCAUTOADDR _IOWR('i', 38, struct ifreq)
#define SIOCAUTONETMASK _IOW('i', 39, struct ifreq)
#define SIOCARPIPLL _IOWR('i', 40, struct ifreq)

#define SIOCADDMULTI _IOW('i', 49, struct ifreq)
#define SIOCDELMULTI _IOW('i', 50, struct ifreq)
#define SIOCGIFMTU _IOWR('i', 51, struct ifreq)
#define SIOCSIFMTU _IOW('i', 52, struct ifreq)
#define SIOCGIFPHYS _IOWR('i', 53, struct ifreq)
#define SIOCSIFPHYS _IOW('i', 54, struct ifreq)
#define SIOCSIFMEDIA _IOWR('i', 55, struct ifreq)





#define SIOCGIFMEDIA _IOWR('i', 56, struct ifmediareq)

#define SIOCSIFGENERIC _IOW('i', 57, struct ifreq)
#define SIOCGIFGENERIC _IOWR('i', 58, struct ifreq)
#define SIOCRSLVMULTI _IOWR('i', 59, struct rslvmulti_req)

#define SIOCSIFLLADDR _IOW('i', 60, struct ifreq)
#define SIOCGIFSTATUS _IOWR('i', 61, struct ifstat)
#define SIOCSIFPHYADDR _IOW('i', 62, struct ifaliasreq)
#define SIOCGIFPSRCADDR _IOWR('i', 63, struct ifreq)
#define SIOCGIFPDSTADDR _IOWR('i', 64, struct ifreq)
#define SIOCDIFPHYADDR _IOW('i', 65, struct ifreq)

#define SIOCGIFDEVMTU _IOWR('i', 68, struct ifreq)
#define SIOCSIFALTMTU _IOW('i', 69, struct ifreq)
#define SIOCGIFALTMTU _IOWR('i', 72, struct ifreq)
#define SIOCSIFBOND _IOW('i', 70, struct ifreq)
#define SIOCGIFBOND _IOWR('i', 71, struct ifreq)
# 141 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sockio.h" 3 4
#define SIOCGIFXMEDIA _IOWR('i', 72, struct ifmediareq)


#define SIOCSIFCAP _IOW('i', 90, struct ifreq)
#define SIOCGIFCAP _IOWR('i', 91, struct ifreq)

#define SIOCIFCREATE _IOWR('i', 120, struct ifreq)
#define SIOCIFDESTROY _IOW('i', 121, struct ifreq)
#define SIOCIFCREATE2 _IOWR('i', 122, struct ifreq)

#define SIOCSDRVSPEC _IOW('i', 123, struct ifdrv)

#define SIOCGDRVSPEC _IOWR('i', 123, struct ifdrv)

#define SIOCSIFVLAN _IOW('i', 126, struct ifreq)
#define SIOCGIFVLAN _IOWR('i', 127, struct ifreq)
#define SIOCSETVLAN SIOCSIFVLAN
#define SIOCGETVLAN SIOCGIFVLAN

#define SIOCIFGCLONERS _IOWR('i', 129, struct if_clonereq)

#define SIOCGIFASYNCMAP _IOWR('i', 124, struct ifreq)
#define SIOCSIFASYNCMAP _IOW('i', 125, struct ifreq)



#define SIOCGIFMAC _IOWR('i', 130, struct ifreq)
#define SIOCSIFMAC _IOW('i', 131, struct ifreq)
#define SIOCSIFKPI _IOW('i', 134, struct ifreq)
#define SIOCGIFKPI _IOWR('i', 135, struct ifreq)

#define SIOCGIFWAKEFLAGS _IOWR('i', 136, struct ifreq)

#define SIOCGIFFUNCTIONALTYPE _IOWR('i', 173, struct ifreq)

#define SIOCSIF6LOWPAN _IOW('i', 196, struct ifreq)
#define SIOCGIF6LOWPAN _IOWR('i', 197, struct ifreq)
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioctl.h" 2 3 4





int ioctl(int, unsigned long, ...);

# 35 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/uio.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/uio.h" 3 4
#define _SYS_UIO_H_ 
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/uio.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_iovec_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_iovec_t.h" 3 4
#define _STRUCT_IOVEC 

struct iovec {
 void * iov_base;
 size_t iov_len;
};
# 84 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/uio.h" 2 3 4
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/uio.h" 3 4
enum uio_rw { UIO_READ, UIO_WRITE };





ssize_t readv(int, const struct iovec *, int) __asm("_" "readv" );
ssize_t writev(int, const struct iovec *, int) __asm("_" "writev" );



ssize_t preadv(int, const struct iovec *, int, off_t) __asm("_" "preadv" ) ;
ssize_t pwritev(int, const struct iovec *, int, off_t) __asm("_" "pwritev" ) ;




# 36 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define _SYS_STAT_H_ 
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
struct ostat {
 __uint16_t st_dev;
 ino_t st_ino;
 mode_t st_mode;
 nlink_t st_nlink;
 __uint16_t st_uid;
 __uint16_t st_gid;
 __uint16_t st_rdev;
 __int32_t st_size;
 struct timespec st_atimespec;
 struct timespec st_mtimespec;
 struct timespec st_ctimespec;
 __int32_t st_blksize;
 __int32_t st_blocks;
 __uint32_t st_flags;
 __uint32_t st_gen;
};

#define __DARWIN_STRUCT_STAT64_TIMES struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec;
# 158 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define __DARWIN_STRUCT_STAT64 { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; __DARWIN_STRUCT_STAT64_TIMES off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; }
# 182 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
struct stat { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec; off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; };
# 221 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
struct stat64 { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec; off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; };
# 231 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define st_atime st_atimespec.tv_sec
#define st_mtime st_mtimespec.tv_sec
#define st_ctime st_ctimespec.tv_sec
#define st_birthtime st_birthtimespec.tv_sec






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_s_ifmt.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_s_ifmt.h" 3 4
#define S_IFMT 0170000
#define S_IFIFO 0010000
#define S_IFCHR 0020000
#define S_IFDIR 0040000
#define S_IFBLK 0060000
#define S_IFREG 0100000
#define S_IFLNK 0120000
#define S_IFSOCK 0140000

#define S_IFWHT 0160000




#define S_IRWXU 0000700
#define S_IRUSR 0000400
#define S_IWUSR 0000200
#define S_IXUSR 0000100

#define S_IRWXG 0000070
#define S_IRGRP 0000040
#define S_IWGRP 0000020
#define S_IXGRP 0000010

#define S_IRWXO 0000007
#define S_IROTH 0000004
#define S_IWOTH 0000002
#define S_IXOTH 0000001

#define S_ISUID 0004000
#define S_ISGID 0002000
#define S_ISVTX 0001000


#define S_ISTXT S_ISVTX
#define S_IREAD S_IRUSR
#define S_IWRITE S_IWUSR
#define S_IEXEC S_IXUSR
# 242 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 2 3 4







#define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
#define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
#define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
#define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)

#define S_ISWHT(m) (((m) & S_IFMT) == S_IFWHT)
# 275 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define S_TYPEISMQ(buf) (0)
#define S_TYPEISSEM(buf) (0)
#define S_TYPEISSHM(buf) (0)
# 293 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define S_TYPEISTMO(buf) (0)



#define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO)

#define ALLPERMS (S_ISUID|S_ISGID|S_ISTXT|S_IRWXU|S_IRWXG|S_IRWXO)

#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)

#define S_BLKSIZE 512






#define UF_SETTABLE 0x0000ffff
#define UF_NODUMP 0x00000001
#define UF_IMMUTABLE 0x00000002
#define UF_APPEND 0x00000004
#define UF_OPAQUE 0x00000008





#define UF_COMPRESSED 0x00000020



#define UF_TRACKED 0x00000040

#define UF_DATAVAULT 0x00000080



#define UF_HIDDEN 0x00008000




#define SF_SUPPORTED 0x009f0000
#define SF_SETTABLE 0x3fff0000
#define SF_SYNTHETIC 0xc0000000
#define SF_ARCHIVED 0x00010000
#define SF_IMMUTABLE 0x00020000
#define SF_APPEND 0x00040000
#define SF_RESTRICTED 0x00080000
#define SF_NOUNLINK 0x00100000
# 351 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define SF_FIRMLINK 0x00800000







#define SF_DATALESS 0x40000000
# 368 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 3 4
#define EF_MAY_SHARE_BLOCKS 0x00000001
#define EF_NO_XATTRS 0x00000002
#define EF_IS_SYNC_ROOT 0x00000004
#define EF_IS_PURGEABLE 0x00000008
#define EF_IS_SPARSE 0x00000010
#define EF_IS_SYNTHETIC 0x00000020






int chmod(const char *, mode_t) __asm("_" "chmod" );
int fchmod(int, mode_t) __asm("_" "fchmod" );
int fstat(int, struct stat *) __asm("_" "fstat" "$INODE64");
int lstat(const char *, struct stat *) __asm("_" "lstat" "$INODE64");
int mkdir(const char *, mode_t);
int mkfifo(const char *, mode_t);
int stat(const char *, struct stat *) __asm("_" "stat" "$INODE64");
int mknod(const char *, mode_t, dev_t);
mode_t umask(mode_t);


int fchmodat(int, const char *, mode_t, int) ;
int fstatat(int, const char *, struct stat *, int) __asm("_" "fstatat" "$INODE64") ;
int mkdirat(int, const char *, mode_t) ;

#define UTIME_NOW -1
#define UTIME_OMIT -2

int futimens(int __fd, const struct timespec __times[2]) ;
int utimensat(int __fd, const char *__path, const struct timespec __times[2],
    int __flag) ;




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_filesec_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_filesec_t.h" 3 4
#define _FILESEC_T 
struct _filesec;
typedef struct _filesec *filesec_t;
# 406 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/stat.h" 2 3 4

int chflags(const char *, __uint32_t);
int chmodx_np(const char *, filesec_t);
int fchflags(int, __uint32_t);
int fchmodx_np(int, filesec_t);
int fstatx_np(int, struct stat *, filesec_t) __asm("_" "fstatx_np" "$INODE64");
int lchflags(const char *, __uint32_t) ;
int lchmod(const char *, mode_t) ;
int lstatx_np(const char *, struct stat *, filesec_t) __asm("_" "lstatx_np" "$INODE64");
int mkdirx_np(const char *, filesec_t);
int mkfifox_np(const char *, filesec_t);
int statx_np(const char *, struct stat *, filesec_t) __asm("_" "statx_np" "$INODE64");
int umaskx_np(filesec_t) ;



int fstatx64_np(int, struct stat64 *, filesec_t) ;
int lstatx64_np(const char *, struct stat64 *, filesec_t) ;
int statx64_np(const char *, struct stat64 *, filesec_t) ;
int fstat64(int, struct stat64 *) ;
int lstat64(const char *, struct stat64 *) ;
int stat64(const char *, struct stat64 *) ;




# 37 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/fcntl.h" 1 3 4
# 23 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/fcntl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#define _SYS_FCNTL_H_ 
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#define O_RDONLY 0x0000
#define O_WRONLY 0x0001
#define O_RDWR 0x0002
#define O_ACCMODE 0x0003
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#define FREAD 0x00000001
#define FWRITE 0x00000002

#define O_NONBLOCK 0x00000004
#define O_APPEND 0x00000008

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_o_sync.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_o_sync.h" 3 4
#define O_SYNC 0x0080
# 117 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 2 3 4


#define O_SHLOCK 0x00000010
#define O_EXLOCK 0x00000020
#define O_ASYNC 0x00000040
#define O_FSYNC O_SYNC
#define O_NOFOLLOW 0x00000100

#define O_CREAT 0x00000200
#define O_TRUNC 0x00000400
#define O_EXCL 0x00000800


#define O_EVTONLY 0x00008000



#define O_NOCTTY 0x00020000



#define O_DIRECTORY 0x00100000
#define O_SYMLINK 0x00200000



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_o_dsync.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_o_dsync.h" 3 4
#define O_DSYNC 0x400000
# 144 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 2 3 4



#define O_CLOEXEC 0x01000000




#define O_NOFOLLOW_ANY 0x20000000







#define AT_FDCWD -2




#define AT_EACCESS 0x0010
#define AT_SYMLINK_NOFOLLOW 0x0020
#define AT_SYMLINK_FOLLOW 0x0040
#define AT_REMOVEDIR 0x0080

#define AT_REALDEV 0x0200
#define AT_FDONLY 0x0400





#define O_DP_GETRAWENCRYPTED 0x0001
#define O_DP_GETRAWUNENCRYPTED 0x0002
# 189 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#define FAPPEND O_APPEND
#define FASYNC O_ASYNC
#define FFSYNC O_FSYNC
#define FFDSYNC O_DSYNC
#define FNONBLOCK O_NONBLOCK
#define FNDELAY O_NONBLOCK
#define O_NDELAY O_NONBLOCK







#define CPF_OVERWRITE 0x0001
#define CPF_IGNORE_MODE 0x0002
#define CPF_MASK (CPF_OVERWRITE|CPF_IGNORE_MODE)







#define F_DUPFD 0
#define F_GETFD 1
#define F_SETFD 2
#define F_GETFL 3
#define F_SETFL 4
#define F_GETOWN 5
#define F_SETOWN 6
#define F_GETLK 7
#define F_SETLK 8
#define F_SETLKW 9

#define F_SETLKWTIMEOUT 10


#define F_FLUSH_DATA 40
#define F_CHKCLEAN 41
#define F_PREALLOCATE 42
#define F_SETSIZE 43
#define F_RDADVISE 44
#define F_RDAHEAD 45



#define F_NOCACHE 48
#define F_LOG2PHYS 49
#define F_GETPATH 50
#define F_FULLFSYNC 51
#define F_PATHPKG_CHECK 52
#define F_FREEZE_FS 53
#define F_THAW_FS 54
#define F_GLOBAL_NOCACHE 55


#define F_ADDSIGS 59


#define F_ADDFILESIGS 61

#define F_NODIRECT 62


#define F_GETPROTECTIONCLASS 63
#define F_SETPROTECTIONCLASS 64

#define F_LOG2PHYS_EXT 65

#define F_GETLKPID 66




#define F_SETBACKINGSTORE 70
#define F_GETPATH_MTMINFO 71

#define F_GETCODEDIR 72

#define F_SETNOSIGPIPE 73
#define F_GETNOSIGPIPE 74

#define F_TRANSCODEKEY 75

#define F_SINGLE_WRITER 76


#define F_GETPROTECTIONLEVEL 77

#define F_FINDSIGS 78


#define F_ADDFILESIGS_FOR_DYLD_SIM 83


#define F_BARRIERFSYNC 85


#define F_ADDFILESIGS_RETURN 97
#define F_CHECK_LV 98

#define F_PUNCHHOLE 99

#define F_TRIM_ACTIVE_FILE 100

#define F_SPECULATIVE_READ 101

#define F_GETPATH_NOFIRMLINK 102

#define F_ADDFILESIGS_INFO 103
#define F_ADDFILESUPPL 104
#define F_GETSIGSINFO 105


#define FCNTL_FS_SPECIFIC_BASE 0x00010000




#define F_DUPFD_CLOEXEC 67



#define FD_CLOEXEC 1


#define F_RDLCK 1
#define F_UNLCK 2
#define F_WRLCK 3






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_seek_set.h" 1 3 4
# 326 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 2 3 4
# 336 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#define F_ALLOCATECONTIG 0x00000002
#define F_ALLOCATEALL 0x00000004



#define F_PEOFPOSMODE 3

#define F_VOLPOSMODE 4






struct flock {
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
 short l_type;
 short l_whence;
};
# 365 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
struct flocktimeout {
 struct flock fl;
 struct timespec timeout;
};
# 378 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
struct radvisory {
 off_t ra_offset;
 int ra_count;
};
# 390 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#define USER_FSIGNATURES_CDHASH_LEN 20
typedef struct fsignatures {
 off_t fs_file_start;
 void *fs_blob_start;
 size_t fs_blob_size;



 size_t fs_fsignatures_size;
 char fs_cdhash[20];
 int fs_hash_type;
} fsignatures_t;

typedef struct fsupplement {
 off_t fs_file_start;
 off_t fs_blob_start;
 size_t fs_blob_size;
 int fs_orig_fd;
} fsupplement_t;
# 422 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
typedef struct fchecklv {
 off_t lv_file_start;
 size_t lv_error_message_size;
 void *lv_error_message;
} fchecklv_t;






#define GETSIGSINFO_PLATFORM_BINARY 1


typedef struct fgetsigsinfo {
 off_t fg_file_start;
 int fg_info_request;
 int fg_sig_is_platform;
} fgetsigsinfo_t;



#define LOCK_SH 0x01
#define LOCK_EX 0x02
#define LOCK_NB 0x04
#define LOCK_UN 0x08



typedef struct fstore {
 unsigned int fst_flags;
 int fst_posmode;
 off_t fst_offset;
 off_t fst_length;
 off_t fst_bytesalloc;
} fstore_t;


typedef struct fpunchhole {
 unsigned int fp_flags;
 unsigned int reserved;
 off_t fp_offset;
 off_t fp_length;
} fpunchhole_t;


typedef struct ftrimactivefile {
 off_t fta_offset;
 off_t fta_length;
} ftrimactivefile_t;


typedef struct fspecread {
 unsigned int fsr_flags;
 unsigned int reserved;
 off_t fsr_offset;
 off_t fsr_length;
} fspecread_t;



typedef struct fbootstraptransfer {
 off_t fbt_offset;
 size_t fbt_length;
 void *fbt_buffer;
} fbootstraptransfer_t;
# 511 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
#pragma pack(4)

struct log2phys {
 unsigned int l2p_flags;
 off_t l2p_contigbytes;


 off_t l2p_devoffset;


};

#pragma pack()

#define O_POPUP 0x80000000
#define O_ALERT 0x20000000
# 536 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/fcntl.h" 3 4
typedef enum {
 FILESEC_OWNER = 1,
 FILESEC_GROUP = 2,
 FILESEC_UUID = 3,
 FILESEC_MODE = 4,
 FILESEC_ACL = 5,
 FILESEC_GRPUUID = 6,


 FILESEC_ACL_RAW = 100,
 FILESEC_ACL_ALLOCSIZE = 101
} filesec_property_t;


#define FILESEC_GUID FILESEC_UUID



int open(const char *, int, ...) __asm("_" "open" );

int openat(int, const char *, int, ...) __asm("_" "openat" ) ;

int creat(const char *, mode_t) __asm("_" "creat" );
int fcntl(int, int, ...) __asm("_" "fcntl" );


int openx_np(const char *, int, filesec_t);




int open_dprotected_np( const char *, int, int, int, ...);
int flock(int, int);
filesec_t filesec_init(void);
filesec_t filesec_dup(filesec_t);
void filesec_free(filesec_t);
int filesec_get_property(filesec_t, filesec_property_t, void *);
int filesec_query_property(filesec_t, filesec_property_t, int *);
int filesec_set_property(filesec_t, filesec_property_t, const void *);
int filesec_unset_property(filesec_t, filesec_property_t) ;
#define _FILESEC_UNSET_PROPERTY ((void *)0)
#define _FILESEC_REMOVE_ACL ((void *)1)


# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/fcntl.h" 2 3 4
# 38 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mman.h" 1 3 4
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mman.h" 3 4
#define _SYS_MMAN_H_ 
# 99 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mman.h" 3 4
#define PROT_NONE 0x00
#define PROT_READ 0x01
#define PROT_WRITE 0x02
#define PROT_EXEC 0x04





#define MAP_SHARED 0x0001
#define MAP_PRIVATE 0x0002

#define MAP_COPY MAP_PRIVATE





#define MAP_FIXED 0x0010

#define MAP_RENAME 0x0020
#define MAP_NORESERVE 0x0040
#define MAP_RESERVED0080 0x0080
#define MAP_NOEXTEND 0x0100
#define MAP_HASSEMAPHORE 0x0200
#define MAP_NOCACHE 0x0400
#define MAP_JIT 0x0800




#define MAP_FILE 0x0000
#define MAP_ANON 0x1000
#define MAP_ANONYMOUS MAP_ANON
# 149 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/mman.h" 3 4
#define MAP_RESILIENT_CODESIGN 0x2000
#define MAP_RESILIENT_MEDIA 0x4000


#define MAP_32BIT 0x8000






#define MAP_TRANSLATED_ALLOW_EXECUTE 0x20000

#define MAP_UNIX03 0x40000






#define MCL_CURRENT 0x0001
#define MCL_FUTURE 0x0002




#define MAP_FAILED ((void *)-1)




#define MS_ASYNC 0x0001
#define MS_INVALIDATE 0x0002
#define MS_SYNC 0x0010


#define MS_KILLPAGES 0x0004
#define MS_DEACTIVATE 0x0008







#define POSIX_MADV_NORMAL 0
#define POSIX_MADV_RANDOM 1
#define POSIX_MADV_SEQUENTIAL 2
#define POSIX_MADV_WILLNEED 3
#define POSIX_MADV_DONTNEED 4


#define MADV_NORMAL POSIX_MADV_NORMAL
#define MADV_RANDOM POSIX_MADV_RANDOM
#define MADV_SEQUENTIAL POSIX_MADV_SEQUENTIAL
#define MADV_WILLNEED POSIX_MADV_WILLNEED
#define MADV_DONTNEED POSIX_MADV_DONTNEED
#define MADV_FREE 5
#define MADV_ZERO_WIRED_PAGES 6
#define MADV_FREE_REUSABLE 7
#define MADV_FREE_REUSE 8
#define MADV_CAN_REUSE 9
#define MADV_PAGEOUT 10




#define MINCORE_INCORE 0x1
#define MINCORE_REFERENCED 0x2
#define MINCORE_MODIFIED 0x4
#define MINCORE_REFERENCED_OTHER 0x8
#define MINCORE_MODIFIED_OTHER 0x10
#define MINCORE_PAGED_OUT 0x20
#define MINCORE_COPIED 0x40
#define MINCORE_ANONYMOUS 0x80







int mlockall(int);
int munlockall(void);

int mlock(const void *, size_t);

#define _MMAP 

void * mmap(void *, size_t, int, int, int, off_t) __asm("_" "mmap" );


int mprotect(void *, size_t, int) __asm("_" "mprotect" );

int msync(void *, size_t, int) __asm("_" "msync" );

int munlock(const void *, size_t);

int munmap(void *, size_t) __asm("_" "munmap" );

int shm_open(const char *, int, ...);
int shm_unlink(const char *);

int posix_madvise(void *, size_t, int);


int madvise(void *, size_t, int);
int mincore(const void *, size_t, char *);
int minherit(void *, size_t, int);




# 41 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sched.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sched.h" 3 4
#define _SCHED_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/pthread_impl.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/pthread_impl.h" 3 4
#define _PTHREAD_IMPL_H_ 
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/pthread_impl.h" 3 4
#define _PTHREAD_MUTEX_SIG_init 0x32AAABA7

#define _PTHREAD_ERRORCHECK_MUTEX_SIG_init 0x32AAABA1
#define _PTHREAD_RECURSIVE_MUTEX_SIG_init 0x32AAABA2
#define _PTHREAD_FIRSTFIT_MUTEX_SIG_init 0x32AAABA3

#define _PTHREAD_COND_SIG_init 0x3CB0B1BB
#define _PTHREAD_ONCE_SIG_init 0x30B1BCBA
#define _PTHREAD_RWLOCK_SIG_init 0x2DA8B3B4




#define SCHED_OTHER 1
#define SCHED_FIFO 4
#define SCHED_RR 2

#define __SCHED_PARAM_SIZE__ 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sched.h" 2 3 4






struct sched_param { int sched_priority; char __opaque[4]; };




extern int sched_yield(void);
extern int sched_get_priority_min(int);
extern int sched_get_priority_max(int);

# 43 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 1 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define _SYS_SOCKET_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/machine/_param.h" 1 3 4
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/net/net_kev.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/net/net_kev.h" 3 4
#define _NET_NETKEV_H_ 




#define KEV_INET_SUBCLASS 1

#define KEV_INET_NEW_ADDR 1
#define KEV_INET_CHANGED_ADDR 2
#define KEV_INET_ADDR_DELETED 3
#define KEV_INET_SIFDSTADDR 4
#define KEV_INET_SIFBRDADDR 5
#define KEV_INET_SIFNETMASK 6
#define KEV_INET_ARPCOLLISION 7

#define KEV_INET_PORTINUSE 8

#define KEV_INET_ARPRTRFAILURE 9
#define KEV_INET_ARPRTRALIVE 10

#define KEV_DL_SUBCLASS 2




#define KEV_DL_SIFFLAGS 1
#define KEV_DL_SIFMETRICS 2
#define KEV_DL_SIFMTU 3
#define KEV_DL_SIFPHYS 4
#define KEV_DL_SIFMEDIA 5
#define KEV_DL_SIFGENERIC 6
#define KEV_DL_ADDMULTI 7
#define KEV_DL_DELMULTI 8
#define KEV_DL_IF_ATTACHED 9
#define KEV_DL_IF_DETACHING 10
#define KEV_DL_IF_DETACHED 11
#define KEV_DL_LINK_OFF 12
#define KEV_DL_LINK_ON 13
#define KEV_DL_PROTO_ATTACHED 14
#define KEV_DL_PROTO_DETACHED 15
#define KEV_DL_LINK_ADDRESS_CHANGED 16
#define KEV_DL_WAKEFLAGS_CHANGED 17
#define KEV_DL_IF_IDLE_ROUTE_REFCNT 18
#define KEV_DL_IFCAP_CHANGED 19
#define KEV_DL_LINK_QUALITY_METRIC_CHANGED 20
#define KEV_DL_NODE_PRESENCE 21
#define KEV_DL_NODE_ABSENCE 22
#define KEV_DL_MASTER_ELECTED 23
#define KEV_DL_ISSUES 24
#define KEV_DL_IFDELEGATE_CHANGED 25
#define KEV_DL_AWDL_RESTRICTED 26
#define KEV_DL_AWDL_UNRESTRICTED 27
#define KEV_DL_RRC_STATE_CHANGED 28
#define KEV_DL_QOS_MODE_CHANGED 29
#define KEV_DL_LOW_POWER_MODE_CHANGED 30


#define KEV_INET6_SUBCLASS 6

#define KEV_INET6_NEW_USER_ADDR 1
#define KEV_INET6_CHANGED_ADDR 2
#define KEV_INET6_ADDR_DELETED 3
#define KEV_INET6_NEW_LL_ADDR 4
#define KEV_INET6_NEW_RTADV_ADDR 5
#define KEV_INET6_DEFROUTER 6
#define KEV_INET6_REQUEST_NAT64_PREFIX 7
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 2 3 4
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_sa_family_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_sa_family_t.h" 3 4
#define _SA_FAMILY_T 

typedef __uint8_t sa_family_t;
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_socklen_t.h" 1 3 4
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_socklen_t.h" 3 4
#define _SOCKLEN_T 

typedef __darwin_socklen_t socklen_t;
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 2 3 4
# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define SOCK_STREAM 1
#define SOCK_DGRAM 2
#define SOCK_RAW 3

#define SOCK_RDM 4

#define SOCK_SEQPACKET 5




#define SO_DEBUG 0x0001
#define SO_ACCEPTCONN 0x0002
#define SO_REUSEADDR 0x0004
#define SO_KEEPALIVE 0x0008
#define SO_DONTROUTE 0x0010
#define SO_BROADCAST 0x0020

#define SO_USELOOPBACK 0x0040
#define SO_LINGER 0x0080



#define SO_OOBINLINE 0x0100

#define SO_REUSEPORT 0x0200
#define SO_TIMESTAMP 0x0400
#define SO_TIMESTAMP_MONOTONIC 0x0800



#define SO_DONTTRUNC 0x2000

#define SO_WANTMORE 0x4000
#define SO_WANTOOBFLAG 0x8000
# 154 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define SO_SNDBUF 0x1001
#define SO_RCVBUF 0x1002
#define SO_SNDLOWAT 0x1003
#define SO_RCVLOWAT 0x1004
#define SO_SNDTIMEO 0x1005
#define SO_RCVTIMEO 0x1006
#define SO_ERROR 0x1007
#define SO_TYPE 0x1008

#define SO_LABEL 0x1010
#define SO_PEERLABEL 0x1011

#define SO_NREAD 0x1020
#define SO_NKE 0x1021
#define SO_NOSIGPIPE 0x1022
#define SO_NOADDRERR 0x1023
#define SO_NWRITE 0x1024
#define SO_REUSESHAREUID 0x1025

#define SO_NOTIFYCONFLICT 0x1026
#define SO_UPCALLCLOSEWAIT 0x1027

#define SO_LINGER_SEC 0x1080
#define SO_RANDOMPORT 0x1082
#define SO_NP_EXTENSIONS 0x1083


#define SO_NUMRCVPKT 0x1112
#define SO_NET_SERVICE_TYPE 0x1116


#define SO_NETSVC_MARKING_LEVEL 0x1119
# 270 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define NET_SERVICE_TYPE_BE 0
#define NET_SERVICE_TYPE_BK 1
#define NET_SERVICE_TYPE_SIG 2
#define NET_SERVICE_TYPE_VI 3
#define NET_SERVICE_TYPE_VO 4
#define NET_SERVICE_TYPE_RV 5
#define NET_SERVICE_TYPE_AV 6
#define NET_SERVICE_TYPE_OAM 7
#define NET_SERVICE_TYPE_RD 8



#define NETSVC_MRKNG_UNKNOWN 0
#define NETSVC_MRKNG_LVL_L2 1
#define NETSVC_MRKNG_LVL_L3L2_ALL 2
#define NETSVC_MRKNG_LVL_L3L2_BK 3



typedef __uint32_t sae_associd_t;
#define SAE_ASSOCID_ANY 0
#define SAE_ASSOCID_ALL ((sae_associd_t)(-1ULL))

typedef __uint32_t sae_connid_t;
#define SAE_CONNID_ANY 0
#define SAE_CONNID_ALL ((sae_connid_t)(-1ULL))


#define CONNECT_RESUME_ON_READ_WRITE 0x1
#define CONNECT_DATA_IDEMPOTENT 0x2
#define CONNECT_DATA_AUTHENTICATED 0x4


typedef struct sa_endpoints {
 unsigned int sae_srcif;
 const struct sockaddr *sae_srcaddr;
 socklen_t sae_srcaddrlen;
 const struct sockaddr *sae_dstaddr;
 socklen_t sae_dstaddrlen;
} sa_endpoints_t;





struct linger {
 int l_onoff;
 int l_linger;
};
# 333 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
struct so_np_extensions {
 u_int32_t npx_flags;
 u_int32_t npx_mask;
};

#define SONPX_SETOPTSHUT 0x000000001
# 348 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define SOL_SOCKET 0xffff





#define AF_UNSPEC 0
#define AF_UNIX 1

#define AF_LOCAL AF_UNIX

#define AF_INET 2

#define AF_IMPLINK 3
#define AF_PUP 4
#define AF_CHAOS 5
#define AF_NS 6
#define AF_ISO 7
#define AF_OSI AF_ISO
#define AF_ECMA 8
#define AF_DATAKIT 9
#define AF_CCITT 10
#define AF_SNA 11
#define AF_DECnet 12
#define AF_DLI 13
#define AF_LAT 14
#define AF_HYLINK 15
#define AF_APPLETALK 16
#define AF_ROUTE 17
#define AF_LINK 18
#define pseudo_AF_XTP 19
#define AF_COIP 20
#define AF_CNT 21
#define pseudo_AF_RTIP 22
#define AF_IPX 23
#define AF_SIP 24
#define pseudo_AF_PIP 25
#define AF_NDRV 27
#define AF_ISDN 28
#define AF_E164 AF_ISDN
#define pseudo_AF_KEY 29

#define AF_INET6 30

#define AF_NATM 31
#define AF_SYSTEM 32
#define AF_NETBIOS 33
#define AF_PPP 34
#define pseudo_AF_HDRCMPLT 35

#define AF_RESERVED_36 36
#define AF_IEEE80211 37
#define AF_UTUN 38
#define AF_VSOCK 40
#define AF_MAX 41





struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};


#define SOCK_MAXADDRLEN 255





struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};





#define _SS_MAXSIZE 128
#define _SS_ALIGNSIZE (sizeof(__int64_t))
#define _SS_PAD1SIZE (_SS_ALIGNSIZE - sizeof(__uint8_t) - sizeof(sa_family_t))

#define _SS_PAD2SIZE (_SS_MAXSIZE - sizeof(__uint8_t) - sizeof(sa_family_t) - _SS_PAD1SIZE - _SS_ALIGNSIZE)






struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};




#define PF_UNSPEC AF_UNSPEC
#define PF_LOCAL AF_LOCAL
#define PF_UNIX PF_LOCAL
#define PF_INET AF_INET
#define PF_IMPLINK AF_IMPLINK
#define PF_PUP AF_PUP
#define PF_CHAOS AF_CHAOS
#define PF_NS AF_NS
#define PF_ISO AF_ISO
#define PF_OSI AF_ISO
#define PF_ECMA AF_ECMA
#define PF_DATAKIT AF_DATAKIT
#define PF_CCITT AF_CCITT
#define PF_SNA AF_SNA
#define PF_DECnet AF_DECnet
#define PF_DLI AF_DLI
#define PF_LAT AF_LAT
#define PF_HYLINK AF_HYLINK
#define PF_APPLETALK AF_APPLETALK
#define PF_ROUTE AF_ROUTE
#define PF_LINK AF_LINK
#define PF_XTP pseudo_AF_XTP
#define PF_COIP AF_COIP
#define PF_CNT AF_CNT
#define PF_SIP AF_SIP
#define PF_IPX AF_IPX
#define PF_RTIP pseudo_AF_RTIP
#define PF_PIP pseudo_AF_PIP
#define PF_NDRV AF_NDRV
#define PF_ISDN AF_ISDN
#define PF_KEY pseudo_AF_KEY
#define PF_INET6 AF_INET6
#define PF_NATM AF_NATM
#define PF_SYSTEM AF_SYSTEM
#define PF_NETBIOS AF_NETBIOS
#define PF_PPP AF_PPP
#define PF_RESERVED_36 AF_RESERVED_36
#define PF_UTUN AF_UTUN
#define PF_VSOCK AF_VSOCK
#define PF_MAX AF_MAX




#define PF_VLAN ((uint32_t)0x766c616e)
#define PF_BOND ((uint32_t)0x626f6e64)
# 508 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define NET_MAXID AF_MAX
# 521 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define NET_RT_DUMP 1
#define NET_RT_FLAGS 2
#define NET_RT_IFLIST 3
#define NET_RT_STAT 4
#define NET_RT_TRASH 5
#define NET_RT_IFLIST2 6
#define NET_RT_DUMP2 7




#define NET_RT_FLAGS_PRIV 10
#define NET_RT_MAXID 11
# 542 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define SOMAXCONN 128





struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};



#define MSG_OOB 0x1
#define MSG_PEEK 0x2
#define MSG_DONTROUTE 0x4
#define MSG_EOR 0x8
#define MSG_TRUNC 0x10
#define MSG_CTRUNC 0x20
#define MSG_WAITALL 0x40

#define MSG_DONTWAIT 0x80
#define MSG_EOF 0x100


#define MSG_WAITSTREAM 0x200

#define MSG_FLUSH 0x400
#define MSG_HOLD 0x800
#define MSG_SEND 0x1000
#define MSG_HAVEMORE 0x2000
#define MSG_RCVMORE 0x4000

#define MSG_NEEDSA 0x10000



#define MSG_NOSIGNAL 0x80000
# 596 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;

};
# 631 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define CMSG_DATA(cmsg) ((unsigned char *)(cmsg) + __DARWIN_ALIGN32(sizeof(struct cmsghdr)))






#define CMSG_FIRSTHDR(mhdr) ((mhdr)->msg_controllen >= sizeof(struct cmsghdr) ? (struct cmsghdr *)(mhdr)->msg_control : (struct cmsghdr *)0L)
# 648 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define CMSG_NXTHDR(mhdr,cmsg) ((char *)(cmsg) == (char *)0L ? CMSG_FIRSTHDR(mhdr) : ((((unsigned char *)(cmsg) + __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len) + __DARWIN_ALIGN32(sizeof(struct cmsghdr))) > ((unsigned char *)(mhdr)->msg_control + (mhdr)->msg_controllen)) ? (struct cmsghdr *)0L : (struct cmsghdr *)(void *)((unsigned char *)(cmsg) + __DARWIN_ALIGN32((__uint32_t)(cmsg)->cmsg_len))))
# 661 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/socket.h" 3 4
#define CMSG_SPACE(l) (__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + __DARWIN_ALIGN32(l))
#define CMSG_LEN(l) (__DARWIN_ALIGN32(sizeof(struct cmsghdr)) + (l))




#define SCM_RIGHTS 0x01

#define SCM_TIMESTAMP 0x02
#define SCM_CREDS 0x03
#define SCM_TIMESTAMP_MONOTONIC 0x04







#define SHUT_RD 0
#define SHUT_WR 1
#define SHUT_RDWR 2





struct sf_hdtr {
 struct iovec *headers;
 int hdr_cnt;
 struct iovec *trailers;
 int trl_cnt;
};







int accept(int, struct sockaddr * restrict, socklen_t * restrict)
__asm("_" "accept" );
int bind(int, const struct sockaddr *, socklen_t) __asm("_" "bind" );
int connect(int, const struct sockaddr *, socklen_t) __asm("_" "connect" );
int getpeername(int, struct sockaddr * restrict, socklen_t * restrict)
__asm("_" "getpeername" );
int getsockname(int, struct sockaddr * restrict, socklen_t * restrict)
__asm("_" "getsockname" );
int getsockopt(int, int, int, void * restrict, socklen_t * restrict);
int listen(int, int) __asm("_" "listen" );
ssize_t recv(int, void *, size_t, int) __asm("_" "recv" );
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * restrict,
    socklen_t * restrict) __asm("_" "recvfrom" );
ssize_t recvmsg(int, struct msghdr *, int) __asm("_" "recvmsg" );
ssize_t send(int, const void *, size_t, int) __asm("_" "send" );
ssize_t sendmsg(int, const struct msghdr *, int) __asm("_" "sendmsg" );
ssize_t sendto(int, const void *, size_t,
    int, const struct sockaddr *, socklen_t) __asm("_" "sendto" );
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int sockatmark(int) ;
int socket(int, int, int);
int socketpair(int, int, int, int *) __asm("_" "socketpair" );


int sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);



void pfctlinput(int, struct sockaddr *);


int connectx(int, const sa_endpoints_t *, sae_associd_t, unsigned int,
    const struct iovec *, unsigned int, size_t *, sae_connid_t *);


int disconnectx(int, sae_associd_t, sae_connid_t);


# 45 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 3 4
#define _NETINET_IN_H_ 
# 97 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 3 4
#define IPPROTO_IP 0

#define IPPROTO_HOPOPTS 0

#define IPPROTO_ICMP 1

#define IPPROTO_IGMP 2
#define IPPROTO_GGP 3
#define IPPROTO_IPV4 4
#define IPPROTO_IPIP IPPROTO_IPV4

#define IPPROTO_TCP 6

#define IPPROTO_ST 7
#define IPPROTO_EGP 8
#define IPPROTO_PIGP 9
#define IPPROTO_RCCMON 10
#define IPPROTO_NVPII 11
#define IPPROTO_PUP 12
#define IPPROTO_ARGUS 13
#define IPPROTO_EMCON 14
#define IPPROTO_XNET 15
#define IPPROTO_CHAOS 16

#define IPPROTO_UDP 17

#define IPPROTO_MUX 18
#define IPPROTO_MEAS 19
#define IPPROTO_HMP 20
#define IPPROTO_PRM 21
#define IPPROTO_IDP 22
#define IPPROTO_TRUNK1 23
#define IPPROTO_TRUNK2 24
#define IPPROTO_LEAF1 25
#define IPPROTO_LEAF2 26
#define IPPROTO_RDP 27
#define IPPROTO_IRTP 28
#define IPPROTO_TP 29
#define IPPROTO_BLT 30
#define IPPROTO_NSP 31
#define IPPROTO_INP 32
#define IPPROTO_SEP 33
#define IPPROTO_3PC 34
#define IPPROTO_IDPR 35
#define IPPROTO_XTP 36
#define IPPROTO_DDP 37
#define IPPROTO_CMTP 38
#define IPPROTO_TPXX 39
#define IPPROTO_IL 40

#define IPPROTO_IPV6 41

#define IPPROTO_SDRP 42
#define IPPROTO_ROUTING 43
#define IPPROTO_FRAGMENT 44
#define IPPROTO_IDRP 45
#define IPPROTO_RSVP 46
#define IPPROTO_GRE 47
#define IPPROTO_MHRP 48
#define IPPROTO_BHA 49
#define IPPROTO_ESP 50
#define IPPROTO_AH 51
#define IPPROTO_INLSP 52
#define IPPROTO_SWIPE 53
#define IPPROTO_NHRP 54

#define IPPROTO_ICMPV6 58
#define IPPROTO_NONE 59
#define IPPROTO_DSTOPTS 60
#define IPPROTO_AHIP 61
#define IPPROTO_CFTP 62
#define IPPROTO_HELLO 63
#define IPPROTO_SATEXPAK 64
#define IPPROTO_KRYPTOLAN 65
#define IPPROTO_RVD 66
#define IPPROTO_IPPC 67
#define IPPROTO_ADFS 68
#define IPPROTO_SATMON 69
#define IPPROTO_VISA 70
#define IPPROTO_IPCV 71
#define IPPROTO_CPNX 72
#define IPPROTO_CPHB 73
#define IPPROTO_WSN 74
#define IPPROTO_PVP 75
#define IPPROTO_BRSATMON 76
#define IPPROTO_ND 77
#define IPPROTO_WBMON 78
#define IPPROTO_WBEXPAK 79
#define IPPROTO_EON 80
#define IPPROTO_VMTP 81
#define IPPROTO_SVMTP 82
#define IPPROTO_VINES 83
#define IPPROTO_TTP 84
#define IPPROTO_IGP 85
#define IPPROTO_DGP 86
#define IPPROTO_TCF 87
#define IPPROTO_IGRP 88
#define IPPROTO_OSPFIGP 89
#define IPPROTO_SRPC 90
#define IPPROTO_LARP 91
#define IPPROTO_MTP 92
#define IPPROTO_AX25 93
#define IPPROTO_IPEIP 94
#define IPPROTO_MICP 95
#define IPPROTO_SCCSP 96
#define IPPROTO_ETHERIP 97
#define IPPROTO_ENCAP 98
#define IPPROTO_APES 99
#define IPPROTO_GMTP 100

#define IPPROTO_PIM 103
#define IPPROTO_IPCOMP 108
#define IPPROTO_PGM 113
#define IPPROTO_SCTP 132


#define IPPROTO_DIVERT 254

#define IPPROTO_RAW 255


#define IPPROTO_MAX 256


#define IPPROTO_DONE 257
# 269 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 3 4
#define __DARWIN_IPPORT_RESERVED 1024
# 279 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 3 4
#define IPPORT_RESERVED __DARWIN_IPPORT_RESERVED

#define IPPORT_USERRESERVED 5000




#define IPPORT_HIFIRSTAUTO 49152
#define IPPORT_HILASTAUTO 65535







#define IPPORT_RESERVEDSTART 600





struct in_addr {
 in_addr_t s_addr;
};






#define INADDR_ANY (u_int32_t)0x00000000
#define INADDR_BROADCAST (u_int32_t)0xffffffff


#define IN_CLASSA(i) (((u_int32_t)(i) & 0x80000000) == 0)
#define IN_CLASSA_NET 0xff000000
#define IN_CLASSA_NSHIFT 24
#define IN_CLASSA_HOST 0x00ffffff
#define IN_CLASSA_MAX 128

#define IN_CLASSB(i) (((u_int32_t)(i) & 0xc0000000) == 0x80000000)
#define IN_CLASSB_NET 0xffff0000
#define IN_CLASSB_NSHIFT 16
#define IN_CLASSB_HOST 0x0000ffff
#define IN_CLASSB_MAX 65536

#define IN_CLASSC(i) (((u_int32_t)(i) & 0xe0000000) == 0xc0000000)
#define IN_CLASSC_NET 0xffffff00
#define IN_CLASSC_NSHIFT 8
#define IN_CLASSC_HOST 0x000000ff

#define IN_CLASSD(i) (((u_int32_t)(i) & 0xf0000000) == 0xe0000000)
#define IN_CLASSD_NET 0xf0000000
#define IN_CLASSD_NSHIFT 28
#define IN_CLASSD_HOST 0x0fffffff
#define IN_MULTICAST(i) IN_CLASSD(i)

#define IN_EXPERIMENTAL(i) (((u_int32_t)(i) & 0xf0000000) == 0xf0000000)
#define IN_BADCLASS(i) (((u_int32_t)(i) & 0xf0000000) == 0xf0000000)

#define INADDR_LOOPBACK (u_int32_t)0x7f000001

#define INADDR_NONE 0xffffffff

#define INADDR_UNSPEC_GROUP (u_int32_t)0xe0000000
#define INADDR_ALLHOSTS_GROUP (u_int32_t)0xe0000001
#define INADDR_ALLRTRS_GROUP (u_int32_t)0xe0000002
#define INADDR_ALLRPTS_GROUP (u_int32_t)0xe0000016
#define INADDR_CARP_GROUP (u_int32_t)0xe0000012
#define INADDR_PFSYNC_GROUP (u_int32_t)0xe00000f0
#define INADDR_ALLMDNS_GROUP (u_int32_t)0xe00000fb
#define INADDR_MAX_LOCAL_GROUP (u_int32_t)0xe00000ff


#define IN_LINKLOCALNETNUM (u_int32_t)0xA9FE0000
#define IN_LINKLOCAL(i) (((u_int32_t)(i) & IN_CLASSB_NET) == IN_LINKLOCALNETNUM)
#define IN_LOOPBACK(i) (((u_int32_t)(i) & 0xff000000) == 0x7f000000)
#define IN_ZERONET(i) (((u_int32_t)(i) & 0xff000000) == 0)

#define IN_PRIVATE(i) ((((u_int32_t)(i) & 0xff000000) == 0x0a000000) || (((u_int32_t)(i) & 0xfff00000) == 0xac100000) || (((u_int32_t)(i) & 0xffff0000) == 0xc0a80000))




#define IN_LOCAL_GROUP(i) (((u_int32_t)(i) & 0xffffff00) == 0xe0000000)

#define IN_ANY_LOCAL(i) (IN_LINKLOCAL(i) || IN_LOCAL_GROUP(i))


#define IN_LOOPBACKNET 127





struct sockaddr_in {
 __uint8_t sin_len;
 sa_family_t sin_family;
 in_port_t sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};

#define IN_ARE_ADDR_EQUAL(a,b) (bcmp(&(a)->s_addr, &(b)->s_addr, sizeof (struct in_addr)) == 0)




#define INET_ADDRSTRLEN 16
# 398 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 3 4
struct ip_opts {
 struct in_addr ip_dst;
 char ip_opts[40];
};





#define IP_OPTIONS 1
#define IP_HDRINCL 2
#define IP_TOS 3
#define IP_TTL 4
#define IP_RECVOPTS 5
#define IP_RECVRETOPTS 6
#define IP_RECVDSTADDR 7
#define IP_RETOPTS 8
#define IP_MULTICAST_IF 9
#define IP_MULTICAST_TTL 10
#define IP_MULTICAST_LOOP 11
#define IP_ADD_MEMBERSHIP 12
#define IP_DROP_MEMBERSHIP 13
#define IP_MULTICAST_VIF 14
#define IP_RSVP_ON 15
#define IP_RSVP_OFF 16
#define IP_RSVP_VIF_ON 17
#define IP_RSVP_VIF_OFF 18
#define IP_PORTRANGE 19
#define IP_RECVIF 20

#define IP_IPSEC_POLICY 21
#define IP_FAITH 22

#define IP_STRIPHDR 23

#define IP_RECVTTL 24
#define IP_BOUND_IF 25
#define IP_PKTINFO 26
#define IP_RECVPKTINFO IP_PKTINFO
#define IP_RECVTOS 27
#define IP_DONTFRAG 28

#define IP_FW_ADD 40
#define IP_FW_DEL 41
#define IP_FW_FLUSH 42
#define IP_FW_ZERO 43
#define IP_FW_GET 44
#define IP_FW_RESETLOG 45


#define IP_OLD_FW_ADD 50
#define IP_OLD_FW_DEL 51
#define IP_OLD_FW_FLUSH 52
#define IP_OLD_FW_ZERO 53
#define IP_OLD_FW_GET 54
#define IP_NAT__XXX 55
#define IP_OLD_FW_RESETLOG 56

#define IP_DUMMYNET_CONFIGURE 60
#define IP_DUMMYNET_DEL 61
#define IP_DUMMYNET_FLUSH 62
#define IP_DUMMYNET_GET 64

#define IP_TRAFFIC_MGT_BACKGROUND 65
#define IP_MULTICAST_IFINDEX 66


#define IP_ADD_SOURCE_MEMBERSHIP 70
#define IP_DROP_SOURCE_MEMBERSHIP 71
#define IP_BLOCK_SOURCE 72
#define IP_UNBLOCK_SOURCE 73


#define IP_MSFILTER 74


#define MCAST_JOIN_GROUP 80
#define MCAST_LEAVE_GROUP 81
#define MCAST_JOIN_SOURCE_GROUP 82
#define MCAST_LEAVE_SOURCE_GROUP 83
#define MCAST_BLOCK_SOURCE 84
#define MCAST_UNBLOCK_SOURCE 85





#define IP_DEFAULT_MULTICAST_TTL 1
#define IP_DEFAULT_MULTICAST_LOOP 1






#define IP_MIN_MEMBERSHIPS 31
#define IP_MAX_MEMBERSHIPS 4095





#define IP_MAX_GROUP_SRC_FILTER 512
#define IP_MAX_SOCK_SRC_FILTER 128
#define IP_MAX_SOCK_MUTE_FILTER 128




struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};






struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};

#pragma pack(4)



struct ip_mreq_source {
 struct in_addr imr_multiaddr;
 struct in_addr imr_sourceaddr;
 struct in_addr imr_interface;
};





struct group_req {
 uint32_t gr_interface;
 struct sockaddr_storage gr_group;
};

struct group_source_req {
 uint32_t gsr_interface;
 struct sockaddr_storage gsr_group;
 struct sockaddr_storage gsr_source;
};


#define __MSFILTERREQ_DEFINED 





struct __msfilterreq {
 uint32_t msfr_ifindex;
 uint32_t msfr_fmode;
 uint32_t msfr_nsrcs;
 uint32_t __msfr_align;
 struct sockaddr_storage msfr_group;
 struct sockaddr_storage *msfr_srcs;
};



#pragma pack()
struct sockaddr;






int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t,
    uint32_t, struct in_addr *) ;
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *,
    uint32_t *, struct in_addr *) ;
int setsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
    uint32_t, uint32_t, struct sockaddr_storage *) ;
int getsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
    uint32_t *, uint32_t *, struct sockaddr_storage *) ;




#define MCAST_UNDEFINED 0
#define MCAST_INCLUDE 1
#define MCAST_EXCLUDE 2





#define IP_PORTRANGE_DEFAULT 0
#define IP_PORTRANGE_HIGH 1
#define IP_PORTRANGE_LOW 2
# 618 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 3 4
struct in_pktinfo {
 unsigned int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};







#define IPPROTO_MAXID (IPPROTO_AH + 1)





#define IPCTL_FORWARDING 1
#define IPCTL_SENDREDIRECTS 2
#define IPCTL_DEFTTL 3



#define IPCTL_RTEXPIRE 5
#define IPCTL_RTMINEXPIRE 6
#define IPCTL_RTMAXCACHE 7
#define IPCTL_SOURCEROUTE 8
#define IPCTL_DIRECTEDBROADCAST 9
#define IPCTL_INTRQMAXLEN 10
#define IPCTL_INTRQDROPS 11
#define IPCTL_STATS 12
#define IPCTL_ACCEPTSOURCEROUTE 13
#define IPCTL_FASTFORWARDING 14
#define IPCTL_KEEPFAITH 15
#define IPCTL_GIF_TTL 16
#define IPCTL_MAXID 17




#define __KAME_NETINET_IN_H_INCLUDED_ 
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 1 3 4
# 99 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define _NETINET6_IN6_H_ 
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define __KAME__ 
#define __KAME_VERSION "2009/apple-darwin"
# 142 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IPV6PORT_RESERVED 1024
#define IPV6PORT_ANONMIN 49152
#define IPV6PORT_ANONMAX 65535
#define IPV6PORT_RESERVEDMIN 600
#define IPV6PORT_RESERVEDMAX (IPV6PORT_RESERVED-1)





typedef struct in6_addr {
 union {
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
 } __u6_addr;
} in6_addr_t;

#define s6_addr __u6_addr.__u6_addr8

#define INET6_ADDRSTRLEN 46





#define SIN6_LEN 

struct sockaddr_in6 {
 __uint8_t sin6_len;
 sa_family_t sin6_family;
 in_port_t sin6_port;
 __uint32_t sin6_flowinfo;
 struct in6_addr sin6_addr;
 __uint32_t sin6_scope_id;
};
# 186 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6ADDR_ANY_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}


#define IN6ADDR_LOOPBACK_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}



#define IN6ADDR_NODELOCAL_ALLNODES_INIT {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}


#define IN6ADDR_INTFACELOCAL_ALLNODES_INIT {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}


#define IN6ADDR_LINKLOCAL_ALLNODES_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}


#define IN6ADDR_LINKLOCAL_ALLROUTERS_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}


#define IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}}


#define IN6ADDR_V4MAPPED_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}


#define IN6ADDR_MULTICAST_PREFIX IN6MASK8


extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_nodelocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allrouters;
extern const struct in6_addr in6addr_linklocal_allv2routers;
# 230 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6_ARE_ADDR_EQUAL(a,b) (memcmp(&(a)->s6_addr[0], &(b)->s6_addr[0], sizeof (struct in6_addr)) == 0)
# 239 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_UNSPECIFIED(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) == 0))
# 248 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_LOOPBACK(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) == ntohl(1)))
# 257 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_V4COMPAT(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) != 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[12]) != ntohl(1)))
# 267 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_V4MAPPED(a) ((*(const __uint32_t *)(const void *)(&(a)->s6_addr[0]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[4]) == 0) && (*(const __uint32_t *)(const void *)(&(a)->s6_addr[8]) == ntohl(0x0000ffff)))
# 276 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IN6_IS_ADDR_6TO4(x) (ntohs((x)->s6_addr16[0]) == 0x2002)





#define __IPV6_ADDR_SCOPE_NODELOCAL 0x01
#define __IPV6_ADDR_SCOPE_INTFACELOCAL 0x01
#define __IPV6_ADDR_SCOPE_LINKLOCAL 0x02
#define __IPV6_ADDR_SCOPE_SITELOCAL 0x05
#define __IPV6_ADDR_SCOPE_ORGLOCAL 0x08
#define __IPV6_ADDR_SCOPE_GLOBAL 0x0e





#define IN6_IS_ADDR_LINKLOCAL(a) (((a)->s6_addr[0] == 0xfe) && (((a)->s6_addr[1] & 0xc0) == 0x80))

#define IN6_IS_ADDR_SITELOCAL(a) (((a)->s6_addr[0] == 0xfe) && (((a)->s6_addr[1] & 0xc0) == 0xc0))





#define IN6_IS_ADDR_MULTICAST(a) ((a)->s6_addr[0] == 0xff)

#define IPV6_ADDR_MC_FLAGS(a) ((a)->s6_addr[1] & 0xf0)

#define IPV6_ADDR_MC_FLAGS_TRANSIENT 0x10
#define IPV6_ADDR_MC_FLAGS_PREFIX 0x20
#define IPV6_ADDR_MC_FLAGS_UNICAST_BASED (IPV6_ADDR_MC_FLAGS_TRANSIENT | IPV6_ADDR_MC_FLAGS_PREFIX)

#define IN6_IS_ADDR_UNICAST_BASED_MULTICAST(a) (IN6_IS_ADDR_MULTICAST(a) && (IPV6_ADDR_MC_FLAGS(a) == IPV6_ADDR_MC_FLAGS_UNICAST_BASED))






#define IN6_IS_ADDR_UNIQUE_LOCAL(a) (((a)->s6_addr[0] == 0xfc) || ((a)->s6_addr[0] == 0xfd))


#define __IPV6_ADDR_MC_SCOPE(a) ((a)->s6_addr[1] & 0x0f)




#define IN6_IS_ADDR_MC_NODELOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL))


#define IN6_IS_ADDR_MC_LINKLOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (IPV6_ADDR_MC_FLAGS(a) != IPV6_ADDR_MC_FLAGS_UNICAST_BASED) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL))



#define IN6_IS_ADDR_MC_SITELOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL))


#define IN6_IS_ADDR_MC_ORGLOCAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL))


#define IN6_IS_ADDR_MC_GLOBAL(a) (IN6_IS_ADDR_MULTICAST(a) && (__IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL))
# 383 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IPV6_SOCKOPT_RESERVED1 3

#define IPV6_UNICAST_HOPS 4
#define IPV6_MULTICAST_IF 9
#define IPV6_MULTICAST_HOPS 10
#define IPV6_MULTICAST_LOOP 11
#define IPV6_JOIN_GROUP 12
#define IPV6_LEAVE_GROUP 13


#define IPV6_PORTRANGE 14
#define ICMP6_FILTER 18
#define IPV6_2292PKTINFO 19
#define IPV6_2292HOPLIMIT 20
#define IPV6_2292NEXTHOP 21
#define IPV6_2292HOPOPTS 22
#define IPV6_2292DSTOPTS 23
#define IPV6_2292RTHDR 24


#define IPV6_2292PKTOPTIONS 25
# 415 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IPV6_CHECKSUM 26

#define IPV6_V6ONLY 27

#define IPV6_BINDV6ONLY IPV6_V6ONLY



#define IPV6_IPSEC_POLICY 28

#define IPV6_FAITH 29


#define IPV6_FW_ADD 30
#define IPV6_FW_DEL 31
#define IPV6_FW_FLUSH 32
#define IPV6_FW_ZERO 33
#define IPV6_FW_GET 34







#define IPV6_RECVTCLASS 35
#define IPV6_TCLASS 36
# 451 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet6/in6.h" 3 4
#define IPV6_RTHDRDSTOPTS 57







#define IPV6_RECVPKTINFO 61

#define IPV6_RECVHOPLIMIT 37
#define IPV6_RECVRTHDR 38
#define IPV6_RECVHOPOPTS 39
#define IPV6_RECVDSTOPTS 40

#define IPV6_USE_MIN_MTU 42
#define IPV6_RECVPATHMTU 43





#define IPV6_PATHMTU 44






#define IPV6_3542PKTINFO 46
#define IPV6_3542HOPLIMIT 47
#define IPV6_3542NEXTHOP 48
#define IPV6_3542HOPOPTS 49
#define IPV6_3542DSTOPTS 50
#define IPV6_3542RTHDR 51

#define IPV6_PKTINFO IPV6_3542PKTINFO
#define IPV6_HOPLIMIT IPV6_3542HOPLIMIT
#define IPV6_NEXTHOP IPV6_3542NEXTHOP
#define IPV6_HOPOPTS IPV6_3542HOPOPTS
#define IPV6_DSTOPTS IPV6_3542DSTOPTS
#define IPV6_RTHDR IPV6_3542RTHDR

#define IPV6_AUTOFLOWLABEL 59

#define IPV6_DONTFRAG 62


#define IPV6_PREFER_TEMPADDR 63





#define IPV6_MSFILTER 74


#define IPV6_BOUND_IF 125




#define IPV6_RTHDR_LOOSE 0
#define IPV6_RTHDR_STRICT 1
#define IPV6_RTHDR_TYPE_0 0




#define IPV6_DEFAULT_MULTICAST_HOPS 1
#define IPV6_DEFAULT_MULTICAST_LOOP 1






#define IPV6_MIN_MEMBERSHIPS 31
#define IPV6_MAX_MEMBERSHIPS 4095





#define IPV6_MAX_GROUP_SRC_FILTER 512
#define IPV6_MAX_SOCK_SRC_FILTER 128




struct ipv6_mreq {
 struct in6_addr ipv6mr_multiaddr;
 unsigned int ipv6mr_interface;
};




struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 unsigned int ipi6_ifindex;
};




struct ip6_mtuinfo {
 struct sockaddr_in6 ip6m_addr;
 uint32_t ip6m_mtu;
};





#define IPV6_PORTRANGE_DEFAULT 0
#define IPV6_PORTRANGE_HIGH 1
#define IPV6_PORTRANGE_LOW 2







#define IPV6PROTO_MAXID (IPPROTO_PIM + 1)




#define IPV6CTL_FORWARDING 1
#define IPV6CTL_SENDREDIRECTS 2
#define IPV6CTL_DEFHLIM 3



#define IPV6CTL_FORWSRCRT 5
#define IPV6CTL_STATS 6
#define IPV6CTL_MRTSTATS 7
#define IPV6CTL_MRTPROTO 8
#define IPV6CTL_MAXFRAGPACKETS 9
#define IPV6CTL_SOURCECHECK 10
#define IPV6CTL_SOURCECHECK_LOGINT 11
#define IPV6CTL_ACCEPT_RTADV 12
#define IPV6CTL_KEEPFAITH 13
#define IPV6CTL_LOG_INTERVAL 14
#define IPV6CTL_HDRNESTLIMIT 15
#define IPV6CTL_DAD_COUNT 16
#define IPV6CTL_AUTO_FLOWLABEL 17
#define IPV6CTL_DEFMCASTHLIM 18
#define IPV6CTL_GIF_HLIM 19
#define IPV6CTL_KAME_VERSION 20
#define IPV6CTL_USE_DEPRECATED 21
#define IPV6CTL_RR_PRUNE 22



#define IPV6CTL_V6ONLY 24
#define IPV6CTL_RTEXPIRE 25
#define IPV6CTL_RTMINEXPIRE 26
#define IPV6CTL_RTMAXCACHE 27

#define IPV6CTL_USETEMPADDR 32
#define IPV6CTL_TEMPPLTIME 33
#define IPV6CTL_TEMPVLTIME 34
#define IPV6CTL_AUTO_LINKLOCAL 35
#define IPV6CTL_RIP6STATS 36
#define IPV6CTL_PREFER_TEMPADDR 37
#define IPV6CTL_ADDRCTLPOLICY 38
#define IPV6CTL_USE_DEFAULTZONE 39

#define IPV6CTL_MAXFRAGS 41
#define IPV6CTL_MCAST_PMTU 44

#define IPV6CTL_NEIGHBORGCTHRESH 46
#define IPV6CTL_MAXIFPREFIXES 47
#define IPV6CTL_MAXIFDEFROUTERS 48
#define IPV6CTL_MAXDYNROUTES 49
#define ICMPV6CTL_ND6_ONLINKNSRFC4861 50



#define IPV6CTL_MAXID 51






struct cmsghdr;

extern int inet6_option_space(int);
extern int inet6_option_init(void *, struct cmsghdr **, int);
extern int inet6_option_append(struct cmsghdr *, const __uint8_t *, int, int);
extern __uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
extern int inet6_option_next(const struct cmsghdr *, __uint8_t **);
extern int inet6_option_find(const struct cmsghdr *, __uint8_t **, int);

extern size_t inet6_rthdr_space(int, int);
extern struct cmsghdr *inet6_rthdr_init(void *, int);
extern int inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *,
    unsigned int);
extern int inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);



extern int inet6_rthdr_segments(const struct cmsghdr *);
extern struct in6_addr *inet6_rthdr_getaddr(struct cmsghdr *, int);
extern int inet6_rthdr_getflags(const struct cmsghdr *, int);

extern int inet6_opt_init(void *, socklen_t);
extern int inet6_opt_append(void *, socklen_t, int, __uint8_t, socklen_t,
    __uint8_t, void **);
extern int inet6_opt_finish(void *, socklen_t, int);
extern int inet6_opt_set_val(void *, int, void *, socklen_t);

extern int inet6_opt_next(void *, socklen_t, int, __uint8_t *, socklen_t *,
    void **);
extern int inet6_opt_find(void *, socklen_t, int, __uint8_t, socklen_t *,
    void **);
extern int inet6_opt_get_val(void *, int, void *, socklen_t);
extern socklen_t inet6_rth_space(int, int);
extern void *inet6_rth_init(void *, socklen_t, int, int);
extern int inet6_rth_add(void *, const struct in6_addr *);
extern int inet6_rth_reverse(const void *, void *);
extern int inet6_rth_segments(const void *);
extern struct in6_addr *inet6_rth_getaddr(const void *, int);


# 661 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/in.h" 2 3 4
#undef __KAME_NETINET_IN_H_INCLUDED_





int bindresvport(int, struct sockaddr_in *);
struct sockaddr;
int bindresvport_sa(int, struct sockaddr *);

# 46 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/tcp.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/tcp.h" 3 4
#define _NETINET_TCP_H_ 
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/tcp.h" 3 4
typedef __uint32_t tcp_seq;
typedef __uint32_t tcp_cc;

#define tcp6_seq tcp_seq
#define tcp6hdr tcphdr





struct tcphdr {
 unsigned short th_sport;
 unsigned short th_dport;
 tcp_seq th_seq;
 tcp_seq th_ack;

 unsigned int th_x2:4,
     th_off:4;





 unsigned char th_flags;
#define TH_FIN 0x01
#define TH_SYN 0x02
#define TH_RST 0x04
#define TH_PUSH 0x08
#define TH_ACK 0x10
#define TH_URG 0x20
#define TH_ECE 0x40
#define TH_CWR 0x80
#define TH_FLAGS (TH_FIN|TH_SYN|TH_RST|TH_ACK|TH_URG|TH_ECE|TH_CWR)
#define TH_ACCEPT (TH_FIN|TH_SYN|TH_RST|TH_ACK)

 unsigned short th_win;
 unsigned short th_sum;
 unsigned short th_urp;
};

#define TCPOPT_EOL 0
#define TCPOPT_NOP 1
#define TCPOPT_MAXSEG 2
#define TCPOLEN_MAXSEG 4
#define TCPOPT_WINDOW 3
#define TCPOLEN_WINDOW 3
#define TCPOPT_SACK_PERMITTED 4
#define TCPOLEN_SACK_PERMITTED 2
#define TCPOPT_SACK 5
#define TCPOLEN_SACK 8
#define TCPOPT_TIMESTAMP 8
#define TCPOLEN_TIMESTAMP 10
#define TCPOLEN_TSTAMP_APPA (TCPOLEN_TIMESTAMP+2)
#define TCPOPT_TSTAMP_HDR (TCPOPT_NOP<<24|TCPOPT_NOP<<16|TCPOPT_TIMESTAMP<<8|TCPOLEN_TIMESTAMP)


#define MAX_TCPOPTLEN 40

#define TCPOPT_CC 11
#define TCPOPT_CCNEW 12
#define TCPOPT_CCECHO 13
#define TCPOLEN_CC 6
#define TCPOLEN_CC_APPA (TCPOLEN_CC+2)
#define TCPOPT_CC_HDR(ccopt) (TCPOPT_NOP<<24|TCPOPT_NOP<<16|(ccopt)<<8|TCPOLEN_CC)

#define TCPOPT_SIGNATURE 19
#define TCPOLEN_SIGNATURE 18




#define TCPOPT_FASTOPEN 34
#define TCPOLEN_FASTOPEN_REQ 2


#define TCPOPT_SACK_PERMIT_HDR (TCPOPT_NOP<<24|TCPOPT_NOP<<16|TCPOPT_SACK_PERMITTED<<8|TCPOLEN_SACK_PERMITTED)

#define TCPOPT_SACK_HDR (TCPOPT_NOP<<24|TCPOPT_NOP<<16|TCPOPT_SACK<<8)

#define MAX_SACK_BLKS 6







#define TCP_MAX_SACK 4
# 170 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/tcp.h" 3 4
#define TCP_MSS 512
# 181 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netinet/tcp.h" 3 4
#define TCP_MINMSS 216







#define TCP6_MSS 1024

#define TCP_MAXWIN 65535
#define TTCP_CLIENT_SND_WND 4096

#define TCP_MAX_WINSHIFT 14

#define TCP_MAXHLEN (0xf<<2)
#define TCP_MAXOLEN (TCP_MAXHLEN - sizeof(struct tcphdr))






#define TCP_NODELAY 0x01

#define TCP_MAXSEG 0x02
#define TCP_NOPUSH 0x04
#define TCP_NOOPT 0x08
#define TCP_KEEPALIVE 0x10
#define TCP_CONNECTIONTIMEOUT 0x20
#define PERSIST_TIMEOUT 0x40



#define TCP_RXT_CONNDROPTIME 0x80


#define TCP_RXT_FINDROP 0x100




#define TCP_KEEPINTVL 0x101
#define TCP_KEEPCNT 0x102
#define TCP_SENDMOREACKS 0x103
#define TCP_ENABLE_ECN 0x104
#define TCP_FASTOPEN 0x105
#define TCP_CONNECTION_INFO 0x106



#define TCP_NOTSENT_LOWAT 0x201


struct tcp_connection_info {
 u_int8_t tcpi_state;
 u_int8_t tcpi_snd_wscale;
 u_int8_t tcpi_rcv_wscale;
 u_int8_t __pad1;
 u_int32_t tcpi_options;
#define TCPCI_OPT_TIMESTAMPS 0x00000001
#define TCPCI_OPT_SACK 0x00000002
#define TCPCI_OPT_WSCALE 0x00000004
#define TCPCI_OPT_ECN 0x00000008
 u_int32_t tcpi_flags;
#define TCPCI_FLAG_LOSSRECOVERY 0x00000001
#define TCPCI_FLAG_REORDERING_DETECTED 0x00000002
 u_int32_t tcpi_rto;
 u_int32_t tcpi_maxseg;
 u_int32_t tcpi_snd_ssthresh;
 u_int32_t tcpi_snd_cwnd;
 u_int32_t tcpi_snd_wnd;
 u_int32_t tcpi_snd_sbbytes;
 u_int32_t tcpi_rcv_wnd;
 u_int32_t tcpi_rttcur;
 u_int32_t tcpi_srtt;
 u_int32_t tcpi_rttvar;
 u_int32_t
     tcpi_tfo_cookie_req:1,
     tcpi_tfo_cookie_rcv:1,
     tcpi_tfo_syn_loss:1,
     tcpi_tfo_syn_data_sent:1,
     tcpi_tfo_syn_data_acked:1,
     tcpi_tfo_syn_data_rcv:1,
     tcpi_tfo_cookie_req_rcv:1,
     tcpi_tfo_cookie_sent:1,
     tcpi_tfo_cookie_invalid:1,
     tcpi_tfo_cookie_wrong:1,
     tcpi_tfo_no_cookie_rcv:1,
     tcpi_tfo_heuristics_disable:1,
     tcpi_tfo_send_blackhole:1,
     tcpi_tfo_recv_blackhole:1,
     tcpi_tfo_onebyte_proxy:1,
     __pad2:17;
 u_int64_t tcpi_txpackets __attribute__((aligned(8)));
 u_int64_t tcpi_txbytes __attribute__((aligned(8)));
 u_int64_t tcpi_txretransmitbytes __attribute__((aligned(8)));
 u_int64_t tcpi_rxpackets __attribute__((aligned(8)));
 u_int64_t tcpi_rxbytes __attribute__((aligned(8)));
 u_int64_t tcpi_rxoutoforderbytes __attribute__((aligned(8)));
 u_int64_t tcpi_txretransmitpackets __attribute__((aligned(8)));
};
# 47 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/arpa/inet.h" 1 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/arpa/inet.h" 3 4
#define _ARPA_INET_H_ 
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/arpa/inet.h" 3 4


in_addr_t inet_addr(const char *);
char *inet_ntoa(struct in_addr);
const char *inet_ntop(int, const void *, char *, socklen_t);
int inet_pton(int, const char *, void *);


int ascii2addr(int, const char *, void *);
char *addr2ascii(int, const void *, int, char *);
int inet_aton(const char *, struct in_addr *);
in_addr_t inet_lnaof(struct in_addr);
struct in_addr inet_makeaddr(in_addr_t, in_addr_t);
in_addr_t inet_netof(struct in_addr);
in_addr_t inet_network(const char *);
char *inet_net_ntop(int, const void *, int, char *, __darwin_size_t);
int inet_net_pton(int, const char *, void *, __darwin_size_t);
char *inet_neta(in_addr_t, char *, __darwin_size_t);
unsigned int inet_nsap_addr(const char *, unsigned char *, int);
char *inet_nsap_ntoa(int, const unsigned char *, char *);



# 48 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netdb.h" 1 3 4
# 84 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netdb.h" 3 4
#define _NETDB_H_ 
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netdb.h" 3 4
#define _PATH_HEQUIV "/etc/hosts.equiv"

#define _PATH_HOSTS "/etc/hosts"
#define _PATH_NETWORKS "/etc/networks"
#define _PATH_PROTOCOLS "/etc/protocols"
#define _PATH_SERVICES "/etc/services"

extern int h_errno;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/netdb.h" 3 4
struct hostent {
 char *h_name;
 char **h_aliases;
 int h_addrtype;
 int h_length;
 char **h_addr_list;

#define h_addr h_addr_list[0]

};





struct netent {
 char *n_name;
 char **n_aliases;
 int n_addrtype;
 uint32_t n_net;
};

struct servent {
 char *s_name;
 char **s_aliases;
 int s_port;
 char *s_proto;
};

struct protoent {
 char *p_name;
 char **p_aliases;
 int p_proto;
};

struct addrinfo {
 int ai_flags;
 int ai_family;
 int ai_socktype;
 int ai_protocol;
 socklen_t ai_addrlen;
 char *ai_canonname;
 struct sockaddr *ai_addr;
 struct addrinfo *ai_next;
};


struct rpcent {
        char *r_name;
        char **r_aliases;
        int r_number;
};







#define NETDB_INTERNAL -1
#define NETDB_SUCCESS 0

#define HOST_NOT_FOUND 1
#define TRY_AGAIN 2
#define NO_RECOVERY 3
#define NO_DATA 4

#define NO_ADDRESS NO_DATA





#define EAI_ADDRFAMILY 1

#define EAI_AGAIN 2
#define EAI_BADFLAGS 3
#define EAI_FAIL 4
#define EAI_FAMILY 5
#define EAI_MEMORY 6

#define EAI_NODATA 7

#define EAI_NONAME 8
#define EAI_SERVICE 9
#define EAI_SOCKTYPE 10
#define EAI_SYSTEM 11

#define EAI_BADHINTS 12
#define EAI_PROTOCOL 13

#define EAI_OVERFLOW 14

#define EAI_MAX 15





#define AI_PASSIVE 0x00000001
#define AI_CANONNAME 0x00000002
#define AI_NUMERICHOST 0x00000004
#define AI_NUMERICSERV 0x00001000


#define AI_MASK (AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST | AI_NUMERICSERV | AI_ADDRCONFIG)




#define AI_ALL 0x00000100

#define AI_V4MAPPED_CFG 0x00000200

#define AI_ADDRCONFIG 0x00000400
#define AI_V4MAPPED 0x00000800


#define AI_DEFAULT (AI_V4MAPPED_CFG | AI_ADDRCONFIG)



#define AI_UNUSABLE 0x10000000






#define NI_MAXHOST 1025
#define NI_MAXSERV 32




#define NI_NOFQDN 0x00000001
#define NI_NUMERICHOST 0x00000002
#define NI_NAMEREQD 0x00000004
#define NI_NUMERICSERV 0x00000008
#define NI_NUMERICSCOPE 0x00000100
#define NI_DGRAM 0x00000010

#define NI_WITHSCOPEID 0x00000020




#define SCOPE_DELIMITER '%'




void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endservent(void);

void freeaddrinfo(struct addrinfo *);
const char *gai_strerror(int);
int getaddrinfo(const char * restrict, const char * restrict,
       const struct addrinfo * restrict,
       struct addrinfo ** restrict);
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostent(void);
int getnameinfo(const struct sockaddr * restrict, socklen_t,
         char * restrict, socklen_t, char * restrict,
         socklen_t, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct netent *getnetent(void);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct protoent *getprotoent(void);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct servent *getservent(void);
void sethostent(int);

void setnetent(int);
void setprotoent(int);
void setservent(int);


void freehostent(struct hostent *);
struct hostent *gethostbyname2(const char *, int);
struct hostent *getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *getipnodebyname(const char *, int, int, int *);
struct rpcent *getrpcbyname(const char *name);

struct rpcent *getrpcbynumber(int number);



struct rpcent *getrpcent(void);
void setrpcent(int stayopen);
void endrpcent(void);
void herror(const char *);
const char *hstrerror(int);
int innetgr(const char *, const char *, const char *, const char *);
int getnetgrent(char **, char **, char **);
void endnetgrent(void);
void setnetgrent(const char *);



# 49 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/un.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/un.h" 3 4
#define _SYS_UN_H_ 
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/un.h" 3 4
struct sockaddr_un {
 unsigned char sun_len;
 sa_family_t sun_family;
 char sun_path[104];
};




#define SOL_LOCAL 0


#define LOCAL_PEERCRED 0x001
#define LOCAL_PEERPID 0x002
#define LOCAL_PEEREPID 0x003
#define LOCAL_PEERUUID 0x004
#define LOCAL_PEEREUUID 0x005
#define LOCAL_PEERTOKEN 0x006







#define SUN_LEN(su) (sizeof(*(su)) - sizeof((su)->sun_path) + strlen((su)->sun_path))
# 50 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 1 3 4
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define _SYS_SYSCTL_H_ 
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/proc.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/proc.h" 3 4
#define _SYS_PROC_H_ 





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/lock.h" 1 3 4
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/lock.h" 3 4
#define _SYS_LOCK_H_ 
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/proc.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 1 3 4
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define _SYS_EVENT_H_ 
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define EVFILT_READ (-1)
#define EVFILT_WRITE (-2)
#define EVFILT_AIO (-3)
#define EVFILT_VNODE (-4)
#define EVFILT_PROC (-5)
#define EVFILT_SIGNAL (-6)
#define EVFILT_TIMER (-7)
#define EVFILT_MACHPORT (-8)
#define EVFILT_FS (-9)
#define EVFILT_USER (-10)
#define EVFILT_VM (-12)
#define EVFILT_EXCEPT (-15)

#define EVFILT_SYSCOUNT 17
#define EVFILT_THREADMARKER EVFILT_SYSCOUNT

#pragma pack(4)

struct kevent {
 uintptr_t ident;
 int16_t filter;
 uint16_t flags;
 uint32_t fflags;
 intptr_t data;
 void *udata;
};


#pragma pack()

struct kevent64_s {
 uint64_t ident;
 int16_t filter;
 uint16_t flags;
 uint32_t fflags;
 int64_t data;
 uint64_t udata;
 uint64_t ext[2];
};


#define EV_SET(kevp,a,b,c,d,e,f) do { struct kevent *__kevp__ = (kevp); __kevp__->ident = (a); __kevp__->filter = (b); __kevp__->flags = (c); __kevp__->fflags = (d); __kevp__->data = (e); __kevp__->udata = (f); } while(0)
# 117 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define EV_SET64(kevp,a,b,c,d,e,f,g,h) do { struct kevent64_s *__kevp__ = (kevp); __kevp__->ident = (a); __kevp__->filter = (b); __kevp__->flags = (c); __kevp__->fflags = (d); __kevp__->data = (e); __kevp__->udata = (f); __kevp__->ext[0] = (g); __kevp__->ext[1] = (h); } while(0)
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define KEVENT_FLAG_NONE 0x000000
#define KEVENT_FLAG_IMMEDIATE 0x000001
#define KEVENT_FLAG_ERROR_EVENTS 0x000002



#define EV_ADD 0x0001
#define EV_DELETE 0x0002
#define EV_ENABLE 0x0004
#define EV_DISABLE 0x0008


#define EV_ONESHOT 0x0010
#define EV_CLEAR 0x0020
#define EV_RECEIPT 0x0040




#define EV_DISPATCH 0x0080
#define EV_UDATA_SPECIFIC 0x0100

#define EV_DISPATCH2 (EV_DISPATCH | EV_UDATA_SPECIFIC)





#define EV_VANISHED 0x0200


#define EV_SYSFLAGS 0xF000
#define EV_FLAG0 0x1000
#define EV_FLAG1 0x2000


#define EV_EOF 0x8000
#define EV_ERROR 0x4000
# 195 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define EV_POLL EV_FLAG0
#define EV_OOBAND EV_FLAG1
# 205 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define NOTE_TRIGGER 0x01000000
# 214 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define NOTE_FFNOP 0x00000000
#define NOTE_FFAND 0x40000000
#define NOTE_FFOR 0x80000000
#define NOTE_FFCOPY 0xc0000000
#define NOTE_FFCTRLMASK 0xc0000000
#define NOTE_FFLAGSMASK 0x00ffffff
# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define NOTE_LOWAT 0x00000001


#define NOTE_OOB 0x00000002




#define NOTE_DELETE 0x00000001
#define NOTE_WRITE 0x00000002
#define NOTE_EXTEND 0x00000004
#define NOTE_ATTRIB 0x00000008
#define NOTE_LINK 0x00000010
#define NOTE_RENAME 0x00000020
#define NOTE_REVOKE 0x00000040
#define NOTE_NONE 0x00000080
#define NOTE_FUNLOCK 0x00000100
# 256 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
enum {
 eNoteReapDeprecated = 0x10000000
};

#define NOTE_EXIT 0x80000000
#define NOTE_FORK 0x40000000
#define NOTE_EXEC 0x20000000
#define NOTE_REAP ((unsigned int)eNoteReapDeprecated )
#define NOTE_SIGNAL 0x08000000
#define NOTE_EXITSTATUS 0x04000000
#define NOTE_EXIT_DETAIL 0x02000000

#define NOTE_PDATAMASK 0x000fffff
#define NOTE_PCTRLMASK (~NOTE_PDATAMASK)




enum {
 eNoteExitReparentedDeprecated = 0x00080000
};
#define NOTE_EXIT_REPARENTED ((unsigned int)eNoteExitReparentedDeprecated)




#define NOTE_EXIT_DETAIL_MASK 0x00070000
#define NOTE_EXIT_DECRYPTFAIL 0x00010000
#define NOTE_EXIT_MEMORY 0x00020000
#define NOTE_EXIT_CSERROR 0x00040000





#define NOTE_VM_PRESSURE 0x80000000
#define NOTE_VM_PRESSURE_TERMINATE 0x40000000
#define NOTE_VM_PRESSURE_SUDDEN_TERMINATE 0x20000000
#define NOTE_VM_ERROR 0x10000000
# 304 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define NOTE_SECONDS 0x00000001
#define NOTE_USECONDS 0x00000002
#define NOTE_NSECONDS 0x00000004
#define NOTE_ABSOLUTE 0x00000008

#define NOTE_LEEWAY 0x00000010
#define NOTE_CRITICAL 0x00000020
#define NOTE_BACKGROUND 0x00000040
#define NOTE_MACH_CONTINUOUS_TIME 0x00000080







#define NOTE_MACHTIME 0x00000100
# 362 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/event.h" 3 4
#define NOTE_TRACK 0x00000001
#define NOTE_TRACKERR 0x00000002
#define NOTE_CHILD 0x00000004





struct knote;
 struct klist { struct knote *slh_first; } ;




struct timespec;


int kqueue(void);
int kevent(int kq,
    const struct kevent *changelist, int nchanges,
    struct kevent *eventlist, int nevents,
    const struct timespec *timeout);
int kevent64(int kq,
    const struct kevent64_s *changelist, int nchanges,
    struct kevent64_s *eventlist, int nevents,
    unsigned int flags,
    const struct timespec *timeout);



# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/proc.h" 2 3 4







struct session;
struct pgrp;
struct proc;
struct proc_ident;


struct extern_proc {
 union {
  struct {
   struct proc *__p_forw;
   struct proc *__p_back;
  } p_st1;
  struct timeval __p_starttime;
 } p_un;
#define p_forw p_un.p_st1.__p_forw
#define p_back p_un.p_st1.__p_back
#define p_starttime p_un.__p_starttime
 struct vmspace *p_vmspace;
 struct sigacts *p_sigacts;
 int p_flag;
 char p_stat;
 pid_t p_pid;
 pid_t p_oppid;
 int p_dupfd;

 caddr_t user_stack;
 void *exit_thread;
 int p_debugger;
 boolean_t sigwait;

 u_int p_estcpu;
 int p_cpticks;
 fixpt_t p_pctcpu;
 void *p_wchan;
 char *p_wmesg;
 u_int p_swtime;
 u_int p_slptime;
 struct itimerval p_realtimer;
 struct timeval p_rtime;
 u_quad_t p_uticks;
 u_quad_t p_sticks;
 u_quad_t p_iticks;
 int p_traceflag;
 struct vnode *p_tracep;
 int p_siglist;
 struct vnode *p_textvp;
 int p_holdcnt;
 sigset_t p_sigmask;
 sigset_t p_sigignore;
 sigset_t p_sigcatch;
 u_char p_priority;
 u_char p_usrpri;
 char p_nice;
 char p_comm[16 + 1];
 struct pgrp *p_pgrp;
 struct user *p_addr;
 u_short p_xstat;
 u_short p_acflag;
 struct rusage *p_ru;
};



#define SIDL 1
#define SRUN 2
#define SSLEEP 3
#define SSTOP 4
#define SZOMB 5


#define P_ADVLOCK 0x00000001
#define P_CONTROLT 0x00000002
#define P_LP64 0x00000004
#define P_NOCLDSTOP 0x00000008

#define P_PPWAIT 0x00000010
#define P_PROFIL 0x00000020
#define P_SELECT 0x00000040
#define P_CONTINUED 0x00000080

#define P_SUGID 0x00000100
#define P_SYSTEM 0x00000200
#define P_TIMEOUT 0x00000400
#define P_TRACED 0x00000800

#define P_DISABLE_ASLR 0x00001000
#define P_WEXIT 0x00002000
#define P_EXEC 0x00004000


#define P_OWEUPC 0x00008000

#define P_AFFINITY 0x00010000
#define P_TRANSLATED 0x00020000
#define P_CLASSIC P_TRANSLATED

#define P_DELAYIDLESLEEP 0x00040000
#define P_CHECKOPENEVT 0x00080000

#define P_DEPENDENCY_CAPABLE 0x00100000
#define P_REBOOT 0x00200000
#define P_RESV6 0x00400000
#define P_RESV7 0x00800000

#define P_THCWD 0x01000000
#define P_RESV9 0x02000000
#define P_ADOPTPERSONA 0x04000000
#define P_RESV11 0x08000000

#define P_NOSHLIB 0x10000000

#define P_FORCEQUOTA 0x20000000
#define P_NOCLDWAIT 0x40000000
#define P_NOREMOTEHANG 0x80000000

#define P_INMEM 0
#define P_NOSWAP 0
#define P_PHYSIO 0
#define P_FSTRACE 0
#define P_SSTEP 0

#define P_DIRTY_TRACK 0x00000001
#define P_DIRTY_ALLOW_IDLE_EXIT 0x00000002
#define P_DIRTY_DEFER 0x00000004
#define P_DIRTY 0x00000008
#define P_DIRTY_SHUTDOWN 0x00000010
#define P_DIRTY_TERMINATED 0x00000020
#define P_DIRTY_BUSY 0x00000040
#define P_DIRTY_MARKED 0x00000080
#define P_DIRTY_AGING_IN_PROGRESS 0x00000100
#define P_DIRTY_LAUNCH_IN_PROGRESS 0x00000200
#define P_DIRTY_DEFER_ALWAYS 0x00000400


#define P_DIRTY_IS_DIRTY (P_DIRTY | P_DIRTY_SHUTDOWN)
#define P_DIRTY_IDLE_EXIT_ENABLED (P_DIRTY_TRACK|P_DIRTY_ALLOW_IDLE_EXIT)
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/vm.h" 1 3 4
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/vm.h" 3 4
#define _SYS_VM_H 
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/vm.h" 3 4
struct vmspace {
 int32_t dummy;
 caddr_t dummy2;
 int32_t dummy3[5];
 caddr_t dummy4[3];
};
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 2 3 4
# 97 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define CTL_MAXNAME 12
# 133 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
struct ctlname {
 char *ctl_name;
 int ctl_type;
};

#define CTLTYPE 0xf
#define CTLTYPE_NODE 1
#define CTLTYPE_INT 2
#define CTLTYPE_STRING 3
#define CTLTYPE_QUAD 4
#define CTLTYPE_OPAQUE 5
#define CTLTYPE_STRUCT CTLTYPE_OPAQUE

#define CTLFLAG_RD 0x80000000
#define CTLFLAG_WR 0x40000000
#define CTLFLAG_RW (CTLFLAG_RD|CTLFLAG_WR)
#define CTLFLAG_NOLOCK 0x20000000
#define CTLFLAG_ANYBODY 0x10000000
#define CTLFLAG_SECURE 0x08000000
#define CTLFLAG_MASKED 0x04000000
#define CTLFLAG_NOAUTO 0x02000000
#define CTLFLAG_KERN 0x01000000
#define CTLFLAG_LOCKED 0x00800000
#define CTLFLAG_OID2 0x00400000
#define CTLFLAG_EXPERIMENT 0x00100000
# 172 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define OID_AUTO (-1)
#define OID_AUTO_START 100


#define SYSCTL_DEF_ENABLED 





#define CTL_UNSPEC 0
#define CTL_KERN 1
#define CTL_VM 2
#define CTL_VFS 3
#define CTL_NET 4
#define CTL_DEBUG 5
#define CTL_HW 6
#define CTL_MACHDEP 7
#define CTL_USER 8
#define CTL_MAXID 9

#define CTL_NAMES { { 0, 0 }, { "kern", CTLTYPE_NODE }, { "vm", CTLTYPE_NODE }, { "vfs", CTLTYPE_NODE }, { "net", CTLTYPE_NODE }, { "debug", CTLTYPE_NODE }, { "hw", CTLTYPE_NODE }, { "machdep", CTLTYPE_NODE }, { "user", CTLTYPE_NODE }, }
# 208 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define KERN_OSTYPE 1
#define KERN_OSRELEASE 2
#define KERN_OSREV 3
#define KERN_VERSION 4
#define KERN_MAXVNODES 5
#define KERN_MAXPROC 6
#define KERN_MAXFILES 7
#define KERN_ARGMAX 8
#define KERN_SECURELVL 9
#define KERN_HOSTNAME 10
#define KERN_HOSTID 11
#define KERN_CLOCKRATE 12
#define KERN_VNODE 13
#define KERN_PROC 14
#define KERN_FILE 15
#define KERN_PROF 16
#define KERN_POSIX1 17
#define KERN_NGROUPS 18
#define KERN_JOB_CONTROL 19
#define KERN_SAVED_IDS 20
#define KERN_BOOTTIME 21
#define KERN_NISDOMAINNAME 22
#define KERN_DOMAINNAME KERN_NISDOMAINNAME
#define KERN_MAXPARTITIONS 23
#define KERN_KDEBUG 24
#define KERN_UPDATEINTERVAL 25
#define KERN_OSRELDATE 26
#define KERN_NTP_PLL 27
#define KERN_BOOTFILE 28
#define KERN_MAXFILESPERPROC 29
#define KERN_MAXPROCPERUID 30
#define KERN_DUMPDEV 31
#define KERN_IPC 32
#define KERN_DUMMY 33
#define KERN_PS_STRINGS 34
#define KERN_USRSTACK32 35
#define KERN_LOGSIGEXIT 36
#define KERN_SYMFILE 37
#define KERN_PROCARGS 38

#define KERN_NETBOOT 40

#define KERN_SYSV 42
#define KERN_AFFINITY 43
#define KERN_TRANSLATE 44
#define KERN_CLASSIC KERN_TRANSLATE
#define KERN_EXEC 45
#define KERN_CLASSICHANDLER KERN_EXEC
#define KERN_AIOMAX 46
#define KERN_AIOPROCMAX 47
#define KERN_AIOTHREADS 48

#define KERN_PROCARGS2 49

#define KERN_COREFILE 50
#define KERN_COREDUMP 51
#define KERN_SUGID_COREDUMP 52
#define KERN_PROCDELAYTERM 53
#define KERN_SHREG_PRIVATIZABLE 54

#define KERN_LOW_PRI_WINDOW 56
#define KERN_LOW_PRI_DELAY 57
#define KERN_POSIX 58
#define KERN_USRSTACK64 59
#define KERN_NX_PROTECTION 60
#define KERN_TFP 61
#define KERN_PROCNAME 62
#define KERN_THALTSTACK 63
#define KERN_SPECULATIVE_READS 64
#define KERN_OSVERSION 65
#define KERN_SAFEBOOT 66

#define KERN_RAGEVNODE 68
#define KERN_TTY 69
#define KERN_CHECKOPENEVT 70
#define KERN_THREADNAME 71
#define KERN_MAXID 72
# 293 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define KERN_USRSTACK KERN_USRSTACK64






#define KERN_RAGE_PROC 1
#define KERN_RAGE_THREAD 2
#define KERN_UNRAGE_PROC 3
#define KERN_UNRAGE_THREAD 4


#define KERN_OPENEVT_PROC 1
#define KERN_UNOPENEVT_PROC 2


#define KERN_TFP_POLICY 1


#define KERN_TFP_POLICY_DENY 0
#define KERN_TFP_POLICY_DEFAULT 2


#define KERN_KDEFLAGS 1
#define KERN_KDDFLAGS 2
#define KERN_KDENABLE 3
#define KERN_KDSETBUF 4
#define KERN_KDGETBUF 5
#define KERN_KDSETUP 6
#define KERN_KDREMOVE 7
#define KERN_KDSETREG 8
#define KERN_KDGETREG 9
#define KERN_KDREADTR 10
#define KERN_KDPIDTR 11
#define KERN_KDTHRMAP 12

#define KERN_KDPIDEX 14
#define KERN_KDSETRTCDEC 15
#define KERN_KDGETENTROPY 16
#define KERN_KDWRITETR 17
#define KERN_KDWRITEMAP 18
#define KERN_KDTEST 19

#define KERN_KDREADCURTHRMAP 21
#define KERN_KDSET_TYPEFILTER 22
#define KERN_KDBUFWAIT 23
#define KERN_KDCPUMAP 24

#define KERN_KDWRITEMAP_V3 27
#define KERN_KDWRITETR_V3 28

#define CTL_KERN_NAMES { { 0, 0 }, { "ostype", CTLTYPE_STRING }, { "osrelease", CTLTYPE_STRING }, { "osrevision", CTLTYPE_INT }, { "version", CTLTYPE_STRING }, { "maxvnodes", CTLTYPE_INT }, { "maxproc", CTLTYPE_INT }, { "maxfiles", CTLTYPE_INT }, { "argmax", CTLTYPE_INT }, { "securelevel", CTLTYPE_INT }, { "hostname", CTLTYPE_STRING }, { "hostid", CTLTYPE_INT }, { "clockrate", CTLTYPE_STRUCT }, { "vnode", CTLTYPE_STRUCT }, { "proc", CTLTYPE_STRUCT }, { "file", CTLTYPE_STRUCT }, { "profiling", CTLTYPE_NODE }, { "posix1version", CTLTYPE_INT }, { "ngroups", CTLTYPE_INT }, { "job_control", CTLTYPE_INT }, { "saved_ids", CTLTYPE_INT }, { "boottime", CTLTYPE_STRUCT }, { "nisdomainname", CTLTYPE_STRING }, { "maxpartitions", CTLTYPE_INT }, { "kdebug", CTLTYPE_INT }, { "update", CTLTYPE_INT }, { "osreldate", CTLTYPE_INT }, { "ntp_pll", CTLTYPE_NODE }, { "bootfile", CTLTYPE_STRING }, { "maxfilesperproc", CTLTYPE_INT }, { "maxprocperuid", CTLTYPE_INT }, { "dumpdev", CTLTYPE_STRUCT }, { "ipc", CTLTYPE_NODE }, { "dummy", CTLTYPE_INT }, { "dummy", CTLTYPE_INT }, { "usrstack", CTLTYPE_INT }, { "logsigexit", CTLTYPE_INT }, { "symfile",CTLTYPE_STRING }, { "procargs",CTLTYPE_STRUCT }, { "dummy", CTLTYPE_INT }, { "netboot", CTLTYPE_INT }, { "dummy", CTLTYPE_INT }, { "sysv", CTLTYPE_NODE }, { "dummy", CTLTYPE_INT }, { "dummy", CTLTYPE_INT }, { "exec", CTLTYPE_NODE }, { "aiomax", CTLTYPE_INT }, { "aioprocmax", CTLTYPE_INT }, { "aiothreads", CTLTYPE_INT }, { "procargs2",CTLTYPE_STRUCT }, { "corefile",CTLTYPE_STRING }, { "coredump", CTLTYPE_INT }, { "sugid_coredump", CTLTYPE_INT }, { "delayterm", CTLTYPE_INT }, { "shreg_private", CTLTYPE_INT }, { "proc_low_pri_io", CTLTYPE_INT }, { "low_pri_window", CTLTYPE_INT }, { "low_pri_delay", CTLTYPE_INT }, { "posix", CTLTYPE_NODE }, { "usrstack64", CTLTYPE_QUAD }, { "nx", CTLTYPE_INT }, { "tfp", CTLTYPE_NODE }, { "procname", CTLTYPE_STRING }, { "threadsigaltstack", CTLTYPE_INT }, { "speculative_reads_disabled", CTLTYPE_INT }, { "osversion", CTLTYPE_STRING }, { "safeboot", CTLTYPE_INT }, { "dummy", CTLTYPE_INT }, { "rage_vnode", CTLTYPE_INT }, { "tty", CTLTYPE_NODE }, { "check_openevt", CTLTYPE_INT }, { "thread_name", CTLTYPE_STRING } }
# 423 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define CTL_VFS_NAMES { { "vfsconf", CTLTYPE_STRUCT } }






#define KERN_PROC_ALL 0
#define KERN_PROC_PID 1
#define KERN_PROC_PGRP 2
#define KERN_PROC_SESSION 3
#define KERN_PROC_TTY 4
#define KERN_PROC_UID 5
#define KERN_PROC_RUID 6
#define KERN_PROC_LCID 7




#define KERN_VFSNSPACE_HANDLE_PROC 1
#define KERN_VFSNSPACE_UNHANDLE_PROC 2





struct _pcred {
 char pc_lock[72];
 struct ucred *pc_ucred;
 uid_t p_ruid;
 uid_t p_svuid;
 gid_t p_rgid;
 gid_t p_svgid;
 int p_refcnt;
};

struct _ucred {
 int32_t cr_ref;
 uid_t cr_uid;
 short cr_ngroups;
 gid_t cr_groups[16];
};

struct kinfo_proc {
 struct extern_proc kp_proc;
 struct eproc {
  struct proc *e_paddr;
  struct session *e_sess;
  struct _pcred e_pcred;
  struct _ucred e_ucred;
  struct vmspace e_vm;
  pid_t e_ppid;
  pid_t e_pgid;
  short e_jobc;
  dev_t e_tdev;
  pid_t e_tpgid;
  struct session *e_tsess;
#define WMESGLEN 7
  char e_wmesg[7 + 1];
  segsz_t e_xsize;
  short e_xrssize;
  short e_xccount;
  short e_xswrss;
  int32_t e_flag;
#define EPROC_CTTY 0x01
#define EPROC_SLEADER 0x02
#define COMAPT_MAXLOGNAME 12
  char e_login[12];
  int32_t e_spare[4];
 } kp_eproc;
};






#define KIPC_MAXSOCKBUF 1
#define KIPC_SOCKBUF_WASTE 2
#define KIPC_SOMAXCONN 3
#define KIPC_MAX_LINKHDR 4
#define KIPC_MAX_PROTOHDR 5
#define KIPC_MAX_HDR 6
#define KIPC_MAX_DATALEN 7
#define KIPC_MBSTAT 8
#define KIPC_NMBCLUSTERS 9
#define KIPC_SOQLIMITCOMPAT 10




#define VM_METER 1
#define VM_LOADAVG 2




#define VM_MACHFACTOR 4
#define VM_SWAPUSAGE 5
#define VM_MAXID 6

#define CTL_VM_NAMES { { 0, 0 }, { "vmmeter", CTLTYPE_STRUCT }, { "loadavg", CTLTYPE_STRUCT }, { 0, 0 }, { "dummy", CTLTYPE_INT }, { "swapusage", CTLTYPE_STRUCT } }
# 533 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
struct xsw_usage {
 u_int64_t xsu_total;
 u_int64_t xsu_avail;
 u_int64_t xsu_used;
 u_int32_t xsu_pagesize;
 boolean_t xsu_encrypted;
};




struct loadavg {
 fixpt_t ldavg[3];
 long fscale;
};
extern struct loadavg averunnable;
#define LSCALE 1000







#define HW_MACHINE 1
#define HW_MODEL 2
#define HW_NCPU 3
#define HW_BYTEORDER 4
#define HW_PHYSMEM 5
#define HW_USERMEM 6
#define HW_PAGESIZE 7
#define HW_DISKNAMES 8
#define HW_DISKSTATS 9
#define HW_EPOCH 10
#define HW_FLOATINGPT 11
#define HW_MACHINE_ARCH 12
#define HW_VECTORUNIT 13
#define HW_BUS_FREQ 14
#define HW_CPU_FREQ 15
#define HW_CACHELINE 16
#define HW_L1ICACHESIZE 17
#define HW_L1DCACHESIZE 18
#define HW_L2SETTINGS 19
#define HW_L2CACHESIZE 20
#define HW_L3SETTINGS 21
#define HW_L3CACHESIZE 22
#define HW_TB_FREQ 23
#define HW_MEMSIZE 24
#define HW_AVAILCPU 25
#define HW_TARGET 26
#define HW_PRODUCT 27
#define HW_MAXID 28

#define CTL_HW_NAMES { { 0, 0 }, { "machine", CTLTYPE_STRING }, { "model", CTLTYPE_STRING }, { "ncpu", CTLTYPE_INT }, { "byteorder", CTLTYPE_INT }, { "physmem", CTLTYPE_INT }, { "usermem", CTLTYPE_INT }, { "pagesize", CTLTYPE_INT }, { "disknames", CTLTYPE_STRUCT }, { "diskstats", CTLTYPE_STRUCT }, { "epoch", CTLTYPE_INT }, { "floatingpoint", CTLTYPE_INT }, { "machinearch", CTLTYPE_STRING }, { "vectorunit", CTLTYPE_INT }, { "busfrequency", CTLTYPE_INT }, { "cpufrequency", CTLTYPE_INT }, { "cachelinesize", CTLTYPE_INT }, { "l1icachesize", CTLTYPE_INT }, { "l1dcachesize", CTLTYPE_INT }, { "l2settings", CTLTYPE_INT }, { "l2cachesize", CTLTYPE_INT }, { "l3settings", CTLTYPE_INT }, { "l3cachesize", CTLTYPE_INT }, { "tbfrequency", CTLTYPE_INT }, { "memsize", CTLTYPE_QUAD }, { "availcpu", CTLTYPE_INT }, { "target", CTLTYPE_STRING }, { "product", CTLTYPE_STRING }, }
# 704 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define USER_CS_PATH 1
#define USER_BC_BASE_MAX 2
#define USER_BC_DIM_MAX 3
#define USER_BC_SCALE_MAX 4
#define USER_BC_STRING_MAX 5
#define USER_COLL_WEIGHTS_MAX 6
#define USER_EXPR_NEST_MAX 7
#define USER_LINE_MAX 8
#define USER_RE_DUP_MAX 9
#define USER_POSIX2_VERSION 10
#define USER_POSIX2_C_BIND 11
#define USER_POSIX2_C_DEV 12
#define USER_POSIX2_CHAR_TERM 13
#define USER_POSIX2_FORT_DEV 14
#define USER_POSIX2_FORT_RUN 15
#define USER_POSIX2_LOCALEDEF 16
#define USER_POSIX2_SW_DEV 17
#define USER_POSIX2_UPE 18
#define USER_STREAM_MAX 19
#define USER_TZNAME_MAX 20
#define USER_MAXID 21

#define CTL_USER_NAMES { { 0, 0 }, { "cs_path", CTLTYPE_STRING }, { "bc_base_max", CTLTYPE_INT }, { "bc_dim_max", CTLTYPE_INT }, { "bc_scale_max", CTLTYPE_INT }, { "bc_string_max", CTLTYPE_INT }, { "coll_weights_max", CTLTYPE_INT }, { "expr_nest_max", CTLTYPE_INT }, { "line_max", CTLTYPE_INT }, { "re_dup_max", CTLTYPE_INT }, { "posix2_version", CTLTYPE_INT }, { "posix2_c_bind", CTLTYPE_INT }, { "posix2_c_dev", CTLTYPE_INT }, { "posix2_char_term", CTLTYPE_INT }, { "posix2_fort_dev", CTLTYPE_INT }, { "posix2_fort_run", CTLTYPE_INT }, { "posix2_localedef", CTLTYPE_INT }, { "posix2_sw_dev", CTLTYPE_INT }, { "posix2_upe", CTLTYPE_INT }, { "stream_max", CTLTYPE_INT }, { "tzname_max", CTLTYPE_INT } }
# 758 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4
#define CTL_DEBUG_NAME 0
#define CTL_DEBUG_VALUE 1
#define CTL_DEBUG_MAXID 20
# 769 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sysctl.h" 3 4

int sysctl(int *, u_int, void *, size_t *, void *, size_t);
int sysctlbyname(const char *, void *, size_t *, void *, size_t);
int sysctlnametomib(const char *, int *, size_t *);

# 52 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 3 4
#define _XLOCALE_H_ 




#define _USE_EXTENDED_LOCALES_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_locale.h" 1 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_locale.h" 3 4
#define __LOCALE_H_ 




struct lconv {
 char *decimal_point;
 char *thousands_sep;
 char *grouping;
 char *int_curr_symbol;
 char *currency_symbol;
 char *mon_decimal_point;
 char *mon_thousands_sep;
 char *mon_grouping;
 char *positive_sign;
 char *negative_sign;
 char int_frac_digits;
 char frac_digits;
 char p_cs_precedes;
 char p_sep_by_space;
 char n_cs_precedes;
 char n_sep_by_space;
 char p_sign_posn;
 char n_sign_posn;
 char int_p_cs_precedes;
 char int_n_cs_precedes;
 char int_p_sep_by_space;
 char int_n_sep_by_space;
 char int_p_sign_posn;
 char int_n_sign_posn;
};




struct lconv *localeconv(void);

# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_xlocale.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_xlocale.h" 3 4
#define __XLOCALE_H_ 



struct _xlocale;
typedef struct _xlocale * locale_t;


int ___mb_cur_max(void);
int ___mb_cur_max_l(locale_t);

# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4

#define LC_ALL_MASK ( LC_COLLATE_MASK | LC_CTYPE_MASK | LC_MESSAGES_MASK | LC_MONETARY_MASK | LC_NUMERIC_MASK | LC_TIME_MASK )





#define LC_COLLATE_MASK (1 << 0)
#define LC_CTYPE_MASK (1 << 1)
#define LC_MESSAGES_MASK (1 << 2)
#define LC_MONETARY_MASK (1 << 3)
#define LC_NUMERIC_MASK (1 << 4)
#define LC_TIME_MASK (1 << 5)

#define _LC_NUM_MASK 6
#define _LC_LAST_MASK (1 << (_LC_NUM_MASK - 1))

#define LC_GLOBAL_LOCALE ((locale_t)-1)
#define LC_C_LOCALE ((locale_t)NULL)


#undef MB_CUR_MAX
#define MB_CUR_MAX (___mb_cur_max())

#define MB_CUR_MAX_L(x) (___mb_cur_max_l(x))




extern const locale_t _c_locale;

locale_t duplocale(locale_t);
int freelocale(locale_t);
struct lconv * localeconv_l(locale_t);
locale_t newlocale(int, const char *, locale_t);
const char * querylocale(int, locale_t);
locale_t uselocale(locale_t);



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_ctype.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_ctype.h" 3 4
#define _XLOCALE__CTYPE_H_ 
# 37 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_ctype.h" 3 4

unsigned long ___runetype_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t, locale_t);



int __maskrune_l(__darwin_ct_rune_t, unsigned long, locale_t);


extern __inline __attribute__((__gnu_inline__)) int
__istype_l(__darwin_ct_rune_t _c, unsigned long _f, locale_t _l)
{
 return !!(isascii(_c) ? (_DefaultRuneLocale.__runetype[_c] & _f)
  : __maskrune_l(_c, _f, _l));
}

extern __inline __attribute__((__gnu_inline__)) __darwin_ct_rune_t
__toupper_l(__darwin_ct_rune_t _c, locale_t _l)
{
 return isascii(_c) ? _DefaultRuneLocale.__mapupper[_c]
  : ___toupper_l(_c, _l);
}

extern __inline __attribute__((__gnu_inline__)) __darwin_ct_rune_t
__tolower_l(__darwin_ct_rune_t _c, locale_t _l)
{
 return isascii(_c) ? _DefaultRuneLocale.__maplower[_c]
  : ___tolower_l(_c, _l);
}

extern __inline __attribute__((__gnu_inline__)) int
__wcwidth_l(__darwin_ct_rune_t _c, locale_t _l)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune_l(_c, 0xe0000000L|0x00040000L, _l);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}



extern __inline __attribute__((__gnu_inline__)) int
digittoint_l(int c, locale_t l)
{
 return (__maskrune_l(c, 0x0F, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isalnum_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000100L|0x00000400L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isalpha_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000100L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isblank_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00020000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
iscntrl_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000200L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isdigit_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000400L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isgraph_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000800L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
ishexnumber_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00010000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isideogram_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00080000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
islower_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00001000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isnumber_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000400L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isphonogram_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00200000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isprint_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00040000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
ispunct_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00002000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isrune_l(int c, locale_t l)
{
 return (__istype_l(c, 0xFFFFFFF0L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isspace_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00004000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isspecial_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00100000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isupper_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00008000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
isxdigit_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00010000L, l));
}

extern __inline __attribute__((__gnu_inline__)) int
tolower_l(int c, locale_t l)
{
        return (__tolower_l(c, l));
}

extern __inline __attribute__((__gnu_inline__)) int
toupper_l(int c, locale_t l)
{
        return (__toupper_l(c, l));
}
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_inttypes.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_inttypes.h" 3 4
#define _XLOCALE__INTTYPES_H_ 



# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_inttypes.h" 2 3 4



intmax_t strtoimax_l(const char * restrict nptr, char ** restrict endptr,
  int base, locale_t);
uintmax_t strtoumax_l(const char * restrict nptr, char ** restrict endptr,
  int base, locale_t);
intmax_t wcstoimax_l(const wchar_t * restrict nptr,
  wchar_t ** restrict endptr, int base, locale_t);
uintmax_t wcstoumax_l(const wchar_t * restrict nptr,
  wchar_t ** restrict endptr, int base, locale_t);






# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_stdio.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_stdio.h" 3 4
#define _XLOCALE__STDIO_H_ 






int fprintf_l(FILE * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4)));
int fscanf_l(FILE * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__scanf__, 3, 4)));
int printf_l(locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 2, 3)));
int scanf_l(locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__scanf__, 2, 3)));
int sprintf_l(char * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4))) ;
int sscanf_l(const char * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__scanf__, 3, 4)));
int vfprintf_l(FILE * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0)));
int vprintf_l(locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 2, 0)));
int vsprintf_l(char * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0))) ;


int snprintf_l(char * restrict, size_t, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 4, 5)));
int vfscanf_l(FILE * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__scanf__, 3, 0)));
int vscanf_l(locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__scanf__, 2, 0)));
int vsnprintf_l(char * restrict, size_t, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 4, 0)));
int vsscanf_l(const char * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__scanf__, 3, 0)));



int dprintf_l(int, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4))) ;
int vdprintf_l(int, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0))) ;




int asprintf_l(char ** restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4)));
int vasprintf_l(char ** restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0)));



# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_stdlib.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_stdlib.h" 3 4
#define _XLOCALE__STDLIB_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_stdlib.h" 2 3 4



double atof_l(const char *, locale_t);
int atoi_l(const char *, locale_t);
long atol_l(const char *, locale_t);

long long
  atoll_l(const char *, locale_t);

int mblen_l(const char *, size_t, locale_t);
size_t mbstowcs_l(wchar_t * restrict , const char * restrict, size_t,
     locale_t);
int mbtowc_l(wchar_t * restrict, const char * restrict, size_t,
     locale_t);
double strtod_l(const char *, char **, locale_t) __asm("_" "strtod_l" );
float strtof_l(const char *, char **, locale_t) __asm("_" "strtof_l" );
long strtol_l(const char *, char **, int, locale_t);
long double
  strtold_l(const char *, char **, locale_t);
long long
  strtoll_l(const char *, char **, int, locale_t);

long long
  strtoq_l(const char *, char **, int, locale_t);

unsigned long
  strtoul_l(const char *, char **, int, locale_t);
unsigned long long
  strtoull_l(const char *, char **, int, locale_t);

unsigned long long
  strtouq_l(const char *, char **, int, locale_t);

size_t wcstombs_l(char * restrict, const wchar_t * restrict, size_t,
     locale_t);
int wctomb_l(char *, wchar_t, locale_t);






# 97 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_string.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_string.h" 3 4
#define _XLOCALE__STRING_H_ 






int strcoll_l(const char *, const char *, locale_t);
size_t strxfrm_l(char *, const char *, size_t, locale_t);
int strcasecmp_l(const char *, const char *, locale_t);
char *strcasestr_l(const char *, const char *, locale_t);
int strncasecmp_l(const char *, const char *, size_t, locale_t);

# 100 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_time.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_time.h" 3 4
#define _XLOCALE__TIME_H_ 







size_t strftime_l(char * restrict, size_t, const char * restrict,
  const struct tm * restrict, locale_t)
  __asm("_" "strftime_l" ) __attribute__((__format__ (__strftime__, 3, 0)));
char *strptime_l(const char * restrict, const char * restrict,
  struct tm * restrict, locale_t)
  __asm("_" "strptime_l" ) __attribute__((__format__ (__strftime__, 2, 0)));

# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale.h" 2 3 4
# 53 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dlfcn.h" 1 3 4
# 31 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dlfcn.h" 3 4
#define _DLFCN_H_ 
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dlfcn.h" 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdbool.h" 1 3 4
# 29 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdbool.h" 3 4
#define _STDBOOL_H 



#define bool _Bool




#define true 1
#define false 0
# 50 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 41 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/dlfcn.h" 2 3 4



#define __DYLDDL_DRIVERKIT_UNAVAILABLE __API_UNAVAILABLE(driverkit)







typedef struct dl_info {
        const char *dli_fname;
        void *dli_fbase;
        const char *dli_sname;
        void *dli_saddr;
} Dl_info;

extern int dladdr(const void *, Dl_info *);




extern int dlclose(void * __handle) ;
extern char * dlerror(void) ;
extern void * dlopen(const char * __path, int __mode) ;
extern void * dlsym(void * __handle, const char * __symbol) ;


extern _Bool dlopen_preflight(const char* __path) ;



#define RTLD_LAZY 0x1
#define RTLD_NOW 0x2
#define RTLD_LOCAL 0x4
#define RTLD_GLOBAL 0x8


#define RTLD_NOLOAD 0x10
#define RTLD_NODELETE 0x80
#define RTLD_FIRST 0x100




#define RTLD_NEXT ((void *) -1)
#define RTLD_DEFAULT ((void *) -2)
#define RTLD_SELF ((void *) -3)
#define RTLD_MAIN_ONLY ((void *) -5)
# 55 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4







# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/objs/ngx_auto_config.h" 1 3 4
#define NGX_CONFIGURE ""


#define NGX_COMPILER "clang 13.0.0 (clang-1300.0.29.30)"




#define NGX_HAVE_GCC_ATOMIC 1




#define NGX_HAVE_C99_VARIADIC_MACROS 1




#define NGX_HAVE_GCC_VARIADIC_MACROS 1




#define NGX_HAVE_GCC_BSWAP64 1




#define NGX_HAVE_KQUEUE 1




#define NGX_HAVE_CLEAR_EVENT 1




#define NGX_HAVE_TIMER_EVENT 1




#define NGX_HAVE_SENDFILE 1




#define NGX_DARWIN_ATOMIC 1




#define NGX_HAVE_NONALIGNED 1




#define NGX_CPU_CACHE_LINE 64



#define NGX_KQUEUE_UDATA_T (void *)



#define NGX_HAVE_F_NOCACHE 1




#define NGX_HAVE_STATFS 1




#define NGX_HAVE_STATVFS 1




#define NGX_HAVE_DLOPEN 1




#define NGX_HAVE_SCHED_YIELD 1




#define NGX_HAVE_REUSEPORT 1




#define NGX_HAVE_IP_RECVDSTADDR 1




#define NGX_HAVE_IP_PKTINFO 1




#define NGX_HAVE_IPV6_RECVPKTINFO 1




#define NGX_HAVE_TCP_FASTOPEN 1




#define NGX_HAVE_UNIX_DOMAIN 1




#define NGX_PTR_SIZE 8




#define NGX_SIG_ATOMIC_T_SIZE 4




#define NGX_HAVE_LITTLE_ENDIAN 1




#define NGX_MAX_SIZE_T_VALUE 9223372036854775807LL




#define NGX_SIZE_T_LEN (sizeof("-9223372036854775808") - 1)




#define NGX_MAX_OFF_T_VALUE 9223372036854775807LL




#define NGX_OFF_T_LEN (sizeof("-9223372036854775808") - 1)




#define NGX_TIME_T_SIZE 8




#define NGX_TIME_T_LEN (sizeof("-9223372036854775808") - 1)




#define NGX_MAX_TIME_T_VALUE 9223372036854775807LL




#define NGX_HAVE_INET6 1




#define NGX_HAVE_PREAD 1




#define NGX_HAVE_PWRITE 1




#define NGX_HAVE_PWRITEV 1




#define NGX_SYS_NERR 107




#define NGX_HAVE_LOCALTIME_R 1




#define NGX_HAVE_CLOCK_MONOTONIC 1




#define NGX_HAVE_POSIX_MEMALIGN 1




#define NGX_HAVE_MAP_ANON 1




#define NGX_HAVE_SYSVSHM 1




#define NGX_HAVE_MSGHDR_MSG_CONTROL 1




#define NGX_HAVE_FIONBIO 1




#define NGX_HAVE_FIONREAD 1




#define NGX_HAVE_GMTOFF 1




#define NGX_HAVE_D_NAMLEN 1




#define NGX_HAVE_D_TYPE 1




#define NGX_HAVE_SC_NPROCESSORS_ONLN 1




#define NGX_HAVE_OPENAT 1




#define NGX_HAVE_GETADDRINFO 1




#define NGX_HTTP_CACHE 1




#define NGX_HTTP_GZIP 1




#define NGX_HTTP_SSI 1




#define NGX_CRYPT 1




#define NGX_HTTP_X_FORWARDED_FOR 1
# 297 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/objs/ngx_auto_config.h" 3 4
#define NGX_HTTP_UPSTREAM_ZONE 1




#define NGX_PCRE2 1




#define NGX_PCRE 1




#define NGX_ZLIB 1




#define NGX_PREFIX "/usr/local/nginx/"




#define NGX_CONF_PREFIX "conf/"




#define NGX_SBIN_PATH "sbin/nginx"




#define NGX_CONF_PATH "conf/nginx.conf"




#define NGX_PID_PATH "logs/nginx.pid"




#define NGX_LOCK_PATH "logs/nginx.lock"




#define NGX_ERROR_LOG_PATH "logs/error.log"




#define NGX_HTTP_LOG_PATH "logs/access.log"




#define NGX_HTTP_CLIENT_TEMP_PATH "client_body_temp"




#define NGX_HTTP_PROXY_TEMP_PATH "proxy_temp"




#define NGX_HTTP_FASTCGI_TEMP_PATH "fastcgi_temp"




#define NGX_HTTP_UWSGI_TEMP_PATH "uwsgi_temp"




#define NGX_HTTP_SCGI_TEMP_PATH "scgi_temp"




#define NGX_SUPPRESS_WARN 1




#define NGX_SMP 1




#define NGX_USER "nobody"




#define NGX_GROUP "nobody"
# 63 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 2 3 4
# 80 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin_config.h" 3 4
#define NGX_LISTEN_BACKLOG -1



#define NGX_HAVE_INHERITED_NONBLOCK 1




#define NGX_HAVE_CASELESS_FILESYSTEM 1



#define NGX_HAVE_OS_SPECIFIC_INIT 1
#define NGX_HAVE_DEBUG_MALLOC 1


extern char **environ;
# 35 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 2 3 4
# 48 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 3 4
#define NGX_HAVE_SO_SNDLOWAT 1





#define ngx_signal_helper(n) SIG ##n
#define ngx_signal_value(n) ngx_signal_helper(n)

#define ngx_random random


#define NGX_SHUTDOWN_SIGNAL QUIT
#define NGX_TERMINATE_SIGNAL TERM
#define NGX_NOACCEPT_SIGNAL WINCH
#define NGX_RECONFIGURE_SIGNAL HUP





#define NGX_REOPEN_SIGNAL USR1
#define NGX_CHANGEBIN_SIGNAL USR2


#define ngx_cdecl 
#define ngx_libc_cdecl 



typedef intptr_t ngx_int_t;
typedef uintptr_t ngx_uint_t;
typedef intptr_t ngx_flag_t;


#define NGX_INT32_LEN (sizeof("-2147483648") - 1)
#define NGX_INT64_LEN (sizeof("-9223372036854775808") - 1)






#define NGX_INT_T_LEN NGX_INT64_LEN
#define NGX_MAX_INT_T_VALUE 9223372036854775807




#define NGX_ALIGNMENT sizeof(unsigned long)


#define ngx_align(d,a) (((d) + (a - 1)) & ~(a - 1))
#define ngx_align_ptr(p,a) (u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) & ~((uintptr_t) a - 1))



#define ngx_abort abort



#define NGX_INVALID_ARRAY_INDEX 0x80000000




#define ngx_inline inline







#define NGX_MAXHOSTNAMELEN MAXHOSTNAMELEN





#define NGX_MAX_UINT32_VALUE (uint32_t) 0xffffffff
#define NGX_MAX_INT32_VALUE (uint32_t) 0x7fffffff
# 139 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_config.h" 3 4
#define NGX_COMPAT_BEGIN(slots) 
#define NGX_COMPAT_END 
# 13 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h" 2
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 3 4
#define _NGX_CORE_H_INCLUDED_ 





typedef struct ngx_module_s ngx_module_t;
typedef struct ngx_conf_s ngx_conf_t;
typedef struct ngx_cycle_s ngx_cycle_t;
typedef struct ngx_pool_s ngx_pool_t;
typedef struct ngx_chain_s ngx_chain_t;
typedef struct ngx_log_s ngx_log_t;
typedef struct ngx_open_file_s ngx_open_file_t;
typedef struct ngx_command_s ngx_command_t;
typedef struct ngx_file_s ngx_file_t;
typedef struct ngx_event_s ngx_event_t;
typedef struct ngx_event_aio_s ngx_event_aio_t;
typedef struct ngx_connection_s ngx_connection_t;
typedef struct ngx_thread_task_s ngx_thread_task_t;
typedef struct ngx_ssl_s ngx_ssl_t;
typedef struct ngx_proxy_protocol_s ngx_proxy_protocol_t;
typedef struct ngx_ssl_connection_s ngx_ssl_connection_t;
typedef struct ngx_udp_connection_s ngx_udp_connection_t;

typedef void (*ngx_event_handler_pt)(ngx_event_t *ev);
typedef void (*ngx_connection_handler_pt)(ngx_connection_t *c);


#define NGX_OK 0
#define NGX_ERROR -1
#define NGX_AGAIN -2
#define NGX_BUSY -3
#define NGX_DONE -4
#define NGX_DECLINED -5
#define NGX_ABORT -6


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_errno.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_errno.h" 3 4
#define _NGX_ERRNO_H_INCLUDED_ 



# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 1 3 4
# 14 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_errno.h" 2 3 4


typedef int ngx_err_t;

#define NGX_EPERM EPERM
#define NGX_ENOENT ENOENT
#define NGX_ENOPATH ENOENT
#define NGX_ESRCH ESRCH
#define NGX_EINTR EINTR
#define NGX_ECHILD ECHILD
#define NGX_ENOMEM ENOMEM
#define NGX_EACCES EACCES
#define NGX_EBUSY EBUSY
#define NGX_EEXIST EEXIST
#define NGX_EEXIST_FILE EEXIST
#define NGX_EXDEV EXDEV
#define NGX_ENOTDIR ENOTDIR
#define NGX_EISDIR EISDIR
#define NGX_EINVAL EINVAL
#define NGX_ENFILE ENFILE
#define NGX_EMFILE EMFILE
#define NGX_ENOSPC ENOSPC
#define NGX_EPIPE EPIPE
#define NGX_EINPROGRESS EINPROGRESS
#define NGX_ENOPROTOOPT ENOPROTOOPT
#define NGX_EOPNOTSUPP EOPNOTSUPP
#define NGX_EADDRINUSE EADDRINUSE
#define NGX_ECONNABORTED ECONNABORTED
#define NGX_ECONNRESET ECONNRESET
#define NGX_ENOTCONN ENOTCONN
#define NGX_ETIMEDOUT ETIMEDOUT
#define NGX_ECONNREFUSED ECONNREFUSED
#define NGX_ENAMETOOLONG ENAMETOOLONG
#define NGX_ENETDOWN ENETDOWN
#define NGX_ENETUNREACH ENETUNREACH
#define NGX_EHOSTDOWN EHOSTDOWN
#define NGX_EHOSTUNREACH EHOSTUNREACH
#define NGX_ENOSYS ENOSYS
#define NGX_ECANCELED ECANCELED
#define NGX_EILSEQ EILSEQ
#define NGX_ENOMOREFILES 0
#define NGX_ELOOP ELOOP
#define NGX_EBADF EBADF


#define NGX_EMLINK EMLINK





#define NGX_EAGAIN EAGAIN



#define ngx_errno errno
#define ngx_socket_errno errno
#define ngx_set_errno(err) errno = err
#define ngx_set_socket_errno(err) errno = err


u_char *ngx_strerror(ngx_err_t err, u_char *errstr, size_t size);
ngx_int_t ngx_strerror_init(void);
# 47 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_atomic.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_atomic.h" 3 4
#define _NGX_ATOMIC_H_INCLUDED_ 
# 45 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_atomic.h" 3 4
#define NGX_HAVE_ATOMIC_OPS 1

typedef long ngx_atomic_int_t;
typedef unsigned long ngx_atomic_uint_t;


#define NGX_ATOMIC_T_LEN (sizeof("-9223372036854775808") - 1)




typedef volatile ngx_atomic_uint_t ngx_atomic_t;


#define ngx_atomic_cmp_set(lock,old,set) __sync_bool_compare_and_swap(lock, old, set)


#define ngx_atomic_fetch_add(value,add) __sync_fetch_and_add(value, add)


#define ngx_memory_barrier() __sync_synchronize()


#define ngx_cpu_pause() __asm__ ("pause")
# 307 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_atomic.h" 3 4
void ngx_spinlock(ngx_atomic_t *lock, ngx_atomic_int_t value, ngx_uint_t spin);

#define ngx_trylock(lock) (*(lock) == 0 && ngx_atomic_cmp_set(lock, 0, 1))
#define ngx_unlock(lock) *(lock) = 0
# 48 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_thread.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_thread.h" 3 4
#define _NGX_THREAD_H_INCLUDED_ 
# 65 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_thread.h" 3 4
#define ngx_log_tid 0
#define NGX_TID_T_FMT "%d"
# 49 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_rbtree.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_rbtree.h" 3 4
#define _NGX_RBTREE_H_INCLUDED_ 






typedef ngx_uint_t ngx_rbtree_key_t;
typedef ngx_int_t ngx_rbtree_key_int_t;


typedef struct ngx_rbtree_node_s ngx_rbtree_node_t;

struct ngx_rbtree_node_s {
    ngx_rbtree_key_t key;
    ngx_rbtree_node_t *left;
    ngx_rbtree_node_t *right;
    ngx_rbtree_node_t *parent;
    u_char color;
    u_char data;
};


typedef struct ngx_rbtree_s ngx_rbtree_t;

typedef void (*ngx_rbtree_insert_pt) (ngx_rbtree_node_t *root,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);

struct ngx_rbtree_s {
    ngx_rbtree_node_t *root;
    ngx_rbtree_node_t *sentinel;
    ngx_rbtree_insert_pt insert;
};


#define ngx_rbtree_init(tree,s,i) ngx_rbtree_sentinel_init(s); (tree)->root = s; (tree)->sentinel = s; (tree)->insert = i





#define ngx_rbtree_data(node,type,link) (type *) ((u_char *) (node) - offsetof(type, link))



void ngx_rbtree_insert(ngx_rbtree_t *tree, ngx_rbtree_node_t *node);
void ngx_rbtree_delete(ngx_rbtree_t *tree, ngx_rbtree_node_t *node);
void ngx_rbtree_insert_value(ngx_rbtree_node_t *root, ngx_rbtree_node_t *node,
    ngx_rbtree_node_t *sentinel);
void ngx_rbtree_insert_timer_value(ngx_rbtree_node_t *root,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);
ngx_rbtree_node_t *ngx_rbtree_next(ngx_rbtree_t *tree,
    ngx_rbtree_node_t *node);


#define ngx_rbt_red(node) ((node)->color = 1)
#define ngx_rbt_black(node) ((node)->color = 0)
#define ngx_rbt_is_red(node) ((node)->color)
#define ngx_rbt_is_black(node) (!ngx_rbt_is_red(node))
#define ngx_rbt_copy_color(n1,n2) (n1->color = n2->color)




#define ngx_rbtree_sentinel_init(node) ngx_rbt_black(node)


static inline ngx_rbtree_node_t *
ngx_rbtree_min(ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    while (node->left != sentinel) {
        node = node->left;
    }

    return node;
}
# 50 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_time.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_time.h" 3 4
#define _NGX_TIME_H_INCLUDED_ 






typedef ngx_rbtree_key_t ngx_msec_t;
typedef ngx_rbtree_key_int_t ngx_msec_int_t;

typedef struct tm ngx_tm_t;

#define ngx_tm_sec tm_sec
#define ngx_tm_min tm_min
#define ngx_tm_hour tm_hour
#define ngx_tm_mday tm_mday
#define ngx_tm_mon tm_mon
#define ngx_tm_year tm_year
#define ngx_tm_wday tm_wday
#define ngx_tm_isdst tm_isdst

#define ngx_tm_sec_t int
#define ngx_tm_min_t int
#define ngx_tm_hour_t int
#define ngx_tm_mday_t int
#define ngx_tm_mon_t int
#define ngx_tm_year_t int
#define ngx_tm_wday_t int



#define ngx_tm_gmtoff tm_gmtoff
#define ngx_tm_zone tm_zone
# 51 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_time.h" 3 4
#define ngx_timezone(isdst) (- (isdst ? timezone + 3600 : timezone) / 60)




void ngx_timezone_update(void);
void ngx_localtime(time_t s, ngx_tm_t *tm);
void ngx_libc_localtime(time_t s, struct tm *tm);
void ngx_libc_gmtime(time_t s, struct tm *tm);

#define ngx_gettimeofday(tp) (void) gettimeofday(tp, NULL);
#define ngx_msleep(ms) (void) usleep(ms * 1000)
#define ngx_sleep(s) (void) sleep(s)
# 51 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_socket.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_socket.h" 3 4
#define _NGX_SOCKET_H_INCLUDED_ 





#define NGX_WRITE_SHUTDOWN SHUT_WR

typedef int ngx_socket_t;

#define ngx_socket socket
#define ngx_socket_n "socket()"




int ngx_nonblocking(ngx_socket_t s);
int ngx_blocking(ngx_socket_t s);

#define ngx_nonblocking_n "ioctl(FIONBIO)"
#define ngx_blocking_n "ioctl(!FIONBIO)"
# 43 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_socket.h" 3 4
#define ngx_socket_nread(s,n) ioctl(s, FIONREAD, n)
#define ngx_socket_nread_n "ioctl(FIONREAD)"



int ngx_tcp_nopush(ngx_socket_t s);
int ngx_tcp_push(ngx_socket_t s);
# 58 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_socket.h" 3 4
#define ngx_tcp_nopush_n "setsockopt(TCP_NOPUSH)"
#define ngx_tcp_push_n "setsockopt(!TCP_NOPUSH)"




#define ngx_shutdown_socket shutdown
#define ngx_shutdown_socket_n "shutdown()"

#define ngx_close_socket close
#define ngx_close_socket_n "close() socket"
# 52 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_string.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_string.h" 3 4
#define _NGX_STRING_H_INCLUDED_ 






typedef struct {
    size_t len;
    u_char *data;
} ngx_str_t;


typedef struct {
    ngx_str_t key;
    ngx_str_t value;
} ngx_keyval_t;


typedef struct {
    unsigned len:28;

    unsigned valid:1;
    unsigned no_cacheable:1;
    unsigned not_found:1;
    unsigned escape:1;

    u_char *data;
} ngx_variable_value_t;


#define ngx_string(str) { sizeof(str) - 1, (u_char *) str }
#define ngx_null_string { 0, NULL }
#define ngx_str_set(str,text) (str)->len = sizeof(text) - 1; (str)->data = (u_char *) text

#define ngx_str_null(str) (str)->len = 0; (str)->data = NULL


#define ngx_tolower(c) (u_char) ((c >= 'A' && c <= 'Z') ? (c | 0x20) : c)
#define ngx_toupper(c) (u_char) ((c >= 'a' && c <= 'z') ? (c & ~0x20) : c)

void ngx_strlow(u_char *dst, u_char *src, size_t n);


#define ngx_strncmp(s1,s2,n) strncmp((const char *) s1, (const char *) s2, n)



#define ngx_strcmp(s1,s2) strcmp((const char *) s1, (const char *) s2)


#define ngx_strstr(s1,s2) strstr((const char *) s1, (const char *) s2)
#define ngx_strlen(s) strlen((const char *) s)

size_t ngx_strnlen(u_char *p, size_t n);

#define ngx_strchr(s1,c) strchr((const char *) s1, (int) c)

static inline u_char *
ngx_strlchr(u_char *p, u_char *last, u_char c)
{
    while (p < last) {

        if (*p == c) {
            return p;
        }

        p++;
    }

    return ((void *)0);
}







#define ngx_memzero(buf,n) (void) memset(buf, 0, n)
#define ngx_memset(buf,c,n) (void) memset(buf, c, n)

void ngx_explicit_memzero(void *buf, size_t n);
# 106 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_string.h" 3 4
#define ngx_memcpy(dst,src,n) (void) memcpy(dst, src, n)
#define ngx_cpymem(dst,src,n) (((u_char *) memcpy(dst, src, n)) + (n))
# 138 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_string.h" 3 4
#define ngx_copy ngx_cpymem




#define ngx_memmove(dst,src,n) (void) memmove(dst, src, n)
#define ngx_movemem(dst,src,n) (((u_char *) memmove(dst, src, n)) + (n))



#define ngx_memcmp(s1,s2,n) memcmp((const char *) s1, (const char *) s2, n)


u_char *ngx_cpystrn(u_char *dst, u_char *src, size_t n);
u_char *ngx_pstrdup(ngx_pool_t *pool, ngx_str_t *src);
u_char * ngx_sprintf(u_char *buf, const char *fmt, ...);
u_char * ngx_snprintf(u_char *buf, size_t max, const char *fmt, ...);
u_char * ngx_slprintf(u_char *buf, u_char *last, const char *fmt,
    ...);
u_char *ngx_vslprintf(u_char *buf, u_char *last, const char *fmt, va_list args);
#define ngx_vsnprintf(buf,max,fmt,args) ngx_vslprintf(buf, buf + (max), fmt, args)


ngx_int_t ngx_strcasecmp(u_char *s1, u_char *s2);
ngx_int_t ngx_strncasecmp(u_char *s1, u_char *s2, size_t n);

u_char *ngx_strnstr(u_char *s1, char *s2, size_t n);

u_char *ngx_strstrn(u_char *s1, char *s2, size_t n);
u_char *ngx_strcasestrn(u_char *s1, char *s2, size_t n);
u_char *ngx_strlcasestrn(u_char *s1, u_char *last, u_char *s2, size_t n);

ngx_int_t ngx_rstrncmp(u_char *s1, u_char *s2, size_t n);
ngx_int_t ngx_rstrncasecmp(u_char *s1, u_char *s2, size_t n);
ngx_int_t ngx_memn2cmp(u_char *s1, u_char *s2, size_t n1, size_t n2);
ngx_int_t ngx_dns_strcmp(u_char *s1, u_char *s2);
ngx_int_t ngx_filename_cmp(u_char *s1, u_char *s2, size_t n);

ngx_int_t ngx_atoi(u_char *line, size_t n);
ngx_int_t ngx_atofp(u_char *line, size_t n, size_t point);
ssize_t ngx_atosz(u_char *line, size_t n);
off_t ngx_atoof(u_char *line, size_t n);
time_t ngx_atotm(u_char *line, size_t n);
ngx_int_t ngx_hextoi(u_char *line, size_t n);

u_char *ngx_hex_dump(u_char *dst, u_char *src, size_t len);


#define ngx_base64_encoded_length(len) (((len + 2) / 3) * 4)
#define ngx_base64_decoded_length(len) (((len + 3) / 4) * 3)

void ngx_encode_base64(ngx_str_t *dst, ngx_str_t *src);
void ngx_encode_base64url(ngx_str_t *dst, ngx_str_t *src);
ngx_int_t ngx_decode_base64(ngx_str_t *dst, ngx_str_t *src);
ngx_int_t ngx_decode_base64url(ngx_str_t *dst, ngx_str_t *src);

uint32_t ngx_utf8_decode(u_char **p, size_t n);
size_t ngx_utf8_length(u_char *p, size_t n);
u_char *ngx_utf8_cpystrn(u_char *dst, u_char *src, size_t n, size_t len);


#define NGX_ESCAPE_URI 0
#define NGX_ESCAPE_ARGS 1
#define NGX_ESCAPE_URI_COMPONENT 2
#define NGX_ESCAPE_HTML 3
#define NGX_ESCAPE_REFRESH 4
#define NGX_ESCAPE_MEMCACHED 5
#define NGX_ESCAPE_MAIL_AUTH 6

#define NGX_UNESCAPE_URI 1
#define NGX_UNESCAPE_REDIRECT 2

uintptr_t ngx_escape_uri(u_char *dst, u_char *src, size_t size,
    ngx_uint_t type);
void ngx_unescape_uri(u_char **dst, u_char **src, size_t size, ngx_uint_t type);
uintptr_t ngx_escape_html(u_char *dst, u_char *src, size_t size);
uintptr_t ngx_escape_json(u_char *dst, u_char *src, size_t size);


typedef struct {
    ngx_rbtree_node_t node;
    ngx_str_t str;
} ngx_str_node_t;


void ngx_str_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);
ngx_str_node_t *ngx_str_rbtree_lookup(ngx_rbtree_t *rbtree, ngx_str_t *name,
    uint32_t hash);


void ngx_sort(void *base, size_t n, size_t size,
    ngx_int_t (*cmp)(const void *, const void *));
#define ngx_qsort qsort


#define ngx_value_helper(n) #n
#define ngx_value(n) ngx_value_helper(n)
# 53 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define _NGX_FILES_H_INCLUDED_ 






typedef int ngx_fd_t;
typedef struct stat ngx_file_info_t;
typedef ino_t ngx_file_uniq_t;


typedef struct {
    u_char *name;
    size_t size;
    void *addr;
    ngx_fd_t fd;
    ngx_log_t *log;
} ngx_file_mapping_t;


typedef struct {
    DIR *dir;
    struct dirent *de;
    struct stat info;

    unsigned type:8;
    unsigned valid_info:1;
} ngx_dir_t;


typedef struct {
    size_t n;
    glob_t pglob;
    u_char *pattern;
    ngx_log_t *log;
    ngx_uint_t test;
} ngx_glob_t;


#define NGX_INVALID_FILE -1
#define NGX_FILE_ERROR -1
# 65 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define ngx_open_file(name,mode,create,access) open((const char *) name, mode|create, access)




#define ngx_open_file_n "open()"

#define NGX_FILE_RDONLY O_RDONLY
#define NGX_FILE_WRONLY O_WRONLY
#define NGX_FILE_RDWR O_RDWR
#define NGX_FILE_CREATE_OR_OPEN O_CREAT
#define NGX_FILE_OPEN 0
#define NGX_FILE_TRUNCATE (O_CREAT|O_TRUNC)
#define NGX_FILE_APPEND (O_WRONLY|O_APPEND)
#define NGX_FILE_NONBLOCK O_NONBLOCK


#define NGX_FILE_NOFOLLOW O_NOFOLLOW


#define NGX_FILE_DIRECTORY O_DIRECTORY
# 100 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define NGX_FILE_SEARCH (O_RDONLY|NGX_FILE_DIRECTORY)




#define NGX_FILE_DEFAULT_ACCESS 0644
#define NGX_FILE_OWNER_ACCESS 0600


#define ngx_close_file close
#define ngx_close_file_n "close()"


#define ngx_delete_file(name) unlink((const char *) name)
#define ngx_delete_file_n "unlink()"


ngx_fd_t ngx_open_tempfile(u_char *name, ngx_uint_t persistent,
    ngx_uint_t access);
#define ngx_open_tempfile_n "open()"


ssize_t ngx_read_file(ngx_file_t *file, u_char *buf, size_t size, off_t offset);

#define ngx_read_file_n "pread()"




ssize_t ngx_write_file(ngx_file_t *file, u_char *buf, size_t size,
    off_t offset);

ssize_t ngx_write_chain_to_file(ngx_file_t *file, ngx_chain_t *ce,
    off_t offset, ngx_pool_t *pool);


#define ngx_read_fd read
#define ngx_read_fd_n "read()"






static inline ssize_t
ngx_write_fd(ngx_fd_t fd, void *buf, size_t n)
{
    return write(fd, buf, n);
}

#define ngx_write_fd_n "write()"


#define ngx_write_console ngx_write_fd


#define ngx_linefeed(p) *p++ = LF;
#define NGX_LINEFEED_SIZE 1
#define NGX_LINEFEED "\x0a"


#define ngx_rename_file(o,n) rename((const char *) o, (const char *) n)
#define ngx_rename_file_n "rename()"


#define ngx_change_file_access(n,a) chmod((const char *) n, a)
#define ngx_change_file_access_n "chmod()"


ngx_int_t ngx_set_file_time(u_char *name, ngx_fd_t fd, time_t s);
#define ngx_set_file_time_n "utimes()"


#define ngx_file_info(file,sb) stat((const char *) file, sb)
#define ngx_file_info_n "stat()"

#define ngx_fd_info(fd,sb) fstat(fd, sb)
#define ngx_fd_info_n "fstat()"

#define ngx_link_info(file,sb) lstat((const char *) file, sb)
#define ngx_link_info_n "lstat()"

#define ngx_is_dir(sb) (S_ISDIR((sb)->st_mode))
#define ngx_is_file(sb) (S_ISREG((sb)->st_mode))
#define ngx_is_link(sb) (S_ISLNK((sb)->st_mode))
#define ngx_is_exec(sb) (((sb)->st_mode & S_IXUSR) == S_IXUSR)
#define ngx_file_access(sb) ((sb)->st_mode & 0777)
#define ngx_file_size(sb) (sb)->st_size
#define ngx_file_fs_size(sb) (((sb)->st_blocks * 512 > (sb)->st_size && (sb)->st_blocks * 512 < (sb)->st_size + 8 * (sb)->st_blksize) ? (sb)->st_blocks * 512 : (sb)->st_size)



#define ngx_file_mtime(sb) (sb)->st_mtime
#define ngx_file_uniq(sb) (sb)->st_ino


ngx_int_t ngx_create_file_mapping(ngx_file_mapping_t *fm);
void ngx_close_file_mapping(ngx_file_mapping_t *fm);


#define ngx_realpath(p,r) (u_char *) realpath((char *) p, (char *) r)
#define ngx_realpath_n "realpath()"
#define ngx_getcwd(buf,size) (getcwd((char *) buf, size) != NULL)
#define ngx_getcwd_n "getcwd()"
#define ngx_path_separator(c) ((c) == '/')




#define NGX_HAVE_MAX_PATH 1
#define NGX_MAX_PATH PATH_MAX
# 219 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
ngx_int_t ngx_open_dir(ngx_str_t *name, ngx_dir_t *dir);
#define ngx_open_dir_n "opendir()"


#define ngx_close_dir(d) closedir((d)->dir)
#define ngx_close_dir_n "closedir()"


ngx_int_t ngx_read_dir(ngx_dir_t *dir);
#define ngx_read_dir_n "readdir()"


#define ngx_create_dir(name,access) mkdir((const char *) name, access)
#define ngx_create_dir_n "mkdir()"


#define ngx_delete_dir(name) rmdir((const char *) name)
#define ngx_delete_dir_n "rmdir()"


#define ngx_dir_access(a) (a | (a & 0444) >> 2)


#define ngx_de_name(dir) ((u_char *) (dir)->de->d_name)

#define ngx_de_namelen(dir) (dir)->de->d_namlen




static inline ngx_int_t
ngx_de_info(u_char *name, ngx_dir_t *dir)
{
    dir->type = 0;
    return stat((const char *) name, &dir->info);
}

#define ngx_de_info_n "stat()"
#define ngx_de_link_info(name,dir) lstat((const char *) name, &(dir)->info)
#define ngx_de_link_info_n "lstat()"
# 267 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define ngx_de_is_dir(dir) (((dir)->type) ? ((dir)->type == DT_DIR) : (S_ISDIR((dir)->info.st_mode)))

#define ngx_de_is_file(dir) (((dir)->type) ? ((dir)->type == DT_REG) : (S_ISREG((dir)->info.st_mode)))

#define ngx_de_is_link(dir) (((dir)->type) ? ((dir)->type == DT_LNK) : (S_ISLNK((dir)->info.st_mode)))
# 282 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define ngx_de_access(dir) (((dir)->info.st_mode) & 0777)
#define ngx_de_size(dir) (dir)->info.st_size
#define ngx_de_fs_size(dir) ngx_max((dir)->info.st_size, (dir)->info.st_blocks * 512)

#define ngx_de_mtime(dir) (dir)->info.st_mtime


ngx_int_t ngx_open_glob(ngx_glob_t *gl);
#define ngx_open_glob_n "glob()"
ngx_int_t ngx_read_glob(ngx_glob_t *gl, ngx_str_t *name);
void ngx_close_glob(ngx_glob_t *gl);


ngx_err_t ngx_trylock_fd(ngx_fd_t fd);
ngx_err_t ngx_lock_fd(ngx_fd_t fd);
ngx_err_t ngx_unlock_fd(ngx_fd_t fd);

#define ngx_trylock_fd_n "fcntl(F_SETLK, F_WRLCK)"
#define ngx_lock_fd_n "fcntl(F_SETLKW, F_WRLCK)"
#define ngx_unlock_fd_n "fcntl(F_SETLK, F_UNLCK)"
# 320 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define ngx_read_ahead(fd,n) 0
#define ngx_read_ahead_n "ngx_read_ahead_n"
# 336 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
#define ngx_directio_on(fd) fcntl(fd, F_NOCACHE, 1)
#define ngx_directio_on_n "fcntl(F_NOCACHE, 1)"
# 351 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_files.h" 3 4
size_t ngx_fs_bsize(u_char *name);
off_t ngx_fs_available(u_char *name);




#define ngx_openat_file(fd,name,mode,create,access) openat(fd, (const char *) name, mode|create, access)


#define ngx_openat_file_n "openat()"

#define ngx_file_at_info(fd,name,sb,flag) fstatat(fd, (const char *) name, sb, flag)


#define ngx_file_at_info_n "fstatat()"

#define NGX_AT_FDCWD (ngx_fd_t) AT_FDCWD




#define ngx_stdout STDOUT_FILENO
#define ngx_stderr STDERR_FILENO
#define ngx_set_stderr(fd) dup2(fd, STDERR_FILENO)
#define ngx_set_stderr_n "dup2(STDERR_FILENO)"
# 54 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_shmem.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_shmem.h" 3 4
#define _NGX_SHMEM_H_INCLUDED_ 






typedef struct {
    u_char *addr;
    size_t size;
    ngx_str_t name;
    ngx_log_t *log;
    ngx_uint_t exists;
} ngx_shm_t;


ngx_int_t ngx_shm_alloc(ngx_shm_t *shm);
void ngx_shm_free(ngx_shm_t *shm);
# 55 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_process.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_process.h" 3 4
#define _NGX_PROCESS_H_INCLUDED_ 


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_setaffinity.h" 1 3 4






#define _NGX_SETAFFINITY_H_INCLUDED_ 
# 30 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_setaffinity.h" 3 4
#define ngx_setaffinity(cpu_affinity,log) 

typedef uint64_t ngx_cpuset_t;
# 13 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_process.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_setproctitle.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_setproctitle.h" 3 4
#define _NGX_SETPROCTITLE_H_INCLUDED_ 
# 34 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_setproctitle.h" 3 4
#define NGX_SETPROCTITLE_USES_ENV 1
#define NGX_SETPROCTITLE_PAD '\0'

ngx_int_t ngx_init_setproctitle(ngx_log_t *log);
void ngx_setproctitle(char *title);
# 14 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_process.h" 2 3 4


typedef pid_t ngx_pid_t;

#define NGX_INVALID_PID -1

typedef void (*ngx_spawn_proc_pt) (ngx_cycle_t *cycle, void *data);

typedef struct {
    ngx_pid_t pid;
    int status;
    ngx_socket_t channel[2];

    ngx_spawn_proc_pt proc;
    void *data;
    char *name;

    unsigned respawn:1;
    unsigned just_spawn:1;
    unsigned detached:1;
    unsigned exiting:1;
    unsigned exited:1;
} ngx_process_t;


typedef struct {
    char *path;
    char *name;
    char *const *argv;
    char *const *envp;
} ngx_exec_ctx_t;


#define NGX_MAX_PROCESSES 1024

#define NGX_PROCESS_NORESPAWN -1
#define NGX_PROCESS_JUST_SPAWN -2
#define NGX_PROCESS_RESPAWN -3
#define NGX_PROCESS_JUST_RESPAWN -4
#define NGX_PROCESS_DETACHED -5


#define ngx_getpid getpid
#define ngx_getppid getppid


#define ngx_log_pid ngx_pid



ngx_pid_t ngx_spawn_process(ngx_cycle_t *cycle,
    ngx_spawn_proc_pt proc, void *data, char *name, ngx_int_t respawn);
ngx_pid_t ngx_execute(ngx_cycle_t *cycle, ngx_exec_ctx_t *ctx);
ngx_int_t ngx_init_signals(ngx_log_t *log);
void ngx_debug_point(void);



#define ngx_sched_yield() sched_yield()





extern int ngx_argc;
extern char **ngx_argv;
extern char **ngx_os_argv;

extern ngx_pid_t ngx_pid;
extern ngx_pid_t ngx_parent;
extern ngx_socket_t ngx_channel;
extern ngx_int_t ngx_process_slot;
extern ngx_int_t ngx_last_process;
extern ngx_process_t ngx_processes[1024];
# 56 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_user.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_user.h" 3 4
#define _NGX_USER_H_INCLUDED_ 






typedef uid_t ngx_uid_t;
typedef gid_t ngx_gid_t;


ngx_int_t ngx_libc_crypt(ngx_pool_t *pool, u_char *key, u_char *salt,
    u_char **encrypted);
# 57 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_dlopen.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_dlopen.h" 3 4
#define _NGX_DLOPEN_H_INCLUDED_ 






#define ngx_dlopen(path) dlopen((char *) path, RTLD_NOW | RTLD_GLOBAL)
#define ngx_dlopen_n "dlopen()"

#define ngx_dlsym(handle,symbol) dlsym(handle, symbol)
#define ngx_dlsym_n "dlsym()"

#define ngx_dlclose(handle) dlclose(handle)
#define ngx_dlclose_n "dlclose()"



char *ngx_dlerror(void);
# 58 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_parse.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_parse.h" 3 4
#define _NGX_PARSE_H_INCLUDED_ 






ssize_t ngx_parse_size(ngx_str_t *line);
off_t ngx_parse_offset(ngx_str_t *line);
ngx_int_t ngx_parse_time(ngx_str_t *line, ngx_uint_t is_sec);
# 59 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_parse_time.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_parse_time.h" 3 4
#define _NGX_PARSE_TIME_H_INCLUDED_ 






time_t ngx_parse_http_time(u_char *value, size_t len);


#define ngx_http_parse_time(value,len) ngx_parse_http_time(value, len)
# 60 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_log.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_log.h" 3 4
#define _NGX_LOG_H_INCLUDED_ 






#define NGX_LOG_STDERR 0
#define NGX_LOG_EMERG 1
#define NGX_LOG_ALERT 2
#define NGX_LOG_CRIT 3
#define NGX_LOG_ERR 4
#define NGX_LOG_WARN 5
#define NGX_LOG_NOTICE 6
#define NGX_LOG_INFO 7
#define NGX_LOG_DEBUG 8

#define NGX_LOG_DEBUG_CORE 0x010
#define NGX_LOG_DEBUG_ALLOC 0x020
#define NGX_LOG_DEBUG_MUTEX 0x040
#define NGX_LOG_DEBUG_EVENT 0x080
#define NGX_LOG_DEBUG_HTTP 0x100
#define NGX_LOG_DEBUG_MAIL 0x200
#define NGX_LOG_DEBUG_STREAM 0x400






#define NGX_LOG_DEBUG_FIRST NGX_LOG_DEBUG_CORE
#define NGX_LOG_DEBUG_LAST NGX_LOG_DEBUG_STREAM
#define NGX_LOG_DEBUG_CONNECTION 0x80000000
#define NGX_LOG_DEBUG_ALL 0x7ffffff0


typedef u_char *(*ngx_log_handler_pt) (ngx_log_t *log, u_char *buf, size_t len);
typedef void (*ngx_log_writer_pt) (ngx_log_t *log, ngx_uint_t level,
    u_char *buf, size_t len);


struct ngx_log_s {
    ngx_uint_t log_level;
    ngx_open_file_t *file;

    ngx_atomic_uint_t connection;

    time_t disk_full_time;

    ngx_log_handler_pt handler;
    void *data;

    ngx_log_writer_pt writer;
    void *wdata;







    char *action;

    ngx_log_t *next;
};


#define NGX_MAX_ERROR_STR 2048






#define NGX_HAVE_VARIADIC_MACROS 1

#define ngx_log_error(level,log,...) if ((log)->log_level >= level) ngx_log_error_core(level, log, __VA_ARGS__)


void ngx_log_error_core(ngx_uint_t level, ngx_log_t *log, ngx_err_t err,
    const char *fmt, ...);

#define ngx_log_debug(level,log,...) if ((log)->log_level & level) ngx_log_error_core(NGX_LOG_DEBUG, log, __VA_ARGS__)
# 215 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_log.h" 3 4
#define ngx_log_debug0(level,log,err,fmt) 
#define ngx_log_debug1(level,log,err,fmt,arg1) 
#define ngx_log_debug2(level,log,err,fmt,arg1,arg2) 
#define ngx_log_debug3(level,log,err,fmt,arg1,arg2,arg3) 
#define ngx_log_debug4(level,log,err,fmt,arg1,arg2,arg3,arg4) 
#define ngx_log_debug5(level,log,err,fmt,arg1,arg2,arg3,arg4,arg5) 
#define ngx_log_debug6(level,log,err,fmt,arg1,arg2,arg3,arg4,arg5,arg6) 
#define ngx_log_debug7(level,log,err,fmt,arg1,arg2,arg3,arg4,arg5,arg6,arg7) 

#define ngx_log_debug8(level,log,err,fmt,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8) 






ngx_log_t *ngx_log_init(u_char *prefix, u_char *error_log);
void ngx_log_abort(ngx_err_t err, const char *fmt, ...);
void ngx_log_stderr(ngx_err_t err, const char *fmt, ...);
u_char *ngx_log_errno(u_char *buf, u_char *last, ngx_err_t err);
ngx_int_t ngx_log_open_default(ngx_cycle_t *cycle);
ngx_int_t ngx_log_redirect_stderr(ngx_cycle_t *cycle);
ngx_log_t *ngx_log_get_file_log(ngx_log_t *head);
char *ngx_log_set_log(ngx_conf_t *cf, ngx_log_t **head);
# 250 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_log.h" 3 4
static inline void
ngx_write_stderr(char *text)
{
    (void) ngx_write_fd(2, text, strlen((const char *) text));
}


static inline void
ngx_write_stdout(char *text)
{
    (void) ngx_write_fd(1, text, strlen((const char *) text));
}


extern ngx_module_t ngx_errlog_module;
extern ngx_uint_t ngx_use_stderr;
# 61 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_alloc.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_alloc.h" 3 4
#define _NGX_ALLOC_H_INCLUDED_ 






void *ngx_alloc(size_t size, ngx_log_t *log);
void *ngx_calloc(size_t size, ngx_log_t *log);

#define ngx_free free
# 31 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_alloc.h" 3 4
void *ngx_memalign(size_t alignment, size_t size, ngx_log_t *log);
# 40 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_alloc.h" 3 4
extern ngx_uint_t ngx_pagesize;
extern ngx_uint_t ngx_pagesize_shift;
extern ngx_uint_t ngx_cacheline_size;
# 62 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_palloc.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_palloc.h" 3 4
#define _NGX_PALLOC_H_INCLUDED_ 
# 20 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_palloc.h" 3 4
#define NGX_MAX_ALLOC_FROM_POOL (ngx_pagesize - 1)

#define NGX_DEFAULT_POOL_SIZE (16 * 1024)

#define NGX_POOL_ALIGNMENT 16
#define NGX_MIN_POOL_SIZE ngx_align((sizeof(ngx_pool_t) + 2 * sizeof(ngx_pool_large_t)), NGX_POOL_ALIGNMENT)




typedef void (*ngx_pool_cleanup_pt)(void *data);

typedef struct ngx_pool_cleanup_s ngx_pool_cleanup_t;

struct ngx_pool_cleanup_s {
    ngx_pool_cleanup_pt handler;
    void *data;
    ngx_pool_cleanup_t *next;
};


typedef struct ngx_pool_large_s ngx_pool_large_t;

struct ngx_pool_large_s {
    ngx_pool_large_t *next;
    void *alloc;
};


typedef struct {
    u_char *last;
    u_char *end;
    ngx_pool_t *next;
    ngx_uint_t failed;
} ngx_pool_data_t;


struct ngx_pool_s {
    ngx_pool_data_t d;
    size_t max;
    ngx_pool_t *current;
    ngx_chain_t *chain;
    ngx_pool_large_t *large;
    ngx_pool_cleanup_t *cleanup;
    ngx_log_t *log;
};


typedef struct {
    ngx_fd_t fd;
    u_char *name;
    ngx_log_t *log;
} ngx_pool_cleanup_file_t;


ngx_pool_t *ngx_create_pool(size_t size, ngx_log_t *log);
void ngx_destroy_pool(ngx_pool_t *pool);
void ngx_reset_pool(ngx_pool_t *pool);

void *ngx_palloc(ngx_pool_t *pool, size_t size);
void *ngx_pnalloc(ngx_pool_t *pool, size_t size);
void *ngx_pcalloc(ngx_pool_t *pool, size_t size);
void *ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment);
ngx_int_t ngx_pfree(ngx_pool_t *pool, void *p);


ngx_pool_cleanup_t *ngx_pool_cleanup_add(ngx_pool_t *p, size_t size);
void ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd);
void ngx_pool_cleanup_file(void *data);
void ngx_pool_delete_file(void *data);
# 63 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_buf.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_buf.h" 3 4
#define _NGX_BUF_H_INCLUDED_ 






typedef void * ngx_buf_tag_t;

typedef struct ngx_buf_s ngx_buf_t;

struct ngx_buf_s {
    u_char *pos;
    u_char *last;
    off_t file_pos;
    off_t file_last;

    u_char *start;
    u_char *end;
    ngx_buf_tag_t tag;
    ngx_file_t *file;
    ngx_buf_t *shadow;



    unsigned temporary:1;





    unsigned memory:1;


    unsigned mmap:1;

    unsigned recycled:1;
    unsigned in_file:1;
    unsigned flush:1;
    unsigned sync:1;
    unsigned last_buf:1;
    unsigned last_in_chain:1;

    unsigned last_shadow:1;
    unsigned temp_file:1;

               int num;
};


struct ngx_chain_s {
    ngx_buf_t *buf;
    ngx_chain_t *next;
};


typedef struct {
    ngx_int_t num;
    size_t size;
} ngx_bufs_t;


typedef struct ngx_output_chain_ctx_s ngx_output_chain_ctx_t;

typedef ngx_int_t (*ngx_output_chain_filter_pt)(void *ctx, ngx_chain_t *in);

typedef void (*ngx_output_chain_aio_pt)(ngx_output_chain_ctx_t *ctx,
    ngx_file_t *file);

struct ngx_output_chain_ctx_s {
    ngx_buf_t *buf;
    ngx_chain_t *in;
    ngx_chain_t *free;
    ngx_chain_t *busy;

    unsigned sendfile:1;
    unsigned directio:1;
    unsigned unaligned:1;
    unsigned need_in_memory:1;
    unsigned need_in_temp:1;
    unsigned aio:1;
# 101 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_buf.h" 3 4
    off_t alignment;

    ngx_pool_t *pool;
    ngx_int_t allocated;
    ngx_bufs_t bufs;
    ngx_buf_tag_t tag;

    ngx_output_chain_filter_pt output_filter;
    void *filter_ctx;
};


typedef struct {
    ngx_chain_t *out;
    ngx_chain_t **last;
    ngx_connection_t *connection;
    ngx_pool_t *pool;
    off_t limit;
} ngx_chain_writer_ctx_t;


#define NGX_CHAIN_ERROR (ngx_chain_t *) NGX_ERROR


#define ngx_buf_in_memory(b) ((b)->temporary || (b)->memory || (b)->mmap)
#define ngx_buf_in_memory_only(b) (ngx_buf_in_memory(b) && !(b)->in_file)

#define ngx_buf_special(b) (((b)->flush || (b)->last_buf || (b)->sync) && !ngx_buf_in_memory(b) && !(b)->in_file)



#define ngx_buf_sync_only(b) ((b)->sync && !ngx_buf_in_memory(b) && !(b)->in_file && !(b)->flush && !(b)->last_buf)



#define ngx_buf_size(b) (ngx_buf_in_memory(b) ? (off_t) ((b)->last - (b)->pos): ((b)->file_last - (b)->file_pos))



ngx_buf_t *ngx_create_temp_buf(ngx_pool_t *pool, size_t size);
ngx_chain_t *ngx_create_chain_of_bufs(ngx_pool_t *pool, ngx_bufs_t *bufs);


#define ngx_alloc_buf(pool) ngx_palloc(pool, sizeof(ngx_buf_t))
#define ngx_calloc_buf(pool) ngx_pcalloc(pool, sizeof(ngx_buf_t))

ngx_chain_t *ngx_alloc_chain_link(ngx_pool_t *pool);
#define ngx_free_chain(pool,cl) (cl)->next = (pool)->chain; (pool)->chain = (cl)





ngx_int_t ngx_output_chain(ngx_output_chain_ctx_t *ctx, ngx_chain_t *in);
ngx_int_t ngx_chain_writer(void *ctx, ngx_chain_t *in);

ngx_int_t ngx_chain_add_copy(ngx_pool_t *pool, ngx_chain_t **chain,
    ngx_chain_t *in);
ngx_chain_t *ngx_chain_get_free_buf(ngx_pool_t *p, ngx_chain_t **free);
void ngx_chain_update_chains(ngx_pool_t *p, ngx_chain_t **free,
    ngx_chain_t **busy, ngx_chain_t **out, ngx_buf_tag_t tag);

off_t ngx_chain_coalesce_file(ngx_chain_t **in, off_t limit);

ngx_chain_t *ngx_chain_update_sent(ngx_chain_t *in, off_t sent);
# 64 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_queue.h" 1 3 4
# 13 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_queue.h" 3 4
#define _NGX_QUEUE_H_INCLUDED_ 


typedef struct ngx_queue_s ngx_queue_t;

struct ngx_queue_s {
    ngx_queue_t *prev;
    ngx_queue_t *next;
};


#define ngx_queue_init(q) (q)->prev = q; (q)->next = q




#define ngx_queue_empty(h) (h == (h)->prev)



#define ngx_queue_insert_head(h,x) (x)->next = (h)->next; (x)->next->prev = x; (x)->prev = h; (h)->next = x






#define ngx_queue_insert_after ngx_queue_insert_head


#define ngx_queue_insert_tail(h,x) (x)->prev = (h)->prev; (x)->prev->next = x; (x)->next = h; (h)->prev = x






#define ngx_queue_head(h) (h)->next



#define ngx_queue_last(h) (h)->prev



#define ngx_queue_sentinel(h) (h)



#define ngx_queue_next(q) (q)->next



#define ngx_queue_prev(q) (q)->prev
# 80 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_queue.h" 3 4
#define ngx_queue_remove(x) (x)->next->prev = (x)->prev; (x)->prev->next = (x)->next






#define ngx_queue_split(h,q,n) (n)->prev = (h)->prev; (n)->prev->next = n; (n)->next = q; (h)->prev = (q)->prev; (h)->prev->next = h; (q)->prev = n;
# 96 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_queue.h" 3 4
#define ngx_queue_add(h,n) (h)->prev->next = (n)->next; (n)->next->prev = (h)->prev; (h)->prev = (n)->prev; (h)->prev->next = h;






#define ngx_queue_data(q,type,link) (type *) ((u_char *) q - offsetof(type, link))



ngx_queue_t *ngx_queue_middle(ngx_queue_t *queue);
void ngx_queue_sort(ngx_queue_t *queue,
    ngx_int_t (*cmp)(const ngx_queue_t *, const ngx_queue_t *));
# 65 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_array.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_array.h" 3 4
#define _NGX_ARRAY_H_INCLUDED_ 






typedef struct {
    void *elts;
    ngx_uint_t nelts;
    size_t size;
    ngx_uint_t nalloc;
    ngx_pool_t *pool;
} ngx_array_t;


ngx_array_t *ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size);
void ngx_array_destroy(ngx_array_t *a);
void *ngx_array_push(ngx_array_t *a);
void *ngx_array_push_n(ngx_array_t *a, ngx_uint_t n);


static inline ngx_int_t
ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size)
{





    array->nelts = 0;
    array->size = size;
    array->nalloc = n;
    array->pool = pool;

    array->elts = ngx_palloc(pool, n * size);
    if (array->elts == ((void *)0)) {
        return -1;
    }

    return 0;
}
# 66 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_list.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_list.h" 3 4
#define _NGX_LIST_H_INCLUDED_ 






typedef struct ngx_list_part_s ngx_list_part_t;

struct ngx_list_part_s {
    void *elts;
    ngx_uint_t nelts;
    ngx_list_part_t *next;
};


typedef struct {
    ngx_list_part_t *last;
    ngx_list_part_t part;
    size_t size;
    ngx_uint_t nalloc;
    ngx_pool_t *pool;
} ngx_list_t;


ngx_list_t *ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size);

static inline ngx_int_t
ngx_list_init(ngx_list_t *list, ngx_pool_t *pool, ngx_uint_t n, size_t size)
{
    list->part.elts = ngx_palloc(pool, n * size);
    if (list->part.elts == ((void *)0)) {
        return -1;
    }

    list->part.nelts = 0;
    list->part.next = ((void *)0);
    list->last = &list->part;
    list->size = size;
    list->nalloc = n;
    list->pool = pool;

    return 0;
}
# 80 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_list.h" 3 4
void *ngx_list_push(ngx_list_t *list);
# 67 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_hash.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_hash.h" 3 4
#define _NGX_HASH_H_INCLUDED_ 






typedef struct {
    void *value;
    u_short len;
    u_char name[1];
} ngx_hash_elt_t;


typedef struct {
    ngx_hash_elt_t **buckets;
    ngx_uint_t size;
} ngx_hash_t;


typedef struct {
    ngx_hash_t hash;
    void *value;
} ngx_hash_wildcard_t;


typedef struct {
    ngx_str_t key;
    ngx_uint_t key_hash;
    void *value;
} ngx_hash_key_t;


typedef ngx_uint_t (*ngx_hash_key_pt) (u_char *data, size_t len);


typedef struct {
    ngx_hash_t hash;
    ngx_hash_wildcard_t *wc_head;
    ngx_hash_wildcard_t *wc_tail;
} ngx_hash_combined_t;


typedef struct {
    ngx_hash_t *hash;
    ngx_hash_key_pt key;

    ngx_uint_t max_size;
    ngx_uint_t bucket_size;

    char *name;
    ngx_pool_t *pool;
    ngx_pool_t *temp_pool;
} ngx_hash_init_t;


#define NGX_HASH_SMALL 1
#define NGX_HASH_LARGE 2

#define NGX_HASH_LARGE_ASIZE 16384
#define NGX_HASH_LARGE_HSIZE 10007

#define NGX_HASH_WILDCARD_KEY 1
#define NGX_HASH_READONLY_KEY 2


typedef struct {
    ngx_uint_t hsize;

    ngx_pool_t *pool;
    ngx_pool_t *temp_pool;

    ngx_array_t keys;
    ngx_array_t *keys_hash;

    ngx_array_t dns_wc_head;
    ngx_array_t *dns_wc_head_hash;

    ngx_array_t dns_wc_tail;
    ngx_array_t *dns_wc_tail_hash;
} ngx_hash_keys_arrays_t;


typedef struct {
    ngx_uint_t hash;
    ngx_str_t key;
    ngx_str_t value;
    u_char *lowcase_key;
} ngx_table_elt_t;


void *ngx_hash_find(ngx_hash_t *hash, ngx_uint_t key, u_char *name, size_t len);
void *ngx_hash_find_wc_head(ngx_hash_wildcard_t *hwc, u_char *name, size_t len);
void *ngx_hash_find_wc_tail(ngx_hash_wildcard_t *hwc, u_char *name, size_t len);
void *ngx_hash_find_combined(ngx_hash_combined_t *hash, ngx_uint_t key,
    u_char *name, size_t len);

ngx_int_t ngx_hash_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names,
    ngx_uint_t nelts);
ngx_int_t ngx_hash_wildcard_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names,
    ngx_uint_t nelts);

#define ngx_hash(key,c) ((ngx_uint_t) key * 31 + c)
ngx_uint_t ngx_hash_key(u_char *data, size_t len);
ngx_uint_t ngx_hash_key_lc(u_char *data, size_t len);
ngx_uint_t ngx_hash_strlow(u_char *dst, u_char *src, size_t n);


ngx_int_t ngx_hash_keys_array_init(ngx_hash_keys_arrays_t *ha, ngx_uint_t type);
ngx_int_t ngx_hash_add_key(ngx_hash_keys_arrays_t *ha, ngx_str_t *key,
    void *value, ngx_uint_t flags);
# 68 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_file.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_file.h" 3 4
#define _NGX_FILE_H_INCLUDED_ 






struct ngx_file_s {
    ngx_fd_t fd;
    ngx_str_t name;
    ngx_file_info_t info;

    off_t offset;
    off_t sys_offset;

    ngx_log_t *log;
# 37 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_file.h" 3 4
    unsigned valid_info:1;
    unsigned directio:1;
};


#define NGX_MAX_PATH_LEVEL 3


typedef ngx_msec_t (*ngx_path_manager_pt) (void *data);
typedef ngx_msec_t (*ngx_path_purger_pt) (void *data);
typedef void (*ngx_path_loader_pt) (void *data);


typedef struct {
    ngx_str_t name;
    size_t len;
    size_t level[3];

    ngx_path_manager_pt manager;
    ngx_path_purger_pt purger;
    ngx_path_loader_pt loader;
    void *data;

    u_char *conf_file;
    ngx_uint_t line;
} ngx_path_t;


typedef struct {
    ngx_str_t name;
    size_t level[3];
} ngx_path_init_t;


typedef struct {
    ngx_file_t file;
    off_t offset;
    ngx_path_t *path;
    ngx_pool_t *pool;
    char *warn;

    ngx_uint_t access;

    unsigned log_level:8;
    unsigned persistent:1;
    unsigned clean:1;
    unsigned thread_write:1;
} ngx_temp_file_t;


typedef struct {
    ngx_uint_t access;
    ngx_uint_t path_access;
    time_t time;
    ngx_fd_t fd;

    unsigned create_path:1;
    unsigned delete_file:1;

    ngx_log_t *log;
} ngx_ext_rename_file_t;


typedef struct {
    off_t size;
    size_t buf_size;

    ngx_uint_t access;
    time_t time;

    ngx_log_t *log;
} ngx_copy_file_t;


typedef struct ngx_tree_ctx_s ngx_tree_ctx_t;

typedef ngx_int_t (*ngx_tree_init_handler_pt) (void *ctx, void *prev);
typedef ngx_int_t (*ngx_tree_handler_pt) (ngx_tree_ctx_t *ctx, ngx_str_t *name);

struct ngx_tree_ctx_s {
    off_t size;
    off_t fs_size;
    ngx_uint_t access;
    time_t mtime;

    ngx_tree_init_handler_pt init_handler;
    ngx_tree_handler_pt file_handler;
    ngx_tree_handler_pt pre_tree_handler;
    ngx_tree_handler_pt post_tree_handler;
    ngx_tree_handler_pt spec_handler;

    void *data;
    size_t alloc;

    ngx_log_t *log;
};


ngx_int_t ngx_get_full_name(ngx_pool_t *pool, ngx_str_t *prefix,
    ngx_str_t *name);

ssize_t ngx_write_chain_to_temp_file(ngx_temp_file_t *tf, ngx_chain_t *chain);
ngx_int_t ngx_create_temp_file(ngx_file_t *file, ngx_path_t *path,
    ngx_pool_t *pool, ngx_uint_t persistent, ngx_uint_t clean,
    ngx_uint_t access);
void ngx_create_hashed_filename(ngx_path_t *path, u_char *file, size_t len);
ngx_int_t ngx_create_path(ngx_file_t *file, ngx_path_t *path);
ngx_err_t ngx_create_full_path(u_char *dir, ngx_uint_t access);
ngx_int_t ngx_add_path(ngx_conf_t *cf, ngx_path_t **slot);
ngx_int_t ngx_create_paths(ngx_cycle_t *cycle, ngx_uid_t user);
ngx_int_t ngx_ext_rename_file(ngx_str_t *src, ngx_str_t *to,
    ngx_ext_rename_file_t *ext);
ngx_int_t ngx_copy_file(u_char *from, u_char *to, ngx_copy_file_t *cf);
ngx_int_t ngx_walk_tree(ngx_tree_ctx_t *ctx, ngx_str_t *tree);

ngx_atomic_uint_t ngx_next_temp_number(ngx_uint_t collision);

char *ngx_conf_set_path_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_merge_path_value(ngx_conf_t *cf, ngx_path_t **path,
    ngx_path_t *prev, ngx_path_init_t *init);
char *ngx_conf_set_access_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);


extern ngx_atomic_t *ngx_temp_number;
extern ngx_atomic_int_t ngx_random_number;
# 69 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_crc.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_crc.h" 3 4
#define _NGX_CRC_H_INCLUDED_ 
# 18 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_crc.h" 3 4
static inline uint32_t
ngx_crc(u_char *data, size_t len)
{
    uint32_t sum;

    for (sum = 0; len; len--) {






        sum = sum >> 1 | sum << 31;

        sum += *data++;
    }

    return sum;
}
# 70 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_crc32.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_crc32.h" 3 4
#define _NGX_CRC32_H_INCLUDED_ 






extern uint32_t *ngx_crc32_table_short;
extern uint32_t ngx_crc32_table256[];


static inline uint32_t
ngx_crc32_short(u_char *p, size_t len)
{
    u_char c;
    uint32_t crc;

    crc = 0xffffffff;

    while (len--) {
        c = *p++;
        crc = ngx_crc32_table_short[(crc ^ (c & 0xf)) & 0xf] ^ (crc >> 4);
        crc = ngx_crc32_table_short[(crc ^ (c >> 4)) & 0xf] ^ (crc >> 4);
    }

    return crc ^ 0xffffffff;
}


static inline uint32_t
ngx_crc32_long(u_char *p, size_t len)
{
    uint32_t crc;

    crc = 0xffffffff;

    while (len--) {
        crc = ngx_crc32_table256[(crc ^ *p++) & 0xff] ^ (crc >> 8);
    }

    return crc ^ 0xffffffff;
}


#define ngx_crc32_init(crc) crc = 0xffffffff



static inline void
ngx_crc32_update(uint32_t *crc, u_char *p, size_t len)
{
    uint32_t c;

    c = *crc;

    while (len--) {
        c = ngx_crc32_table256[(c ^ *p++) & 0xff] ^ (c >> 8);
    }

    *crc = c;
}


#define ngx_crc32_final(crc) crc ^= 0xffffffff



ngx_int_t ngx_crc32_table_init(void);
# 71 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_murmurhash.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_murmurhash.h" 3 4
#define _NGX_MURMURHASH_H_INCLUDED_ 






uint32_t ngx_murmur_hash2(u_char *data, size_t len);
# 72 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4

# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_regex.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_regex.h" 3 4
#define _NGX_REGEX_H_INCLUDED_ 
# 18 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_regex.h" 3 4
#define PCRE2_CODE_UNIT_WIDTH 8
# 1 "/usr/local/include/pcre2.h" 1 3 4
# 40 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_H_IDEMPOTENT_GUARD 



#define PCRE2_MAJOR 10
#define PCRE2_MINOR 40
#define PCRE2_PRERELEASE 
#define PCRE2_DATE 2022-04-14
# 66 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_EXP_DECL extern
# 81 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_CALL_CONVENTION 
# 90 "/usr/local/include/pcre2.h" 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 1 3 4
# 91 "/usr/local/include/pcre2.h" 2 3 4
# 105 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_ANCHORED 0x80000000u
#define PCRE2_NO_UTF_CHECK 0x40000000u
#define PCRE2_ENDANCHORED 0x20000000u
# 119 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_ALLOW_EMPTY_CLASS 0x00000001u
#define PCRE2_ALT_BSUX 0x00000002u
#define PCRE2_AUTO_CALLOUT 0x00000004u
#define PCRE2_CASELESS 0x00000008u
#define PCRE2_DOLLAR_ENDONLY 0x00000010u
#define PCRE2_DOTALL 0x00000020u
#define PCRE2_DUPNAMES 0x00000040u
#define PCRE2_EXTENDED 0x00000080u
#define PCRE2_FIRSTLINE 0x00000100u
#define PCRE2_MATCH_UNSET_BACKREF 0x00000200u
#define PCRE2_MULTILINE 0x00000400u
#define PCRE2_NEVER_UCP 0x00000800u
#define PCRE2_NEVER_UTF 0x00001000u
#define PCRE2_NO_AUTO_CAPTURE 0x00002000u
#define PCRE2_NO_AUTO_POSSESS 0x00004000u
#define PCRE2_NO_DOTSTAR_ANCHOR 0x00008000u
#define PCRE2_NO_START_OPTIMIZE 0x00010000u
#define PCRE2_UCP 0x00020000u
#define PCRE2_UNGREEDY 0x00040000u
#define PCRE2_UTF 0x00080000u
#define PCRE2_NEVER_BACKSLASH_C 0x00100000u
#define PCRE2_ALT_CIRCUMFLEX 0x00200000u
#define PCRE2_ALT_VERBNAMES 0x00400000u
#define PCRE2_USE_OFFSET_LIMIT 0x00800000u
#define PCRE2_EXTENDED_MORE 0x01000000u
#define PCRE2_LITERAL 0x02000000u
#define PCRE2_MATCH_INVALID_UTF 0x04000000u



#define PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES 0x00000001u
#define PCRE2_EXTRA_BAD_ESCAPE_IS_LITERAL 0x00000002u
#define PCRE2_EXTRA_MATCH_WORD 0x00000004u
#define PCRE2_EXTRA_MATCH_LINE 0x00000008u
#define PCRE2_EXTRA_ESCAPED_CR_IS_LF 0x00000010u
#define PCRE2_EXTRA_ALT_BSUX 0x00000020u
#define PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK 0x00000040u



#define PCRE2_JIT_COMPLETE 0x00000001u
#define PCRE2_JIT_PARTIAL_SOFT 0x00000002u
#define PCRE2_JIT_PARTIAL_HARD 0x00000004u
#define PCRE2_JIT_INVALID_UTF 0x00000100u







#define PCRE2_NOTBOL 0x00000001u
#define PCRE2_NOTEOL 0x00000002u
#define PCRE2_NOTEMPTY 0x00000004u
#define PCRE2_NOTEMPTY_ATSTART 0x00000008u
#define PCRE2_PARTIAL_SOFT 0x00000010u
#define PCRE2_PARTIAL_HARD 0x00000020u
#define PCRE2_DFA_RESTART 0x00000040u
#define PCRE2_DFA_SHORTEST 0x00000080u
#define PCRE2_SUBSTITUTE_GLOBAL 0x00000100u
#define PCRE2_SUBSTITUTE_EXTENDED 0x00000200u
#define PCRE2_SUBSTITUTE_UNSET_EMPTY 0x00000400u
#define PCRE2_SUBSTITUTE_UNKNOWN_UNSET 0x00000800u
#define PCRE2_SUBSTITUTE_OVERFLOW_LENGTH 0x00001000u
#define PCRE2_NO_JIT 0x00002000u
#define PCRE2_COPY_MATCHED_SUBJECT 0x00004000u
#define PCRE2_SUBSTITUTE_LITERAL 0x00008000u
#define PCRE2_SUBSTITUTE_MATCHED 0x00010000u
#define PCRE2_SUBSTITUTE_REPLACEMENT_ONLY 0x00020000u



#define PCRE2_CONVERT_UTF 0x00000001u
#define PCRE2_CONVERT_NO_UTF_CHECK 0x00000002u
#define PCRE2_CONVERT_POSIX_BASIC 0x00000004u
#define PCRE2_CONVERT_POSIX_EXTENDED 0x00000008u
#define PCRE2_CONVERT_GLOB 0x00000010u
#define PCRE2_CONVERT_GLOB_NO_WILD_SEPARATOR 0x00000030u
#define PCRE2_CONVERT_GLOB_NO_STARSTAR 0x00000050u





#define PCRE2_NEWLINE_CR 1
#define PCRE2_NEWLINE_LF 2
#define PCRE2_NEWLINE_CRLF 3
#define PCRE2_NEWLINE_ANY 4
#define PCRE2_NEWLINE_ANYCRLF 5
#define PCRE2_NEWLINE_NUL 6

#define PCRE2_BSR_UNICODE 1
#define PCRE2_BSR_ANYCRLF 2




#define PCRE2_ERROR_END_BACKSLASH 101
#define PCRE2_ERROR_END_BACKSLASH_C 102
#define PCRE2_ERROR_UNKNOWN_ESCAPE 103
#define PCRE2_ERROR_QUANTIFIER_OUT_OF_ORDER 104
#define PCRE2_ERROR_QUANTIFIER_TOO_BIG 105
#define PCRE2_ERROR_MISSING_SQUARE_BRACKET 106
#define PCRE2_ERROR_ESCAPE_INVALID_IN_CLASS 107
#define PCRE2_ERROR_CLASS_RANGE_ORDER 108
#define PCRE2_ERROR_QUANTIFIER_INVALID 109
#define PCRE2_ERROR_INTERNAL_UNEXPECTED_REPEAT 110
#define PCRE2_ERROR_INVALID_AFTER_PARENS_QUERY 111
#define PCRE2_ERROR_POSIX_CLASS_NOT_IN_CLASS 112
#define PCRE2_ERROR_POSIX_NO_SUPPORT_COLLATING 113
#define PCRE2_ERROR_MISSING_CLOSING_PARENTHESIS 114
#define PCRE2_ERROR_BAD_SUBPATTERN_REFERENCE 115
#define PCRE2_ERROR_NULL_PATTERN 116
#define PCRE2_ERROR_BAD_OPTIONS 117
#define PCRE2_ERROR_MISSING_COMMENT_CLOSING 118
#define PCRE2_ERROR_PARENTHESES_NEST_TOO_DEEP 119
#define PCRE2_ERROR_PATTERN_TOO_LARGE 120
#define PCRE2_ERROR_HEAP_FAILED 121
#define PCRE2_ERROR_UNMATCHED_CLOSING_PARENTHESIS 122
#define PCRE2_ERROR_INTERNAL_CODE_OVERFLOW 123
#define PCRE2_ERROR_MISSING_CONDITION_CLOSING 124
#define PCRE2_ERROR_LOOKBEHIND_NOT_FIXED_LENGTH 125
#define PCRE2_ERROR_ZERO_RELATIVE_REFERENCE 126
#define PCRE2_ERROR_TOO_MANY_CONDITION_BRANCHES 127
#define PCRE2_ERROR_CONDITION_ASSERTION_EXPECTED 128
#define PCRE2_ERROR_BAD_RELATIVE_REFERENCE 129
#define PCRE2_ERROR_UNKNOWN_POSIX_CLASS 130
#define PCRE2_ERROR_INTERNAL_STUDY_ERROR 131
#define PCRE2_ERROR_UNICODE_NOT_SUPPORTED 132
#define PCRE2_ERROR_PARENTHESES_STACK_CHECK 133
#define PCRE2_ERROR_CODE_POINT_TOO_BIG 134
#define PCRE2_ERROR_LOOKBEHIND_TOO_COMPLICATED 135
#define PCRE2_ERROR_LOOKBEHIND_INVALID_BACKSLASH_C 136
#define PCRE2_ERROR_UNSUPPORTED_ESCAPE_SEQUENCE 137
#define PCRE2_ERROR_CALLOUT_NUMBER_TOO_BIG 138
#define PCRE2_ERROR_MISSING_CALLOUT_CLOSING 139
#define PCRE2_ERROR_ESCAPE_INVALID_IN_VERB 140
#define PCRE2_ERROR_UNRECOGNIZED_AFTER_QUERY_P 141
#define PCRE2_ERROR_MISSING_NAME_TERMINATOR 142
#define PCRE2_ERROR_DUPLICATE_SUBPATTERN_NAME 143
#define PCRE2_ERROR_INVALID_SUBPATTERN_NAME 144
#define PCRE2_ERROR_UNICODE_PROPERTIES_UNAVAILABLE 145
#define PCRE2_ERROR_MALFORMED_UNICODE_PROPERTY 146
#define PCRE2_ERROR_UNKNOWN_UNICODE_PROPERTY 147
#define PCRE2_ERROR_SUBPATTERN_NAME_TOO_LONG 148
#define PCRE2_ERROR_TOO_MANY_NAMED_SUBPATTERNS 149
#define PCRE2_ERROR_CLASS_INVALID_RANGE 150
#define PCRE2_ERROR_OCTAL_BYTE_TOO_BIG 151
#define PCRE2_ERROR_INTERNAL_OVERRAN_WORKSPACE 152
#define PCRE2_ERROR_INTERNAL_MISSING_SUBPATTERN 153
#define PCRE2_ERROR_DEFINE_TOO_MANY_BRANCHES 154
#define PCRE2_ERROR_BACKSLASH_O_MISSING_BRACE 155
#define PCRE2_ERROR_INTERNAL_UNKNOWN_NEWLINE 156
#define PCRE2_ERROR_BACKSLASH_G_SYNTAX 157
#define PCRE2_ERROR_PARENS_QUERY_R_MISSING_CLOSING 158

#define PCRE2_ERROR_VERB_ARGUMENT_NOT_ALLOWED 159
#define PCRE2_ERROR_VERB_UNKNOWN 160
#define PCRE2_ERROR_SUBPATTERN_NUMBER_TOO_BIG 161
#define PCRE2_ERROR_SUBPATTERN_NAME_EXPECTED 162
#define PCRE2_ERROR_INTERNAL_PARSED_OVERFLOW 163
#define PCRE2_ERROR_INVALID_OCTAL 164
#define PCRE2_ERROR_SUBPATTERN_NAMES_MISMATCH 165
#define PCRE2_ERROR_MARK_MISSING_ARGUMENT 166
#define PCRE2_ERROR_INVALID_HEXADECIMAL 167
#define PCRE2_ERROR_BACKSLASH_C_SYNTAX 168
#define PCRE2_ERROR_BACKSLASH_K_SYNTAX 169
#define PCRE2_ERROR_INTERNAL_BAD_CODE_LOOKBEHINDS 170
#define PCRE2_ERROR_BACKSLASH_N_IN_CLASS 171
#define PCRE2_ERROR_CALLOUT_STRING_TOO_LONG 172
#define PCRE2_ERROR_UNICODE_DISALLOWED_CODE_POINT 173
#define PCRE2_ERROR_UTF_IS_DISABLED 174
#define PCRE2_ERROR_UCP_IS_DISABLED 175
#define PCRE2_ERROR_VERB_NAME_TOO_LONG 176
#define PCRE2_ERROR_BACKSLASH_U_CODE_POINT_TOO_BIG 177
#define PCRE2_ERROR_MISSING_OCTAL_OR_HEX_DIGITS 178
#define PCRE2_ERROR_VERSION_CONDITION_SYNTAX 179
#define PCRE2_ERROR_INTERNAL_BAD_CODE_AUTO_POSSESS 180
#define PCRE2_ERROR_CALLOUT_NO_STRING_DELIMITER 181
#define PCRE2_ERROR_CALLOUT_BAD_STRING_DELIMITER 182
#define PCRE2_ERROR_BACKSLASH_C_CALLER_DISABLED 183
#define PCRE2_ERROR_QUERY_BARJX_NEST_TOO_DEEP 184
#define PCRE2_ERROR_BACKSLASH_C_LIBRARY_DISABLED 185
#define PCRE2_ERROR_PATTERN_TOO_COMPLICATED 186
#define PCRE2_ERROR_LOOKBEHIND_TOO_LONG 187
#define PCRE2_ERROR_PATTERN_STRING_TOO_LONG 188
#define PCRE2_ERROR_INTERNAL_BAD_CODE 189
#define PCRE2_ERROR_INTERNAL_BAD_CODE_IN_SKIP 190
#define PCRE2_ERROR_NO_SURROGATES_IN_UTF16 191
#define PCRE2_ERROR_BAD_LITERAL_OPTIONS 192
#define PCRE2_ERROR_SUPPORTED_ONLY_IN_UNICODE 193
#define PCRE2_ERROR_INVALID_HYPHEN_IN_OPTIONS 194
#define PCRE2_ERROR_ALPHA_ASSERTION_UNKNOWN 195
#define PCRE2_ERROR_SCRIPT_RUN_NOT_AVAILABLE 196
#define PCRE2_ERROR_TOO_MANY_CAPTURES 197
#define PCRE2_ERROR_CONDITION_ATOMIC_ASSERTION_EXPECTED 198
#define PCRE2_ERROR_BACKSLASH_K_IN_LOOKAROUND 199




#define PCRE2_ERROR_NOMATCH (-1)
#define PCRE2_ERROR_PARTIAL (-2)



#define PCRE2_ERROR_UTF8_ERR1 (-3)
#define PCRE2_ERROR_UTF8_ERR2 (-4)
#define PCRE2_ERROR_UTF8_ERR3 (-5)
#define PCRE2_ERROR_UTF8_ERR4 (-6)
#define PCRE2_ERROR_UTF8_ERR5 (-7)
#define PCRE2_ERROR_UTF8_ERR6 (-8)
#define PCRE2_ERROR_UTF8_ERR7 (-9)
#define PCRE2_ERROR_UTF8_ERR8 (-10)
#define PCRE2_ERROR_UTF8_ERR9 (-11)
#define PCRE2_ERROR_UTF8_ERR10 (-12)
#define PCRE2_ERROR_UTF8_ERR11 (-13)
#define PCRE2_ERROR_UTF8_ERR12 (-14)
#define PCRE2_ERROR_UTF8_ERR13 (-15)
#define PCRE2_ERROR_UTF8_ERR14 (-16)
#define PCRE2_ERROR_UTF8_ERR15 (-17)
#define PCRE2_ERROR_UTF8_ERR16 (-18)
#define PCRE2_ERROR_UTF8_ERR17 (-19)
#define PCRE2_ERROR_UTF8_ERR18 (-20)
#define PCRE2_ERROR_UTF8_ERR19 (-21)
#define PCRE2_ERROR_UTF8_ERR20 (-22)
#define PCRE2_ERROR_UTF8_ERR21 (-23)



#define PCRE2_ERROR_UTF16_ERR1 (-24)
#define PCRE2_ERROR_UTF16_ERR2 (-25)
#define PCRE2_ERROR_UTF16_ERR3 (-26)



#define PCRE2_ERROR_UTF32_ERR1 (-27)
#define PCRE2_ERROR_UTF32_ERR2 (-28)






#define PCRE2_ERROR_BADDATA (-29)
#define PCRE2_ERROR_MIXEDTABLES (-30)
#define PCRE2_ERROR_BADMAGIC (-31)
#define PCRE2_ERROR_BADMODE (-32)
#define PCRE2_ERROR_BADOFFSET (-33)
#define PCRE2_ERROR_BADOPTION (-34)
#define PCRE2_ERROR_BADREPLACEMENT (-35)
#define PCRE2_ERROR_BADUTFOFFSET (-36)
#define PCRE2_ERROR_CALLOUT (-37)
#define PCRE2_ERROR_DFA_BADRESTART (-38)
#define PCRE2_ERROR_DFA_RECURSE (-39)
#define PCRE2_ERROR_DFA_UCOND (-40)
#define PCRE2_ERROR_DFA_UFUNC (-41)
#define PCRE2_ERROR_DFA_UITEM (-42)
#define PCRE2_ERROR_DFA_WSSIZE (-43)
#define PCRE2_ERROR_INTERNAL (-44)
#define PCRE2_ERROR_JIT_BADOPTION (-45)
#define PCRE2_ERROR_JIT_STACKLIMIT (-46)
#define PCRE2_ERROR_MATCHLIMIT (-47)
#define PCRE2_ERROR_NOMEMORY (-48)
#define PCRE2_ERROR_NOSUBSTRING (-49)
#define PCRE2_ERROR_NOUNIQUESUBSTRING (-50)
#define PCRE2_ERROR_NULL (-51)
#define PCRE2_ERROR_RECURSELOOP (-52)
#define PCRE2_ERROR_DEPTHLIMIT (-53)
#define PCRE2_ERROR_RECURSIONLIMIT (-53)
#define PCRE2_ERROR_UNAVAILABLE (-54)
#define PCRE2_ERROR_UNSET (-55)
#define PCRE2_ERROR_BADOFFSETLIMIT (-56)
#define PCRE2_ERROR_BADREPESCAPE (-57)
#define PCRE2_ERROR_REPMISSINGBRACE (-58)
#define PCRE2_ERROR_BADSUBSTITUTION (-59)
#define PCRE2_ERROR_BADSUBSPATTERN (-60)
#define PCRE2_ERROR_TOOMANYREPLACE (-61)
#define PCRE2_ERROR_BADSERIALIZEDDATA (-62)
#define PCRE2_ERROR_HEAPLIMIT (-63)
#define PCRE2_ERROR_CONVERT_SYNTAX (-64)
#define PCRE2_ERROR_INTERNAL_DUPMATCH (-65)
#define PCRE2_ERROR_DFA_UINVALID_UTF (-66)




#define PCRE2_INFO_ALLOPTIONS 0
#define PCRE2_INFO_ARGOPTIONS 1
#define PCRE2_INFO_BACKREFMAX 2
#define PCRE2_INFO_BSR 3
#define PCRE2_INFO_CAPTURECOUNT 4
#define PCRE2_INFO_FIRSTCODEUNIT 5
#define PCRE2_INFO_FIRSTCODETYPE 6
#define PCRE2_INFO_FIRSTBITMAP 7
#define PCRE2_INFO_HASCRORLF 8
#define PCRE2_INFO_JCHANGED 9
#define PCRE2_INFO_JITSIZE 10
#define PCRE2_INFO_LASTCODEUNIT 11
#define PCRE2_INFO_LASTCODETYPE 12
#define PCRE2_INFO_MATCHEMPTY 13
#define PCRE2_INFO_MATCHLIMIT 14
#define PCRE2_INFO_MAXLOOKBEHIND 15
#define PCRE2_INFO_MINLENGTH 16
#define PCRE2_INFO_NAMECOUNT 17
#define PCRE2_INFO_NAMEENTRYSIZE 18
#define PCRE2_INFO_NAMETABLE 19
#define PCRE2_INFO_NEWLINE 20
#define PCRE2_INFO_DEPTHLIMIT 21
#define PCRE2_INFO_RECURSIONLIMIT 21
#define PCRE2_INFO_SIZE 22
#define PCRE2_INFO_HASBACKSLASHC 23
#define PCRE2_INFO_FRAMESIZE 24
#define PCRE2_INFO_HEAPLIMIT 25
#define PCRE2_INFO_EXTRAOPTIONS 26



#define PCRE2_CONFIG_BSR 0
#define PCRE2_CONFIG_JIT 1
#define PCRE2_CONFIG_JITTARGET 2
#define PCRE2_CONFIG_LINKSIZE 3
#define PCRE2_CONFIG_MATCHLIMIT 4
#define PCRE2_CONFIG_NEWLINE 5
#define PCRE2_CONFIG_PARENSLIMIT 6
#define PCRE2_CONFIG_DEPTHLIMIT 7
#define PCRE2_CONFIG_RECURSIONLIMIT 7
#define PCRE2_CONFIG_STACKRECURSE 8
#define PCRE2_CONFIG_UNICODE 9
#define PCRE2_CONFIG_UNICODE_VERSION 10
#define PCRE2_CONFIG_VERSION 11
#define PCRE2_CONFIG_HEAPLIMIT 12
#define PCRE2_CONFIG_NEVER_BACKSLASH_C 13
#define PCRE2_CONFIG_COMPILED_WIDTHS 14
#define PCRE2_CONFIG_TABLES_LENGTH 15




typedef uint8_t PCRE2_UCHAR8;
typedef uint16_t PCRE2_UCHAR16;
typedef uint32_t PCRE2_UCHAR32;

typedef const PCRE2_UCHAR8 *PCRE2_SPTR8;
typedef const PCRE2_UCHAR16 *PCRE2_SPTR16;
typedef const PCRE2_UCHAR32 *PCRE2_SPTR32;






#define PCRE2_SIZE size_t
#define PCRE2_SIZE_MAX SIZE_MAX
#define PCRE2_ZERO_TERMINATED (~(PCRE2_SIZE)0)
#define PCRE2_UNSET (~(PCRE2_SIZE)0)




#define PCRE2_TYPES_LIST struct pcre2_real_general_context; typedef struct pcre2_real_general_context pcre2_general_context; struct pcre2_real_compile_context; typedef struct pcre2_real_compile_context pcre2_compile_context; struct pcre2_real_match_context; typedef struct pcre2_real_match_context pcre2_match_context; struct pcre2_real_convert_context; typedef struct pcre2_real_convert_context pcre2_convert_context; struct pcre2_real_code; typedef struct pcre2_real_code pcre2_code; struct pcre2_real_match_data; typedef struct pcre2_real_match_data pcre2_match_data; struct pcre2_real_jit_stack; typedef struct pcre2_real_jit_stack pcre2_jit_stack; typedef pcre2_jit_stack *(*pcre2_jit_callback)(void *);
# 512 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_CALLOUT_STARTMATCH 0x00000001u
#define PCRE2_CALLOUT_BACKTRACK 0x00000002u

#define PCRE2_STRUCTURE_LIST typedef struct pcre2_callout_block { uint32_t version; uint32_t callout_number; uint32_t capture_top; uint32_t capture_last; PCRE2_SIZE *offset_vector; PCRE2_SPTR mark; PCRE2_SPTR subject; PCRE2_SIZE subject_length; PCRE2_SIZE start_match; PCRE2_SIZE current_position; PCRE2_SIZE pattern_position; PCRE2_SIZE next_item_length; PCRE2_SIZE callout_string_offset; PCRE2_SIZE callout_string_length; PCRE2_SPTR callout_string; uint32_t callout_flags; } pcre2_callout_block; typedef struct pcre2_callout_enumerate_block { uint32_t version; PCRE2_SIZE pattern_position; PCRE2_SIZE next_item_length; uint32_t callout_number; PCRE2_SIZE callout_string_offset; PCRE2_SIZE callout_string_length; PCRE2_SPTR callout_string; } pcre2_callout_enumerate_block; typedef struct pcre2_substitute_callout_block { uint32_t version; PCRE2_SPTR input; PCRE2_SPTR output; PCRE2_SIZE output_offsets[2]; PCRE2_SIZE *ovector; uint32_t oveccount; uint32_t subscount; } pcre2_substitute_callout_block;
# 568 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_GENERAL_INFO_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_config(uint32_t, void *);





#define PCRE2_GENERAL_CONTEXT_FUNCTIONS PCRE2_EXP_DECL pcre2_general_context PCRE2_CALL_CONVENTION *pcre2_general_context_copy(pcre2_general_context *); PCRE2_EXP_DECL pcre2_general_context PCRE2_CALL_CONVENTION *pcre2_general_context_create(void *(*)(PCRE2_SIZE, void *), void (*)(void *, void *), void *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_general_context_free(pcre2_general_context *);
# 583 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_COMPILE_CONTEXT_FUNCTIONS PCRE2_EXP_DECL pcre2_compile_context PCRE2_CALL_CONVENTION *pcre2_compile_context_copy(pcre2_compile_context *); PCRE2_EXP_DECL pcre2_compile_context PCRE2_CALL_CONVENTION *pcre2_compile_context_create(pcre2_general_context *);PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_compile_context_free(pcre2_compile_context *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_bsr(pcre2_compile_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_character_tables(pcre2_compile_context *, const uint8_t *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_compile_extra_options(pcre2_compile_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_max_pattern_length(pcre2_compile_context *, PCRE2_SIZE); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_newline(pcre2_compile_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_parens_nest_limit(pcre2_compile_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_compile_recursion_guard(pcre2_compile_context *, int (*)(uint32_t, void *), void *);
# 606 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_MATCH_CONTEXT_FUNCTIONS PCRE2_EXP_DECL pcre2_match_context PCRE2_CALL_CONVENTION *pcre2_match_context_copy(pcre2_match_context *); PCRE2_EXP_DECL pcre2_match_context PCRE2_CALL_CONVENTION *pcre2_match_context_create(pcre2_general_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_match_context_free(pcre2_match_context *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_callout(pcre2_match_context *, int (*)(pcre2_callout_block *, void *), void *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_substitute_callout(pcre2_match_context *, int (*)(pcre2_substitute_callout_block *, void *), void *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_depth_limit(pcre2_match_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_heap_limit(pcre2_match_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_match_limit(pcre2_match_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_offset_limit(pcre2_match_context *, PCRE2_SIZE); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_recursion_limit(pcre2_match_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_recursion_memory_management(pcre2_match_context *, void *(*)(PCRE2_SIZE, void *), void (*)(void *, void *), void *);
# 633 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_CONVERT_CONTEXT_FUNCTIONS PCRE2_EXP_DECL pcre2_convert_context PCRE2_CALL_CONVENTION *pcre2_convert_context_copy(pcre2_convert_context *); PCRE2_EXP_DECL pcre2_convert_context PCRE2_CALL_CONVENTION *pcre2_convert_context_create(pcre2_general_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_convert_context_free(pcre2_convert_context *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_glob_escape(pcre2_convert_context *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_set_glob_separator(pcre2_convert_context *, uint32_t);
# 648 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_COMPILE_FUNCTIONS PCRE2_EXP_DECL pcre2_code PCRE2_CALL_CONVENTION *pcre2_compile(PCRE2_SPTR, PCRE2_SIZE, uint32_t, int *, PCRE2_SIZE *, pcre2_compile_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_code_free(pcre2_code *); PCRE2_EXP_DECL pcre2_code PCRE2_CALL_CONVENTION *pcre2_code_copy(const pcre2_code *); PCRE2_EXP_DECL pcre2_code PCRE2_CALL_CONVENTION *pcre2_code_copy_with_tables(const pcre2_code *);
# 662 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_PATTERN_INFO_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_pattern_info(const pcre2_code *, uint32_t, void *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_callout_enumerate(const pcre2_code *, int (*)(pcre2_callout_enumerate_block *, void *), void *);
# 672 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_MATCH_FUNCTIONS PCRE2_EXP_DECL pcre2_match_data PCRE2_CALL_CONVENTION *pcre2_match_data_create(uint32_t, pcre2_general_context *); PCRE2_EXP_DECL pcre2_match_data PCRE2_CALL_CONVENTION *pcre2_match_data_create_from_pattern(const pcre2_code *, pcre2_general_context *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_dfa_match(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *, int *, PCRE2_SIZE); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_match(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_match_data_free(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SPTR PCRE2_CALL_CONVENTION pcre2_get_mark(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SIZE PCRE2_CALL_CONVENTION pcre2_get_match_data_size(pcre2_match_data *); PCRE2_EXP_DECL uint32_t PCRE2_CALL_CONVENTION pcre2_get_ovector_count(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SIZE PCRE2_CALL_CONVENTION *pcre2_get_ovector_pointer(pcre2_match_data *); PCRE2_EXP_DECL PCRE2_SIZE PCRE2_CALL_CONVENTION pcre2_get_startchar(pcre2_match_data *);
# 700 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_SUBSTRING_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_copy_byname(pcre2_match_data *, PCRE2_SPTR, PCRE2_UCHAR *, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_copy_bynumber(pcre2_match_data *, uint32_t, PCRE2_UCHAR *, PCRE2_SIZE *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_substring_free(PCRE2_UCHAR *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_get_byname(pcre2_match_data *, PCRE2_SPTR, PCRE2_UCHAR **, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_get_bynumber(pcre2_match_data *, uint32_t, PCRE2_UCHAR **, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_length_byname(pcre2_match_data *, PCRE2_SPTR, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_length_bynumber(pcre2_match_data *, uint32_t, PCRE2_SIZE *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_nametable_scan(const pcre2_code *, PCRE2_SPTR, PCRE2_SPTR *, PCRE2_SPTR *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_number_from_name(const pcre2_code *, PCRE2_SPTR); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_substring_list_free(PCRE2_SPTR *); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substring_list_get(pcre2_match_data *, PCRE2_UCHAR ***, PCRE2_SIZE **);
# 731 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_SERIALIZE_FUNCTIONS PCRE2_EXP_DECL int32_t PCRE2_CALL_CONVENTION pcre2_serialize_encode(const pcre2_code **, int32_t, uint8_t **, PCRE2_SIZE *, pcre2_general_context *); PCRE2_EXP_DECL int32_t PCRE2_CALL_CONVENTION pcre2_serialize_decode(pcre2_code **, int32_t, const uint8_t *, pcre2_general_context *); PCRE2_EXP_DECL int32_t PCRE2_CALL_CONVENTION pcre2_serialize_get_number_of_codes(const uint8_t *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_serialize_free(uint8_t *);
# 746 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_SUBSTITUTE_FUNCTION PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_substitute(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_UCHAR *, PCRE2_SIZE *);
# 755 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_CONVERT_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_pattern_convert(PCRE2_SPTR, PCRE2_SIZE, uint32_t, PCRE2_UCHAR **, PCRE2_SIZE *, pcre2_convert_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_converted_pattern_free(PCRE2_UCHAR *);
# 765 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_JIT_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_jit_compile(pcre2_code *, uint32_t); PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_jit_match(const pcre2_code *, PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE, uint32_t, pcre2_match_data *, pcre2_match_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_jit_free_unused_memory(pcre2_general_context *); PCRE2_EXP_DECL pcre2_jit_stack PCRE2_CALL_CONVENTION *pcre2_jit_stack_create(PCRE2_SIZE, PCRE2_SIZE, pcre2_general_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_jit_stack_assign(pcre2_match_context *, pcre2_jit_callback, void *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_jit_stack_free(pcre2_jit_stack *);
# 783 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_OTHER_FUNCTIONS PCRE2_EXP_DECL int PCRE2_CALL_CONVENTION pcre2_get_error_message(int, PCRE2_UCHAR *, PCRE2_SIZE); PCRE2_EXP_DECL const uint8_t PCRE2_CALL_CONVENTION *pcre2_maketables(pcre2_general_context *); PCRE2_EXP_DECL void PCRE2_CALL_CONVENTION pcre2_maketables_free(pcre2_general_context *, const uint8_t *);
# 798 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_JOIN(a,b) a ## b
#define PCRE2_GLUE(a,b) PCRE2_JOIN(a,b)
#define PCRE2_SUFFIX(a) PCRE2_GLUE(a,PCRE2_LOCAL_WIDTH)




#define PCRE2_UCHAR PCRE2_SUFFIX(PCRE2_UCHAR)
#define PCRE2_SPTR PCRE2_SUFFIX(PCRE2_SPTR)

#define pcre2_code PCRE2_SUFFIX(pcre2_code_)
#define pcre2_jit_callback PCRE2_SUFFIX(pcre2_jit_callback_)
#define pcre2_jit_stack PCRE2_SUFFIX(pcre2_jit_stack_)

#define pcre2_real_code PCRE2_SUFFIX(pcre2_real_code_)
#define pcre2_real_general_context PCRE2_SUFFIX(pcre2_real_general_context_)
#define pcre2_real_compile_context PCRE2_SUFFIX(pcre2_real_compile_context_)
#define pcre2_real_convert_context PCRE2_SUFFIX(pcre2_real_convert_context_)
#define pcre2_real_match_context PCRE2_SUFFIX(pcre2_real_match_context_)
#define pcre2_real_jit_stack PCRE2_SUFFIX(pcre2_real_jit_stack_)
#define pcre2_real_match_data PCRE2_SUFFIX(pcre2_real_match_data_)




#define pcre2_callout_block PCRE2_SUFFIX(pcre2_callout_block_)
#define pcre2_callout_enumerate_block PCRE2_SUFFIX(pcre2_callout_enumerate_block_)
#define pcre2_substitute_callout_block PCRE2_SUFFIX(pcre2_substitute_callout_block_)
#define pcre2_general_context PCRE2_SUFFIX(pcre2_general_context_)
#define pcre2_compile_context PCRE2_SUFFIX(pcre2_compile_context_)
#define pcre2_convert_context PCRE2_SUFFIX(pcre2_convert_context_)
#define pcre2_match_context PCRE2_SUFFIX(pcre2_match_context_)
#define pcre2_match_data PCRE2_SUFFIX(pcre2_match_data_)




#define pcre2_callout_enumerate PCRE2_SUFFIX(pcre2_callout_enumerate_)
#define pcre2_code_copy PCRE2_SUFFIX(pcre2_code_copy_)
#define pcre2_code_copy_with_tables PCRE2_SUFFIX(pcre2_code_copy_with_tables_)
#define pcre2_code_free PCRE2_SUFFIX(pcre2_code_free_)
#define pcre2_compile PCRE2_SUFFIX(pcre2_compile_)
#define pcre2_compile_context_copy PCRE2_SUFFIX(pcre2_compile_context_copy_)
#define pcre2_compile_context_create PCRE2_SUFFIX(pcre2_compile_context_create_)
#define pcre2_compile_context_free PCRE2_SUFFIX(pcre2_compile_context_free_)
#define pcre2_config PCRE2_SUFFIX(pcre2_config_)
#define pcre2_convert_context_copy PCRE2_SUFFIX(pcre2_convert_context_copy_)
#define pcre2_convert_context_create PCRE2_SUFFIX(pcre2_convert_context_create_)
#define pcre2_convert_context_free PCRE2_SUFFIX(pcre2_convert_context_free_)
#define pcre2_converted_pattern_free PCRE2_SUFFIX(pcre2_converted_pattern_free_)
#define pcre2_dfa_match PCRE2_SUFFIX(pcre2_dfa_match_)
#define pcre2_general_context_copy PCRE2_SUFFIX(pcre2_general_context_copy_)
#define pcre2_general_context_create PCRE2_SUFFIX(pcre2_general_context_create_)
#define pcre2_general_context_free PCRE2_SUFFIX(pcre2_general_context_free_)
#define pcre2_get_error_message PCRE2_SUFFIX(pcre2_get_error_message_)
#define pcre2_get_mark PCRE2_SUFFIX(pcre2_get_mark_)
#define pcre2_get_match_data_size PCRE2_SUFFIX(pcre2_get_match_data_size_)
#define pcre2_get_ovector_pointer PCRE2_SUFFIX(pcre2_get_ovector_pointer_)
#define pcre2_get_ovector_count PCRE2_SUFFIX(pcre2_get_ovector_count_)
#define pcre2_get_startchar PCRE2_SUFFIX(pcre2_get_startchar_)
#define pcre2_jit_compile PCRE2_SUFFIX(pcre2_jit_compile_)
#define pcre2_jit_match PCRE2_SUFFIX(pcre2_jit_match_)
#define pcre2_jit_free_unused_memory PCRE2_SUFFIX(pcre2_jit_free_unused_memory_)
#define pcre2_jit_stack_assign PCRE2_SUFFIX(pcre2_jit_stack_assign_)
#define pcre2_jit_stack_create PCRE2_SUFFIX(pcre2_jit_stack_create_)
#define pcre2_jit_stack_free PCRE2_SUFFIX(pcre2_jit_stack_free_)
#define pcre2_maketables PCRE2_SUFFIX(pcre2_maketables_)
#define pcre2_maketables_free PCRE2_SUFFIX(pcre2_maketables_free_)
#define pcre2_match PCRE2_SUFFIX(pcre2_match_)
#define pcre2_match_context_copy PCRE2_SUFFIX(pcre2_match_context_copy_)
#define pcre2_match_context_create PCRE2_SUFFIX(pcre2_match_context_create_)
#define pcre2_match_context_free PCRE2_SUFFIX(pcre2_match_context_free_)
#define pcre2_match_data_create PCRE2_SUFFIX(pcre2_match_data_create_)
#define pcre2_match_data_create_from_pattern PCRE2_SUFFIX(pcre2_match_data_create_from_pattern_)
#define pcre2_match_data_free PCRE2_SUFFIX(pcre2_match_data_free_)
#define pcre2_pattern_convert PCRE2_SUFFIX(pcre2_pattern_convert_)
#define pcre2_pattern_info PCRE2_SUFFIX(pcre2_pattern_info_)
#define pcre2_serialize_decode PCRE2_SUFFIX(pcre2_serialize_decode_)
#define pcre2_serialize_encode PCRE2_SUFFIX(pcre2_serialize_encode_)
#define pcre2_serialize_free PCRE2_SUFFIX(pcre2_serialize_free_)
#define pcre2_serialize_get_number_of_codes PCRE2_SUFFIX(pcre2_serialize_get_number_of_codes_)
#define pcre2_set_bsr PCRE2_SUFFIX(pcre2_set_bsr_)
#define pcre2_set_callout PCRE2_SUFFIX(pcre2_set_callout_)
#define pcre2_set_character_tables PCRE2_SUFFIX(pcre2_set_character_tables_)
#define pcre2_set_compile_extra_options PCRE2_SUFFIX(pcre2_set_compile_extra_options_)
#define pcre2_set_compile_recursion_guard PCRE2_SUFFIX(pcre2_set_compile_recursion_guard_)
#define pcre2_set_depth_limit PCRE2_SUFFIX(pcre2_set_depth_limit_)
#define pcre2_set_glob_escape PCRE2_SUFFIX(pcre2_set_glob_escape_)
#define pcre2_set_glob_separator PCRE2_SUFFIX(pcre2_set_glob_separator_)
#define pcre2_set_heap_limit PCRE2_SUFFIX(pcre2_set_heap_limit_)
#define pcre2_set_match_limit PCRE2_SUFFIX(pcre2_set_match_limit_)
#define pcre2_set_max_pattern_length PCRE2_SUFFIX(pcre2_set_max_pattern_length_)
#define pcre2_set_newline PCRE2_SUFFIX(pcre2_set_newline_)
#define pcre2_set_parens_nest_limit PCRE2_SUFFIX(pcre2_set_parens_nest_limit_)
#define pcre2_set_offset_limit PCRE2_SUFFIX(pcre2_set_offset_limit_)
#define pcre2_set_substitute_callout PCRE2_SUFFIX(pcre2_set_substitute_callout_)
#define pcre2_substitute PCRE2_SUFFIX(pcre2_substitute_)
#define pcre2_substring_copy_byname PCRE2_SUFFIX(pcre2_substring_copy_byname_)
#define pcre2_substring_copy_bynumber PCRE2_SUFFIX(pcre2_substring_copy_bynumber_)
#define pcre2_substring_free PCRE2_SUFFIX(pcre2_substring_free_)
#define pcre2_substring_get_byname PCRE2_SUFFIX(pcre2_substring_get_byname_)
#define pcre2_substring_get_bynumber PCRE2_SUFFIX(pcre2_substring_get_bynumber_)
#define pcre2_substring_length_byname PCRE2_SUFFIX(pcre2_substring_length_byname_)
#define pcre2_substring_length_bynumber PCRE2_SUFFIX(pcre2_substring_length_bynumber_)
#define pcre2_substring_list_get PCRE2_SUFFIX(pcre2_substring_list_get_)
#define pcre2_substring_list_free PCRE2_SUFFIX(pcre2_substring_list_free_)
#define pcre2_substring_nametable_scan PCRE2_SUFFIX(pcre2_substring_nametable_scan_)
#define pcre2_substring_number_from_name PCRE2_SUFFIX(pcre2_substring_number_from_name_)


#define pcre2_set_recursion_limit PCRE2_SUFFIX(pcre2_set_recursion_limit_)


#define pcre2_set_recursion_memory_management PCRE2_SUFFIX(pcre2_set_recursion_memory_management_)




#define PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS PCRE2_TYPES_LIST PCRE2_STRUCTURE_LIST PCRE2_GENERAL_INFO_FUNCTIONS PCRE2_GENERAL_CONTEXT_FUNCTIONS PCRE2_COMPILE_CONTEXT_FUNCTIONS PCRE2_CONVERT_CONTEXT_FUNCTIONS PCRE2_CONVERT_FUNCTIONS PCRE2_MATCH_CONTEXT_FUNCTIONS PCRE2_COMPILE_FUNCTIONS PCRE2_PATTERN_INFO_FUNCTIONS PCRE2_MATCH_FUNCTIONS PCRE2_SUBSTRING_FUNCTIONS PCRE2_SERIALIZE_FUNCTIONS PCRE2_SUBSTITUTE_FUNCTION PCRE2_JIT_FUNCTIONS PCRE2_OTHER_FUNCTIONS
# 934 "/usr/local/include/pcre2.h" 3 4
#define PCRE2_LOCAL_WIDTH 8
struct pcre2_real_general_context_8; typedef struct pcre2_real_general_context_8 pcre2_general_context_8; struct pcre2_real_compile_context_8; typedef struct pcre2_real_compile_context_8 pcre2_compile_context_8; struct pcre2_real_match_context_8; typedef struct pcre2_real_match_context_8 pcre2_match_context_8; struct pcre2_real_convert_context_8; typedef struct pcre2_real_convert_context_8 pcre2_convert_context_8; struct pcre2_real_code_8; typedef struct pcre2_real_code_8 pcre2_code_8; struct pcre2_real_match_data_8; typedef struct pcre2_real_match_data_8 pcre2_match_data_8; struct pcre2_real_jit_stack_8; typedef struct pcre2_real_jit_stack_8 pcre2_jit_stack_8; typedef pcre2_jit_stack_8 *(*pcre2_jit_callback_8)(void *); typedef struct pcre2_callout_block_8 { uint32_t version; uint32_t callout_number; uint32_t capture_top; uint32_t capture_last; size_t *offset_vector; PCRE2_SPTR8 mark; PCRE2_SPTR8 subject; size_t subject_length; size_t start_match; size_t current_position; size_t pattern_position; size_t next_item_length; size_t callout_string_offset; size_t callout_string_length; PCRE2_SPTR8 callout_string; uint32_t callout_flags; } pcre2_callout_block_8; typedef struct pcre2_callout_enumerate_block_8 { uint32_t version; size_t pattern_position; size_t next_item_length; uint32_t callout_number; size_t callout_string_offset; size_t callout_string_length; PCRE2_SPTR8 callout_string; } pcre2_callout_enumerate_block_8; typedef struct pcre2_substitute_callout_block_8 { uint32_t version; PCRE2_SPTR8 input; PCRE2_SPTR8 output; size_t output_offsets[2]; size_t *ovector; uint32_t oveccount; uint32_t subscount; } pcre2_substitute_callout_block_8; extern int pcre2_config_8(uint32_t, void *); extern pcre2_general_context_8 *pcre2_general_context_copy_8(pcre2_general_context_8 *); extern pcre2_general_context_8 *pcre2_general_context_create_8(void *(*)(size_t, void *), void (*)(void *, void *), void *); extern void pcre2_general_context_free_8(pcre2_general_context_8 *); extern pcre2_compile_context_8 *pcre2_compile_context_copy_8(pcre2_compile_context_8 *); extern pcre2_compile_context_8 *pcre2_compile_context_create_8(pcre2_general_context_8 *);extern void pcre2_compile_context_free_8(pcre2_compile_context_8 *); extern int pcre2_set_bsr_8(pcre2_compile_context_8 *, uint32_t); extern int pcre2_set_character_tables_8(pcre2_compile_context_8 *, const uint8_t *); extern int pcre2_set_compile_extra_options_8(pcre2_compile_context_8 *, uint32_t); extern int pcre2_set_max_pattern_length_8(pcre2_compile_context_8 *, size_t); extern int pcre2_set_newline_8(pcre2_compile_context_8 *, uint32_t); extern int pcre2_set_parens_nest_limit_8(pcre2_compile_context_8 *, uint32_t); extern int pcre2_set_compile_recursion_guard_8(pcre2_compile_context_8 *, int (*)(uint32_t, void *), void *); extern pcre2_convert_context_8 *pcre2_convert_context_copy_8(pcre2_convert_context_8 *); extern pcre2_convert_context_8 *pcre2_convert_context_create_8(pcre2_general_context_8 *); extern void pcre2_convert_context_free_8(pcre2_convert_context_8 *); extern int pcre2_set_glob_escape_8(pcre2_convert_context_8 *, uint32_t); extern int pcre2_set_glob_separator_8(pcre2_convert_context_8 *, uint32_t); extern int pcre2_pattern_convert_8(PCRE2_SPTR8, size_t, uint32_t, PCRE2_UCHAR8 **, size_t *, pcre2_convert_context_8 *); extern void pcre2_converted_pattern_free_8(PCRE2_UCHAR8 *); extern pcre2_match_context_8 *pcre2_match_context_copy_8(pcre2_match_context_8 *); extern pcre2_match_context_8 *pcre2_match_context_create_8(pcre2_general_context_8 *); extern void pcre2_match_context_free_8(pcre2_match_context_8 *); extern int pcre2_set_callout_8(pcre2_match_context_8 *, int (*)(pcre2_callout_block_8 *, void *), void *); extern int pcre2_set_substitute_callout_8(pcre2_match_context_8 *, int (*)(pcre2_substitute_callout_block_8 *, void *), void *); extern int pcre2_set_depth_limit_8(pcre2_match_context_8 *, uint32_t); extern int pcre2_set_heap_limit_8(pcre2_match_context_8 *, uint32_t); extern int pcre2_set_match_limit_8(pcre2_match_context_8 *, uint32_t); extern int pcre2_set_offset_limit_8(pcre2_match_context_8 *, size_t); extern int pcre2_set_recursion_limit_8(pcre2_match_context_8 *, uint32_t); extern int pcre2_set_recursion_memory_management_8(pcre2_match_context_8 *, void *(*)(size_t, void *), void (*)(void *, void *), void *); extern pcre2_code_8 *pcre2_compile_8(PCRE2_SPTR8, size_t, uint32_t, int *, size_t *, pcre2_compile_context_8 *); extern void pcre2_code_free_8(pcre2_code_8 *); extern pcre2_code_8 *pcre2_code_copy_8(const pcre2_code_8 *); extern pcre2_code_8 *pcre2_code_copy_with_tables_8(const pcre2_code_8 *); extern int pcre2_pattern_info_8(const pcre2_code_8 *, uint32_t, void *); extern int pcre2_callout_enumerate_8(const pcre2_code_8 *, int (*)(pcre2_callout_enumerate_block_8 *, void *), void *); extern pcre2_match_data_8 *pcre2_match_data_create_8(uint32_t, pcre2_general_context_8 *); extern pcre2_match_data_8 *pcre2_match_data_create_from_pattern_8(const pcre2_code_8 *, pcre2_general_context_8 *); extern int pcre2_dfa_match_8(const pcre2_code_8 *, PCRE2_SPTR8, size_t, size_t, uint32_t, pcre2_match_data_8 *, pcre2_match_context_8 *, int *, size_t); extern int pcre2_match_8(const pcre2_code_8 *, PCRE2_SPTR8, size_t, size_t, uint32_t, pcre2_match_data_8 *, pcre2_match_context_8 *); extern void pcre2_match_data_free_8(pcre2_match_data_8 *); extern PCRE2_SPTR8 pcre2_get_mark_8(pcre2_match_data_8 *); extern size_t pcre2_get_match_data_size_8(pcre2_match_data_8 *); extern uint32_t pcre2_get_ovector_count_8(pcre2_match_data_8 *); extern size_t *pcre2_get_ovector_pointer_8(pcre2_match_data_8 *); extern size_t pcre2_get_startchar_8(pcre2_match_data_8 *); extern int pcre2_substring_copy_byname_8(pcre2_match_data_8 *, PCRE2_SPTR8, PCRE2_UCHAR8 *, size_t *); extern int pcre2_substring_copy_bynumber_8(pcre2_match_data_8 *, uint32_t, PCRE2_UCHAR8 *, size_t *); extern void pcre2_substring_free_8(PCRE2_UCHAR8 *); extern int pcre2_substring_get_byname_8(pcre2_match_data_8 *, PCRE2_SPTR8, PCRE2_UCHAR8 **, size_t *); extern int pcre2_substring_get_bynumber_8(pcre2_match_data_8 *, uint32_t, PCRE2_UCHAR8 **, size_t *); extern int pcre2_substring_length_byname_8(pcre2_match_data_8 *, PCRE2_SPTR8, size_t *); extern int pcre2_substring_length_bynumber_8(pcre2_match_data_8 *, uint32_t, size_t *); extern int pcre2_substring_nametable_scan_8(const pcre2_code_8 *, PCRE2_SPTR8, PCRE2_SPTR8 *, PCRE2_SPTR8 *); extern int pcre2_substring_number_from_name_8(const pcre2_code_8 *, PCRE2_SPTR8); extern void pcre2_substring_list_free_8(PCRE2_SPTR8 *); extern int pcre2_substring_list_get_8(pcre2_match_data_8 *, PCRE2_UCHAR8 ***, size_t **); extern int32_t pcre2_serialize_encode_8(const pcre2_code_8 **, int32_t, uint8_t **, size_t *, pcre2_general_context_8 *); extern int32_t pcre2_serialize_decode_8(pcre2_code_8 **, int32_t, const uint8_t *, pcre2_general_context_8 *); extern int32_t pcre2_serialize_get_number_of_codes_8(const uint8_t *); extern void pcre2_serialize_free_8(uint8_t *); extern int pcre2_substitute_8(const pcre2_code_8 *, PCRE2_SPTR8, size_t, size_t, uint32_t, pcre2_match_data_8 *, pcre2_match_context_8 *, PCRE2_SPTR8, size_t, PCRE2_UCHAR8 *, size_t *); extern int pcre2_jit_compile_8(pcre2_code_8 *, uint32_t); extern int pcre2_jit_match_8(const pcre2_code_8 *, PCRE2_SPTR8, size_t, size_t, uint32_t, pcre2_match_data_8 *, pcre2_match_context_8 *); extern void pcre2_jit_free_unused_memory_8(pcre2_general_context_8 *); extern pcre2_jit_stack_8 *pcre2_jit_stack_create_8(size_t, size_t, pcre2_general_context_8 *); extern void pcre2_jit_stack_assign_8(pcre2_match_context_8 *, pcre2_jit_callback_8, void *); extern void pcre2_jit_stack_free_8(pcre2_jit_stack_8 *); extern int pcre2_get_error_message_8(int, PCRE2_UCHAR8 *, size_t); extern const uint8_t *pcre2_maketables_8(pcre2_general_context_8 *); extern void pcre2_maketables_free_8(pcre2_general_context_8 *, const uint8_t *);
#undef PCRE2_LOCAL_WIDTH

#define PCRE2_LOCAL_WIDTH 16
struct pcre2_real_general_context_16; typedef struct pcre2_real_general_context_16 pcre2_general_context_16; struct pcre2_real_compile_context_16; typedef struct pcre2_real_compile_context_16 pcre2_compile_context_16; struct pcre2_real_match_context_16; typedef struct pcre2_real_match_context_16 pcre2_match_context_16; struct pcre2_real_convert_context_16; typedef struct pcre2_real_convert_context_16 pcre2_convert_context_16; struct pcre2_real_code_16; typedef struct pcre2_real_code_16 pcre2_code_16; struct pcre2_real_match_data_16; typedef struct pcre2_real_match_data_16 pcre2_match_data_16; struct pcre2_real_jit_stack_16; typedef struct pcre2_real_jit_stack_16 pcre2_jit_stack_16; typedef pcre2_jit_stack_16 *(*pcre2_jit_callback_16)(void *); typedef struct pcre2_callout_block_16 { uint32_t version; uint32_t callout_number; uint32_t capture_top; uint32_t capture_last; size_t *offset_vector; PCRE2_SPTR16 mark; PCRE2_SPTR16 subject; size_t subject_length; size_t start_match; size_t current_position; size_t pattern_position; size_t next_item_length; size_t callout_string_offset; size_t callout_string_length; PCRE2_SPTR16 callout_string; uint32_t callout_flags; } pcre2_callout_block_16; typedef struct pcre2_callout_enumerate_block_16 { uint32_t version; size_t pattern_position; size_t next_item_length; uint32_t callout_number; size_t callout_string_offset; size_t callout_string_length; PCRE2_SPTR16 callout_string; } pcre2_callout_enumerate_block_16; typedef struct pcre2_substitute_callout_block_16 { uint32_t version; PCRE2_SPTR16 input; PCRE2_SPTR16 output; size_t output_offsets[2]; size_t *ovector; uint32_t oveccount; uint32_t subscount; } pcre2_substitute_callout_block_16; extern int pcre2_config_16(uint32_t, void *); extern pcre2_general_context_16 *pcre2_general_context_copy_16(pcre2_general_context_16 *); extern pcre2_general_context_16 *pcre2_general_context_create_16(void *(*)(size_t, void *), void (*)(void *, void *), void *); extern void pcre2_general_context_free_16(pcre2_general_context_16 *); extern pcre2_compile_context_16 *pcre2_compile_context_copy_16(pcre2_compile_context_16 *); extern pcre2_compile_context_16 *pcre2_compile_context_create_16(pcre2_general_context_16 *);extern void pcre2_compile_context_free_16(pcre2_compile_context_16 *); extern int pcre2_set_bsr_16(pcre2_compile_context_16 *, uint32_t); extern int pcre2_set_character_tables_16(pcre2_compile_context_16 *, const uint8_t *); extern int pcre2_set_compile_extra_options_16(pcre2_compile_context_16 *, uint32_t); extern int pcre2_set_max_pattern_length_16(pcre2_compile_context_16 *, size_t); extern int pcre2_set_newline_16(pcre2_compile_context_16 *, uint32_t); extern int pcre2_set_parens_nest_limit_16(pcre2_compile_context_16 *, uint32_t); extern int pcre2_set_compile_recursion_guard_16(pcre2_compile_context_16 *, int (*)(uint32_t, void *), void *); extern pcre2_convert_context_16 *pcre2_convert_context_copy_16(pcre2_convert_context_16 *); extern pcre2_convert_context_16 *pcre2_convert_context_create_16(pcre2_general_context_16 *); extern void pcre2_convert_context_free_16(pcre2_convert_context_16 *); extern int pcre2_set_glob_escape_16(pcre2_convert_context_16 *, uint32_t); extern int pcre2_set_glob_separator_16(pcre2_convert_context_16 *, uint32_t); extern int pcre2_pattern_convert_16(PCRE2_SPTR16, size_t, uint32_t, PCRE2_UCHAR16 **, size_t *, pcre2_convert_context_16 *); extern void pcre2_converted_pattern_free_16(PCRE2_UCHAR16 *); extern pcre2_match_context_16 *pcre2_match_context_copy_16(pcre2_match_context_16 *); extern pcre2_match_context_16 *pcre2_match_context_create_16(pcre2_general_context_16 *); extern void pcre2_match_context_free_16(pcre2_match_context_16 *); extern int pcre2_set_callout_16(pcre2_match_context_16 *, int (*)(pcre2_callout_block_16 *, void *), void *); extern int pcre2_set_substitute_callout_16(pcre2_match_context_16 *, int (*)(pcre2_substitute_callout_block_16 *, void *), void *); extern int pcre2_set_depth_limit_16(pcre2_match_context_16 *, uint32_t); extern int pcre2_set_heap_limit_16(pcre2_match_context_16 *, uint32_t); extern int pcre2_set_match_limit_16(pcre2_match_context_16 *, uint32_t); extern int pcre2_set_offset_limit_16(pcre2_match_context_16 *, size_t); extern int pcre2_set_recursion_limit_16(pcre2_match_context_16 *, uint32_t); extern int pcre2_set_recursion_memory_management_16(pcre2_match_context_16 *, void *(*)(size_t, void *), void (*)(void *, void *), void *); extern pcre2_code_16 *pcre2_compile_16(PCRE2_SPTR16, size_t, uint32_t, int *, size_t *, pcre2_compile_context_16 *); extern void pcre2_code_free_16(pcre2_code_16 *); extern pcre2_code_16 *pcre2_code_copy_16(const pcre2_code_16 *); extern pcre2_code_16 *pcre2_code_copy_with_tables_16(const pcre2_code_16 *); extern int pcre2_pattern_info_16(const pcre2_code_16 *, uint32_t, void *); extern int pcre2_callout_enumerate_16(const pcre2_code_16 *, int (*)(pcre2_callout_enumerate_block_16 *, void *), void *); extern pcre2_match_data_16 *pcre2_match_data_create_16(uint32_t, pcre2_general_context_16 *); extern pcre2_match_data_16 *pcre2_match_data_create_from_pattern_16(const pcre2_code_16 *, pcre2_general_context_16 *); extern int pcre2_dfa_match_16(const pcre2_code_16 *, PCRE2_SPTR16, size_t, size_t, uint32_t, pcre2_match_data_16 *, pcre2_match_context_16 *, int *, size_t); extern int pcre2_match_16(const pcre2_code_16 *, PCRE2_SPTR16, size_t, size_t, uint32_t, pcre2_match_data_16 *, pcre2_match_context_16 *); extern void pcre2_match_data_free_16(pcre2_match_data_16 *); extern PCRE2_SPTR16 pcre2_get_mark_16(pcre2_match_data_16 *); extern size_t pcre2_get_match_data_size_16(pcre2_match_data_16 *); extern uint32_t pcre2_get_ovector_count_16(pcre2_match_data_16 *); extern size_t *pcre2_get_ovector_pointer_16(pcre2_match_data_16 *); extern size_t pcre2_get_startchar_16(pcre2_match_data_16 *); extern int pcre2_substring_copy_byname_16(pcre2_match_data_16 *, PCRE2_SPTR16, PCRE2_UCHAR16 *, size_t *); extern int pcre2_substring_copy_bynumber_16(pcre2_match_data_16 *, uint32_t, PCRE2_UCHAR16 *, size_t *); extern void pcre2_substring_free_16(PCRE2_UCHAR16 *); extern int pcre2_substring_get_byname_16(pcre2_match_data_16 *, PCRE2_SPTR16, PCRE2_UCHAR16 **, size_t *); extern int pcre2_substring_get_bynumber_16(pcre2_match_data_16 *, uint32_t, PCRE2_UCHAR16 **, size_t *); extern int pcre2_substring_length_byname_16(pcre2_match_data_16 *, PCRE2_SPTR16, size_t *); extern int pcre2_substring_length_bynumber_16(pcre2_match_data_16 *, uint32_t, size_t *); extern int pcre2_substring_nametable_scan_16(const pcre2_code_16 *, PCRE2_SPTR16, PCRE2_SPTR16 *, PCRE2_SPTR16 *); extern int pcre2_substring_number_from_name_16(const pcre2_code_16 *, PCRE2_SPTR16); extern void pcre2_substring_list_free_16(PCRE2_SPTR16 *); extern int pcre2_substring_list_get_16(pcre2_match_data_16 *, PCRE2_UCHAR16 ***, size_t **); extern int32_t pcre2_serialize_encode_16(const pcre2_code_16 **, int32_t, uint8_t **, size_t *, pcre2_general_context_16 *); extern int32_t pcre2_serialize_decode_16(pcre2_code_16 **, int32_t, const uint8_t *, pcre2_general_context_16 *); extern int32_t pcre2_serialize_get_number_of_codes_16(const uint8_t *); extern void pcre2_serialize_free_16(uint8_t *); extern int pcre2_substitute_16(const pcre2_code_16 *, PCRE2_SPTR16, size_t, size_t, uint32_t, pcre2_match_data_16 *, pcre2_match_context_16 *, PCRE2_SPTR16, size_t, PCRE2_UCHAR16 *, size_t *); extern int pcre2_jit_compile_16(pcre2_code_16 *, uint32_t); extern int pcre2_jit_match_16(const pcre2_code_16 *, PCRE2_SPTR16, size_t, size_t, uint32_t, pcre2_match_data_16 *, pcre2_match_context_16 *); extern void pcre2_jit_free_unused_memory_16(pcre2_general_context_16 *); extern pcre2_jit_stack_16 *pcre2_jit_stack_create_16(size_t, size_t, pcre2_general_context_16 *); extern void pcre2_jit_stack_assign_16(pcre2_match_context_16 *, pcre2_jit_callback_16, void *); extern void pcre2_jit_stack_free_16(pcre2_jit_stack_16 *); extern int pcre2_get_error_message_16(int, PCRE2_UCHAR16 *, size_t); extern const uint8_t *pcre2_maketables_16(pcre2_general_context_16 *); extern void pcre2_maketables_free_16(pcre2_general_context_16 *, const uint8_t *);
#undef PCRE2_LOCAL_WIDTH

#define PCRE2_LOCAL_WIDTH 32
struct pcre2_real_general_context_32; typedef struct pcre2_real_general_context_32 pcre2_general_context_32; struct pcre2_real_compile_context_32; typedef struct pcre2_real_compile_context_32 pcre2_compile_context_32; struct pcre2_real_match_context_32; typedef struct pcre2_real_match_context_32 pcre2_match_context_32; struct pcre2_real_convert_context_32; typedef struct pcre2_real_convert_context_32 pcre2_convert_context_32; struct pcre2_real_code_32; typedef struct pcre2_real_code_32 pcre2_code_32; struct pcre2_real_match_data_32; typedef struct pcre2_real_match_data_32 pcre2_match_data_32; struct pcre2_real_jit_stack_32; typedef struct pcre2_real_jit_stack_32 pcre2_jit_stack_32; typedef pcre2_jit_stack_32 *(*pcre2_jit_callback_32)(void *); typedef struct pcre2_callout_block_32 { uint32_t version; uint32_t callout_number; uint32_t capture_top; uint32_t capture_last; size_t *offset_vector; PCRE2_SPTR32 mark; PCRE2_SPTR32 subject; size_t subject_length; size_t start_match; size_t current_position; size_t pattern_position; size_t next_item_length; size_t callout_string_offset; size_t callout_string_length; PCRE2_SPTR32 callout_string; uint32_t callout_flags; } pcre2_callout_block_32; typedef struct pcre2_callout_enumerate_block_32 { uint32_t version; size_t pattern_position; size_t next_item_length; uint32_t callout_number; size_t callout_string_offset; size_t callout_string_length; PCRE2_SPTR32 callout_string; } pcre2_callout_enumerate_block_32; typedef struct pcre2_substitute_callout_block_32 { uint32_t version; PCRE2_SPTR32 input; PCRE2_SPTR32 output; size_t output_offsets[2]; size_t *ovector; uint32_t oveccount; uint32_t subscount; } pcre2_substitute_callout_block_32; extern int pcre2_config_32(uint32_t, void *); extern pcre2_general_context_32 *pcre2_general_context_copy_32(pcre2_general_context_32 *); extern pcre2_general_context_32 *pcre2_general_context_create_32(void *(*)(size_t, void *), void (*)(void *, void *), void *); extern void pcre2_general_context_free_32(pcre2_general_context_32 *); extern pcre2_compile_context_32 *pcre2_compile_context_copy_32(pcre2_compile_context_32 *); extern pcre2_compile_context_32 *pcre2_compile_context_create_32(pcre2_general_context_32 *);extern void pcre2_compile_context_free_32(pcre2_compile_context_32 *); extern int pcre2_set_bsr_32(pcre2_compile_context_32 *, uint32_t); extern int pcre2_set_character_tables_32(pcre2_compile_context_32 *, const uint8_t *); extern int pcre2_set_compile_extra_options_32(pcre2_compile_context_32 *, uint32_t); extern int pcre2_set_max_pattern_length_32(pcre2_compile_context_32 *, size_t); extern int pcre2_set_newline_32(pcre2_compile_context_32 *, uint32_t); extern int pcre2_set_parens_nest_limit_32(pcre2_compile_context_32 *, uint32_t); extern int pcre2_set_compile_recursion_guard_32(pcre2_compile_context_32 *, int (*)(uint32_t, void *), void *); extern pcre2_convert_context_32 *pcre2_convert_context_copy_32(pcre2_convert_context_32 *); extern pcre2_convert_context_32 *pcre2_convert_context_create_32(pcre2_general_context_32 *); extern void pcre2_convert_context_free_32(pcre2_convert_context_32 *); extern int pcre2_set_glob_escape_32(pcre2_convert_context_32 *, uint32_t); extern int pcre2_set_glob_separator_32(pcre2_convert_context_32 *, uint32_t); extern int pcre2_pattern_convert_32(PCRE2_SPTR32, size_t, uint32_t, PCRE2_UCHAR32 **, size_t *, pcre2_convert_context_32 *); extern void pcre2_converted_pattern_free_32(PCRE2_UCHAR32 *); extern pcre2_match_context_32 *pcre2_match_context_copy_32(pcre2_match_context_32 *); extern pcre2_match_context_32 *pcre2_match_context_create_32(pcre2_general_context_32 *); extern void pcre2_match_context_free_32(pcre2_match_context_32 *); extern int pcre2_set_callout_32(pcre2_match_context_32 *, int (*)(pcre2_callout_block_32 *, void *), void *); extern int pcre2_set_substitute_callout_32(pcre2_match_context_32 *, int (*)(pcre2_substitute_callout_block_32 *, void *), void *); extern int pcre2_set_depth_limit_32(pcre2_match_context_32 *, uint32_t); extern int pcre2_set_heap_limit_32(pcre2_match_context_32 *, uint32_t); extern int pcre2_set_match_limit_32(pcre2_match_context_32 *, uint32_t); extern int pcre2_set_offset_limit_32(pcre2_match_context_32 *, size_t); extern int pcre2_set_recursion_limit_32(pcre2_match_context_32 *, uint32_t); extern int pcre2_set_recursion_memory_management_32(pcre2_match_context_32 *, void *(*)(size_t, void *), void (*)(void *, void *), void *); extern pcre2_code_32 *pcre2_compile_32(PCRE2_SPTR32, size_t, uint32_t, int *, size_t *, pcre2_compile_context_32 *); extern void pcre2_code_free_32(pcre2_code_32 *); extern pcre2_code_32 *pcre2_code_copy_32(const pcre2_code_32 *); extern pcre2_code_32 *pcre2_code_copy_with_tables_32(const pcre2_code_32 *); extern int pcre2_pattern_info_32(const pcre2_code_32 *, uint32_t, void *); extern int pcre2_callout_enumerate_32(const pcre2_code_32 *, int (*)(pcre2_callout_enumerate_block_32 *, void *), void *); extern pcre2_match_data_32 *pcre2_match_data_create_32(uint32_t, pcre2_general_context_32 *); extern pcre2_match_data_32 *pcre2_match_data_create_from_pattern_32(const pcre2_code_32 *, pcre2_general_context_32 *); extern int pcre2_dfa_match_32(const pcre2_code_32 *, PCRE2_SPTR32, size_t, size_t, uint32_t, pcre2_match_data_32 *, pcre2_match_context_32 *, int *, size_t); extern int pcre2_match_32(const pcre2_code_32 *, PCRE2_SPTR32, size_t, size_t, uint32_t, pcre2_match_data_32 *, pcre2_match_context_32 *); extern void pcre2_match_data_free_32(pcre2_match_data_32 *); extern PCRE2_SPTR32 pcre2_get_mark_32(pcre2_match_data_32 *); extern size_t pcre2_get_match_data_size_32(pcre2_match_data_32 *); extern uint32_t pcre2_get_ovector_count_32(pcre2_match_data_32 *); extern size_t *pcre2_get_ovector_pointer_32(pcre2_match_data_32 *); extern size_t pcre2_get_startchar_32(pcre2_match_data_32 *); extern int pcre2_substring_copy_byname_32(pcre2_match_data_32 *, PCRE2_SPTR32, PCRE2_UCHAR32 *, size_t *); extern int pcre2_substring_copy_bynumber_32(pcre2_match_data_32 *, uint32_t, PCRE2_UCHAR32 *, size_t *); extern void pcre2_substring_free_32(PCRE2_UCHAR32 *); extern int pcre2_substring_get_byname_32(pcre2_match_data_32 *, PCRE2_SPTR32, PCRE2_UCHAR32 **, size_t *); extern int pcre2_substring_get_bynumber_32(pcre2_match_data_32 *, uint32_t, PCRE2_UCHAR32 **, size_t *); extern int pcre2_substring_length_byname_32(pcre2_match_data_32 *, PCRE2_SPTR32, size_t *); extern int pcre2_substring_length_bynumber_32(pcre2_match_data_32 *, uint32_t, size_t *); extern int pcre2_substring_nametable_scan_32(const pcre2_code_32 *, PCRE2_SPTR32, PCRE2_SPTR32 *, PCRE2_SPTR32 *); extern int pcre2_substring_number_from_name_32(const pcre2_code_32 *, PCRE2_SPTR32); extern void pcre2_substring_list_free_32(PCRE2_SPTR32 *); extern int pcre2_substring_list_get_32(pcre2_match_data_32 *, PCRE2_UCHAR32 ***, size_t **); extern int32_t pcre2_serialize_encode_32(const pcre2_code_32 **, int32_t, uint8_t **, size_t *, pcre2_general_context_32 *); extern int32_t pcre2_serialize_decode_32(pcre2_code_32 **, int32_t, const uint8_t *, pcre2_general_context_32 *); extern int32_t pcre2_serialize_get_number_of_codes_32(const uint8_t *); extern void pcre2_serialize_free_32(uint8_t *); extern int pcre2_substitute_32(const pcre2_code_32 *, PCRE2_SPTR32, size_t, size_t, uint32_t, pcre2_match_data_32 *, pcre2_match_context_32 *, PCRE2_SPTR32, size_t, PCRE2_UCHAR32 *, size_t *); extern int pcre2_jit_compile_32(pcre2_code_32 *, uint32_t); extern int pcre2_jit_match_32(const pcre2_code_32 *, PCRE2_SPTR32, size_t, size_t, uint32_t, pcre2_match_data_32 *, pcre2_match_context_32 *); extern void pcre2_jit_free_unused_memory_32(pcre2_general_context_32 *); extern pcre2_jit_stack_32 *pcre2_jit_stack_create_32(size_t, size_t, pcre2_general_context_32 *); extern void pcre2_jit_stack_assign_32(pcre2_match_context_32 *, pcre2_jit_callback_32, void *); extern void pcre2_jit_stack_free_32(pcre2_jit_stack_32 *); extern int pcre2_get_error_message_32(int, PCRE2_UCHAR32 *, size_t); extern const uint8_t *pcre2_maketables_32(pcre2_general_context_32 *); extern void pcre2_maketables_free_32(pcre2_general_context_32 *, const uint8_t *);
#undef PCRE2_LOCAL_WIDTH



#undef PCRE2_TYPES_LIST
#undef PCRE2_STRUCTURE_LIST
#undef PCRE2_GENERAL_INFO_FUNCTIONS
#undef PCRE2_GENERAL_CONTEXT_FUNCTIONS
#undef PCRE2_COMPILE_CONTEXT_FUNCTIONS
#undef PCRE2_CONVERT_CONTEXT_FUNCTIONS
#undef PCRE2_MATCH_CONTEXT_FUNCTIONS
#undef PCRE2_COMPILE_FUNCTIONS
#undef PCRE2_PATTERN_INFO_FUNCTIONS
#undef PCRE2_MATCH_FUNCTIONS
#undef PCRE2_SUBSTRING_FUNCTIONS
#undef PCRE2_SERIALIZE_FUNCTIONS
#undef PCRE2_SUBSTITUTE_FUNCTION
#undef PCRE2_JIT_FUNCTIONS
#undef PCRE2_OTHER_FUNCTIONS
#undef PCRE2_TYPES_STRUCTURES_AND_FUNCTIONS





#undef PCRE2_SUFFIX







#define PCRE2_SUFFIX(a) PCRE2_GLUE(a, PCRE2_CODE_UNIT_WIDTH)
# 20 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_regex.h" 2 3 4

#define NGX_REGEX_NO_MATCHED PCRE2_ERROR_NOMATCH

typedef pcre2_code_8 ngx_regex_t;
# 39 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_regex.h" 3 4
#define NGX_REGEX_CASELESS 0x00000001
#define NGX_REGEX_MULTILINE 0x00000002


typedef struct {
    ngx_str_t pattern;
    ngx_pool_t *pool;
    ngx_uint_t options;

    ngx_regex_t *regex;
    int captures;
    int named_captures;
    int name_size;
    u_char *names;
    ngx_str_t err;
} ngx_regex_compile_t;


typedef struct {
    ngx_regex_t *regex;
    u_char *name;
} ngx_regex_elt_t;


void ngx_regex_init(void);
ngx_int_t ngx_regex_compile(ngx_regex_compile_t *rc);

ngx_int_t ngx_regex_exec(ngx_regex_t *re, ngx_str_t *s, int *captures,
    ngx_uint_t size);


#define ngx_regex_exec_n "pcre2_match()"




ngx_int_t ngx_regex_exec_array(ngx_array_t *a, ngx_str_t *s, ngx_log_t *log);
# 74 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4

# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_radix_tree.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_radix_tree.h" 3 4
#define _NGX_RADIX_TREE_H_INCLUDED_ 






#define NGX_RADIX_NO_VALUE (uintptr_t) -1

typedef struct ngx_radix_node_s ngx_radix_node_t;

struct ngx_radix_node_s {
    ngx_radix_node_t *right;
    ngx_radix_node_t *left;
    ngx_radix_node_t *parent;
    uintptr_t value;
};


typedef struct {
    ngx_radix_node_t *root;
    ngx_pool_t *pool;
    ngx_radix_node_t *free;
    char *start;
    size_t size;
} ngx_radix_tree_t;


ngx_radix_tree_t *ngx_radix_tree_create(ngx_pool_t *pool,
    ngx_int_t preallocate);

ngx_int_t ngx_radix32tree_insert(ngx_radix_tree_t *tree,
    uint32_t key, uint32_t mask, uintptr_t value);
ngx_int_t ngx_radix32tree_delete(ngx_radix_tree_t *tree,
    uint32_t key, uint32_t mask);
uintptr_t ngx_radix32tree_find(ngx_radix_tree_t *tree, uint32_t key);


ngx_int_t ngx_radix128tree_insert(ngx_radix_tree_t *tree,
    u_char *key, u_char *mask, uintptr_t value);
ngx_int_t ngx_radix128tree_delete(ngx_radix_tree_t *tree,
    u_char *key, u_char *mask);
uintptr_t ngx_radix128tree_find(ngx_radix_tree_t *tree, u_char *key);
# 76 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_times.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_times.h" 3 4
#define _NGX_TIMES_H_INCLUDED_ 






typedef struct {
    time_t sec;
    ngx_uint_t msec;
    ngx_int_t gmtoff;
} ngx_time_t;


void ngx_time_init(void);
void ngx_time_update(void);
void ngx_time_sigsafe_update(void);
u_char *ngx_http_time(u_char *buf, time_t t);
u_char *ngx_http_cookie_time(u_char *buf, time_t t);
void ngx_gmtime(time_t t, ngx_tm_t *tp);

time_t ngx_next_time(time_t when);
#define ngx_next_time_n "mktime()"


extern volatile ngx_time_t *ngx_cached_time;

#define ngx_time() ngx_cached_time->sec
#define ngx_timeofday() (ngx_time_t *) ngx_cached_time

extern volatile ngx_str_t ngx_cached_err_log_time;
extern volatile ngx_str_t ngx_cached_http_time;
extern volatile ngx_str_t ngx_cached_http_log_time;
extern volatile ngx_str_t ngx_cached_http_log_iso8601;
extern volatile ngx_str_t ngx_cached_syslog_time;





extern volatile ngx_msec_t ngx_current_msec;
# 77 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_rwlock.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_rwlock.h" 3 4
#define _NGX_RWLOCK_H_INCLUDED_ 






void ngx_rwlock_wlock(ngx_atomic_t *lock);
void ngx_rwlock_rlock(ngx_atomic_t *lock);
void ngx_rwlock_unlock(ngx_atomic_t *lock);
void ngx_rwlock_downgrade(ngx_atomic_t *lock);
# 78 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_shmtx.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_shmtx.h" 3 4
#define _NGX_SHMTX_H_INCLUDED_ 






typedef struct {
    ngx_atomic_t lock;



} ngx_shmtx_sh_t;


typedef struct {

    ngx_atomic_t *lock;
# 36 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_shmtx.h" 3 4
    ngx_uint_t spin;
} ngx_shmtx_t;


ngx_int_t ngx_shmtx_create(ngx_shmtx_t *mtx, ngx_shmtx_sh_t *addr,
    u_char *name);
void ngx_shmtx_destroy(ngx_shmtx_t *mtx);
ngx_uint_t ngx_shmtx_trylock(ngx_shmtx_t *mtx);
void ngx_shmtx_lock(ngx_shmtx_t *mtx);
void ngx_shmtx_unlock(ngx_shmtx_t *mtx);
ngx_uint_t ngx_shmtx_force_unlock(ngx_shmtx_t *mtx, ngx_pid_t pid);
# 79 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_slab.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_slab.h" 3 4
#define _NGX_SLAB_H_INCLUDED_ 






typedef struct ngx_slab_page_s ngx_slab_page_t;

struct ngx_slab_page_s {
    uintptr_t slab;
    ngx_slab_page_t *next;
    uintptr_t prev;
};


typedef struct {
    ngx_uint_t total;
    ngx_uint_t used;

    ngx_uint_t reqs;
    ngx_uint_t fails;
} ngx_slab_stat_t;


typedef struct {
    ngx_shmtx_sh_t lock;

    size_t min_size;
    size_t min_shift;

    ngx_slab_page_t *pages;
    ngx_slab_page_t *last;
    ngx_slab_page_t free;

    ngx_slab_stat_t *stats;
    ngx_uint_t pfree;

    u_char *start;
    u_char *end;

    ngx_shmtx_t mutex;

    u_char *log_ctx;
    u_char zero;

    unsigned log_nomem:1;

    void *data;
    void *addr;
} ngx_slab_pool_t;


void ngx_slab_sizes_init(void);
void ngx_slab_init(ngx_slab_pool_t *pool);
void *ngx_slab_alloc(ngx_slab_pool_t *pool, size_t size);
void *ngx_slab_alloc_locked(ngx_slab_pool_t *pool, size_t size);
void *ngx_slab_calloc(ngx_slab_pool_t *pool, size_t size);
void *ngx_slab_calloc_locked(ngx_slab_pool_t *pool, size_t size);
void ngx_slab_free(ngx_slab_pool_t *pool, void *p);
void ngx_slab_free_locked(ngx_slab_pool_t *pool, void *p);
# 80 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_inet.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_inet.h" 3 4
#define _NGX_INET_H_INCLUDED_ 






#define NGX_INET_ADDRSTRLEN (sizeof("255.255.255.255") - 1)
#define NGX_INET6_ADDRSTRLEN (sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255") - 1)

#define NGX_UNIX_ADDRSTRLEN (sizeof("unix:") - 1 + sizeof(struct sockaddr_un) - offsetof(struct sockaddr_un, sun_path))




#define NGX_SOCKADDR_STRLEN NGX_UNIX_ADDRSTRLEN







#define NGX_SOCKADDRLEN sizeof(ngx_sockaddr_t)


typedef union {
    struct sockaddr sockaddr;
    struct sockaddr_in sockaddr_in;

    struct sockaddr_in6 sockaddr_in6;


    struct sockaddr_un sockaddr_un;

} ngx_sockaddr_t;


typedef struct {
    in_addr_t addr;
    in_addr_t mask;
} ngx_in_cidr_t;




typedef struct {
    struct in6_addr addr;
    struct in6_addr mask;
} ngx_in6_cidr_t;




typedef struct {
    ngx_uint_t family;
    union {
        ngx_in_cidr_t in;

        ngx_in6_cidr_t in6;

    } u;
} ngx_cidr_t;


typedef struct {
    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t name;
} ngx_addr_t;


typedef struct {
    ngx_str_t url;
    ngx_str_t host;
    ngx_str_t port_text;
    ngx_str_t uri;

    in_port_t port;
    in_port_t default_port;
    in_port_t last_port;
    int family;

    unsigned listen:1;
    unsigned uri_part:1;
    unsigned no_resolve:1;

    unsigned no_port:1;
    unsigned wildcard:1;

    socklen_t socklen;
    ngx_sockaddr_t sockaddr;

    ngx_addr_t *addrs;
    ngx_uint_t naddrs;

    char *err;
} ngx_url_t;


in_addr_t ngx_inet_addr(u_char *text, size_t len);

ngx_int_t ngx_inet6_addr(u_char *p, size_t len, u_char *addr);
size_t ngx_inet6_ntop(u_char *p, u_char *text, size_t len);

size_t ngx_sock_ntop(struct sockaddr *sa, socklen_t socklen, u_char *text,
    size_t len, ngx_uint_t port);
size_t ngx_inet_ntop(int family, void *addr, u_char *text, size_t len);
ngx_int_t ngx_ptocidr(ngx_str_t *text, ngx_cidr_t *cidr);
ngx_int_t ngx_cidr_match(struct sockaddr *sa, ngx_array_t *cidrs);
ngx_int_t ngx_parse_addr(ngx_pool_t *pool, ngx_addr_t *addr, u_char *text,
    size_t len);
ngx_int_t ngx_parse_addr_port(ngx_pool_t *pool, ngx_addr_t *addr,
    u_char *text, size_t len);
ngx_int_t ngx_parse_url(ngx_pool_t *pool, ngx_url_t *u);
ngx_int_t ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u);
ngx_int_t ngx_cmp_sockaddr(struct sockaddr *sa1, socklen_t slen1,
    struct sockaddr *sa2, socklen_t slen2, ngx_uint_t cmp_port);
in_port_t ngx_inet_get_port(struct sockaddr *sa);
void ngx_inet_set_port(struct sockaddr *sa, in_port_t port);
ngx_uint_t ngx_inet_wildcard(struct sockaddr *sa);
# 81 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_cycle.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_cycle.h" 3 4
#define _NGX_CYCLE_H_INCLUDED_ 







#define NGX_CYCLE_POOL_SIZE NGX_DEFAULT_POOL_SIZE



#define NGX_DEBUG_POINTS_STOP 1
#define NGX_DEBUG_POINTS_ABORT 2


typedef struct ngx_shm_zone_s ngx_shm_zone_t;

typedef ngx_int_t (*ngx_shm_zone_init_pt) (ngx_shm_zone_t *zone, void *data);

struct ngx_shm_zone_s {
    void *data;
    ngx_shm_t shm;
    ngx_shm_zone_init_pt init;
    void *tag;
    void *sync;
    ngx_uint_t noreuse;
};


struct ngx_cycle_s {
    void ****conf_ctx;
    ngx_pool_t *pool;

    ngx_log_t *log;
    ngx_log_t new_log;

    ngx_uint_t log_use_stderr;

    ngx_connection_t **files;
    ngx_connection_t *free_connections;
    ngx_uint_t free_connection_n;

    ngx_module_t **modules;
    ngx_uint_t modules_n;
    ngx_uint_t modules_used;

    ngx_queue_t reusable_connections_queue;
    ngx_uint_t reusable_connections_n;
    time_t connections_reuse_time;

    ngx_array_t listening;
    ngx_array_t paths;

    ngx_array_t config_dump;
    ngx_rbtree_t config_dump_rbtree;
    ngx_rbtree_node_t config_dump_sentinel;

    ngx_list_t open_files;
    ngx_list_t shared_memory;

    ngx_uint_t connection_n;
    ngx_uint_t files_n;

    ngx_connection_t *connections;
    ngx_event_t *read_events;
    ngx_event_t *write_events;

    ngx_cycle_t *old_cycle;

    ngx_str_t conf_file;
    ngx_str_t conf_param;
    ngx_str_t conf_prefix;
    ngx_str_t prefix;
    ngx_str_t error_log;
    ngx_str_t lock_file;
    ngx_str_t hostname;
};


typedef struct {
    ngx_flag_t daemon;
    ngx_flag_t master;

    ngx_msec_t timer_resolution;
    ngx_msec_t shutdown_timeout;

    ngx_int_t worker_processes;
    ngx_int_t debug_points;

    ngx_int_t rlimit_nofile;
    off_t rlimit_core;

    int priority;

    ngx_uint_t cpu_affinity_auto;
    ngx_uint_t cpu_affinity_n;
    ngx_cpuset_t *cpu_affinity;

    char *username;
    ngx_uid_t user;
    ngx_gid_t group;

    ngx_str_t working_directory;
    ngx_str_t lock_file;

    ngx_str_t pid;
    ngx_str_t oldpid;

    ngx_array_t env;
    char **environment;

    ngx_uint_t transparent;
} ngx_core_conf_t;


#define ngx_is_init_cycle(cycle) (cycle->conf_ctx == NULL)


ngx_cycle_t *ngx_init_cycle(ngx_cycle_t *old_cycle);
ngx_int_t ngx_create_pidfile(ngx_str_t *name, ngx_log_t *log);
void ngx_delete_pidfile(ngx_cycle_t *cycle);
ngx_int_t ngx_signal_process(ngx_cycle_t *cycle, char *sig);
void ngx_reopen_files(ngx_cycle_t *cycle, ngx_uid_t user);
char **ngx_set_environment(ngx_cycle_t *cycle, ngx_uint_t *last);
ngx_pid_t ngx_exec_new_binary(ngx_cycle_t *cycle, char *const *argv);
ngx_cpuset_t *ngx_get_cpu_affinity(ngx_uint_t n);
ngx_shm_zone_t *ngx_shared_memory_add(ngx_conf_t *cf, ngx_str_t *name,
    size_t size, void *tag);
void ngx_set_shutdown_timer(ngx_cycle_t *cycle);


extern volatile ngx_cycle_t *ngx_cycle;
extern ngx_array_t ngx_old_cycles;
extern ngx_module_t ngx_core_module;
extern ngx_uint_t ngx_test_config;
extern ngx_uint_t ngx_dump_config;
extern ngx_uint_t ngx_quiet_mode;
# 82 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_resolver.h" 1 3 4
# 13 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_resolver.h" 3 4
#define _NGX_RESOLVER_H_INCLUDED_ 


#define NGX_RESOLVE_A 1
#define NGX_RESOLVE_CNAME 5
#define NGX_RESOLVE_PTR 12
#define NGX_RESOLVE_MX 15
#define NGX_RESOLVE_TXT 16

#define NGX_RESOLVE_AAAA 28

#define NGX_RESOLVE_SRV 33
#define NGX_RESOLVE_DNAME 39

#define NGX_RESOLVE_FORMERR 1
#define NGX_RESOLVE_SERVFAIL 2
#define NGX_RESOLVE_NXDOMAIN 3
#define NGX_RESOLVE_NOTIMP 4
#define NGX_RESOLVE_REFUSED 5
#define NGX_RESOLVE_TIMEDOUT NGX_ETIMEDOUT


#define NGX_NO_RESOLVER (void *) -1

#define NGX_RESOLVER_MAX_RECURSION 50


typedef struct ngx_resolver_s ngx_resolver_t;


typedef struct {
    ngx_connection_t *udp;
    ngx_connection_t *tcp;
    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t server;
    ngx_log_t log;
    ngx_buf_t *read_buf;
    ngx_buf_t *write_buf;
    ngx_resolver_t *resolver;
} ngx_resolver_connection_t;


typedef struct ngx_resolver_ctx_s ngx_resolver_ctx_t;

typedef void (*ngx_resolver_handler_pt)(ngx_resolver_ctx_t *ctx);


typedef struct {
    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t name;
    u_short priority;
    u_short weight;
} ngx_resolver_addr_t;


typedef struct {
    ngx_str_t name;
    u_short priority;
    u_short weight;
    u_short port;
} ngx_resolver_srv_t;


typedef struct {
    ngx_str_t name;
    u_short priority;
    u_short weight;
    u_short port;

    ngx_resolver_ctx_t *ctx;
    ngx_int_t state;

    ngx_uint_t naddrs;
    ngx_addr_t *addrs;
} ngx_resolver_srv_name_t;


typedef struct {
    ngx_rbtree_node_t node;
    ngx_queue_t queue;


    u_char *name;



    struct in6_addr addr6;


    u_short nlen;
    u_short qlen;

    u_char *query;

    u_char *query6;


    union {
        in_addr_t addr;
        in_addr_t *addrs;
        u_char *cname;
        ngx_resolver_srv_t *srvs;
    } u;

    u_char code;
    u_short naddrs;
    u_short nsrvs;
    u_short cnlen;


    union {
        struct in6_addr addr6;
        struct in6_addr *addrs6;
    } u6;

    u_short naddrs6;


    time_t expire;
    time_t valid;
    uint32_t ttl;

    unsigned tcp:1;

    unsigned tcp6:1;


    ngx_uint_t last_connection;

    ngx_resolver_ctx_t *waiting;
} ngx_resolver_node_t;


struct ngx_resolver_s {

    ngx_event_t *event;
    void *dummy;
    ngx_log_t *log;


    ngx_int_t ident;


    ngx_array_t connections;
    ngx_uint_t last_connection;

    ngx_rbtree_t name_rbtree;
    ngx_rbtree_node_t name_sentinel;

    ngx_rbtree_t srv_rbtree;
    ngx_rbtree_node_t srv_sentinel;

    ngx_rbtree_t addr_rbtree;
    ngx_rbtree_node_t addr_sentinel;

    ngx_queue_t name_resend_queue;
    ngx_queue_t srv_resend_queue;
    ngx_queue_t addr_resend_queue;

    ngx_queue_t name_expire_queue;
    ngx_queue_t srv_expire_queue;
    ngx_queue_t addr_expire_queue;


    ngx_uint_t ipv6;
    ngx_rbtree_t addr6_rbtree;
    ngx_rbtree_node_t addr6_sentinel;
    ngx_queue_t addr6_resend_queue;
    ngx_queue_t addr6_expire_queue;


    time_t resend_timeout;
    time_t tcp_timeout;
    time_t expire;
    time_t valid;

    ngx_uint_t log_level;
};


struct ngx_resolver_ctx_s {
    ngx_resolver_ctx_t *next;
    ngx_resolver_t *resolver;
    ngx_resolver_node_t *node;


    ngx_int_t ident;

    ngx_int_t state;
    ngx_str_t name;
    ngx_str_t service;

    time_t valid;
    ngx_uint_t naddrs;
    ngx_resolver_addr_t *addrs;
    ngx_resolver_addr_t addr;
    struct sockaddr_in sin;

    ngx_uint_t count;
    ngx_uint_t nsrvs;
    ngx_resolver_srv_name_t *srvs;

    ngx_resolver_handler_pt handler;
    void *data;
    ngx_msec_t timeout;

    unsigned quick:1;
    unsigned async:1;
    unsigned cancelable:1;
    ngx_uint_t recursion;
    ngx_event_t *event;
};


ngx_resolver_t *ngx_resolver_create(ngx_conf_t *cf, ngx_str_t *names,
    ngx_uint_t n);
ngx_resolver_ctx_t *ngx_resolve_start(ngx_resolver_t *r,
    ngx_resolver_ctx_t *temp);
ngx_int_t ngx_resolve_name(ngx_resolver_ctx_t *ctx);
void ngx_resolve_name_done(ngx_resolver_ctx_t *ctx);
ngx_int_t ngx_resolve_addr(ngx_resolver_ctx_t *ctx);
void ngx_resolve_addr_done(ngx_resolver_ctx_t *ctx);
char *ngx_resolver_strerror(ngx_int_t err);
# 83 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4



# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_process_cycle.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_process_cycle.h" 3 4
#define _NGX_PROCESS_CYCLE_H_INCLUDED_ 






#define NGX_CMD_OPEN_CHANNEL 1
#define NGX_CMD_CLOSE_CHANNEL 2
#define NGX_CMD_QUIT 3
#define NGX_CMD_TERMINATE 4
#define NGX_CMD_REOPEN 5


#define NGX_PROCESS_SINGLE 0
#define NGX_PROCESS_MASTER 1
#define NGX_PROCESS_SIGNALLER 2
#define NGX_PROCESS_WORKER 3
#define NGX_PROCESS_HELPER 4


typedef struct {
    ngx_event_handler_pt handler;
    char *name;
    ngx_msec_t delay;
} ngx_cache_manager_ctx_t;


void ngx_master_process_cycle(ngx_cycle_t *cycle);
void ngx_single_process_cycle(ngx_cycle_t *cycle);


extern ngx_uint_t ngx_process;
extern ngx_uint_t ngx_worker;
extern ngx_pid_t ngx_pid;
extern ngx_pid_t ngx_new_binary;
extern ngx_uint_t ngx_inherited;
extern ngx_uint_t ngx_daemonized;
extern ngx_uint_t ngx_exiting;

extern sig_atomic_t ngx_reap;
extern sig_atomic_t ngx_sigio;
extern sig_atomic_t ngx_sigalrm;
extern sig_atomic_t ngx_quit;
extern sig_atomic_t ngx_debug_quit;
extern sig_atomic_t ngx_terminate;
extern sig_atomic_t ngx_noaccept;
extern sig_atomic_t ngx_reconfigure;
extern sig_atomic_t ngx_reopen;
extern sig_atomic_t ngx_change_binary;
# 87 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_conf_file.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_conf_file.h" 3 4
#define _NGX_CONF_FILE_H_INCLUDED_ 
# 22 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_conf_file.h" 3 4
#define NGX_CONF_NOARGS 0x00000001
#define NGX_CONF_TAKE1 0x00000002
#define NGX_CONF_TAKE2 0x00000004
#define NGX_CONF_TAKE3 0x00000008
#define NGX_CONF_TAKE4 0x00000010
#define NGX_CONF_TAKE5 0x00000020
#define NGX_CONF_TAKE6 0x00000040
#define NGX_CONF_TAKE7 0x00000080

#define NGX_CONF_MAX_ARGS 8

#define NGX_CONF_TAKE12 (NGX_CONF_TAKE1|NGX_CONF_TAKE2)
#define NGX_CONF_TAKE13 (NGX_CONF_TAKE1|NGX_CONF_TAKE3)

#define NGX_CONF_TAKE23 (NGX_CONF_TAKE2|NGX_CONF_TAKE3)

#define NGX_CONF_TAKE123 (NGX_CONF_TAKE1|NGX_CONF_TAKE2|NGX_CONF_TAKE3)
#define NGX_CONF_TAKE1234 (NGX_CONF_TAKE1|NGX_CONF_TAKE2|NGX_CONF_TAKE3 |NGX_CONF_TAKE4)


#define NGX_CONF_ARGS_NUMBER 0x000000ff
#define NGX_CONF_BLOCK 0x00000100
#define NGX_CONF_FLAG 0x00000200
#define NGX_CONF_ANY 0x00000400
#define NGX_CONF_1MORE 0x00000800
#define NGX_CONF_2MORE 0x00001000

#define NGX_DIRECT_CONF 0x00010000

#define NGX_MAIN_CONF 0x01000000
#define NGX_ANY_CONF 0xFF000000



#define NGX_CONF_UNSET -1
#define NGX_CONF_UNSET_UINT (ngx_uint_t) -1
#define NGX_CONF_UNSET_PTR (void *) -1
#define NGX_CONF_UNSET_SIZE (size_t) -1
#define NGX_CONF_UNSET_MSEC (ngx_msec_t) -1


#define NGX_CONF_OK NULL
#define NGX_CONF_ERROR (void *) -1

#define NGX_CONF_BLOCK_START 1
#define NGX_CONF_BLOCK_DONE 2
#define NGX_CONF_FILE_DONE 3

#define NGX_CORE_MODULE 0x45524F43
#define NGX_CONF_MODULE 0x464E4F43


#define NGX_MAX_CONF_ERRSTR 1024


struct ngx_command_s {
    ngx_str_t name;
    ngx_uint_t type;
    char *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
    ngx_uint_t conf;
    ngx_uint_t offset;
    void *post;
};

#define ngx_null_command { ngx_null_string, 0, NULL, 0, 0, NULL }


struct ngx_open_file_s {
    ngx_fd_t fd;
    ngx_str_t name;

    void (*flush)(ngx_open_file_t *file, ngx_log_t *log);
    void *data;
};


typedef struct {
    ngx_file_t file;
    ngx_buf_t *buffer;
    ngx_buf_t *dump;
    ngx_uint_t line;
} ngx_conf_file_t;


typedef struct {
    ngx_str_t name;
    ngx_buf_t *buffer;
} ngx_conf_dump_t;


typedef char *(*ngx_conf_handler_pt)(ngx_conf_t *cf,
    ngx_command_t *dummy, void *conf);


struct ngx_conf_s {
    char *name;
    ngx_array_t *args;

    ngx_cycle_t *cycle;
    ngx_pool_t *pool;
    ngx_pool_t *temp_pool;
    ngx_conf_file_t *conf_file;
    ngx_log_t *log;

    void *ctx;
    ngx_uint_t module_type;
    ngx_uint_t cmd_type;

    ngx_conf_handler_pt handler;
    void *handler_conf;
};


typedef char *(*ngx_conf_post_handler_pt) (ngx_conf_t *cf,
    void *data, void *conf);

typedef struct {
    ngx_conf_post_handler_pt post_handler;
} ngx_conf_post_t;


typedef struct {
    ngx_conf_post_handler_pt post_handler;
    char *old_name;
    char *new_name;
} ngx_conf_deprecated_t;


typedef struct {
    ngx_conf_post_handler_pt post_handler;
    ngx_int_t low;
    ngx_int_t high;
} ngx_conf_num_bounds_t;


typedef struct {
    ngx_str_t name;
    ngx_uint_t value;
} ngx_conf_enum_t;


#define NGX_CONF_BITMASK_SET 1

typedef struct {
    ngx_str_t name;
    ngx_uint_t mask;
} ngx_conf_bitmask_t;



char * ngx_conf_deprecated(ngx_conf_t *cf, void *post, void *data);
char *ngx_conf_check_num_bounds(ngx_conf_t *cf, void *post, void *data);


#define ngx_get_conf(conf_ctx,module) conf_ctx[module.index]



#define ngx_conf_init_value(conf,default) if (conf == NGX_CONF_UNSET) { conf = default; }




#define ngx_conf_init_ptr_value(conf,default) if (conf == NGX_CONF_UNSET_PTR) { conf = default; }




#define ngx_conf_init_uint_value(conf,default) if (conf == NGX_CONF_UNSET_UINT) { conf = default; }




#define ngx_conf_init_size_value(conf,default) if (conf == NGX_CONF_UNSET_SIZE) { conf = default; }




#define ngx_conf_init_msec_value(conf,default) if (conf == NGX_CONF_UNSET_MSEC) { conf = default; }




#define ngx_conf_merge_value(conf,prev,default) if (conf == NGX_CONF_UNSET) { conf = (prev == NGX_CONF_UNSET) ? default : prev; }




#define ngx_conf_merge_ptr_value(conf,prev,default) if (conf == NGX_CONF_UNSET_PTR) { conf = (prev == NGX_CONF_UNSET_PTR) ? default : prev; }




#define ngx_conf_merge_uint_value(conf,prev,default) if (conf == NGX_CONF_UNSET_UINT) { conf = (prev == NGX_CONF_UNSET_UINT) ? default : prev; }




#define ngx_conf_merge_msec_value(conf,prev,default) if (conf == NGX_CONF_UNSET_MSEC) { conf = (prev == NGX_CONF_UNSET_MSEC) ? default : prev; }




#define ngx_conf_merge_sec_value(conf,prev,default) if (conf == NGX_CONF_UNSET) { conf = (prev == NGX_CONF_UNSET) ? default : prev; }




#define ngx_conf_merge_size_value(conf,prev,default) if (conf == NGX_CONF_UNSET_SIZE) { conf = (prev == NGX_CONF_UNSET_SIZE) ? default : prev; }




#define ngx_conf_merge_off_value(conf,prev,default) if (conf == NGX_CONF_UNSET) { conf = (prev == NGX_CONF_UNSET) ? default : prev; }




#define ngx_conf_merge_str_value(conf,prev,default) if (conf.data == NULL) { if (prev.data) { conf.len = prev.len; conf.data = prev.data; } else { conf.len = sizeof(default) - 1; conf.data = (u_char *) default; } }
# 251 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_conf_file.h" 3 4
#define ngx_conf_merge_bufs_value(conf,prev,default_num,default_size) if (conf.num == 0) { if (prev.num) { conf.num = prev.num; conf.size = prev.size; } else { conf.num = default_num; conf.size = default_size; } }
# 262 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_conf_file.h" 3 4
#define ngx_conf_merge_bitmask_value(conf,prev,default) if (conf == 0) { conf = (prev == 0) ? default : prev; }





char *ngx_conf_param(ngx_conf_t *cf);
char *ngx_conf_parse(ngx_conf_t *cf, ngx_str_t *filename);
char *ngx_conf_include(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);


ngx_int_t ngx_conf_full_name(ngx_cycle_t *cycle, ngx_str_t *name,
    ngx_uint_t conf_prefix);
ngx_open_file_t *ngx_conf_open_file(ngx_cycle_t *cycle, ngx_str_t *name);
void ngx_conf_log_error(ngx_uint_t level, ngx_conf_t *cf,
    ngx_err_t err, const char *fmt, ...);


char *ngx_conf_set_flag_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_str_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_str_array_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
char *ngx_conf_set_keyval_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_num_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_size_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_off_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_msec_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_sec_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_bufs_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_enum_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_conf_set_bitmask_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
# 88 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_module.h" 1 3 4
# 10 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_module.h" 3 4
#define _NGX_MODULE_H_INCLUDED_ 




# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/nginx.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/nginx.h" 3 4
#define _NGINX_H_INCLUDED_ 


#define nginx_version 1021005
#define NGINX_VERSION "1.21.5"
#define NGINX_VER "nginx/" NGINX_VERSION




#define NGINX_VER_BUILD NGINX_VER


#define NGINX_VAR "NGINX"
#define NGX_OLDPID_EXT ".oldbin"
# 16 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_module.h" 2 3 4


#define NGX_MODULE_UNSET_INDEX (ngx_uint_t) -1


#define NGX_MODULE_SIGNATURE_0 ngx_value(NGX_PTR_SIZE) "," ngx_value(NGX_SIG_ATOMIC_T_SIZE) "," ngx_value(NGX_TIME_T_SIZE) ","





#define NGX_MODULE_SIGNATURE_1 "1"







#define NGX_MODULE_SIGNATURE_2 "0"





#define NGX_MODULE_SIGNATURE_3 "0"





#define NGX_MODULE_SIGNATURE_4 "0"





#define NGX_MODULE_SIGNATURE_5 "0"





#define NGX_MODULE_SIGNATURE_6 "0"





#define NGX_MODULE_SIGNATURE_7 "0"



#define NGX_MODULE_SIGNATURE_8 "1"




#define NGX_MODULE_SIGNATURE_9 "1"
#define NGX_MODULE_SIGNATURE_10 "1"




#define NGX_MODULE_SIGNATURE_11 "0"


#define NGX_MODULE_SIGNATURE_12 "1"




#define NGX_MODULE_SIGNATURE_13 "0"



#define NGX_MODULE_SIGNATURE_14 "1"





#define NGX_MODULE_SIGNATURE_15 "1"





#define NGX_MODULE_SIGNATURE_16 "1"




#define NGX_MODULE_SIGNATURE_17 "0"
#define NGX_MODULE_SIGNATURE_18 "0"


#define NGX_MODULE_SIGNATURE_19 "1"





#define NGX_MODULE_SIGNATURE_20 "1"







#define NGX_MODULE_SIGNATURE_21 "0"





#define NGX_MODULE_SIGNATURE_22 "0"



#define NGX_MODULE_SIGNATURE_23 "1"







#define NGX_MODULE_SIGNATURE_24 "0"


#define NGX_MODULE_SIGNATURE_25 "1"


#define NGX_MODULE_SIGNATURE_26 "1"




#define NGX_MODULE_SIGNATURE_27 "1"


#define NGX_MODULE_SIGNATURE_28 "1"







#define NGX_MODULE_SIGNATURE_29 "0"





#define NGX_MODULE_SIGNATURE_30 "0"





#define NGX_MODULE_SIGNATURE_31 "0"



#define NGX_MODULE_SIGNATURE_32 "1"





#define NGX_MODULE_SIGNATURE_33 "1"







#define NGX_MODULE_SIGNATURE_34 "0"


#define NGX_MODULE_SIGNATURE NGX_MODULE_SIGNATURE_0 NGX_MODULE_SIGNATURE_1 NGX_MODULE_SIGNATURE_2 NGX_MODULE_SIGNATURE_3 NGX_MODULE_SIGNATURE_4 NGX_MODULE_SIGNATURE_5 NGX_MODULE_SIGNATURE_6 NGX_MODULE_SIGNATURE_7 NGX_MODULE_SIGNATURE_8 NGX_MODULE_SIGNATURE_9 NGX_MODULE_SIGNATURE_10 NGX_MODULE_SIGNATURE_11 NGX_MODULE_SIGNATURE_12 NGX_MODULE_SIGNATURE_13 NGX_MODULE_SIGNATURE_14 NGX_MODULE_SIGNATURE_15 NGX_MODULE_SIGNATURE_16 NGX_MODULE_SIGNATURE_17 NGX_MODULE_SIGNATURE_18 NGX_MODULE_SIGNATURE_19 NGX_MODULE_SIGNATURE_20 NGX_MODULE_SIGNATURE_21 NGX_MODULE_SIGNATURE_22 NGX_MODULE_SIGNATURE_23 NGX_MODULE_SIGNATURE_24 NGX_MODULE_SIGNATURE_25 NGX_MODULE_SIGNATURE_26 NGX_MODULE_SIGNATURE_27 NGX_MODULE_SIGNATURE_28 NGX_MODULE_SIGNATURE_29 NGX_MODULE_SIGNATURE_30 NGX_MODULE_SIGNATURE_31 NGX_MODULE_SIGNATURE_32 NGX_MODULE_SIGNATURE_33 NGX_MODULE_SIGNATURE_34
# 215 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_module.h" 3 4
#define NGX_MODULE_V1 NGX_MODULE_UNSET_INDEX, NGX_MODULE_UNSET_INDEX, NULL, 0, 0, nginx_version, NGX_MODULE_SIGNATURE



#define NGX_MODULE_V1_PADDING 0, 0, 0, 0, 0, 0, 0, 0


struct ngx_module_s {
    ngx_uint_t ctx_index;
    ngx_uint_t index;

    char *name;

    ngx_uint_t spare0;
    ngx_uint_t spare1;

    ngx_uint_t version;
    const char *signature;

    void *ctx;
    ngx_command_t *commands;
    ngx_uint_t type;

    ngx_int_t (*init_master)(ngx_log_t *log);

    ngx_int_t (*init_module)(ngx_cycle_t *cycle);

    ngx_int_t (*init_process)(ngx_cycle_t *cycle);
    ngx_int_t (*init_thread)(ngx_cycle_t *cycle);
    void (*exit_thread)(ngx_cycle_t *cycle);
    void (*exit_process)(ngx_cycle_t *cycle);

    void (*exit_master)(ngx_cycle_t *cycle);

    uintptr_t spare_hook0;
    uintptr_t spare_hook1;
    uintptr_t spare_hook2;
    uintptr_t spare_hook3;
    uintptr_t spare_hook4;
    uintptr_t spare_hook5;
    uintptr_t spare_hook6;
    uintptr_t spare_hook7;
};


typedef struct {
    ngx_str_t name;
    void *(*create_conf)(ngx_cycle_t *cycle);
    char *(*init_conf)(ngx_cycle_t *cycle, void *conf);
} ngx_core_module_t;


ngx_int_t ngx_preinit_modules(void);
ngx_int_t ngx_cycle_modules(ngx_cycle_t *cycle);
ngx_int_t ngx_init_modules(ngx_cycle_t *cycle);
ngx_int_t ngx_count_modules(ngx_cycle_t *cycle, ngx_uint_t type);


ngx_int_t ngx_add_module(ngx_conf_t *cf, ngx_str_t *file,
    ngx_module_t *module, char **order);


extern ngx_module_t *ngx_modules[];
extern ngx_uint_t ngx_max_module;

extern char *ngx_module_names[];
# 89 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_open_file_cache.h" 1 3 4
# 13 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_open_file_cache.h" 3 4
#define _NGX_OPEN_FILE_CACHE_H_INCLUDED_ 


#define NGX_OPEN_FILE_DIRECTIO_OFF NGX_MAX_OFF_T_VALUE


typedef struct {
    ngx_fd_t fd;
    ngx_file_uniq_t uniq;
    time_t mtime;
    off_t size;
    off_t fs_size;
    off_t directio;
    size_t read_ahead;

    ngx_err_t err;
    char *failed;

    time_t valid;

    ngx_uint_t min_uses;


    size_t disable_symlinks_from;
    unsigned disable_symlinks:2;


    unsigned test_dir:1;
    unsigned test_only:1;
    unsigned log:1;
    unsigned errors:1;
    unsigned events:1;

    unsigned is_dir:1;
    unsigned is_file:1;
    unsigned is_link:1;
    unsigned is_exec:1;
    unsigned is_directio:1;
} ngx_open_file_info_t;


typedef struct ngx_cached_open_file_s ngx_cached_open_file_t;

struct ngx_cached_open_file_s {
    ngx_rbtree_node_t node;
    ngx_queue_t queue;

    u_char *name;
    time_t created;
    time_t accessed;

    ngx_fd_t fd;
    ngx_file_uniq_t uniq;
    time_t mtime;
    off_t size;
    ngx_err_t err;

    uint32_t uses;


    size_t disable_symlinks_from;
    unsigned disable_symlinks:2;


    unsigned count:24;
    unsigned close:1;
    unsigned use_event:1;

    unsigned is_dir:1;
    unsigned is_file:1;
    unsigned is_link:1;
    unsigned is_exec:1;
    unsigned is_directio:1;

    ngx_event_t *event;
};


typedef struct {
    ngx_rbtree_t rbtree;
    ngx_rbtree_node_t sentinel;
    ngx_queue_t expire_queue;

    ngx_uint_t current;
    ngx_uint_t max;
    time_t inactive;
} ngx_open_file_cache_t;


typedef struct {
    ngx_open_file_cache_t *cache;
    ngx_cached_open_file_t *file;
    ngx_uint_t min_uses;
    ngx_log_t *log;
} ngx_open_file_cache_cleanup_t;


typedef struct {


    void *data;
    ngx_event_t *read;
    ngx_event_t *write;
    ngx_fd_t fd;

    ngx_cached_open_file_t *file;
    ngx_open_file_cache_t *cache;
} ngx_open_file_cache_event_t;


ngx_open_file_cache_t *ngx_open_file_cache_init(ngx_pool_t *pool,
    ngx_uint_t max, time_t inactive);
ngx_int_t ngx_open_cached_file(ngx_open_file_cache_t *cache, ngx_str_t *name,
    ngx_open_file_info_t *of, ngx_pool_t *pool);
# 90 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_os.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_os.h" 3 4
#define _NGX_OS_H_INCLUDED_ 






#define NGX_IO_SENDFILE 1


typedef ssize_t (*ngx_recv_pt)(ngx_connection_t *c, u_char *buf, size_t size);
typedef ssize_t (*ngx_recv_chain_pt)(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);
typedef ssize_t (*ngx_send_pt)(ngx_connection_t *c, u_char *buf, size_t size);
typedef ngx_chain_t *(*ngx_send_chain_pt)(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);

typedef struct {
    ngx_recv_pt recv;
    ngx_recv_chain_pt recv_chain;
    ngx_recv_pt udp_recv;
    ngx_send_pt send;
    ngx_send_pt udp_send;
    ngx_send_chain_pt udp_send_chain;
    ngx_send_chain_pt send_chain;
    ngx_uint_t flags;
} ngx_os_io_t;


ngx_int_t ngx_os_init(ngx_log_t *log);
void ngx_os_status(ngx_log_t *log);
ngx_int_t ngx_os_specific_init(ngx_log_t *log);
void ngx_os_specific_status(ngx_log_t *log);
ngx_int_t ngx_daemon(ngx_log_t *log);
ngx_int_t ngx_os_signal_process(ngx_cycle_t *cycle, char *sig, ngx_pid_t pid);


ssize_t ngx_unix_recv(ngx_connection_t *c, u_char *buf, size_t size);
ssize_t ngx_readv_chain(ngx_connection_t *c, ngx_chain_t *entry, off_t limit);
ssize_t ngx_udp_unix_recv(ngx_connection_t *c, u_char *buf, size_t size);
ssize_t ngx_unix_send(ngx_connection_t *c, u_char *buf, size_t size);
ngx_chain_t *ngx_writev_chain(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);
ssize_t ngx_udp_unix_send(ngx_connection_t *c, u_char *buf, size_t size);
ngx_chain_t *ngx_udp_unix_sendmsg_chain(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);



#define NGX_IOVS_PREALLOCATE 64





typedef struct {
    struct iovec *iovs;
    ngx_uint_t count;
    size_t size;
    ngx_uint_t nalloc;
} ngx_iovec_t;

ngx_chain_t *ngx_output_chain_to_iovec(ngx_iovec_t *vec, ngx_chain_t *in,
    size_t limit, ngx_log_t *log);


ssize_t ngx_writev(ngx_connection_t *c, ngx_iovec_t *vec);


extern ngx_os_io_t ngx_os_io;
extern ngx_int_t ngx_ncpu;
extern ngx_int_t ngx_max_sockets;
extern ngx_uint_t ngx_inherited_nonblocking;
extern ngx_uint_t ngx_tcp_nodelay_and_tcp_nopush;
# 98 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_os.h" 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_darwin.h" 3 4
#define _NGX_DARWIN_H_INCLUDED_ 


void ngx_debug_init(void);
ngx_chain_t *ngx_darwin_sendfile_chain(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);

extern int ngx_darwin_kern_osreldate;
extern int ngx_darwin_hw_ncpu;
extern u_long ngx_darwin_net_inet_tcp_sendspace;

extern ngx_uint_t ngx_debug_malloc;
# 99 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/os/unix/ngx_os.h" 2 3 4
# 91 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_connection.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_connection.h" 3 4
#define _NGX_CONNECTION_H_INCLUDED_ 






typedef struct ngx_listening_s ngx_listening_t;

struct ngx_listening_s {
    ngx_socket_t fd;

    struct sockaddr *sockaddr;
    socklen_t socklen;
    size_t addr_text_max_len;
    ngx_str_t addr_text;

    int type;

    int backlog;
    int rcvbuf;
    int sndbuf;







    ngx_connection_handler_pt handler;

    void *servers;

    ngx_log_t log;
    ngx_log_t *logp;

    size_t pool_size;

    size_t post_accept_buffer_size;

    ngx_listening_t *previous;
    ngx_connection_t *connection;

    ngx_rbtree_t rbtree;
    ngx_rbtree_node_t sentinel;

    ngx_uint_t worker;

    unsigned open:1;
    unsigned remain:1;
    unsigned ignore:1;

    unsigned bound:1;
    unsigned inherited:1;
    unsigned nonblocking_accept:1;
    unsigned listen:1;
    unsigned nonblocking:1;
    unsigned shared:1;
    unsigned addr_ntop:1;
    unsigned wildcard:1;


    unsigned ipv6only:1;

    unsigned reuseport:1;
    unsigned add_reuseport:1;
    unsigned keepalive:2;

    unsigned deferred_accept:1;
    unsigned delete_deferred:1;
    unsigned add_deferred:1;
# 88 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_connection.h" 3 4
    int fastopen;


};


typedef enum {
    NGX_ERROR_ALERT = 0,
    NGX_ERROR_ERR,
    NGX_ERROR_INFO,
    NGX_ERROR_IGNORE_ECONNRESET,
    NGX_ERROR_IGNORE_EINVAL
} ngx_connection_log_error_e;


typedef enum {
    NGX_TCP_NODELAY_UNSET = 0,
    NGX_TCP_NODELAY_SET,
    NGX_TCP_NODELAY_DISABLED
} ngx_connection_tcp_nodelay_e;


typedef enum {
    NGX_TCP_NOPUSH_UNSET = 0,
    NGX_TCP_NOPUSH_SET,
    NGX_TCP_NOPUSH_DISABLED
} ngx_connection_tcp_nopush_e;


#define NGX_LOWLEVEL_BUFFERED 0x0f
#define NGX_SSL_BUFFERED 0x01
#define NGX_HTTP_V2_BUFFERED 0x02


struct ngx_connection_s {
    void *data;
    ngx_event_t *read;
    ngx_event_t *write;

    ngx_socket_t fd;

    ngx_recv_pt recv;
    ngx_send_pt send;
    ngx_recv_chain_pt recv_chain;
    ngx_send_chain_pt send_chain;

    ngx_listening_t *listening;

    off_t sent;

    ngx_log_t *log;

    ngx_pool_t *pool;

    int type;

    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t addr_text;

    ngx_proxy_protocol_t *proxy_protocol;





    ngx_udp_connection_t *udp;

    struct sockaddr *local_sockaddr;
    socklen_t local_socklen;

    ngx_buf_t *buffer;

    ngx_queue_t queue;

    ngx_atomic_uint_t number;

    ngx_msec_t start_time;
    ngx_uint_t requests;

    unsigned buffered:8;

    unsigned log_error:3;

    unsigned timedout:1;
    unsigned error:1;
    unsigned destroyed:1;

    unsigned idle:1;
    unsigned reusable:1;
    unsigned close:1;
    unsigned shared:1;

    unsigned sendfile:1;
    unsigned sndlowat:1;
    unsigned tcp_nodelay:2;
    unsigned tcp_nopush:2;

    unsigned need_last_buf:1;
# 195 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_connection.h" 3 4
};


#define ngx_set_connection_log(c,l) c->log->file = l->file; c->log->next = l->next; c->log->writer = l->writer; c->log->wdata = l->wdata; if (!(c->log->log_level & NGX_LOG_DEBUG_CONNECTION)) { c->log->log_level = l->log_level; }
# 209 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_connection.h" 3 4
ngx_listening_t *ngx_create_listening(ngx_conf_t *cf, struct sockaddr *sockaddr,
    socklen_t socklen);
ngx_int_t ngx_clone_listening(ngx_cycle_t *cycle, ngx_listening_t *ls);
ngx_int_t ngx_set_inherited_sockets(ngx_cycle_t *cycle);
ngx_int_t ngx_open_listening_sockets(ngx_cycle_t *cycle);
void ngx_configure_listening_sockets(ngx_cycle_t *cycle);
void ngx_close_listening_sockets(ngx_cycle_t *cycle);
void ngx_close_connection(ngx_connection_t *c);
void ngx_close_idle_connections(ngx_cycle_t *cycle);
ngx_int_t ngx_connection_local_sockaddr(ngx_connection_t *c, ngx_str_t *s,
    ngx_uint_t port);
ngx_int_t ngx_tcp_nodelay(ngx_connection_t *c);
ngx_int_t ngx_connection_error(ngx_connection_t *c, ngx_err_t err, char *text);

ngx_connection_t *ngx_get_connection(ngx_socket_t s, ngx_log_t *log);
void ngx_free_connection(ngx_connection_t *c);

void ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable);
# 92 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_syslog.h" 1 3 4







#define _NGX_SYSLOG_H_INCLUDED_ 


typedef struct {
    ngx_uint_t facility;
    ngx_uint_t severity;
    ngx_str_t tag;

    ngx_addr_t server;
    ngx_connection_t conn;
    unsigned busy:1;
    unsigned nohostname:1;
} ngx_syslog_peer_t;


char *ngx_syslog_process_conf(ngx_conf_t *cf, ngx_syslog_peer_t *peer);
u_char *ngx_syslog_add_header(ngx_syslog_peer_t *peer, u_char *buf);
void ngx_syslog_writer(ngx_log_t *log, ngx_uint_t level, u_char *buf,
    size_t len);
ssize_t ngx_syslog_send(ngx_syslog_peer_t *peer, u_char *buf, size_t len);
# 93 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_proxy_protocol.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_proxy_protocol.h" 3 4
#define _NGX_PROXY_PROTOCOL_H_INCLUDED_ 






#define NGX_PROXY_PROTOCOL_MAX_HEADER 107


struct ngx_proxy_protocol_s {
    ngx_str_t src_addr;
    ngx_str_t dst_addr;
    in_port_t src_port;
    in_port_t dst_port;
};


u_char *ngx_proxy_protocol_read(ngx_connection_t *c, u_char *buf,
    u_char *last);
u_char *ngx_proxy_protocol_write(ngx_connection_t *c, u_char *buf,
    u_char *last);
# 94 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/core/ngx_core.h" 2 3 4


#define LF (u_char) '\n'
#define CR (u_char) '\r'
#define CRLF "\r\n"


#define ngx_abs(value) (((value) >= 0) ? (value) : - (value))
#define ngx_max(val1,val2) ((val1 < val2) ? (val2) : (val1))
#define ngx_min(val1,val2) ((val1 > val2) ? (val2) : (val1))

void ngx_cpuinfo(void);


#define NGX_DISABLE_SYMLINKS_OFF 0
#define NGX_DISABLE_SYMLINKS_ON 1
#define NGX_DISABLE_SYMLINKS_NOTOWNER 2
# 14 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h" 2
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 3 4
#define _NGX_HTTP_H_INCLUDED_ 






typedef struct ngx_http_request_s ngx_http_request_t;
typedef struct ngx_http_upstream_s ngx_http_upstream_t;
typedef struct ngx_http_cache_s ngx_http_cache_t;
typedef struct ngx_http_file_cache_s ngx_http_file_cache_t;
typedef struct ngx_http_log_ctx_s ngx_http_log_ctx_t;
typedef struct ngx_http_chunked_s ngx_http_chunked_t;
typedef struct ngx_http_v2_stream_s ngx_http_v2_stream_t;

typedef ngx_int_t (*ngx_http_header_handler_pt)(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);
typedef u_char *(*ngx_http_log_handler_pt)(ngx_http_request_t *r,
    ngx_http_request_t *sr, u_char *buf, size_t len);


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_variables.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_variables.h" 3 4
#define _NGX_HTTP_VARIABLES_H_INCLUDED_ 




# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 1 3 4
# 15 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_variables.h" 2 3 4


typedef ngx_variable_value_t ngx_http_variable_value_t;

#define ngx_http_variable(v) { sizeof(v) - 1, 1, 0, 0, 0, (u_char *) v }

typedef struct ngx_http_variable_s ngx_http_variable_t;

typedef void (*ngx_http_set_variable_pt) (ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data);
typedef ngx_int_t (*ngx_http_get_variable_pt) (ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data);


#define NGX_HTTP_VAR_CHANGEABLE 1
#define NGX_HTTP_VAR_NOCACHEABLE 2
#define NGX_HTTP_VAR_INDEXED 4
#define NGX_HTTP_VAR_NOHASH 8
#define NGX_HTTP_VAR_WEAK 16
#define NGX_HTTP_VAR_PREFIX 32


struct ngx_http_variable_s {
    ngx_str_t name;
    ngx_http_set_variable_pt set_handler;
    ngx_http_get_variable_pt get_handler;
    uintptr_t data;
    ngx_uint_t flags;
    ngx_uint_t index;
};

#define ngx_http_null_variable { ngx_null_string, NULL, NULL, 0, 0, 0 }


ngx_http_variable_t *ngx_http_add_variable(ngx_conf_t *cf, ngx_str_t *name,
    ngx_uint_t flags);
ngx_int_t ngx_http_get_variable_index(ngx_conf_t *cf, ngx_str_t *name);
ngx_http_variable_value_t *ngx_http_get_indexed_variable(ngx_http_request_t *r,
    ngx_uint_t index);
ngx_http_variable_value_t *ngx_http_get_flushed_variable(ngx_http_request_t *r,
    ngx_uint_t index);

ngx_http_variable_value_t *ngx_http_get_variable(ngx_http_request_t *r,
    ngx_str_t *name, ngx_uint_t key);

ngx_int_t ngx_http_variable_unknown_header(ngx_http_variable_value_t *v,
    ngx_str_t *var, ngx_list_part_t *part, size_t prefix);




typedef struct {
    ngx_uint_t capture;
    ngx_int_t index;
} ngx_http_regex_variable_t;


typedef struct {
    ngx_regex_t *regex;
    ngx_uint_t ncaptures;
    ngx_http_regex_variable_t *variables;
    ngx_uint_t nvariables;
    ngx_str_t name;
} ngx_http_regex_t;


typedef struct {
    ngx_http_regex_t *regex;
    void *value;
} ngx_http_map_regex_t;


ngx_http_regex_t *ngx_http_regex_compile(ngx_conf_t *cf,
    ngx_regex_compile_t *rc);
ngx_int_t ngx_http_regex_exec(ngx_http_request_t *r, ngx_http_regex_t *re,
    ngx_str_t *s);




typedef struct {
    ngx_hash_combined_t hash;

    ngx_http_map_regex_t *regex;
    ngx_uint_t nregex;

} ngx_http_map_t;


void *ngx_http_map_find(ngx_http_request_t *r, ngx_http_map_t *map,
    ngx_str_t *match);


ngx_int_t ngx_http_variables_add_core_vars(ngx_conf_t *cf);
ngx_int_t ngx_http_variables_init_vars(ngx_conf_t *cf);


extern ngx_http_variable_value_t ngx_http_variable_null_value;
extern ngx_http_variable_value_t ngx_http_variable_true_value;
# 31 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_config.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_config.h" 3 4
#define _NGX_HTTP_CONFIG_H_INCLUDED_ 







typedef struct {
    void **main_conf;
    void **srv_conf;
    void **loc_conf;
} ngx_http_conf_ctx_t;


typedef struct {
    ngx_int_t (*preconfiguration)(ngx_conf_t *cf);
    ngx_int_t (*postconfiguration)(ngx_conf_t *cf);

    void *(*create_main_conf)(ngx_conf_t *cf);
    char *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    void *(*create_srv_conf)(ngx_conf_t *cf);
    char *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

    void *(*create_loc_conf)(ngx_conf_t *cf);
    char *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
} ngx_http_module_t;


#define NGX_HTTP_MODULE 0x50545448

#define NGX_HTTP_MAIN_CONF 0x02000000
#define NGX_HTTP_SRV_CONF 0x04000000
#define NGX_HTTP_LOC_CONF 0x08000000
#define NGX_HTTP_UPS_CONF 0x10000000
#define NGX_HTTP_SIF_CONF 0x20000000
#define NGX_HTTP_LIF_CONF 0x40000000
#define NGX_HTTP_LMT_CONF 0x80000000


#define NGX_HTTP_MAIN_CONF_OFFSET offsetof(ngx_http_conf_ctx_t, main_conf)
#define NGX_HTTP_SRV_CONF_OFFSET offsetof(ngx_http_conf_ctx_t, srv_conf)
#define NGX_HTTP_LOC_CONF_OFFSET offsetof(ngx_http_conf_ctx_t, loc_conf)


#define ngx_http_get_module_main_conf(r,module) (r)->main_conf[module.ctx_index]

#define ngx_http_get_module_srv_conf(r,module) (r)->srv_conf[module.ctx_index]
#define ngx_http_get_module_loc_conf(r,module) (r)->loc_conf[module.ctx_index]


#define ngx_http_conf_get_module_main_conf(cf,module) ((ngx_http_conf_ctx_t *) cf->ctx)->main_conf[module.ctx_index]

#define ngx_http_conf_get_module_srv_conf(cf,module) ((ngx_http_conf_ctx_t *) cf->ctx)->srv_conf[module.ctx_index]

#define ngx_http_conf_get_module_loc_conf(cf,module) ((ngx_http_conf_ctx_t *) cf->ctx)->loc_conf[module.ctx_index]


#define ngx_http_cycle_get_module_main_conf(cycle,module) (cycle->conf_ctx[ngx_http_module.index] ? ((ngx_http_conf_ctx_t *) cycle->conf_ctx[ngx_http_module.index]) ->main_conf[module.ctx_index]: NULL)
# 32 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_request.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_request.h" 3 4
#define _NGX_HTTP_REQUEST_H_INCLUDED_ 


#define NGX_HTTP_MAX_URI_CHANGES 10
#define NGX_HTTP_MAX_SUBREQUESTS 50


#define NGX_HTTP_LC_HEADER_LEN 32


#define NGX_HTTP_DISCARD_BUFFER_SIZE 4096
#define NGX_HTTP_LINGERING_BUFFER_SIZE 4096


#define NGX_HTTP_VERSION_9 9
#define NGX_HTTP_VERSION_10 1000
#define NGX_HTTP_VERSION_11 1001
#define NGX_HTTP_VERSION_20 2000

#define NGX_HTTP_UNKNOWN 0x00000001
#define NGX_HTTP_GET 0x00000002
#define NGX_HTTP_HEAD 0x00000004
#define NGX_HTTP_POST 0x00000008
#define NGX_HTTP_PUT 0x00000010
#define NGX_HTTP_DELETE 0x00000020
#define NGX_HTTP_MKCOL 0x00000040
#define NGX_HTTP_COPY 0x00000080
#define NGX_HTTP_MOVE 0x00000100
#define NGX_HTTP_OPTIONS 0x00000200
#define NGX_HTTP_PROPFIND 0x00000400
#define NGX_HTTP_PROPPATCH 0x00000800
#define NGX_HTTP_LOCK 0x00001000
#define NGX_HTTP_UNLOCK 0x00002000
#define NGX_HTTP_PATCH 0x00004000
#define NGX_HTTP_TRACE 0x00008000
#define NGX_HTTP_CONNECT 0x00010000

#define NGX_HTTP_CONNECTION_CLOSE 1
#define NGX_HTTP_CONNECTION_KEEP_ALIVE 2


#define NGX_NONE 1


#define NGX_HTTP_PARSE_HEADER_DONE 1

#define NGX_HTTP_CLIENT_ERROR 10
#define NGX_HTTP_PARSE_INVALID_METHOD 10
#define NGX_HTTP_PARSE_INVALID_REQUEST 11
#define NGX_HTTP_PARSE_INVALID_VERSION 12
#define NGX_HTTP_PARSE_INVALID_09_METHOD 13

#define NGX_HTTP_PARSE_INVALID_HEADER 14



#define NGX_HTTP_SUBREQUEST_IN_MEMORY 2
#define NGX_HTTP_SUBREQUEST_WAITED 4
#define NGX_HTTP_SUBREQUEST_CLONE 8
#define NGX_HTTP_SUBREQUEST_BACKGROUND 16

#define NGX_HTTP_LOG_UNSAFE 1


#define NGX_HTTP_CONTINUE 100
#define NGX_HTTP_SWITCHING_PROTOCOLS 101
#define NGX_HTTP_PROCESSING 102

#define NGX_HTTP_OK 200
#define NGX_HTTP_CREATED 201
#define NGX_HTTP_ACCEPTED 202
#define NGX_HTTP_NO_CONTENT 204
#define NGX_HTTP_PARTIAL_CONTENT 206

#define NGX_HTTP_SPECIAL_RESPONSE 300
#define NGX_HTTP_MOVED_PERMANENTLY 301
#define NGX_HTTP_MOVED_TEMPORARILY 302
#define NGX_HTTP_SEE_OTHER 303
#define NGX_HTTP_NOT_MODIFIED 304
#define NGX_HTTP_TEMPORARY_REDIRECT 307
#define NGX_HTTP_PERMANENT_REDIRECT 308

#define NGX_HTTP_BAD_REQUEST 400
#define NGX_HTTP_UNAUTHORIZED 401
#define NGX_HTTP_FORBIDDEN 403
#define NGX_HTTP_NOT_FOUND 404
#define NGX_HTTP_NOT_ALLOWED 405
#define NGX_HTTP_REQUEST_TIME_OUT 408
#define NGX_HTTP_CONFLICT 409
#define NGX_HTTP_LENGTH_REQUIRED 411
#define NGX_HTTP_PRECONDITION_FAILED 412
#define NGX_HTTP_REQUEST_ENTITY_TOO_LARGE 413
#define NGX_HTTP_REQUEST_URI_TOO_LARGE 414
#define NGX_HTTP_UNSUPPORTED_MEDIA_TYPE 415
#define NGX_HTTP_RANGE_NOT_SATISFIABLE 416
#define NGX_HTTP_MISDIRECTED_REQUEST 421
#define NGX_HTTP_TOO_MANY_REQUESTS 429





#define NGX_HTTP_CLOSE 444

#define NGX_HTTP_NGINX_CODES 494

#define NGX_HTTP_REQUEST_HEADER_TOO_LARGE 494

#define NGX_HTTPS_CERT_ERROR 495
#define NGX_HTTPS_NO_CERT 496





#define NGX_HTTP_TO_HTTPS 497
# 134 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_request.h" 3 4
#define NGX_HTTP_CLIENT_CLOSED_REQUEST 499


#define NGX_HTTP_INTERNAL_SERVER_ERROR 500
#define NGX_HTTP_NOT_IMPLEMENTED 501
#define NGX_HTTP_BAD_GATEWAY 502
#define NGX_HTTP_SERVICE_UNAVAILABLE 503
#define NGX_HTTP_GATEWAY_TIME_OUT 504
#define NGX_HTTP_VERSION_NOT_SUPPORTED 505
#define NGX_HTTP_INSUFFICIENT_STORAGE 507


#define NGX_HTTP_LOWLEVEL_BUFFERED 0xf0
#define NGX_HTTP_WRITE_BUFFERED 0x10
#define NGX_HTTP_GZIP_BUFFERED 0x20
#define NGX_HTTP_SSI_BUFFERED 0x01
#define NGX_HTTP_SUB_BUFFERED 0x02
#define NGX_HTTP_COPY_BUFFERED 0x04


typedef enum {
    NGX_HTTP_INITING_REQUEST_STATE = 0,
    NGX_HTTP_READING_REQUEST_STATE,
    NGX_HTTP_PROCESS_REQUEST_STATE,

    NGX_HTTP_CONNECT_UPSTREAM_STATE,
    NGX_HTTP_WRITING_UPSTREAM_STATE,
    NGX_HTTP_READING_UPSTREAM_STATE,

    NGX_HTTP_WRITING_REQUEST_STATE,
    NGX_HTTP_LINGERING_CLOSE_STATE,
    NGX_HTTP_KEEPALIVE_STATE
} ngx_http_state_e;


typedef struct {
    ngx_str_t name;
    ngx_uint_t offset;
    ngx_http_header_handler_pt handler;
} ngx_http_header_t;


typedef struct {
    ngx_str_t name;
    ngx_uint_t offset;
} ngx_http_header_out_t;


typedef struct {
    ngx_list_t headers;

    ngx_table_elt_t *host;
    ngx_table_elt_t *connection;
    ngx_table_elt_t *if_modified_since;
    ngx_table_elt_t *if_unmodified_since;
    ngx_table_elt_t *if_match;
    ngx_table_elt_t *if_none_match;
    ngx_table_elt_t *user_agent;
    ngx_table_elt_t *referer;
    ngx_table_elt_t *content_length;
    ngx_table_elt_t *content_range;
    ngx_table_elt_t *content_type;

    ngx_table_elt_t *range;
    ngx_table_elt_t *if_range;

    ngx_table_elt_t *transfer_encoding;
    ngx_table_elt_t *te;
    ngx_table_elt_t *expect;
    ngx_table_elt_t *upgrade;


    ngx_table_elt_t *accept_encoding;
    ngx_table_elt_t *via;


    ngx_table_elt_t *authorization;

    ngx_table_elt_t *keep_alive;


    ngx_array_t x_forwarded_for;
# 234 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_request.h" 3 4
    ngx_str_t user;
    ngx_str_t passwd;

    ngx_array_t cookies;

    ngx_str_t server;
    off_t content_length_n;
    time_t keep_alive_n;

    unsigned connection_type:2;
    unsigned chunked:1;
    unsigned msie:1;
    unsigned msie6:1;
    unsigned opera:1;
    unsigned gecko:1;
    unsigned chrome:1;
    unsigned safari:1;
    unsigned konqueror:1;
} ngx_http_headers_in_t;


typedef struct {
    ngx_list_t headers;
    ngx_list_t trailers;

    ngx_uint_t status;
    ngx_str_t status_line;

    ngx_table_elt_t *server;
    ngx_table_elt_t *date;
    ngx_table_elt_t *content_length;
    ngx_table_elt_t *content_encoding;
    ngx_table_elt_t *location;
    ngx_table_elt_t *refresh;
    ngx_table_elt_t *last_modified;
    ngx_table_elt_t *content_range;
    ngx_table_elt_t *accept_ranges;
    ngx_table_elt_t *www_authenticate;
    ngx_table_elt_t *expires;
    ngx_table_elt_t *etag;

    ngx_str_t *override_charset;

    size_t content_type_len;
    ngx_str_t content_type;
    ngx_str_t charset;
    u_char *content_type_lowcase;
    ngx_uint_t content_type_hash;

    ngx_array_t cache_control;
    ngx_array_t link;

    off_t content_length_n;
    off_t content_offset;
    time_t date_time;
    time_t last_modified_time;
} ngx_http_headers_out_t;


typedef void (*ngx_http_client_body_handler_pt)(ngx_http_request_t *r);

typedef struct {
    ngx_temp_file_t *temp_file;
    ngx_chain_t *bufs;
    ngx_buf_t *buf;
    off_t rest;
    off_t received;
    ngx_chain_t *free;
    ngx_chain_t *busy;
    ngx_http_chunked_t *chunked;
    ngx_http_client_body_handler_pt post_handler;
    unsigned filter_need_buffering:1;
    unsigned last_sent:1;
    unsigned last_saved:1;
} ngx_http_request_body_t;


typedef struct ngx_http_addr_conf_s ngx_http_addr_conf_t;

typedef struct {
    ngx_http_addr_conf_t *addr_conf;
    ngx_http_conf_ctx_t *conf_ctx;
# 324 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_request.h" 3 4
    ngx_chain_t *busy;
    ngx_int_t nbusy;

    ngx_chain_t *free;

    unsigned ssl:1;
    unsigned proxy_protocol:1;
} ngx_http_connection_t;


typedef void (*ngx_http_cleanup_pt)(void *data);

typedef struct ngx_http_cleanup_s ngx_http_cleanup_t;

struct ngx_http_cleanup_s {
    ngx_http_cleanup_pt handler;
    void *data;
    ngx_http_cleanup_t *next;
};


typedef ngx_int_t (*ngx_http_post_subrequest_pt)(ngx_http_request_t *r,
    void *data, ngx_int_t rc);

typedef struct {
    ngx_http_post_subrequest_pt handler;
    void *data;
} ngx_http_post_subrequest_t;


typedef struct ngx_http_postponed_request_s ngx_http_postponed_request_t;

struct ngx_http_postponed_request_s {
    ngx_http_request_t *request;
    ngx_chain_t *out;
    ngx_http_postponed_request_t *next;
};


typedef struct ngx_http_posted_request_s ngx_http_posted_request_t;

struct ngx_http_posted_request_s {
    ngx_http_request_t *request;
    ngx_http_posted_request_t *next;
};


typedef ngx_int_t (*ngx_http_handler_pt)(ngx_http_request_t *r);
typedef void (*ngx_http_event_handler_pt)(ngx_http_request_t *r);


struct ngx_http_request_s {
    uint32_t signature;

    ngx_connection_t *connection;

    void **ctx;
    void **main_conf;
    void **srv_conf;
    void **loc_conf;

    ngx_http_event_handler_pt read_event_handler;
    ngx_http_event_handler_pt write_event_handler;


    ngx_http_cache_t *cache;


    ngx_http_upstream_t *upstream;
    ngx_array_t *upstream_states;


    ngx_pool_t *pool;
    ngx_buf_t *header_in;

    ngx_http_headers_in_t headers_in;
    ngx_http_headers_out_t headers_out;

    ngx_http_request_body_t *request_body;

    time_t lingering_time;
    time_t start_sec;
    ngx_msec_t start_msec;

    ngx_uint_t method;
    ngx_uint_t http_version;

    ngx_str_t request_line;
    ngx_str_t uri;
    ngx_str_t args;
    ngx_str_t exten;
    ngx_str_t unparsed_uri;

    ngx_str_t method_name;
    ngx_str_t http_protocol;
    ngx_str_t schema;

    ngx_chain_t *out;
    ngx_http_request_t *main;
    ngx_http_request_t *parent;
    ngx_http_postponed_request_t *postponed;
    ngx_http_post_subrequest_t *post_subrequest;
    ngx_http_posted_request_t *posted_requests;

    ngx_int_t phase_handler;
    ngx_http_handler_pt content_handler;
    ngx_uint_t access_code;

    ngx_http_variable_value_t *variables;


    ngx_uint_t ncaptures;
    int *captures;
    u_char *captures_data;


    size_t limit_rate;
    size_t limit_rate_after;


    size_t header_size;

    off_t request_length;

    ngx_uint_t err_status;

    ngx_http_connection_t *http_connection;
    ngx_http_v2_stream_t *stream;

    ngx_http_log_handler_pt log_handler;

    ngx_http_cleanup_t *cleanup;

    unsigned count:16;
    unsigned subrequests:8;
    unsigned blocked:8;

    unsigned aio:1;

    unsigned http_state:4;


    unsigned complex_uri:1;


    unsigned quoted_uri:1;


    unsigned plus_in_uri:1;


    unsigned empty_path_in_uri:1;

    unsigned invalid_header:1;

    unsigned add_uri_to_alias:1;
    unsigned valid_location:1;
    unsigned valid_unparsed_uri:1;
    unsigned uri_changed:1;
    unsigned uri_changes:4;

    unsigned request_body_in_single_buf:1;
    unsigned request_body_in_file_only:1;
    unsigned request_body_in_persistent_file:1;
    unsigned request_body_in_clean_file:1;
    unsigned request_body_file_group_access:1;
    unsigned request_body_file_log_level:3;
    unsigned request_body_no_buffering:1;

    unsigned subrequest_in_memory:1;
    unsigned waited:1;


    unsigned cached:1;



    unsigned gzip_tested:1;
    unsigned gzip_ok:1;
    unsigned gzip_vary:1;



    unsigned realloc_captures:1;


    unsigned proxy:1;
    unsigned bypass_cache:1;
    unsigned no_cache:1;






    unsigned limit_conn_status:2;
    unsigned limit_req_status:3;

    unsigned limit_rate_set:1;
    unsigned limit_rate_after_set:1;





    unsigned pipeline:1;
    unsigned chunked:1;
    unsigned header_only:1;
    unsigned expect_trailers:1;
    unsigned keepalive:1;
    unsigned lingering_close:1;
    unsigned discard_body:1;
    unsigned reading_body:1;
    unsigned internal:1;
    unsigned error_page:1;
    unsigned filter_finalize:1;
    unsigned post_action:1;
    unsigned request_complete:1;
    unsigned request_output:1;
    unsigned header_sent:1;
    unsigned expect_tested:1;
    unsigned root_tested:1;
    unsigned done:1;
    unsigned logged:1;

    unsigned buffered:4;

    unsigned main_filter_need_in_memory:1;
    unsigned filter_need_in_memory:1;
    unsigned filter_need_temporary:1;
    unsigned preserve_body:1;
    unsigned allow_ranges:1;
    unsigned subrequest_ranges:1;
    unsigned single_range:1;
    unsigned disable_not_modified:1;
    unsigned stat_reading:1;
    unsigned stat_writing:1;
    unsigned stat_processing:1;

    unsigned background:1;
    unsigned health_check:1;



    ngx_uint_t state;

    ngx_uint_t header_hash;
    ngx_uint_t lowcase_index;
    u_char lowcase_header[32];

    u_char *header_name_start;
    u_char *header_name_end;
    u_char *header_start;
    u_char *header_end;






    u_char *uri_start;
    u_char *uri_end;
    u_char *uri_ext;
    u_char *args_start;
    u_char *request_start;
    u_char *request_end;
    u_char *method_end;
    u_char *schema_start;
    u_char *schema_end;
    u_char *host_start;
    u_char *host_end;
    u_char *port_start;
    u_char *port_end;

    unsigned http_minor:16;
    unsigned http_major:16;
};


typedef struct {
    ngx_http_posted_request_t terminal_posted_request;
} ngx_http_ephemeral_t;


#define ngx_http_ephemeral(r) (void *) (&r->uri_start)


extern ngx_http_header_t ngx_http_headers_in[];
extern ngx_http_header_out_t ngx_http_headers_out[];


#define ngx_http_set_log_request(log,r) ((ngx_http_log_ctx_t *) log->data)->current_request = r
# 33 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_script.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_script.h" 3 4
#define _NGX_HTTP_SCRIPT_H_INCLUDED_ 







typedef struct {
    u_char *ip;
    u_char *pos;
    ngx_http_variable_value_t *sp;

    ngx_str_t buf;
    ngx_str_t line;


    u_char *args;

    unsigned flushed:1;
    unsigned skip:1;
    unsigned quote:1;
    unsigned is_args:1;
    unsigned log:1;

    ngx_int_t status;
    ngx_http_request_t *request;
} ngx_http_script_engine_t;


typedef struct {
    ngx_conf_t *cf;
    ngx_str_t *source;

    ngx_array_t **flushes;
    ngx_array_t **lengths;
    ngx_array_t **values;

    ngx_uint_t variables;
    ngx_uint_t ncaptures;
    ngx_uint_t captures_mask;
    ngx_uint_t size;

    void *main;

    unsigned compile_args:1;
    unsigned complete_lengths:1;
    unsigned complete_values:1;
    unsigned zero:1;
    unsigned conf_prefix:1;
    unsigned root_prefix:1;

    unsigned dup_capture:1;
    unsigned args:1;
} ngx_http_script_compile_t;


typedef struct {
    ngx_str_t value;
    ngx_uint_t *flushes;
    void *lengths;
    void *values;

    union {
        size_t size;
    } u;
} ngx_http_complex_value_t;


typedef struct {
    ngx_conf_t *cf;
    ngx_str_t *value;
    ngx_http_complex_value_t *complex_value;

    unsigned zero:1;
    unsigned conf_prefix:1;
    unsigned root_prefix:1;
} ngx_http_compile_complex_value_t;


typedef void (*ngx_http_script_code_pt) (ngx_http_script_engine_t *e);
typedef size_t (*ngx_http_script_len_code_pt) (ngx_http_script_engine_t *e);


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t len;
} ngx_http_script_copy_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t index;
} ngx_http_script_var_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    ngx_http_set_variable_pt handler;
    uintptr_t data;
} ngx_http_script_var_handler_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t n;
} ngx_http_script_copy_capture_code_t;




typedef struct {
    ngx_http_script_code_pt code;
    ngx_http_regex_t *regex;
    ngx_array_t *lengths;
    uintptr_t size;
    uintptr_t status;
    uintptr_t next;

    unsigned test:1;
    unsigned negative_test:1;
    unsigned uri:1;
    unsigned args:1;


    unsigned add_args:1;

    unsigned redirect:1;
    unsigned break_cycle:1;

    ngx_str_t name;
} ngx_http_script_regex_code_t;


typedef struct {
    ngx_http_script_code_pt code;

    unsigned uri:1;
    unsigned args:1;


    unsigned add_args:1;

    unsigned redirect:1;
} ngx_http_script_regex_end_code_t;




typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t conf_prefix;
} ngx_http_script_full_name_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t status;
    ngx_http_complex_value_t text;
} ngx_http_script_return_code_t;


typedef enum {
    ngx_http_script_file_plain = 0,
    ngx_http_script_file_not_plain,
    ngx_http_script_file_dir,
    ngx_http_script_file_not_dir,
    ngx_http_script_file_exists,
    ngx_http_script_file_not_exists,
    ngx_http_script_file_exec,
    ngx_http_script_file_not_exec
} ngx_http_script_file_op_e;


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t op;
} ngx_http_script_file_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t next;
    void **loc_conf;
} ngx_http_script_if_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    ngx_array_t *lengths;
} ngx_http_script_complex_value_code_t;


typedef struct {
    ngx_http_script_code_pt code;
    uintptr_t value;
    uintptr_t text_len;
    uintptr_t text_data;
} ngx_http_script_value_code_t;


void ngx_http_script_flush_complex_value(ngx_http_request_t *r,
    ngx_http_complex_value_t *val);
ngx_int_t ngx_http_complex_value(ngx_http_request_t *r,
    ngx_http_complex_value_t *val, ngx_str_t *value);
size_t ngx_http_complex_value_size(ngx_http_request_t *r,
    ngx_http_complex_value_t *val, size_t default_value);
ngx_int_t ngx_http_compile_complex_value(ngx_http_compile_complex_value_t *ccv);
char *ngx_http_set_complex_value_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
char *ngx_http_set_complex_value_zero_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
char *ngx_http_set_complex_value_size_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);


ngx_int_t ngx_http_test_predicates(ngx_http_request_t *r,
    ngx_array_t *predicates);
ngx_int_t ngx_http_test_required_predicates(ngx_http_request_t *r,
    ngx_array_t *predicates);
char *ngx_http_set_predicate_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);

ngx_uint_t ngx_http_script_variables_count(ngx_str_t *value);
ngx_int_t ngx_http_script_compile(ngx_http_script_compile_t *sc);
u_char *ngx_http_script_run(ngx_http_request_t *r, ngx_str_t *value,
    void *code_lengths, size_t reserved, void *code_values);
void ngx_http_script_flush_no_cacheable_variables(ngx_http_request_t *r,
    ngx_array_t *indices);

void *ngx_http_script_start_code(ngx_pool_t *pool, ngx_array_t **codes,
    size_t size);
void *ngx_http_script_add_code(ngx_array_t *codes, size_t size, void *code);

size_t ngx_http_script_copy_len_code(ngx_http_script_engine_t *e);
void ngx_http_script_copy_code(ngx_http_script_engine_t *e);
size_t ngx_http_script_copy_var_len_code(ngx_http_script_engine_t *e);
void ngx_http_script_copy_var_code(ngx_http_script_engine_t *e);
size_t ngx_http_script_copy_capture_len_code(ngx_http_script_engine_t *e);
void ngx_http_script_copy_capture_code(ngx_http_script_engine_t *e);
size_t ngx_http_script_mark_args_code(ngx_http_script_engine_t *e);
void ngx_http_script_start_args_code(ngx_http_script_engine_t *e);

void ngx_http_script_regex_start_code(ngx_http_script_engine_t *e);
void ngx_http_script_regex_end_code(ngx_http_script_engine_t *e);

void ngx_http_script_return_code(ngx_http_script_engine_t *e);
void ngx_http_script_break_code(ngx_http_script_engine_t *e);
void ngx_http_script_if_code(ngx_http_script_engine_t *e);
void ngx_http_script_equal_code(ngx_http_script_engine_t *e);
void ngx_http_script_not_equal_code(ngx_http_script_engine_t *e);
void ngx_http_script_file_code(ngx_http_script_engine_t *e);
void ngx_http_script_complex_value_code(ngx_http_script_engine_t *e);
void ngx_http_script_value_code(ngx_http_script_engine_t *e);
void ngx_http_script_set_var_code(ngx_http_script_engine_t *e);
void ngx_http_script_var_set_handler_code(ngx_http_script_engine_t *e);
void ngx_http_script_var_code(ngx_http_script_engine_t *e);
void ngx_http_script_nop_code(ngx_http_script_engine_t *e);
# 34 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream.h" 3 4
#define _NGX_HTTP_UPSTREAM_H_INCLUDED_ 




# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#define _NGX_EVENT_H_INCLUDED_ 






#define NGX_INVALID_INDEX 0xd0d0d0d0
# 30 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
struct ngx_event_s {
    void *data;

    unsigned write:1;

    unsigned accept:1;


    unsigned instance:1;





    unsigned active:1;

    unsigned disabled:1;


    unsigned ready:1;

    unsigned oneshot:1;


    unsigned complete:1;

    unsigned eof:1;
    unsigned error:1;

    unsigned timedout:1;
    unsigned timer_set:1;

    unsigned delayed:1;

    unsigned deferred_accept:1;


    unsigned pending_eof:1;

    unsigned posted:1;

    unsigned closed:1;


    unsigned channel:1;
    unsigned resolver:1;

    unsigned cancelable:1;


    unsigned kq_vnode:1;


    int kq_errno;
# 101 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
    int available;

    ngx_event_handler_pt handler;






    ngx_uint_t index;

    ngx_log_t *log;

    ngx_rbtree_node_t timer;


    ngx_queue_t queue;
# 138 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
};
# 166 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
typedef struct {
    ngx_int_t (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t (*add_conn)(ngx_connection_t *c);
    ngx_int_t (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);

    ngx_int_t (*notify)(ngx_event_handler_pt handler);

    ngx_int_t (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,
                                 ngx_uint_t flags);

    ngx_int_t (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);
    void (*done)(ngx_cycle_t *cycle);
} ngx_event_actions_t;


extern ngx_event_actions_t ngx_event_actions;
# 196 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#define NGX_USE_LEVEL_EVENT 0x00000001





#define NGX_USE_ONESHOT_EVENT 0x00000002





#define NGX_USE_CLEAR_EVENT 0x00000004





#define NGX_USE_KQUEUE_EVENT 0x00000008





#define NGX_USE_LOWAT_EVENT 0x00000010




#define NGX_USE_GREEDY_EVENT 0x00000020




#define NGX_USE_EPOLL_EVENT 0x00000040




#define NGX_USE_RTSIG_EVENT 0x00000080




#define NGX_USE_AIO_EVENT 0x00000100




#define NGX_USE_IOCP_EVENT 0x00000200





#define NGX_USE_FD_EVENT 0x00000400





#define NGX_USE_TIMER_EVENT 0x00000800





#define NGX_USE_EVENTPORT_EVENT 0x00001000




#define NGX_USE_VNODE_EVENT 0x00002000
# 281 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#define NGX_CLOSE_EVENT 1





#define NGX_DISABLE_EVENT 2




#define NGX_FLUSH_EVENT 4



#define NGX_LOWAT_EVENT 0
#define NGX_VNODE_EVENT 0
# 307 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#define NGX_READ_EVENT EVFILT_READ
#define NGX_WRITE_EVENT EVFILT_WRITE

#undef NGX_VNODE_EVENT
#define NGX_VNODE_EVENT EVFILT_VNODE
# 320 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#undef NGX_CLOSE_EVENT
#define NGX_CLOSE_EVENT EV_EOF

#undef NGX_LOWAT_EVENT
#define NGX_LOWAT_EVENT EV_FLAG1

#undef NGX_FLUSH_EVENT
#define NGX_FLUSH_EVENT EV_ERROR

#define NGX_LEVEL_EVENT 0
#define NGX_ONESHOT_EVENT EV_ONESHOT
#define NGX_CLEAR_EVENT EV_CLEAR

#undef NGX_DISABLE_EVENT
#define NGX_DISABLE_EVENT EV_DISABLE
# 400 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#define ngx_process_events ngx_event_actions.process_events
#define ngx_done_events ngx_event_actions.done

#define ngx_add_event ngx_event_actions.add
#define ngx_del_event ngx_event_actions.del
#define ngx_add_conn ngx_event_actions.add_conn
#define ngx_del_conn ngx_event_actions.del_conn

#define ngx_notify ngx_event_actions.notify

#define ngx_add_timer ngx_event_add_timer
#define ngx_del_timer ngx_event_del_timer


extern ngx_os_io_t ngx_io;

#define ngx_recv ngx_io.recv
#define ngx_recv_chain ngx_io.recv_chain
#define ngx_udp_recv ngx_io.udp_recv
#define ngx_send ngx_io.send
#define ngx_send_chain ngx_io.send_chain
#define ngx_udp_send ngx_io.udp_send
#define ngx_udp_send_chain ngx_io.udp_send_chain


#define NGX_EVENT_MODULE 0x544E5645
#define NGX_EVENT_CONF 0x02000000


typedef struct {
    ngx_uint_t connections;
    ngx_uint_t use;

    ngx_flag_t multi_accept;
    ngx_flag_t accept_mutex;

    ngx_msec_t accept_mutex_delay;

    u_char *name;




} ngx_event_conf_t;


typedef struct {
    ngx_str_t *name;

    void *(*create_conf)(ngx_cycle_t *cycle);
    char *(*init_conf)(ngx_cycle_t *cycle, void *conf);

    ngx_event_actions_t actions;
} ngx_event_module_t;


extern ngx_atomic_t *ngx_connection_counter;

extern ngx_atomic_t *ngx_accept_mutex_ptr;
extern ngx_shmtx_t ngx_accept_mutex;
extern ngx_uint_t ngx_use_accept_mutex;
extern ngx_uint_t ngx_accept_events;
extern ngx_uint_t ngx_accept_mutex_held;
extern ngx_msec_t ngx_accept_mutex_delay;
extern ngx_int_t ngx_accept_disabled;
# 480 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
#define NGX_UPDATE_TIME 1
#define NGX_POST_EVENTS 2


extern sig_atomic_t ngx_event_timer_alarm;
extern ngx_uint_t ngx_event_flags;
extern ngx_module_t ngx_events_module;
extern ngx_module_t ngx_event_core_module;


#define ngx_event_get_conf(conf_ctx,module) (*(ngx_get_conf(conf_ctx, ngx_events_module))) [module.ctx_index]




void ngx_event_accept(ngx_event_t *ev);

void ngx_event_recvmsg(ngx_event_t *ev);
void ngx_udp_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);

void ngx_delete_udp_connection(void *data);
ngx_int_t ngx_trylock_accept_mutex(ngx_cycle_t *cycle);
ngx_int_t ngx_enable_accept_events(ngx_cycle_t *cycle);
u_char *ngx_accept_log_error(ngx_log_t *log, u_char *buf, size_t len);





void ngx_process_events_and_timers(ngx_cycle_t *cycle);
ngx_int_t ngx_handle_read_event(ngx_event_t *rev, ngx_uint_t flags);
ngx_int_t ngx_handle_write_event(ngx_event_t *wev, size_t lowat);
# 522 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 3 4
ngx_int_t ngx_send_lowat(ngx_connection_t *c, size_t lowat);



#define ngx_event_ident(p) ((ngx_connection_t *) (p))->fd


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_timer.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_timer.h" 3 4
#define _NGX_EVENT_TIMER_H_INCLUDED_ 




# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 1 3 4
# 15 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_timer.h" 2 3 4


#define NGX_TIMER_INFINITE (ngx_msec_t) -1

#define NGX_TIMER_LAZY_DELAY 300


ngx_int_t ngx_event_timer_init(ngx_log_t *log);
ngx_msec_t ngx_event_find_timer(void);
void ngx_event_expire_timers(void);
ngx_int_t ngx_event_no_timers_left(void);


extern ngx_rbtree_t ngx_event_timer_rbtree;


static inline void
ngx_event_del_timer(ngx_event_t *ev)
{
   

                                                             ;

    ngx_rbtree_delete(&ngx_event_timer_rbtree, &ev->timer);







    ev->timer_set = 0;
}


static inline void
ngx_event_add_timer(ngx_event_t *ev, ngx_msec_t timer)
{
    ngx_msec_t key;
    ngx_msec_int_t diff;

    key = ngx_current_msec + timer;

    if (ev->timer_set) {







        diff = (ngx_msec_int_t) (key - ev->timer.key);

        if ((((diff) >= 0) ? (diff) : - (diff)) < 300) {
           

                                                                          ;
            return;
        }

        ngx_event_del_timer(ev);
    }

    ev->timer.key = key;

   

                                                                    ;

    ngx_rbtree_insert(&ngx_event_timer_rbtree, &ev->timer);

    ev->timer_set = 1;
}
# 530 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_posted.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_posted.h" 3 4
#define _NGX_EVENT_POSTED_H_INCLUDED_ 







#define ngx_post_event(ev,q) if (!(ev)->posted) { (ev)->posted = 1; ngx_queue_insert_tail(q, &(ev)->queue); ngx_log_debug1(NGX_LOG_DEBUG_CORE, (ev)->log, 0, "post event %p", ev); } else { ngx_log_debug1(NGX_LOG_DEBUG_CORE, (ev)->log, 0, "update posted event %p", ev); }
# 31 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_posted.h" 3 4
#define ngx_delete_posted_event(ev) (ev)->posted = 0; ngx_queue_remove(&(ev)->queue); ngx_log_debug1(NGX_LOG_DEBUG_CORE, (ev)->log, 0, "delete posted event %p", ev);
# 41 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_posted.h" 3 4
void ngx_event_process_posted(ngx_cycle_t *cycle, ngx_queue_t *posted);
void ngx_event_move_posted_next(ngx_cycle_t *cycle);


extern ngx_queue_t ngx_posted_accept_events;
extern ngx_queue_t ngx_posted_next_events;
extern ngx_queue_t ngx_posted_events;
# 531 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event.h" 2 3 4
# 15 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_connect.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_connect.h" 3 4
#define _NGX_EVENT_CONNECT_H_INCLUDED_ 







#define NGX_PEER_KEEPALIVE 1
#define NGX_PEER_NEXT 2
#define NGX_PEER_FAILED 4


typedef struct ngx_peer_connection_s ngx_peer_connection_t;

typedef ngx_int_t (*ngx_event_get_peer_pt)(ngx_peer_connection_t *pc,
    void *data);
typedef void (*ngx_event_free_peer_pt)(ngx_peer_connection_t *pc, void *data,
    ngx_uint_t state);
typedef void (*ngx_event_notify_peer_pt)(ngx_peer_connection_t *pc,
    void *data, ngx_uint_t type);
typedef ngx_int_t (*ngx_event_set_peer_session_pt)(ngx_peer_connection_t *pc,
    void *data);
typedef void (*ngx_event_save_peer_session_pt)(ngx_peer_connection_t *pc,
    void *data);


struct ngx_peer_connection_s {
    ngx_connection_t *connection;

    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t *name;

    ngx_uint_t tries;
    ngx_msec_t start_time;

    ngx_event_get_peer_pt get;
    ngx_event_free_peer_pt free;
    ngx_event_notify_peer_pt notify;
    void *data;






    ngx_addr_t *local;

    int type;
    int rcvbuf;

    ngx_log_t *log;

    unsigned cached:1;
    unsigned transparent:1;
    unsigned so_keepalive:1;
    unsigned down:1;


    unsigned log_error:2;

   
   
};


ngx_int_t ngx_event_connect_peer(ngx_peer_connection_t *pc);
ngx_int_t ngx_event_get_peer(ngx_peer_connection_t *pc, void *data);
# 16 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_pipe.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_pipe.h" 3 4
#define _NGX_EVENT_PIPE_H_INCLUDED_ 







typedef struct ngx_event_pipe_s ngx_event_pipe_t;

typedef ngx_int_t (*ngx_event_pipe_input_filter_pt)(ngx_event_pipe_t *p,
                                                    ngx_buf_t *buf);
typedef ngx_int_t (*ngx_event_pipe_output_filter_pt)(void *data,
                                                     ngx_chain_t *chain);


struct ngx_event_pipe_s {
    ngx_connection_t *upstream;
    ngx_connection_t *downstream;

    ngx_chain_t *free_raw_bufs;
    ngx_chain_t *in;
    ngx_chain_t **last_in;

    ngx_chain_t *writing;

    ngx_chain_t *out;
    ngx_chain_t *free;
    ngx_chain_t *busy;






    ngx_event_pipe_input_filter_pt input_filter;
    void *input_ctx;

    ngx_event_pipe_output_filter_pt output_filter;
    void *output_ctx;
# 57 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/event/ngx_event_pipe.h" 3 4
    unsigned read:1;
    unsigned cacheable:1;
    unsigned single_buf:1;
    unsigned free_bufs:1;
    unsigned upstream_done:1;
    unsigned upstream_error:1;
    unsigned upstream_eof:1;
    unsigned upstream_blocked:1;
    unsigned downstream_done:1;
    unsigned downstream_error:1;
    unsigned cyclic_temp_file:1;
    unsigned aio:1;

    ngx_int_t allocated;
    ngx_bufs_t bufs;
    ngx_buf_tag_t tag;

    ssize_t busy_size;

    off_t read_length;
    off_t length;

    off_t max_temp_file_size;
    ssize_t temp_file_write_size;

    ngx_msec_t read_timeout;
    ngx_msec_t send_timeout;
    ssize_t send_lowat;

    ngx_pool_t *pool;
    ngx_log_t *log;

    ngx_chain_t *preread_bufs;
    size_t preread_size;
    ngx_buf_t *buf_to_file;

    size_t limit_rate;
    time_t start_sec;

    ngx_temp_file_t *temp_file;

               int num;
};


ngx_int_t ngx_event_pipe(ngx_event_pipe_t *p, ngx_int_t do_write);
ngx_int_t ngx_event_pipe_copy_input_filter(ngx_event_pipe_t *p, ngx_buf_t *buf);
ngx_int_t ngx_event_pipe_add_free_buf(ngx_event_pipe_t *p, ngx_buf_t *b);
# 17 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream.h" 2 3 4



#define NGX_HTTP_UPSTREAM_FT_ERROR 0x00000002
#define NGX_HTTP_UPSTREAM_FT_TIMEOUT 0x00000004
#define NGX_HTTP_UPSTREAM_FT_INVALID_HEADER 0x00000008
#define NGX_HTTP_UPSTREAM_FT_HTTP_500 0x00000010
#define NGX_HTTP_UPSTREAM_FT_HTTP_502 0x00000020
#define NGX_HTTP_UPSTREAM_FT_HTTP_503 0x00000040
#define NGX_HTTP_UPSTREAM_FT_HTTP_504 0x00000080
#define NGX_HTTP_UPSTREAM_FT_HTTP_403 0x00000100
#define NGX_HTTP_UPSTREAM_FT_HTTP_404 0x00000200
#define NGX_HTTP_UPSTREAM_FT_HTTP_429 0x00000400
#define NGX_HTTP_UPSTREAM_FT_UPDATING 0x00000800
#define NGX_HTTP_UPSTREAM_FT_BUSY_LOCK 0x00001000
#define NGX_HTTP_UPSTREAM_FT_MAX_WAITING 0x00002000
#define NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT 0x00004000
#define NGX_HTTP_UPSTREAM_FT_NOLIVE 0x40000000
#define NGX_HTTP_UPSTREAM_FT_OFF 0x80000000

#define NGX_HTTP_UPSTREAM_FT_STATUS (NGX_HTTP_UPSTREAM_FT_HTTP_500 |NGX_HTTP_UPSTREAM_FT_HTTP_502 |NGX_HTTP_UPSTREAM_FT_HTTP_503 |NGX_HTTP_UPSTREAM_FT_HTTP_504 |NGX_HTTP_UPSTREAM_FT_HTTP_403 |NGX_HTTP_UPSTREAM_FT_HTTP_404 |NGX_HTTP_UPSTREAM_FT_HTTP_429)







#define NGX_HTTP_UPSTREAM_INVALID_HEADER 40


#define NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT 0x00000002
#define NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES 0x00000004
#define NGX_HTTP_UPSTREAM_IGN_EXPIRES 0x00000008
#define NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL 0x00000010
#define NGX_HTTP_UPSTREAM_IGN_SET_COOKIE 0x00000020
#define NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE 0x00000040
#define NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING 0x00000080
#define NGX_HTTP_UPSTREAM_IGN_XA_CHARSET 0x00000100
#define NGX_HTTP_UPSTREAM_IGN_VARY 0x00000200


typedef struct {
    ngx_uint_t status;
    ngx_msec_t response_time;
    ngx_msec_t connect_time;
    ngx_msec_t header_time;
    ngx_msec_t queue_time;
    off_t response_length;
    off_t bytes_received;
    off_t bytes_sent;

    ngx_str_t *peer;
} ngx_http_upstream_state_t;


typedef struct {
    ngx_hash_t headers_in_hash;
    ngx_array_t upstreams;

} ngx_http_upstream_main_conf_t;

typedef struct ngx_http_upstream_srv_conf_s ngx_http_upstream_srv_conf_t;

typedef ngx_int_t (*ngx_http_upstream_init_pt)(ngx_conf_t *cf,
    ngx_http_upstream_srv_conf_t *us);
typedef ngx_int_t (*ngx_http_upstream_init_peer_pt)(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us);


typedef struct {
    ngx_http_upstream_init_pt init_upstream;
    ngx_http_upstream_init_peer_pt init;
    void *data;
} ngx_http_upstream_peer_t;


typedef struct {
    ngx_str_t name;
    ngx_addr_t *addrs;
    ngx_uint_t naddrs;
    ngx_uint_t weight;
    ngx_uint_t max_conns;
    ngx_uint_t max_fails;
    time_t fail_timeout;
    ngx_msec_t slow_start;
    ngx_uint_t down;

    unsigned backup:1;

   
   
} ngx_http_upstream_server_t;


#define NGX_HTTP_UPSTREAM_CREATE 0x0001
#define NGX_HTTP_UPSTREAM_WEIGHT 0x0002
#define NGX_HTTP_UPSTREAM_MAX_FAILS 0x0004
#define NGX_HTTP_UPSTREAM_FAIL_TIMEOUT 0x0008
#define NGX_HTTP_UPSTREAM_DOWN 0x0010
#define NGX_HTTP_UPSTREAM_BACKUP 0x0020
#define NGX_HTTP_UPSTREAM_MAX_CONNS 0x0100


struct ngx_http_upstream_srv_conf_s {
    ngx_http_upstream_peer_t peer;
    void **srv_conf;

    ngx_array_t *servers;

    ngx_uint_t flags;
    ngx_str_t host;
    u_char *file_name;
    ngx_uint_t line;
    in_port_t port;
    ngx_uint_t no_port;


    ngx_shm_zone_t *shm_zone;

};


typedef struct {
    ngx_addr_t *addr;
    ngx_http_complex_value_t *value;



} ngx_http_upstream_local_t;


typedef struct {
    ngx_http_upstream_srv_conf_t *upstream;

    ngx_msec_t connect_timeout;
    ngx_msec_t send_timeout;
    ngx_msec_t read_timeout;
    ngx_msec_t next_upstream_timeout;

    size_t send_lowat;
    size_t buffer_size;
    size_t limit_rate;

    size_t busy_buffers_size;
    size_t max_temp_file_size;
    size_t temp_file_write_size;

    size_t busy_buffers_size_conf;
    size_t max_temp_file_size_conf;
    size_t temp_file_write_size_conf;

    ngx_bufs_t bufs;

    ngx_uint_t ignore_headers;
    ngx_uint_t next_upstream;
    ngx_uint_t store_access;
    ngx_uint_t next_upstream_tries;
    ngx_flag_t buffering;
    ngx_flag_t request_buffering;
    ngx_flag_t pass_request_headers;
    ngx_flag_t pass_request_body;

    ngx_flag_t ignore_client_abort;
    ngx_flag_t intercept_errors;
    ngx_flag_t cyclic_temp_file;
    ngx_flag_t force_ranges;

    ngx_path_t *temp_path;

    ngx_hash_t hide_headers_hash;
    ngx_array_t *hide_headers;
    ngx_array_t *pass_headers;

    ngx_http_upstream_local_t *local;
    ngx_flag_t socket_keepalive;


    ngx_shm_zone_t *cache_zone;
    ngx_http_complex_value_t *cache_value;

    ngx_uint_t cache_min_uses;
    ngx_uint_t cache_use_stale;
    ngx_uint_t cache_methods;

    off_t cache_max_range_offset;

    ngx_flag_t cache_lock;
    ngx_msec_t cache_lock_timeout;
    ngx_msec_t cache_lock_age;

    ngx_flag_t cache_revalidate;
    ngx_flag_t cache_convert_head;
    ngx_flag_t cache_background_update;

    ngx_array_t *cache_valid;
    ngx_array_t *cache_bypass;
    ngx_array_t *cache_purge;
    ngx_array_t *no_cache;


    ngx_array_t *store_lengths;
    ngx_array_t *store_values;


    signed cache:2;

    signed store:2;
    unsigned intercept_404:1;
    unsigned change_buffering:1;
    unsigned pass_trailers:1;
    unsigned preserve_output:1;
# 243 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream.h" 3 4
    ngx_str_t module;

   
   
} ngx_http_upstream_conf_t;


typedef struct {
    ngx_str_t name;
    ngx_http_header_handler_pt handler;
    ngx_uint_t offset;
    ngx_http_header_handler_pt copy_handler;
    ngx_uint_t conf;
    ngx_uint_t redirect;
} ngx_http_upstream_header_t;


typedef struct {
    ngx_list_t headers;
    ngx_list_t trailers;

    ngx_uint_t status_n;
    ngx_str_t status_line;

    ngx_table_elt_t *status;
    ngx_table_elt_t *date;
    ngx_table_elt_t *server;
    ngx_table_elt_t *connection;

    ngx_table_elt_t *expires;
    ngx_table_elt_t *etag;
    ngx_table_elt_t *x_accel_expires;
    ngx_table_elt_t *x_accel_redirect;
    ngx_table_elt_t *x_accel_limit_rate;

    ngx_table_elt_t *content_type;
    ngx_table_elt_t *content_length;

    ngx_table_elt_t *last_modified;
    ngx_table_elt_t *location;
    ngx_table_elt_t *accept_ranges;
    ngx_table_elt_t *www_authenticate;
    ngx_table_elt_t *transfer_encoding;
    ngx_table_elt_t *vary;


    ngx_table_elt_t *content_encoding;


    ngx_array_t cache_control;
    ngx_array_t cookies;

    off_t content_length_n;
    time_t last_modified_time;

    unsigned connection_close:1;
    unsigned chunked:1;
} ngx_http_upstream_headers_in_t;


typedef struct {
    ngx_str_t host;
    in_port_t port;
    ngx_uint_t no_port;

    ngx_uint_t naddrs;
    ngx_resolver_addr_t *addrs;

    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t name;

    ngx_resolver_ctx_t *ctx;
} ngx_http_upstream_resolved_t;


typedef void (*ngx_http_upstream_handler_pt)(ngx_http_request_t *r,
    ngx_http_upstream_t *u);


struct ngx_http_upstream_s {
    ngx_http_upstream_handler_pt read_event_handler;
    ngx_http_upstream_handler_pt write_event_handler;

    ngx_peer_connection_t peer;

    ngx_event_pipe_t *pipe;

    ngx_chain_t *request_bufs;

    ngx_output_chain_ctx_t output;
    ngx_chain_writer_ctx_t writer;

    ngx_http_upstream_conf_t *conf;
    ngx_http_upstream_srv_conf_t *upstream;

    ngx_array_t *caches;


    ngx_http_upstream_headers_in_t headers_in;

    ngx_http_upstream_resolved_t *resolved;

    ngx_buf_t from_client;

    ngx_buf_t buffer;
    off_t length;

    ngx_chain_t *out_bufs;
    ngx_chain_t *busy_bufs;
    ngx_chain_t *free_bufs;

    ngx_int_t (*input_filter_init)(void *data);
    ngx_int_t (*input_filter)(void *data, ssize_t bytes);
    void *input_filter_ctx;


    ngx_int_t (*create_key)(ngx_http_request_t *r);

    ngx_int_t (*create_request)(ngx_http_request_t *r);
    ngx_int_t (*reinit_request)(ngx_http_request_t *r);
    ngx_int_t (*process_header)(ngx_http_request_t *r);
    void (*abort_request)(ngx_http_request_t *r);
    void (*finalize_request)(ngx_http_request_t *r,
                                         ngx_int_t rc);
    ngx_int_t (*rewrite_redirect)(ngx_http_request_t *r,
                                         ngx_table_elt_t *h, size_t prefix);
    ngx_int_t (*rewrite_cookie)(ngx_http_request_t *r,
                                         ngx_table_elt_t *h);

    ngx_msec_t start_time;

    ngx_http_upstream_state_t *state;

    ngx_str_t method;
    ngx_str_t schema;
    ngx_str_t uri;





    ngx_http_cleanup_pt *cleanup;

    unsigned store:1;
    unsigned cacheable:1;
    unsigned accel:1;
    unsigned ssl:1;

    unsigned cache_status:3;


    unsigned buffering:1;
    unsigned keepalive:1;
    unsigned upgrade:1;
    unsigned error:1;

    unsigned request_sent:1;
    unsigned request_body_sent:1;
    unsigned request_body_blocked:1;
    unsigned header_sent:1;
};


typedef struct {
    ngx_uint_t status;
    ngx_uint_t mask;
} ngx_http_upstream_next_t;


typedef struct {
    ngx_str_t key;
    ngx_str_t value;
    ngx_uint_t skip_empty;
} ngx_http_upstream_param_t;


ngx_int_t ngx_http_upstream_create(ngx_http_request_t *r);
void ngx_http_upstream_init(ngx_http_request_t *r);
ngx_int_t ngx_http_upstream_non_buffered_filter_init(void *data);
ngx_int_t ngx_http_upstream_non_buffered_filter(void *data, ssize_t bytes);
ngx_http_upstream_srv_conf_t *ngx_http_upstream_add(ngx_conf_t *cf,
    ngx_url_t *u, ngx_uint_t flags);
char *ngx_http_upstream_bind_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
char *ngx_http_upstream_param_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
ngx_int_t ngx_http_upstream_hide_headers_hash(ngx_conf_t *cf,
    ngx_http_upstream_conf_t *conf, ngx_http_upstream_conf_t *prev,
    ngx_str_t *default_hide_headers, ngx_hash_init_t *hash);


#define ngx_http_conf_upstream_srv_conf(uscf,module) uscf->srv_conf[module.ctx_index]



extern ngx_module_t ngx_http_upstream_module;
extern ngx_conf_bitmask_t ngx_http_upstream_cache_method_mask[];
extern ngx_conf_bitmask_t ngx_http_upstream_ignore_headers_masks[];
# 35 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream_round_robin.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream_round_robin.h" 3 4
#define _NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_ 







typedef struct ngx_http_upstream_rr_peer_s ngx_http_upstream_rr_peer_t;

struct ngx_http_upstream_rr_peer_s {
    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t name;
    ngx_str_t server;

    ngx_int_t current_weight;
    ngx_int_t effective_weight;
    ngx_int_t weight;

    ngx_uint_t conns;
    ngx_uint_t max_conns;

    ngx_uint_t fails;
    time_t accessed;
    time_t checked;

    ngx_uint_t max_fails;
    time_t fail_timeout;
    ngx_msec_t slow_start;
    ngx_msec_t start_time;

    ngx_uint_t down;







    ngx_atomic_t lock;


    ngx_http_upstream_rr_peer_t *next;

   
   
};


typedef struct ngx_http_upstream_rr_peers_s ngx_http_upstream_rr_peers_t;

struct ngx_http_upstream_rr_peers_s {
    ngx_uint_t number;


    ngx_slab_pool_t *shpool;
    ngx_atomic_t rwlock;
    ngx_http_upstream_rr_peers_t *zone_next;


    ngx_uint_t total_weight;
    ngx_uint_t tries;

    unsigned single:1;
    unsigned weighted:1;

    ngx_str_t *name;

    ngx_http_upstream_rr_peers_t *next;

    ngx_http_upstream_rr_peer_t *peer;
};




#define ngx_http_upstream_rr_peers_rlock(peers) if (peers->shpool) { ngx_rwlock_rlock(&peers->rwlock); }





#define ngx_http_upstream_rr_peers_wlock(peers) if (peers->shpool) { ngx_rwlock_wlock(&peers->rwlock); }





#define ngx_http_upstream_rr_peers_unlock(peers) if (peers->shpool) { ngx_rwlock_unlock(&peers->rwlock); }






#define ngx_http_upstream_rr_peer_lock(peers,peer) if (peers->shpool) { ngx_rwlock_wlock(&peer->lock); }





#define ngx_http_upstream_rr_peer_unlock(peers,peer) if (peers->shpool) { ngx_rwlock_unlock(&peer->lock); }
# 128 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_upstream_round_robin.h" 3 4
typedef struct {
    ngx_uint_t config;
    ngx_http_upstream_rr_peers_t *peers;
    ngx_http_upstream_rr_peer_t *current;
    uintptr_t *tried;
    uintptr_t data;
} ngx_http_upstream_rr_peer_data_t;


ngx_int_t ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
    ngx_http_upstream_srv_conf_t *us);
ngx_int_t ngx_http_upstream_init_round_robin_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us);
ngx_int_t ngx_http_upstream_create_round_robin_peer(ngx_http_request_t *r,
    ngx_http_upstream_resolved_t *ur);
ngx_int_t ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc,
    void *data);
void ngx_http_upstream_free_round_robin_peer(ngx_peer_connection_t *pc,
    void *data, ngx_uint_t state);
# 36 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4
# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_core_module.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_core_module.h" 3 4
#define _NGX_HTTP_CORE_H_INCLUDED_ 
# 23 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_core_module.h" 3 4
#define NGX_HTTP_GZIP_PROXIED_OFF 0x0002
#define NGX_HTTP_GZIP_PROXIED_EXPIRED 0x0004
#define NGX_HTTP_GZIP_PROXIED_NO_CACHE 0x0008
#define NGX_HTTP_GZIP_PROXIED_NO_STORE 0x0010
#define NGX_HTTP_GZIP_PROXIED_PRIVATE 0x0020
#define NGX_HTTP_GZIP_PROXIED_NO_LM 0x0040
#define NGX_HTTP_GZIP_PROXIED_NO_ETAG 0x0080
#define NGX_HTTP_GZIP_PROXIED_AUTH 0x0100
#define NGX_HTTP_GZIP_PROXIED_ANY 0x0200


#define NGX_HTTP_AIO_OFF 0
#define NGX_HTTP_AIO_ON 1
#define NGX_HTTP_AIO_THREADS 2


#define NGX_HTTP_SATISFY_ALL 0
#define NGX_HTTP_SATISFY_ANY 1


#define NGX_HTTP_LINGERING_OFF 0
#define NGX_HTTP_LINGERING_ON 1
#define NGX_HTTP_LINGERING_ALWAYS 2


#define NGX_HTTP_IMS_OFF 0
#define NGX_HTTP_IMS_EXACT 1
#define NGX_HTTP_IMS_BEFORE 2


#define NGX_HTTP_KEEPALIVE_DISABLE_NONE 0x0002
#define NGX_HTTP_KEEPALIVE_DISABLE_MSIE6 0x0004
#define NGX_HTTP_KEEPALIVE_DISABLE_SAFARI 0x0008


#define NGX_HTTP_SERVER_TOKENS_OFF 0
#define NGX_HTTP_SERVER_TOKENS_ON 1
#define NGX_HTTP_SERVER_TOKENS_BUILD 2


typedef struct ngx_http_location_tree_node_s ngx_http_location_tree_node_t;
typedef struct ngx_http_core_loc_conf_s ngx_http_core_loc_conf_t;


typedef struct {
    struct sockaddr *sockaddr;
    socklen_t socklen;
    ngx_str_t addr_text;

    unsigned set:1;
    unsigned default_server:1;
    unsigned bind:1;
    unsigned wildcard:1;
    unsigned ssl:1;
    unsigned http2:1;

    unsigned ipv6only:1;

    unsigned deferred_accept:1;
    unsigned reuseport:1;
    unsigned so_keepalive:2;
    unsigned proxy_protocol:1;

    int backlog;
    int rcvbuf;
    int sndbuf;




    int fastopen;
# 104 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_core_module.h" 3 4
} ngx_http_listen_opt_t;


typedef enum {
    NGX_HTTP_POST_READ_PHASE = 0,

    NGX_HTTP_SERVER_REWRITE_PHASE,

    NGX_HTTP_FIND_CONFIG_PHASE,
    NGX_HTTP_REWRITE_PHASE,
    NGX_HTTP_POST_REWRITE_PHASE,

    NGX_HTTP_PREACCESS_PHASE,

    NGX_HTTP_ACCESS_PHASE,
    NGX_HTTP_POST_ACCESS_PHASE,

    NGX_HTTP_PRECONTENT_PHASE,

    NGX_HTTP_CONTENT_PHASE,

    NGX_HTTP_LOG_PHASE
} ngx_http_phases;

typedef struct ngx_http_phase_handler_s ngx_http_phase_handler_t;

typedef ngx_int_t (*ngx_http_phase_handler_pt)(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);

struct ngx_http_phase_handler_s {
    ngx_http_phase_handler_pt checker;
    ngx_http_handler_pt handler;
    ngx_uint_t next;
};


typedef struct {
    ngx_http_phase_handler_t *handlers;
    ngx_uint_t server_rewrite_index;
    ngx_uint_t location_rewrite_index;
} ngx_http_phase_engine_t;


typedef struct {
    ngx_array_t handlers;
} ngx_http_phase_t;


typedef struct {
    ngx_array_t servers;

    ngx_http_phase_engine_t phase_engine;

    ngx_hash_t headers_in_hash;

    ngx_hash_t variables_hash;

    ngx_array_t variables;
    ngx_array_t prefix_variables;
    ngx_uint_t ncaptures;

    ngx_uint_t server_names_hash_max_size;
    ngx_uint_t server_names_hash_bucket_size;

    ngx_uint_t variables_hash_max_size;
    ngx_uint_t variables_hash_bucket_size;

    ngx_hash_keys_arrays_t *variables_keys;

    ngx_array_t *ports;

    ngx_http_phase_t phases[NGX_HTTP_LOG_PHASE + 1];
} ngx_http_core_main_conf_t;


typedef struct {

    ngx_array_t server_names;


    ngx_http_conf_ctx_t *ctx;

    u_char *file_name;
    ngx_uint_t line;

    ngx_str_t server_name;

    size_t connection_pool_size;
    size_t request_pool_size;
    size_t client_header_buffer_size;

    ngx_bufs_t large_client_header_buffers;

    ngx_msec_t client_header_timeout;

    ngx_flag_t ignore_invalid_headers;
    ngx_flag_t merge_slashes;
    ngx_flag_t underscores_in_headers;

    unsigned listen:1;

    unsigned captures:1;


    ngx_http_core_loc_conf_t **named_locations;
} ngx_http_core_srv_conf_t;





typedef struct {

    ngx_http_regex_t *regex;

    ngx_http_core_srv_conf_t *server;
    ngx_str_t name;
} ngx_http_server_name_t;


typedef struct {
    ngx_hash_combined_t names;

    ngx_uint_t nregex;
    ngx_http_server_name_t *regex;
} ngx_http_virtual_names_t;


struct ngx_http_addr_conf_s {

    ngx_http_core_srv_conf_t *default_server;

    ngx_http_virtual_names_t *virtual_names;

    unsigned ssl:1;
    unsigned http2:1;
    unsigned proxy_protocol:1;
};


typedef struct {
    in_addr_t addr;
    ngx_http_addr_conf_t conf;
} ngx_http_in_addr_t;




typedef struct {
    struct in6_addr addr6;
    ngx_http_addr_conf_t conf;
} ngx_http_in6_addr_t;




typedef struct {

    void *addrs;
    ngx_uint_t naddrs;
} ngx_http_port_t;


typedef struct {
    ngx_int_t family;
    in_port_t port;
    ngx_array_t addrs;
} ngx_http_conf_port_t;


typedef struct {
    ngx_http_listen_opt_t opt;

    ngx_hash_t hash;
    ngx_hash_wildcard_t *wc_head;
    ngx_hash_wildcard_t *wc_tail;


    ngx_uint_t nregex;
    ngx_http_server_name_t *regex;



    ngx_http_core_srv_conf_t *default_server;
    ngx_array_t servers;
} ngx_http_conf_addr_t;


typedef struct {
    ngx_int_t status;
    ngx_int_t overwrite;
    ngx_http_complex_value_t value;
    ngx_str_t args;
} ngx_http_err_page_t;


struct ngx_http_core_loc_conf_s {
    ngx_str_t name;
    ngx_str_t escaped_name;


    ngx_http_regex_t *regex;


    unsigned noname:1;
    unsigned lmt_excpt:1;
    unsigned named:1;

    unsigned exact_match:1;
    unsigned noregex:1;

    unsigned auto_redirect:1;

    unsigned gzip_disable_msie6:2;
    unsigned gzip_disable_degradation:2;


    ngx_http_location_tree_node_t *static_locations;

    ngx_http_core_loc_conf_t **regex_locations;



    void **loc_conf;

    uint32_t limit_except;
    void **limit_except_loc_conf;

    ngx_http_handler_pt handler;


    size_t alias;
    ngx_str_t root;
    ngx_str_t post_action;

    ngx_array_t *root_lengths;
    ngx_array_t *root_values;

    ngx_array_t *types;
    ngx_hash_t types_hash;
    ngx_str_t default_type;

    off_t client_max_body_size;
    off_t directio;
    off_t directio_alignment;

    size_t client_body_buffer_size;
    size_t send_lowat;
    size_t postpone_output;
    size_t sendfile_max_chunk;
    size_t read_ahead;
    size_t subrequest_output_buffer_size;


    ngx_http_complex_value_t *limit_rate;
    ngx_http_complex_value_t *limit_rate_after;

    ngx_msec_t client_body_timeout;
    ngx_msec_t send_timeout;
    ngx_msec_t keepalive_time;
    ngx_msec_t keepalive_timeout;
    ngx_msec_t lingering_time;
    ngx_msec_t lingering_timeout;
    ngx_msec_t resolver_timeout;
    ngx_msec_t auth_delay;

    ngx_resolver_t *resolver;

    time_t keepalive_header;

    ngx_uint_t keepalive_requests;
    ngx_uint_t keepalive_disable;
    ngx_uint_t satisfy;
    ngx_uint_t lingering_close;
    ngx_uint_t if_modified_since;
    ngx_uint_t max_ranges;
    ngx_uint_t client_body_in_file_only;

    ngx_flag_t client_body_in_single_buffer;

    ngx_flag_t internal;
    ngx_flag_t sendfile;
    ngx_flag_t aio;
    ngx_flag_t aio_write;
    ngx_flag_t tcp_nopush;
    ngx_flag_t tcp_nodelay;
    ngx_flag_t reset_timedout_connection;
    ngx_flag_t absolute_redirect;
    ngx_flag_t server_name_in_redirect;
    ngx_flag_t port_in_redirect;
    ngx_flag_t msie_padding;
    ngx_flag_t msie_refresh;
    ngx_flag_t log_not_found;
    ngx_flag_t log_subrequest;
    ngx_flag_t recursive_error_pages;
    ngx_uint_t server_tokens;
    ngx_flag_t chunked_transfer_encoding;
    ngx_flag_t etag;


    ngx_flag_t gzip_vary;

    ngx_uint_t gzip_http_version;
    ngx_uint_t gzip_proxied;


    ngx_array_t *gzip_disable;
# 420 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_core_module.h" 3 4
    ngx_uint_t disable_symlinks;
    ngx_http_complex_value_t *disable_symlinks_from;


    ngx_array_t *error_pages;

    ngx_path_t *client_body_temp_path;

    ngx_open_file_cache_t *open_file_cache;
    time_t open_file_cache_valid;
    ngx_uint_t open_file_cache_min_uses;
    ngx_flag_t open_file_cache_errors;
    ngx_flag_t open_file_cache_events;

    ngx_log_t *error_log;

    ngx_uint_t types_hash_max_size;
    ngx_uint_t types_hash_bucket_size;

    ngx_queue_t *locations;




};


typedef struct {
    ngx_queue_t queue;
    ngx_http_core_loc_conf_t *exact;
    ngx_http_core_loc_conf_t *inclusive;
    ngx_str_t *name;
    u_char *file_name;
    ngx_uint_t line;
    ngx_queue_t list;
} ngx_http_location_queue_t;


struct ngx_http_location_tree_node_s {
    ngx_http_location_tree_node_t *left;
    ngx_http_location_tree_node_t *right;
    ngx_http_location_tree_node_t *tree;

    ngx_http_core_loc_conf_t *exact;
    ngx_http_core_loc_conf_t *inclusive;

    u_char auto_redirect;
    u_char len;
    u_char name[1];
};


void ngx_http_core_run_phases(ngx_http_request_t *r);
ngx_int_t ngx_http_core_generic_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);
ngx_int_t ngx_http_core_rewrite_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);
ngx_int_t ngx_http_core_find_config_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);
ngx_int_t ngx_http_core_post_rewrite_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);
ngx_int_t ngx_http_core_access_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);
ngx_int_t ngx_http_core_post_access_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);
ngx_int_t ngx_http_core_content_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);


void *ngx_http_test_content_type(ngx_http_request_t *r, ngx_hash_t *types_hash);
ngx_int_t ngx_http_set_content_type(ngx_http_request_t *r);
void ngx_http_set_exten(ngx_http_request_t *r);
ngx_int_t ngx_http_set_etag(ngx_http_request_t *r);
void ngx_http_weak_etag(ngx_http_request_t *r);
ngx_int_t ngx_http_send_response(ngx_http_request_t *r, ngx_uint_t status,
    ngx_str_t *ct, ngx_http_complex_value_t *cv);
u_char *ngx_http_map_uri_to_path(ngx_http_request_t *r, ngx_str_t *name,
    size_t *root_length, size_t reserved);
ngx_int_t ngx_http_auth_basic_user(ngx_http_request_t *r);

ngx_int_t ngx_http_gzip_ok(ngx_http_request_t *r);



ngx_int_t ngx_http_subrequest(ngx_http_request_t *r,
    ngx_str_t *uri, ngx_str_t *args, ngx_http_request_t **psr,
    ngx_http_post_subrequest_t *ps, ngx_uint_t flags);
ngx_int_t ngx_http_internal_redirect(ngx_http_request_t *r,
    ngx_str_t *uri, ngx_str_t *args);
ngx_int_t ngx_http_named_location(ngx_http_request_t *r, ngx_str_t *name);


ngx_http_cleanup_t *ngx_http_cleanup_add(ngx_http_request_t *r, size_t size);


typedef ngx_int_t (*ngx_http_output_header_filter_pt)(ngx_http_request_t *r);
typedef ngx_int_t (*ngx_http_output_body_filter_pt)
    (ngx_http_request_t *r, ngx_chain_t *chain);
typedef ngx_int_t (*ngx_http_request_body_filter_pt)
    (ngx_http_request_t *r, ngx_chain_t *chain);


ngx_int_t ngx_http_output_filter(ngx_http_request_t *r, ngx_chain_t *chain);
ngx_int_t ngx_http_write_filter(ngx_http_request_t *r, ngx_chain_t *chain);
ngx_int_t ngx_http_request_body_save_filter(ngx_http_request_t *r,
    ngx_chain_t *chain);


ngx_int_t ngx_http_set_disable_symlinks(ngx_http_request_t *r,
    ngx_http_core_loc_conf_t *clcf, ngx_str_t *path, ngx_open_file_info_t *of);

ngx_int_t ngx_http_get_forwarded_addr(ngx_http_request_t *r, ngx_addr_t *addr,
    ngx_array_t *headers, ngx_str_t *value, ngx_array_t *proxies,
    int recursive);


extern ngx_module_t ngx_http_core_module;

extern ngx_uint_t ngx_http_max_module;

extern ngx_str_t ngx_http_core_get_method;


#define ngx_http_clear_content_length(r) r->headers_out.content_length_n = -1; if (r->headers_out.content_length) { r->headers_out.content_length->hash = 0; r->headers_out.content_length = NULL; }







#define ngx_http_clear_accept_ranges(r) r->allow_ranges = 0; if (r->headers_out.accept_ranges) { r->headers_out.accept_ranges->hash = 0; r->headers_out.accept_ranges = NULL; }







#define ngx_http_clear_last_modified(r) r->headers_out.last_modified_time = -1; if (r->headers_out.last_modified) { r->headers_out.last_modified->hash = 0; r->headers_out.last_modified = NULL; }







#define ngx_http_clear_location(r) if (r->headers_out.location) { r->headers_out.location->hash = 0; r->headers_out.location = NULL; }






#define ngx_http_clear_etag(r) if (r->headers_out.etag) { r->headers_out.etag->hash = 0; r->headers_out.etag = NULL; }
# 37 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4





# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_cache.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http_cache.h" 3 4
#define _NGX_HTTP_CACHE_H_INCLUDED_ 







#define NGX_HTTP_CACHE_MISS 1
#define NGX_HTTP_CACHE_BYPASS 2
#define NGX_HTTP_CACHE_EXPIRED 3
#define NGX_HTTP_CACHE_STALE 4
#define NGX_HTTP_CACHE_UPDATING 5
#define NGX_HTTP_CACHE_REVALIDATED 6
#define NGX_HTTP_CACHE_HIT 7
#define NGX_HTTP_CACHE_SCARCE 8

#define NGX_HTTP_CACHE_KEY_LEN 16
#define NGX_HTTP_CACHE_ETAG_LEN 128
#define NGX_HTTP_CACHE_VARY_LEN 128

#define NGX_HTTP_CACHE_VERSION 5


typedef struct {
    ngx_uint_t status;
    time_t valid;
} ngx_http_cache_valid_t;


typedef struct {
    ngx_rbtree_node_t node;
    ngx_queue_t queue;

    u_char key[16
                                         - sizeof(ngx_rbtree_key_t)];

    unsigned count:20;
    unsigned uses:10;
    unsigned valid_msec:10;
    unsigned error:10;
    unsigned exists:1;
    unsigned updating:1;
    unsigned deleting:1;
    unsigned purged:1;


    ngx_file_uniq_t uniq;
    time_t expire;
    time_t valid_sec;
    size_t body_start;
    off_t fs_size;
    ngx_msec_t lock_time;
} ngx_http_file_cache_node_t;


struct ngx_http_cache_s {
    ngx_file_t file;
    ngx_array_t keys;
    uint32_t crc32;
    u_char key[16];
    u_char main[16];

    ngx_file_uniq_t uniq;
    time_t valid_sec;
    time_t updating_sec;
    time_t error_sec;
    time_t last_modified;
    time_t date;

    ngx_str_t etag;
    ngx_str_t vary;
    u_char variant[16];

    size_t buffer_size;
    size_t header_start;
    size_t body_start;
    off_t length;
    off_t fs_size;

    ngx_uint_t min_uses;
    ngx_uint_t error;
    ngx_uint_t valid_msec;
    ngx_uint_t vary_tag;

    ngx_buf_t *buf;

    ngx_http_file_cache_t *file_cache;
    ngx_http_file_cache_node_t *node;





    ngx_msec_t lock_timeout;
    ngx_msec_t lock_age;
    ngx_msec_t lock_time;
    ngx_msec_t wait_time;

    ngx_event_t wait_event;

    unsigned lock:1;
    unsigned waiting:1;

    unsigned updated:1;
    unsigned updating:1;
    unsigned exists:1;
    unsigned temp_file:1;
    unsigned purged:1;
    unsigned reading:1;
    unsigned secondary:1;
    unsigned update_variant:1;
    unsigned background:1;

    unsigned stale_updating:1;
    unsigned stale_error:1;
};


typedef struct {
    ngx_uint_t version;
    time_t valid_sec;
    time_t updating_sec;
    time_t error_sec;
    time_t last_modified;
    time_t date;
    uint32_t crc32;
    u_short valid_msec;
    u_short header_start;
    u_short body_start;
    u_char etag_len;
    u_char etag[128];
    u_char vary_len;
    u_char vary[128];
    u_char variant[16];
} ngx_http_file_cache_header_t;


typedef struct {
    ngx_rbtree_t rbtree;
    ngx_rbtree_node_t sentinel;
    ngx_queue_t queue;
    ngx_atomic_t cold;
    ngx_atomic_t loading;
    off_t size;
    ngx_uint_t count;
    ngx_uint_t watermark;
} ngx_http_file_cache_sh_t;


struct ngx_http_file_cache_s {
    ngx_http_file_cache_sh_t *sh;
    ngx_slab_pool_t *shpool;

    ngx_path_t *path;

    off_t min_free;
    off_t max_size;
    size_t bsize;

    time_t inactive;

    time_t fail_time;

    ngx_uint_t files;
    ngx_uint_t loader_files;
    ngx_msec_t last;
    ngx_msec_t loader_sleep;
    ngx_msec_t loader_threshold;

    ngx_uint_t manager_files;
    ngx_msec_t manager_sleep;
    ngx_msec_t manager_threshold;

    ngx_shm_zone_t *shm_zone;

    ngx_uint_t use_temp_path;

};


ngx_int_t ngx_http_file_cache_new(ngx_http_request_t *r);
ngx_int_t ngx_http_file_cache_create(ngx_http_request_t *r);
void ngx_http_file_cache_create_key(ngx_http_request_t *r);
ngx_int_t ngx_http_file_cache_open(ngx_http_request_t *r);
ngx_int_t ngx_http_file_cache_set_header(ngx_http_request_t *r, u_char *buf);
void ngx_http_file_cache_update(ngx_http_request_t *r, ngx_temp_file_t *tf);
void ngx_http_file_cache_update_header(ngx_http_request_t *r);
ngx_int_t ngx_http_cache_send(ngx_http_request_t *);
void ngx_http_file_cache_free(ngx_http_cache_t *c, ngx_temp_file_t *tf);
time_t ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status);

char *ngx_http_file_cache_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);
char *ngx_http_file_cache_valid_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf);


extern ngx_str_t ngx_http_cache_status[];
# 43 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4


# 1 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/modules/ngx_http_ssi_filter_module.h" 1 3 4
# 9 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/modules/ngx_http_ssi_filter_module.h" 3 4
#define _NGX_HTTP_SSI_FILTER_H_INCLUDED_ 







#define NGX_HTTP_SSI_MAX_PARAMS 16

#define NGX_HTTP_SSI_COMMAND_LEN 32
#define NGX_HTTP_SSI_PARAM_LEN 32
#define NGX_HTTP_SSI_PARAMS_N 4


#define NGX_HTTP_SSI_COND_IF 1
#define NGX_HTTP_SSI_COND_ELSE 2


#define NGX_HTTP_SSI_NO_ENCODING 0
#define NGX_HTTP_SSI_URL_ENCODING 1
#define NGX_HTTP_SSI_ENTITY_ENCODING 2


typedef struct {
    ngx_hash_t hash;
    ngx_hash_keys_arrays_t commands;
} ngx_http_ssi_main_conf_t;


typedef struct {
    ngx_buf_t *buf;

    u_char *pos;
    u_char *copy_start;
    u_char *copy_end;

    ngx_uint_t key;
    ngx_str_t command;
    ngx_array_t params;
    ngx_table_elt_t *param;
    ngx_table_elt_t params_array[4];

    ngx_chain_t *in;
    ngx_chain_t *out;
    ngx_chain_t **last_out;
    ngx_chain_t *busy;
    ngx_chain_t *free;

    ngx_uint_t state;
    ngx_uint_t saved_state;
    size_t saved;
    size_t looked;

    size_t value_len;

    ngx_list_t *variables;
    ngx_array_t *blocks;


    ngx_uint_t ncaptures;
    int *captures;
    u_char *captures_data;


    unsigned conditional:2;
    unsigned encoding:2;
    unsigned block:1;
    unsigned output:1;
    unsigned output_chosen:1;

    ngx_http_request_t *wait;
    void *value_buf;
    ngx_str_t timefmt;
    ngx_str_t errmsg;
} ngx_http_ssi_ctx_t;


typedef ngx_int_t (*ngx_http_ssi_command_pt) (ngx_http_request_t *r,
    ngx_http_ssi_ctx_t *ctx, ngx_str_t **);


typedef struct {
    ngx_str_t name;
    ngx_uint_t index;

    unsigned mandatory:1;
    unsigned multiple:1;
} ngx_http_ssi_param_t;


typedef struct {
    ngx_str_t name;
    ngx_http_ssi_command_pt handler;
    ngx_http_ssi_param_t *params;

    unsigned conditional:2;
    unsigned block:1;
    unsigned flush:1;
} ngx_http_ssi_command_t;


extern ngx_module_t ngx_http_ssi_filter_module;
# 46 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 2 3 4






struct ngx_http_log_ctx_s {
    ngx_connection_t *connection;
    ngx_http_request_t *request;
    ngx_http_request_t *current_request;
};


struct ngx_http_chunked_s {
    ngx_uint_t state;
    off_t size;
    off_t length;
};


typedef struct {
    ngx_uint_t http_version;
    ngx_uint_t code;
    ngx_uint_t count;
    u_char *start;
    u_char *end;
} ngx_http_status_t;


#define ngx_http_get_module_ctx(r,module) (r)->ctx[module.ctx_index]
#define ngx_http_set_ctx(r,c,module) r->ctx[module.ctx_index] = c;


ngx_int_t ngx_http_add_location(ngx_conf_t *cf, ngx_queue_t **locations,
    ngx_http_core_loc_conf_t *clcf);
ngx_int_t ngx_http_add_listen(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
    ngx_http_listen_opt_t *lsopt);


void ngx_http_init_connection(ngx_connection_t *c);
void ngx_http_close_connection(ngx_connection_t *c);
# 96 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 3 4
ngx_int_t ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b);
ngx_int_t ngx_http_parse_uri(ngx_http_request_t *r);
ngx_int_t ngx_http_parse_complex_uri(ngx_http_request_t *r,
    ngx_uint_t merge_slashes);
ngx_int_t ngx_http_parse_status_line(ngx_http_request_t *r, ngx_buf_t *b,
    ngx_http_status_t *status);
ngx_int_t ngx_http_parse_unsafe_uri(ngx_http_request_t *r, ngx_str_t *uri,
    ngx_str_t *args, ngx_uint_t *flags);
ngx_int_t ngx_http_parse_header_line(ngx_http_request_t *r, ngx_buf_t *b,
    ngx_uint_t allow_underscores);
ngx_int_t ngx_http_parse_multi_header_lines(ngx_array_t *headers,
    ngx_str_t *name, ngx_str_t *value);
ngx_int_t ngx_http_parse_set_cookie_lines(ngx_array_t *headers,
    ngx_str_t *name, ngx_str_t *value);
ngx_int_t ngx_http_arg(ngx_http_request_t *r, u_char *name, size_t len,
    ngx_str_t *value);
void ngx_http_split_args(ngx_http_request_t *r, ngx_str_t *uri,
    ngx_str_t *args);
ngx_int_t ngx_http_parse_chunked(ngx_http_request_t *r, ngx_buf_t *b,
    ngx_http_chunked_t *ctx);


ngx_http_request_t *ngx_http_create_request(ngx_connection_t *c);
ngx_int_t ngx_http_process_request_uri(ngx_http_request_t *r);
ngx_int_t ngx_http_process_request_header(ngx_http_request_t *r);
void ngx_http_process_request(ngx_http_request_t *r);
void ngx_http_update_location_config(ngx_http_request_t *r);
void ngx_http_handler(ngx_http_request_t *r);
void ngx_http_run_posted_requests(ngx_connection_t *c);
ngx_int_t ngx_http_post_request(ngx_http_request_t *r,
    ngx_http_posted_request_t *pr);
void ngx_http_finalize_request(ngx_http_request_t *r, ngx_int_t rc);
void ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc);

void ngx_http_empty_handler(ngx_event_t *wev);
void ngx_http_request_empty_handler(ngx_http_request_t *r);


#define NGX_HTTP_LAST 1
#define NGX_HTTP_FLUSH 2

ngx_int_t ngx_http_send_special(ngx_http_request_t *r, ngx_uint_t flags);


ngx_int_t ngx_http_read_client_request_body(ngx_http_request_t *r,
    ngx_http_client_body_handler_pt post_handler);
ngx_int_t ngx_http_read_unbuffered_request_body(ngx_http_request_t *r);

ngx_int_t ngx_http_send_header(ngx_http_request_t *r);
ngx_int_t ngx_http_special_response_handler(ngx_http_request_t *r,
    ngx_int_t error);
ngx_int_t ngx_http_filter_finalize_request(ngx_http_request_t *r,
    ngx_module_t *m, ngx_int_t error);
void ngx_http_clean_header(ngx_http_request_t *r);


ngx_int_t ngx_http_discard_request_body(ngx_http_request_t *r);
void ngx_http_discarded_request_body_handler(ngx_http_request_t *r);
void ngx_http_block_reading(ngx_http_request_t *r);
void ngx_http_test_reading(ngx_http_request_t *r);


char *ngx_http_types_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
char *ngx_http_merge_types(ngx_conf_t *cf, ngx_array_t **keys,
    ngx_hash_t *types_hash, ngx_array_t **prev_keys,
    ngx_hash_t *prev_types_hash, ngx_str_t *default_types);
ngx_int_t ngx_http_set_default_types(ngx_conf_t *cf, ngx_array_t **types,
    ngx_str_t *default_type);
# 178 "/Users/washi38/University/Labo/c_project_analysis/project/nginx/src/http/ngx_http.h" 3 4
extern ngx_module_t ngx_http_module;

extern ngx_str_t ngx_http_html_default_types[];


extern ngx_http_output_header_filter_pt ngx_http_top_header_filter;
extern ngx_http_output_body_filter_pt ngx_http_top_body_filter;
extern ngx_http_request_body_filter_pt ngx_http_top_request_body_filter;
# 15 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h" 2


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/EXTERN.h" 1 3 4
# 17 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/EXTERN.h" 3 4
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST
# 47 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/EXTERN.h" 3 4
#define EXT extern
#define dEXT 
#define EXTCONST extern const
#define dEXTCONST const



#undef INIT
#define INIT(x) 

#undef DOINIT
# 18 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h" 2
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 1 3 4
# 12 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define H_PERL 1
# 28 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 1 3 4
# 18 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define _config_h_ 




#define LOC_SED "/usr/bin/sed"





#define HAS_ALARM 





#define HAS_CBRT 





#define HAS_CHOWN 





#define HAS_CHROOT 
# 59 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_CRYPT 





#define HAS_CTERMID 
# 77 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_DIFFTIME 






#define HAS_DLERROR 





#define HAS_DUP2 





#define HAS_FCHMOD 





#define HAS_FCHOWN 





#define HAS_FCNTL 





#define HAS_FGETPOS 





#define HAS_FLOCK 





#define HAS_FORK 





#define HAS_FSETPOS 







#define HAS_GETTIMEOFDAY 

#define Timeval struct timeval







#define HAS_GETGROUPS 





#define HAS_GETLOGIN 






#define HAS_GETPGID 
# 175 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETPPID 





#define HAS_GETPRIORITY 






#define HAS_INET_ATON 






#define HAS_KILLPG 





#define HAS_LINK 





#define HAS_LOCALECONV 





#define HAS_LOCKF 





#define HAS_LSTAT 





#define HAS_MBLEN 





#define HAS_MBSTOWCS 





#define HAS_MBTOWC 






#define HAS_MKDIR 







#define HAS_MKFIFO 





#define HAS_MKTIME 





#define HAS_MSG 





#define HAS_MSYNC 





#define HAS_MUNMAP 





#define HAS_NICE 
# 294 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_PATHCONF 
#define HAS_FPATHCONF 





#define HAS_PAUSE 





#define HAS_PIPE 
# 321 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_READDIR 





#define HAS_SEEKDIR 





#define HAS_TELLDIR 





#define HAS_REWINDDIR 





#define HAS_READLINK 






#define HAS_REGCOMP 






#define HAS_RENAME 






#define HAS_RMDIR 






#define HAS_SELECT 





#define HAS_SEM 





#define HAS_SETEGID 





#define HAS_SETEUID 






#define HAS_SETGROUPS 






#define HAS_SETLINEBUF 





#define HAS_SETPGID 
# 423 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SETPRIORITY 
# 435 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SETREGID 
# 448 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SETREUID 






#define HAS_SETRGID 





#define HAS_SETRUID 





#define HAS_SETSID 





#define HAS_STAT 





#define HAS_STRCOLL 





#define HAS_STRTOD 





#define HAS_STRTOL 





#define HAS_STRXFRM 





#define HAS_SYMLINK 
# 515 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SYSCONF 





#define HAS_SYSTEM 





#define HAS_TCGETPGRP 





#define HAS_TCSETPGRP 





#define HAS_TRUNCATE 





#define HAS_TZNAME 





#define HAS_UMASK 





#define HAS_USLEEP 




#define HAS_WAIT4 





#define HAS_WAITPID 





#define HAS_WCSTOMBS 





#define HAS_WCTOMB 
# 592 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Groups_t gid_t






#define I_ARPA_INET 
# 616 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_DLFCN 
# 627 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_GDBM 





#define I_LOCALE 





#define I_NETINET_IN 





#define I_SYS_DIR 





#define I_SYS_FILE 
# 661 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_SYS_IOCTL 
#define I_SYS_SOCKIO 
# 674 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_SYS_PARAM 






#define I_SYS_POLL 





#define I_SYS_RESOURCE 





#define I_SYS_SELECT 





#define I_SYS_STAT 





#define I_SYS_TIMES 





#define I_SYS_TYPES 





#define I_SYS_UN 





#define I_SYS_WAIT 





#define I_UNISTD 





#define I_UTIME 
# 747 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define STDCHAR char
# 761 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define INTSIZE 4
#define LONGSIZE 8
#define SHORTSIZE 2
# 772 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define MULTIARCH 







#define HAS_QUAD 

#define Quad_t long
#define Uquad_t unsigned long
#define QUADKIND 2
#define QUAD_IS_INT 1
#define QUAD_IS_LONG 2
#define QUAD_IS_LONG_LONG 3
#define QUAD_IS_INT64_T 4
#define QUAD_IS___INT64 5
# 822 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define MEM_ALIGNBYTES 8
# 837 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define BYTEORDER 0x12345678
# 859 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define CHARBITS 8
# 879 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define CASTNEGFLOAT 
#define CASTFLAGS 0
# 892 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FD_SET 
# 909 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Gconvert(x,n,t,b) sprintf((b),"%.*g",(n),(x))






#define HAS_GETPAGESIZE 
# 932 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ISASCII 






#define HAS_LCHOWN 





#define HAS_OPEN3 





#define HAS_SIGACTION 
# 981 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SIGINFO_SI_ERRNO 
#define HAS_SIGINFO_SI_PID 
#define HAS_SIGINFO_SI_UID 
#define HAS_SIGINFO_SI_ADDR 
#define HAS_SIGINFO_SI_STATUS 
#define HAS_SIGINFO_SI_BAND 
#define HAS_SIGINFO_SI_VALUE 
# 1009 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SIGSETJMP 

#define Sigjmp_buf sigjmp_buf
#define Sigsetjmp(buf,save_mask) sigsetjmp((buf),(save_mask))
#define Siglongjmp(buf,retval) siglongjmp((buf),(retval))
# 1038 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_STATIC_INLINE 
#define PERL_STATIC_INLINE static __inline__
# 1115 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define DOUBLESIZE 8
# 1137 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_TIME 
#define I_SYS_TIME 

#define HAS_TM_TM_ZONE 
#define HAS_TM_TM_GMTOFF 
# 1165 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define VAL_O_NONBLOCK O_NONBLOCK
#define VAL_EAGAIN EAGAIN
#define RD_NODATA -1
#define EOF_NONBLOCK 







#define PTRSIZE 8
# 1198 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Drand01() Perl_drand48()
#define Rand_seed_t U32
#define seedDrand01(x) Perl_drand48_init((Rand_seed_t)x)
#define RANDBITS 48
# 1211 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SSize_t ssize_t
# 1232 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ARCHLIB "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level"
#define ARCHLIB_EXP "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level"
# 1247 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define BIN "/usr/local/Cellar/perl/5.34.0/bin"
#define BIN_EXP "/usr/local/Cellar/perl/5.34.0/bin"
#define PERL_RELOCATABLE_INC "undef"
# 1274 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define PERL_OTHERLIBDIRS "/usr/local/lib/perl5/site_perl/5.34.0"
# 1286 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define PRIVLIB "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0"
#define PRIVLIB_EXP "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0"
# 1304 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SITEARCH "/usr/local/Cellar/perl/5.34.0/lib/perl5/site_perl/5.34.0/darwin-thread-multi-2level"
#define SITEARCH_EXP "/usr/local/Cellar/perl/5.34.0/lib/perl5/site_perl/5.34.0/darwin-thread-multi-2level"
# 1327 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SITELIB "/usr/local/Cellar/perl/5.34.0/lib/perl5/site_perl/5.34.0"
#define SITELIB_EXP "/usr/local/Cellar/perl/5.34.0/lib/perl5/site_perl/5.34.0"
#define SITELIB_STEM "/usr/local/Cellar/perl/5.34.0/lib/perl5/site_perl"
# 1371 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define OSNAME "darwin"
#define OSVERS "20.4.0"
# 1385 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define PeRl_CaTiFy(a,b) a ## b
#define PeRl_StGiFy(a) #a
#define CAT2(a,b) PeRl_CaTiFy(a,b)
#define StGiFy(a) PeRl_StGiFy(a)
#define STRINGIFY(a) PeRl_StGiFy(a)
# 1420 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define CPPSTDIN "cc  -E"
#define CPPMINUS "-"
#define CPPRUN "cc  -E"
#define CPPLAST "-"






#define HAS_ACCESS 
# 1463 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HASATTRIBUTE_DEPRECATED 
#define HASATTRIBUTE_FORMAT 
#define PRINTF_FORMAT_NULL_OK 
#define HASATTRIBUTE_NORETURN 
#define HASATTRIBUTE_MALLOC 
#define HASATTRIBUTE_NONNULL 
#define HASATTRIBUTE_PURE 
#define HASATTRIBUTE_UNUSED 
#define HASATTRIBUTE_WARN_UNUSED_RESULT 
#define HASATTRIBUTE_ALWAYS_INLINE 






#define HAS_BACKTRACE 







#define HAS_CSH 

#define CSH "/bin/csh"







#define HAS_DLADDR 
# 1523 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ENDGRENT 





#define HAS_ENDHOSTENT 





#define HAS_ENDNETENT 





#define HAS_ENDPROTOENT 





#define HAS_ENDPWENT 





#define HAS_ENDSERVENT 





#define FLEXFILENAMES 





#define HAS_GETGRENT 





#define HAS_GETHOSTBYADDR 





#define HAS_GETHOSTBYNAME 





#define HAS_GETHOSTENT 
# 1607 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETHOSTNAME 
#define HAS_UNAME 
# 1618 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETNETBYADDR 





#define HAS_GETNETBYNAME 





#define HAS_GETNETENT 





#define HAS_GETPROTOENT 
# 1646 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETPGRP 
# 1657 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETPROTOBYNAME 
#define HAS_GETPROTOBYNUMBER 






#define HAS_GETPWENT 





#define HAS_GETSERVENT 
# 1681 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETSERVBYNAME 
#define HAS_GETSERVBYPORT 
# 1704 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_HTONL 
#define HAS_HTONS 
#define HAS_NTOHL 
#define HAS_NTOHS 
# 1765 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_LDEXPL 
#define HAS_LONG_DOUBLE 

#define LONG_DOUBLESIZE 16
#define LONG_DOUBLEKIND 3
#define LONG_DOUBLE_IS_DOUBLE 0
#define LONG_DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN 1
#define LONG_DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN 2
#define LONG_DOUBLE_IS_X86_80_BIT_LITTLE_ENDIAN 3
#define LONG_DOUBLE_IS_X86_80_BIT_BIG_ENDIAN 4
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE 5
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE 6
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_BE 7
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_LE 8
#define LONG_DOUBLE_IS_VAX_H_FLOAT 9
#define LONG_DOUBLE_IS_UNKNOWN_FORMAT -1
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LITTLE_ENDIAN LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_LE_LE
#define LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BIG_ENDIAN LONG_DOUBLE_IS_DOUBLEDOUBLE_128_BIT_BE_BE
#define LONG_DOUBLE_STYLE_IEEE 
#undef LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE
#define LONG_DOUBLE_STYLE_IEEE_EXTENDED 
#undef LONG_DOUBLE_STYLE_IEEE_STD
#undef LONG_DOUBLE_STYLE_VAX
# 1798 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_LONG_LONG 

#define LONGLONGSIZE 8







#define HAS_MKSTEMP 
# 1819 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_MMAP 
#define Mmap_t void *





#define HAS_SETGRENT 





#define HAS_SETHOSTENT 





#define HAS_SETNETENT 





#define HAS_SETPROTOENT 
# 1855 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SETPGRP 






#define HAS_SETPWENT 





#define HAS_SETSERVENT 






#define HAS_SETVBUF 





#define HAS_SHM 
# 1894 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Shmat_t void *
#define HAS_SHMAT_PROTOTYPE 
# 1938 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SOCKET 
#define HAS_SOCKETPAIR 
#define HAS_SOCKADDR_SA_LEN 
#define HAS_SOCKADDR_IN6 
#define HAS_SOCKADDR_STORAGE 
#define HAS_SIN6_SCOPE_ID 
#define HAS_IP_MREQ 
#define HAS_IP_MREQ_SOURCE 
#define HAS_IPV6_MREQ 







#define USE_STAT_BLOCKS 







#define HAS_SYS_ERRLIST 





#define HAS_STRTOUL 
# 1988 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_UNION_SEMUN 
#define USE_SEMCTL_SEMUN 
#define USE_SEMCTL_SEMID_DS 




#define HAS_VFORK 
# 2009 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Signal_t void
# 2027 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_DIRENT 
#define DIRNAMLEN 
#define Direntry_t struct dirent





#define I_EXECINFO 
# 2045 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_GRP 
#define GRPASSWD 
# 2080 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_NDBM 

#define I_GDBM_NDBM 
#define NDBM_H_USES_PROTOTYPES 

#define GDBM_NDBM_H_USES_PROTOTYPES 





#define I_NETDB 
# 2135 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_PWD 


#define PWCHANGE 
#define PWCLASS 
#define PWEXPIRE 

#define PWGECOS 
#define PWPASSWD 





#define I_SYSUIO 
# 2168 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_TERMIOS 
# 2178 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Malloc_t void *
#define Free_t void




#define PERL_MALLOC_WRAP 
# 2198 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SH_PATH "/bin/sh"
# 2236 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SIG_NAME "ZERO", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "INFO", "USR1", "USR2", "IOT", 0
#define SIG_NUM 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 0
#define SIG_SIZE 33
# 2249 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define PERL_TARGETARCH ""
# 2269 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ATOLL 
# 2287 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ACOSH 
# 2299 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ASINH 





#define HAS_ATANH 
# 2314 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_BUILTIN_EXPECT 
#define HAS_BUILTIN_CHOOSE_EXPR 
# 2329 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_BUILTIN_ADD_OVERFLOW 
#define HAS_BUILTIN_SUB_OVERFLOW 
#define HAS_BUILTIN_MUL_OVERFLOW 




#define HAS_C99_VARIADIC_MACROS 
# 2366 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_STRUCT_CMSGHDR 





#define HAS_COPYSIGN 





#define HAS_COPYSIGNL 
# 2404 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_DIRFD 
# 2424 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ERF 





#define HAS_ERFC 





#define HAS_EXP2 





#define HAS_EXPM1 
# 2454 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FCHDIR 






#define FCNTL_CAN_LOCK 
# 2474 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FDIM 






#define HAS_FEGETROUND 
# 2502 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FLOCK_PROTO 





#define HAS_FMA 





#define HAS_FMAX 





#define HAS_FMIN 
# 2588 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FPCLASSIFY 
# 2625 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FREXPL 
# 2648 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_FCHMODAT 
#define HAS_LINKAT 
#define HAS_OPENAT 
#define HAS_RENAMEAT 
#define HAS_UNLINKAT 





#define HAS_FSEEKO 





#define HAS_FSTATFS 






#define HAS_FSYNC 





#define HAS_FTELLO 





#define HAS_FUTIMES 






#define HAS_GAI_STRERROR 





#define HAS_GETADDRINFO 





#define HAS_GETCWD 
# 2714 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETFSSTAT 





#define HAS_GETITIMER 
# 2738 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETNAMEINFO 
# 2762 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_HYPOT 





#define HAS_ILOGB 





#define HAS_ILOGBL 





#define HAS_INETNTOP 





#define HAS_INETPTON 






#define HAS_INT64_T 





#define HAS_ISBLANK 





#define HAS_ISFINITE 
# 2818 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ISINF 
# 2830 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ISLESS 





#define HAS_ISNAN 
# 2848 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ISNORMAL 
# 2860 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_J0 






#define HAS_LC_MONETARY_2008 







#define HAS_LDBL_DIG 






#define HAS_LGAMMA 






#define HAS_LGAMMA_R 
# 2902 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_LLRINT 






#define HAS_LLRINTL 





#define HAS_LLROUND 






#define HAS_LLROUNDL 





#define HAS_LOG1P 





#define HAS_LOG2 





#define HAS_LOGB 






#define HAS_LRINT 






#define HAS_LRINTL 





#define HAS_LROUND 






#define HAS_LROUNDL 





#define HAS_MADVISE 





#define HAS_MALLOC_SIZE 





#define HAS_MALLOC_GOOD_SIZE 
# 2995 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_MEMMEM 
# 3008 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_MKDTEMP 
# 3022 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_MKSTEMPS 
# 3034 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_MODFL 
#define HAS_MODFL_PROTO 





#define HAS_MPROTECT 





#define HAS_STRUCT_MSGHDR 





#define HAS_NAN 





#define HAS_NANOSLEEP 






#define HAS_NEARBYINT 
# 3093 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_NEWLOCALE 
#define HAS_FREELOCALE 
#define HAS_USELOCALE 
#define HAS_DUPLOCALE 
#define HAS_QUERYLOCALE 
#define I_XLOCALE 






#define HAS_NEXTAFTER 






#define HAS_NEXTTOWARD 






#define HAS_NL_LANGINFO 
# 3164 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_PTHREAD_ATTR_SETSCOPE 




#define HAS_PTRDIFF_T 






#define HAS_READV 





#define HAS_RECVMSG 





#define HAS_REMAINDER 





#define HAS_REMQUO 






#define HAS_RINT 





#define HAS_ROUND 
# 3216 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SBRK_PROTO 






#define HAS_SCALBN 





#define HAS_SCALBNL 





#define HAS_SENDMSG 





#define HAS_SETITIMER 
# 3251 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SETLOCALE 
# 3268 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SIGNBIT 






#define HAS_SIGPROCMASK 
# 3293 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SNPRINTF 
#define HAS_VSNPRINTF 





#define HAS_SOCKATMARK 







#define HAS_SOCKATMARK_PROTO 
# 3320 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SQRTL 
# 3347 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_STRUCT_STATFS_F_FLAGS 





#define HAS_STRUCT_STATFS 





#define HAS_FSTATVFS 
# 3372 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_STRFTIME 





#define HAS_STRLCAT 





#define HAS_STRLCPY 





#define HAS_STRNLEN 





#define HAS_STRTOLD 





#define HAS_STRTOLL 





#define HAS_STRTOQ 





#define HAS_STRTOULL 





#define HAS_STRTOUQ 
# 3429 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_SYSCALL_PROTO 







#define HAS_TELLDIR_PROTO 





#define HAS_TGAMMA 
# 3480 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_TIMEGM 





#define HAS_TOWLOWER 





#define HAS_TOWUPPER 





#define HAS_TRUNC 





#define HAS_TRUNCL 






#define U32_ALIGNMENT_REQUIRED 






#define HAS_UALARM 
# 3531 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_UNSETENV 







#define HAS_USLEEP_PROTO 
# 3551 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_WCSCMP 





#define HAS_WCSXFRM 





#define HAS_WRITEV 





#define DEFAULT_INC_EXCLUDES_DOT 





#define USE_DYNAMIC_LOADING 
# 3590 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define FFLUSH_NULL 
# 3629 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define DB_Hash_t u_int32_t
#define DB_Prefix_t size_t
#define DB_VERSION_MAJOR_CFG 18
#define DB_VERSION_MINOR_CFG 1
#define DB_VERSION_PATCH_CFG 40





#define I_FENV 
# 3663 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_INTTYPES 





#define I_LANGINFO 
# 3681 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_MALLOCMALLOC 
# 3693 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_NETINET_TCP 
# 3729 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_STDBOOL 





#define I_STDINT 
# 3747 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_SYSLOG 
# 3759 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_SYS_MOUNT 
# 3770 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_SYS_STATVFS 





#define I_SYSUTSNAME 
# 3794 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_WCHAR 




#define I_WCTYPE 
# 3817 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define DOUBLEINFBYTES 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f
#define DOUBLENANBYTES 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff
#define LONGDBLINFBYTES 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
#define LONGDBLNANBYTES 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
# 3888 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define DOUBLEKIND 3
#define DOUBLE_IS_IEEE_754_32_BIT_LITTLE_ENDIAN 1
#define DOUBLE_IS_IEEE_754_32_BIT_BIG_ENDIAN 2
#define DOUBLE_IS_IEEE_754_64_BIT_LITTLE_ENDIAN 3
#define DOUBLE_IS_IEEE_754_64_BIT_BIG_ENDIAN 4
#define DOUBLE_IS_IEEE_754_128_BIT_LITTLE_ENDIAN 5
#define DOUBLE_IS_IEEE_754_128_BIT_BIG_ENDIAN 6
#define DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_LE_BE 7
#define DOUBLE_IS_IEEE_754_64_BIT_MIXED_ENDIAN_BE_LE 8
#define DOUBLE_IS_VAX_F_FLOAT 9
#define DOUBLE_IS_VAX_D_FLOAT 10
#define DOUBLE_IS_VAX_G_FLOAT 11
#define DOUBLE_IS_IBM_SINGLE_32_BIT 12
#define DOUBLE_IS_IBM_DOUBLE_64_BIT 13
#define DOUBLE_IS_CRAY_SINGLE_64_BIT 14
#define DOUBLE_IS_UNKNOWN_FORMAT -1
#define PERL_PRIfldbl "Lf"
#define PERL_PRIgldbl "Lg"
#define PERL_PRIeldbl "Le"
#define PERL_SCNfldbl "Lf"
#define DOUBLE_HAS_INF 
#define DOUBLE_HAS_NAN 
#define DOUBLE_HAS_NEGATIVE_ZERO 
#define DOUBLE_HAS_SUBNORMALS 
#undef DOUBLE_STYLE_CRAY
#undef DOUBLE_STYLE_IBM
#define DOUBLE_STYLE_IEEE 
#undef DOUBLE_STYLE_VAX
# 3937 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define DOUBLEMANTBITS 52
#define LONGDBLMANTBITS 64
#define NVMANTBITS 52
# 3950 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define NEED_VA_COPY 
# 4041 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define IVTYPE long
#define UVTYPE unsigned long
#define I8TYPE signed char
#define U8TYPE unsigned char
#define I16TYPE short
#define U16TYPE unsigned short
#define I32TYPE int
#define U32TYPE unsigned int

#define I64TYPE long
#define U64TYPE unsigned long

#define NVTYPE double
#define IVSIZE 8
#define UVSIZE 8
#define I8SIZE 1
#define U8SIZE 1
#define I16SIZE 2
#define U16SIZE 2
#define I32SIZE 4
#define U32SIZE 4

#define I64SIZE 8
#define U64SIZE 8

#define NVSIZE 8
#undef NV_PRESERVES_UV
#define NV_PRESERVES_UV_BITS 53
#define NV_OVERFLOWS_INTEGERS_AT (256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0)
#define NV_ZERO_IS_ALLBITS_ZERO 
# 4117 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define IVdf "ld"
#define UVuf "lu"
#define UVof "lo"
#define UVxf "lx"
#define UVXf "lX"
#define NVef "e"
#define NVff "f"
#define NVgf "g"
# 4133 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SELECT_MIN_BITS 32
# 4142 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ST_INO_SIGN 1
#define ST_INO_SIZE 8






#define STARTPERL "#!/usr/local/opt/perl/bin/perl"
# 4181 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GMTIME_MAX 67768036191676799
#define GMTIME_MIN -62167219200
#define LOCALTIME_MAX 67768036191676799
#define LOCALTIME_MIN -62167219125
# 4205 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define USE_64_BIT_INT 


#define USE_64_BIT_ALL 
# 4250 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define USE_LARGE_FILES 
# 4274 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define MULTIPLICITY 







#define USE_NSGETEXECUTABLEPATH 







#define USE_PERLIO 
# 4315 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_DRAND48_PROTO 







#define HAS_GETHOST_PROTOS 







#define HAS_GETNET_PROTOS 







#define HAS_GETPROTO_PROTOS 







#define HAS_GETSERV_PROTOS 







#define HAS_LSEEK_PROTO 
# 4373 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Netdb_host_t char *
#define Netdb_hlen_t size_t
#define Netdb_name_t const char *
#define Netdb_net_t in_addr_t







#define Select_fd_set_t fd_set *





#define Sock_size_t socklen_t







#define ARCHNAME "darwin-thread-multi-2level"
# 4410 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_ASCTIME_R 
#define ASCTIME_R_PROTO REENTRANT_PROTO_B_SB
# 4424 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define CRYPT_R_PROTO 0
# 4436 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_CTERMID_R 
#define CTERMID_R_PROTO REENTRANT_PROTO_B_B
# 4449 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_CTIME_R 
#define CTIME_R_PROTO REENTRANT_PROTO_B_SB
# 4463 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define DRAND48_R_PROTO 0
# 4476 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ENDGRENT_R_PROTO 0
# 4489 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ENDHOSTENT_R_PROTO 0
# 4502 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ENDNETENT_R_PROTO 0
# 4515 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ENDPROTOENT_R_PROTO 0
# 4528 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ENDPWENT_R_PROTO 0
# 4541 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define ENDSERVENT_R_PROTO 0
# 4554 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETENV_PRESERVES_OTHER_THREAD 
# 4567 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETGRENT_R_PROTO 0
# 4579 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETGRGID_R 
#define GETGRGID_R_PROTO REENTRANT_PROTO_I_TSBWR
# 4592 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETGRNAM_R 
#define GETGRNAM_R_PROTO REENTRANT_PROTO_I_CSBWR
# 4606 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETHOSTBYADDR_R_PROTO 0
# 4619 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETHOSTBYNAME_R_PROTO 0
# 4632 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETHOSTENT_R_PROTO 0
# 4644 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETLOGIN_R 
#define GETLOGIN_R_PROTO REENTRANT_PROTO_I_BW
# 4658 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETNETBYADDR_R_PROTO 0
# 4671 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETNETBYNAME_R_PROTO 0
# 4684 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETNETENT_R_PROTO 0
# 4697 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETPROTOBYNAME_R_PROTO 0
# 4710 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETPROTOBYNUMBER_R_PROTO 0
# 4723 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETPROTOENT_R_PROTO 0
# 4736 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETPWENT_R_PROTO 0
# 4748 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETPWNAM_R 
#define GETPWNAM_R_PROTO REENTRANT_PROTO_I_CSBWR
# 4761 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GETPWUID_R 
#define GETPWUID_R_PROTO REENTRANT_PROTO_I_TSBWR
# 4775 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETSERVBYNAME_R_PROTO 0
# 4788 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETSERVBYPORT_R_PROTO 0
# 4801 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETSERVENT_R_PROTO 0
# 4814 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define GETSPNAM_R_PROTO 0
# 4826 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_GMTIME_R 
#define GMTIME_R_PROTO REENTRANT_PROTO_S_TS





#define HAS_LOCALECONV_L 
# 4849 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define L_R_TZSET 
# 4861 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_LOCALTIME_R 
#define LOCALTIME_R_PROTO REENTRANT_PROTO_S_TS





#define HAS_MBRLEN 





#define HAS_MBRTOWC 
# 4896 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_PTHREAD_ATFORK 
# 4914 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SCHED_YIELD sched_yield()
#define HAS_SCHED_YIELD 
# 4928 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define RANDOM_R_PROTO 0
# 4941 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define READDIR64_R_PROTO 0
# 4953 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_READDIR_R 
#define READDIR_R_PROTO REENTRANT_PROTO_I_TSR
# 4967 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETGRENT_R_PROTO 0
# 4980 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETHOSTENT_R_PROTO 0
# 4993 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETLOCALE_R_PROTO 0
# 5006 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETNETENT_R_PROTO 0
# 5019 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETPROTOENT_R_PROTO 0
# 5032 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETPWENT_R_PROTO 0
# 5045 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SETSERVENT_R_PROTO 0
# 5058 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SRAND48_R_PROTO 0
# 5071 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define SRANDOM_R_PROTO 0
# 5083 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_STRERROR_R 
#define STRERROR_R_PROTO REENTRANT_PROTO_I_IBW





#define HAS_STRTOD_L 





#define HAS_STRTOLD_L 
# 5109 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define TMPNAM_R_PROTO 0
# 5121 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_TTYNAME_R 
#define TTYNAME_R_PROTO REENTRANT_PROTO_I_IBW





#define HAS_WCRTOMB 
# 5140 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define I_PTHREAD 
# 5161 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define USE_ITHREADS 
#define USE_THREADS 

#define USE_REENTRANT_API 
# 5174 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define HAS_TIME 
#define Time_t time_t






#define HAS_TIMES 






#define Fpos_t fpos_t




#define Gid_t_f "u"





#define Gid_t_sign 1




#define Gid_t_size 4
# 5214 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Gid_t gid_t
# 5227 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/config.h" 3 4
#define Off_t off_t
#define LSEEKSIZE 8
#define Off_t_size 8







#define Mode_t mode_t






#define Pid_t pid_t




#define Size_t_size 8







#define Size_t size_t




#define Uid_t_f "u"





#define Uid_t_sign 1




#define Uid_t_size 4






#define Uid_t uid_t
# 29 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 37 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define _pDEPTH 
#define _aDEPTH 
# 49 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define HAS_C99 1
# 67 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_IMPLICIT_CONTEXT 
# 113 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#undef START_EXTERN_C
#undef END_EXTERN_C
#undef EXTERN_C





#define START_EXTERN_C 
#define END_EXTERN_C 
#define EXTERN_C extern
# 153 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define tTHX PerlInterpreter*
#define pTHX tTHX my_perl PERL_UNUSED_DECL
#define aTHX my_perl
#define aTHXa(a) aTHX = (tTHX)a
#define dTHXa(a) pTHX = (tTHX)a
#define dTHX pTHX = PERL_GET_THX
#define pTHX_ pTHX,
#define aTHX_ aTHX,
#define pTHX_1 2
#define pTHX_2 3
#define pTHX_3 4
#define pTHX_4 5
#define pTHX_5 6
#define pTHX_6 7
#define pTHX_7 8
#define pTHX_8 9
#define pTHX_9 10
#define pTHX_12 13
# 181 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define dTHX_DEBUGGING dNOOP


#define STATIC static
# 200 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define CPERLscope(x) x
#define CPERLarg void
#define CPERLarg_ 
#define _CPERLarg 
#define PERL_OBJECT_THIS 
#define _PERL_OBJECT_THIS 
#define PERL_OBJECT_THIS_ 
#define CALL_FPTR(fptr) (*fptr)
#define MEMBER_TO_FPTR(name) name


#define CALLRUNOPS PL_runops

#define CALLREGCOMP(sv,flags) Perl_pregcomp(aTHX_ (sv),(flags))

#define CALLREGCOMP_ENG(prog,sv,flags) (prog)->comp(aTHX_ sv, flags)
#define CALLREGEXEC(prog,stringarg,strend,strbeg,minend,sv,data,flags) RX_ENGINE(prog)->exec(aTHX_ (prog),(stringarg),(strend), (strbeg),(minend),(sv),(data),(flags))


#define CALLREG_INTUIT_START(prog,sv,strbeg,strpos,strend,flags,data) RX_ENGINE(prog)->intuit(aTHX_ (prog), (sv), (strbeg), (strpos), (strend),(flags),(data))


#define CALLREG_INTUIT_STRING(prog) RX_ENGINE(prog)->checkstr(aTHX_ (prog))


#define CALLREGFREE(prog) Perl_pregfree(aTHX_ (prog))


#define CALLREGFREE_PVT(prog) if(prog && RX_ENGINE(prog)) RX_ENGINE(prog)->rxfree(aTHX_ (prog))


#define CALLREG_NUMBUF_FETCH(rx,paren,usesv) RX_ENGINE(rx)->numbered_buff_FETCH(aTHX_ (rx),(paren),(usesv))


#define CALLREG_NUMBUF_STORE(rx,paren,value) RX_ENGINE(rx)->numbered_buff_STORE(aTHX_ (rx),(paren),(value))


#define CALLREG_NUMBUF_LENGTH(rx,sv,paren) RX_ENGINE(rx)->numbered_buff_LENGTH(aTHX_ (rx),(sv),(paren))


#define CALLREG_NAMED_BUFF_FETCH(rx,key,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), (key), NULL, ((flags) | RXapif_FETCH))


#define CALLREG_NAMED_BUFF_STORE(rx,key,value,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), (key), (value), ((flags) | RXapif_STORE))


#define CALLREG_NAMED_BUFF_DELETE(rx,key,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx),(key), NULL, ((flags) | RXapif_DELETE))


#define CALLREG_NAMED_BUFF_CLEAR(rx,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, ((flags) | RXapif_CLEAR))


#define CALLREG_NAMED_BUFF_EXISTS(rx,key,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), (key), NULL, ((flags) | RXapif_EXISTS))


#define CALLREG_NAMED_BUFF_FIRSTKEY(rx,flags) RX_ENGINE(rx)->named_buff_iter(aTHX_ (rx), NULL, ((flags) | RXapif_FIRSTKEY))


#define CALLREG_NAMED_BUFF_NEXTKEY(rx,lastkey,flags) RX_ENGINE(rx)->named_buff_iter(aTHX_ (rx), (lastkey), ((flags) | RXapif_NEXTKEY))


#define CALLREG_NAMED_BUFF_SCALAR(rx,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, ((flags) | RXapif_SCALAR))


#define CALLREG_NAMED_BUFF_COUNT(rx) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, RXapif_REGNAMES_COUNT)


#define CALLREG_NAMED_BUFF_ALL(rx,flags) RX_ENGINE(rx)->named_buff(aTHX_ (rx), NULL, NULL, flags)


#define CALLREG_PACKAGE(rx) RX_ENGINE(rx)->qr_package(aTHX_ (rx))



#define CALLREGDUPE(prog,param) Perl_re_dup(aTHX_ (prog),(param))


#define CALLREGDUPE_PVT(prog,param) (prog ? RX_ENGINE(prog)->dupe(aTHX_ (prog),(param)) : (REGEXP *)NULL)






#define PERL_IS_GCC 1
# 304 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define HASATTRIBUTE_DEPRECATED 


#define HASATTRIBUTE_FORMAT 





#define HASATTRIBUTE_MALLOC 


#define HASATTRIBUTE_NONNULL 


#define HASATTRIBUTE_NORETURN 


#define HASATTRIBUTE_PURE 


#define HASATTRIBUTE_UNUSED 





#define HASATTRIBUTE_WARN_UNUSED_RESULT 



#define HASATTRIBUTE_ALWAYS_INLINE 





#define __attribute__deprecated__ __attribute__((deprecated))


#define __attribute__format__(x,y,z) __attribute__((format(x,y,z)))


#define __attribute__malloc__ __attribute__((__malloc__))


#define __attribute__nonnull__(a) __attribute__((nonnull(a)))


#define __attribute__noreturn__ __attribute__((noreturn))


#define __attribute__pure__ __attribute__((pure))


#define __attribute__unused__ __attribute__((unused))


#define __attribute__warn_unused_result__ __attribute__((warn_unused_result))




#define __attribute__always_inline__ __attribute__((always_inline))
# 402 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define __attribute__format__null_ok__(x,y,z) __attribute__format__(x,y,z)
# 438 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_UNUSED_DECL __attribute__unused__
# 465 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_UNUSED_ARG(x) ((void)sizeof(x))


#define PERL_UNUSED_VAR(x) ((void)sizeof(x))



#define PERL_UNUSED_CONTEXT PERL_UNUSED_ARG(my_perl)
# 526 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_UNUSED_RESULT(v) STMT_START { __typeof__(v) z = (v); (void)sizeof(z); } STMT_END
# 562 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define GCC_DIAG_PRAGMA(x) _Pragma (#x)

#define GCC_DIAG_IGNORE(x) _Pragma("GCC diagnostic push") GCC_DIAG_PRAGMA(GCC diagnostic ignored #x)

#define GCC_DIAG_RESTORE _Pragma("GCC diagnostic pop")




#define GCC_DIAG_IGNORE_DECL(x) GCC_DIAG_IGNORE(x) dNOOP
#define GCC_DIAG_RESTORE_DECL GCC_DIAG_RESTORE dNOOP
#define GCC_DIAG_IGNORE_STMT(x) GCC_DIAG_IGNORE(x) NOOP
#define GCC_DIAG_RESTORE_STMT GCC_DIAG_RESTORE NOOP







#define CLANG_DIAG_IGNORE(w) 
#define CLANG_DIAG_RESTORE 

#define CLANG_DIAG_IGNORE_DECL(x) CLANG_DIAG_IGNORE(x) dNOOP
#define CLANG_DIAG_RESTORE_DECL CLANG_DIAG_RESTORE dNOOP
#define CLANG_DIAG_IGNORE_STMT(x) CLANG_DIAG_IGNORE(x) NOOP
#define CLANG_DIAG_RESTORE_STMT CLANG_DIAG_RESTORE NOOP






#define MSVC_DIAG_IGNORE(x) 
#define MSVC_DIAG_RESTORE 

#define MSVC_DIAG_IGNORE_DECL(x) MSVC_DIAG_IGNORE(x) dNOOP
#define MSVC_DIAG_RESTORE_DECL MSVC_DIAG_RESTORE dNOOP
#define MSVC_DIAG_IGNORE_STMT(x) MSVC_DIAG_IGNORE(x) NOOP
#define MSVC_DIAG_RESTORE_STMT MSVC_DIAG_RESTORE NOOP
# 615 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NOOP (void)0
#define dNOOP struct Perl___notused_struct
# 656 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define dVAR dNOOP



#define dMY_CXT_SV dNOOP

#define pTHXo pTHX
#define pTHXo_ pTHX_
#define aTHXo aTHX
#define aTHXo_ aTHX_
#define dTHXo dTHX
#define dTHXoa(x) dTHXa(x)




#define pTHXx PerlInterpreter *my_perl
#define pTHXx_ pTHXx,
#define aTHXx my_perl
#define aTHXx_ aTHXx,
#define dTHXx dTHX
# 685 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define dTHXs dNOOP




#define PERL_USE_GCC_BRACE_GROUPS 
# 737 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STMT_START (void)(
#define STMT_END )
# 750 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define ASCIIish 
# 770 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define VOL volatile
#define CAN_PROTOTYPE 
#define _(args) args
#define I_LIMITS 
#define I_STDARG 
#define STANDARD_C 
# 815 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define TAINT (PL_tainted = PL_tainting)

#define TAINT_NOT (PL_tainted = FALSE)
#define TAINT_IF(c) if (UNLIKELY(c)) { TAINT; }
#define TAINT_ENV() if (UNLIKELY(PL_tainting)) { taint_env(); }

#define TAINT_PROPER(s) if (UNLIKELY(PL_tainting)) { taint_proper(NULL, s); }


#define TAINT_set(s) (PL_tainted = (s))
#define TAINT_get (cBOOL(UNLIKELY(PL_tainted)))
#define TAINTING_get (cBOOL(UNLIKELY(PL_tainting)))
#define TAINTING_set(s) (PL_tainting = (s))
#define TAINT_WARN_get (PL_taint_warn)



#define TAINT_WARN_set(s) (PL_taint_warn = (s))
# 852 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define BSD_SETPGRP(pid,pgrp) setpgid((pid), (pgrp))
# 866 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define BSD_GETPGRP(pid) getpgid((pid))
# 896 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 3 4
#define _WCHAR_H_ 







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_mbstate_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_mbstate_t.h" 3 4
#define _MBSTATE_T 

typedef __darwin_mbstate_t mbstate_t;
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 2 3 4
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_wctype.h" 1 3 4
# 40 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_wctype.h" 3 4
#define __WCTYPE_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/__wctype.h" 1 3 4
# 55 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/__wctype.h" 3 4
#define ___WCTYPE_H_ 






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_wctype_t.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_types/_wctype_t.h" 3 4
#define _WCTYPE_T 

typedef __darwin_wctype_t wctype_t;
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/__wctype.h" 2 3 4


#define WEOF __DARWIN_WEOF



#define __DARWIN_WCTYPE_TOP_inline __header_inline
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_wctype.h" 2 3 4







extern __inline __attribute__((__gnu_inline__)) int
iswalnum(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L|0x00000400L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswalpha(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswcntrl(wint_t _wc)
{
 return (__istype(_wc, 0x00000200L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswctype(wint_t _wc, wctype_t _charclass)
{
 return (__istype(_wc, _charclass));
}

extern __inline __attribute__((__gnu_inline__)) int
iswdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00000400L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswgraph(wint_t _wc)
{
 return (__istype(_wc, 0x00000800L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswlower(wint_t _wc)
{
 return (__istype(_wc, 0x00001000L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswprint(wint_t _wc)
{
 return (__istype(_wc, 0x00040000L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswpunct(wint_t _wc)
{
 return (__istype(_wc, 0x00002000L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswspace(wint_t _wc)
{
 return (__istype(_wc, 0x00004000L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswupper(wint_t _wc)
{
 return (__istype(_wc, 0x00008000L));
}

extern __inline __attribute__((__gnu_inline__)) int
iswxdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00010000L));
}

extern __inline __attribute__((__gnu_inline__)) wint_t
towlower(wint_t _wc)
{
        return (__tolower(_wc));
}

extern __inline __attribute__((__gnu_inline__)) wint_t
towupper(wint_t _wc)
{
        return (__toupper(_wc));
}
# 155 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_wctype.h" 3 4

wctype_t
 wctype(const char *);



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/__wctype.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/__wctype.h" 3 4
#define _XLOCALE___WCTYPE_H_ 







extern __inline __attribute__((__gnu_inline__)) int
iswalnum_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000100L|0x00000400L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswalpha_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000100L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswcntrl_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000200L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswctype_l(wint_t _wc, wctype_t _charclass, locale_t _l)
{
 return (__istype_l(_wc, _charclass, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswdigit_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000400L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswgraph_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000800L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswlower_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00001000L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswprint_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00040000L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswpunct_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00002000L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswspace_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00004000L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswupper_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00008000L, _l));
}

extern __inline __attribute__((__gnu_inline__)) int
iswxdigit_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00010000L, _l));
}

extern __inline __attribute__((__gnu_inline__)) wint_t
towlower_l(wint_t _wc, locale_t _l)
{
        return (__tolower_l(_wc, _l));
}

extern __inline __attribute__((__gnu_inline__)) wint_t
towupper_l(wint_t _wc, locale_t _l)
{
        return (__toupper_l(_wc, _l));
}
# 138 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/__wctype.h" 3 4

wctype_t
 wctype_l(const char *, locale_t);

# 162 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/_wctype.h" 2 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 2 3 4




wint_t btowc(int);
wint_t fgetwc(FILE *);
wchar_t *fgetws(wchar_t * restrict, int, FILE * restrict);
wint_t fputwc(wchar_t, FILE *);
int fputws(const wchar_t * restrict, FILE * restrict);
int fwide(FILE *, int);
int fwprintf(FILE * restrict, const wchar_t * restrict, ...);
int fwscanf(FILE * restrict, const wchar_t * restrict, ...);
wint_t getwc(FILE *);
wint_t getwchar(void);
size_t mbrlen(const char * restrict, size_t, mbstate_t * restrict);
size_t mbrtowc(wchar_t * restrict, const char * restrict, size_t,
     mbstate_t * restrict);
int mbsinit(const mbstate_t *);
size_t mbsrtowcs(wchar_t * restrict, const char ** restrict, size_t,
     mbstate_t * restrict);
wint_t putwc(wchar_t, FILE *);
wint_t putwchar(wchar_t);
int swprintf(wchar_t * restrict, size_t, const wchar_t * restrict, ...);
int swscanf(const wchar_t * restrict, const wchar_t * restrict, ...);
wint_t ungetwc(wint_t, FILE *);
int vfwprintf(FILE * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vswprintf(wchar_t * restrict, size_t, const wchar_t * restrict,
     __darwin_va_list);
int vwprintf(const wchar_t * restrict, __darwin_va_list);
size_t wcrtomb(char * restrict, wchar_t, mbstate_t * restrict);
wchar_t *wcscat(wchar_t * restrict, const wchar_t * restrict);
wchar_t *wcschr(const wchar_t *, wchar_t);
int wcscmp(const wchar_t *, const wchar_t *);
int wcscoll(const wchar_t *, const wchar_t *);
wchar_t *wcscpy(wchar_t * restrict, const wchar_t * restrict);
size_t wcscspn(const wchar_t *, const wchar_t *);
size_t wcsftime(wchar_t * restrict, size_t, const wchar_t * restrict,
     const struct tm * restrict) __asm("_" "wcsftime" );
size_t wcslen(const wchar_t *);
wchar_t *wcsncat(wchar_t * restrict, const wchar_t * restrict, size_t);
int wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t * restrict , const wchar_t * restrict, size_t);
wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
wchar_t *wcsrchr(const wchar_t *, wchar_t);
size_t wcsrtombs(char * restrict, const wchar_t ** restrict, size_t,
     mbstate_t * restrict);
size_t wcsspn(const wchar_t *, const wchar_t *);
wchar_t *wcsstr(const wchar_t * restrict, const wchar_t * restrict);
size_t wcsxfrm(wchar_t * restrict, const wchar_t * restrict, size_t);
int wctob(wint_t);
double wcstod(const wchar_t * restrict, wchar_t ** restrict);
wchar_t *wcstok(wchar_t * restrict, const wchar_t * restrict,
     wchar_t ** restrict);
long wcstol(const wchar_t * restrict, wchar_t ** restrict, int);
unsigned long
  wcstoul(const wchar_t * restrict, wchar_t ** restrict, int);
wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
int wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t * restrict, const wchar_t * restrict, size_t);
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
int wprintf(const wchar_t * restrict, ...);
int wscanf(const wchar_t * restrict, ...);
int wcswidth(const wchar_t *, size_t);
int wcwidth(wchar_t);

# 169 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 3 4

int vfwscanf(FILE * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vswscanf(const wchar_t * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vwscanf(const wchar_t * restrict, __darwin_va_list);
float wcstof(const wchar_t * restrict, wchar_t ** restrict);
long double
 wcstold(const wchar_t * restrict, wchar_t ** restrict);

long long
 wcstoll(const wchar_t * restrict, wchar_t ** restrict, int);
unsigned long long
 wcstoull(const wchar_t * restrict, wchar_t ** restrict, int);


# 194 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 3 4

size_t mbsnrtowcs(wchar_t * restrict, const char ** restrict, size_t,
            size_t, mbstate_t * restrict);
wchar_t *wcpcpy(wchar_t * restrict, const wchar_t * restrict) ;
wchar_t *wcpncpy(wchar_t * restrict, const wchar_t * restrict, size_t) ;
wchar_t *wcsdup(const wchar_t *) ;
int wcscasecmp(const wchar_t *, const wchar_t *) ;
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t n) ;
size_t wcsnlen(const wchar_t *, size_t) ;
size_t wcsnrtombs(char * restrict, const wchar_t ** restrict, size_t,
            size_t, mbstate_t * restrict);
FILE *open_wmemstream(wchar_t ** __bufp, size_t * __sizep) ;









wchar_t *fgetwln(FILE * restrict, size_t *) ;
size_t wcslcat(wchar_t *, const wchar_t *, size_t);
size_t wcslcpy(wchar_t *, const wchar_t *, size_t);

# 228 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_wchar.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_wchar.h" 3 4
#define _XLOCALE__WCHAR_H_ 





# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_wchar.h" 2 3 4



wint_t btowc_l(int, locale_t);
wint_t fgetwc_l(FILE *, locale_t);
wchar_t *fgetws_l(wchar_t * restrict, int, FILE * restrict, locale_t);
wint_t fputwc_l(wchar_t, FILE *, locale_t);
int fputws_l(const wchar_t * restrict, FILE * restrict, locale_t);
int fwprintf_l(FILE * restrict, locale_t, const wchar_t * restrict, ...);
int fwscanf_l(FILE * restrict, locale_t, const wchar_t * restrict, ...);
wint_t getwc_l(FILE *, locale_t);
wint_t getwchar_l(locale_t);
size_t mbrlen_l(const char * restrict, size_t, mbstate_t * restrict,
     locale_t);
size_t mbrtowc_l(wchar_t * restrict, const char * restrict, size_t,
     mbstate_t * restrict, locale_t);
int mbsinit_l(const mbstate_t *, locale_t);
size_t mbsrtowcs_l(wchar_t * restrict, const char ** restrict, size_t,
     mbstate_t * restrict, locale_t);
wint_t putwc_l(wchar_t, FILE *, locale_t);
wint_t putwchar_l(wchar_t, locale_t);
int swprintf_l(wchar_t * restrict, size_t n, locale_t,
  const wchar_t * restrict, ...);
int swscanf_l(const wchar_t * restrict, locale_t,
  const wchar_t * restrict, ...);
wint_t ungetwc_l(wint_t, FILE *, locale_t);
int vfwprintf_l(FILE * restrict, locale_t, const wchar_t * restrict,
  __darwin_va_list);
int vswprintf_l(wchar_t * restrict, size_t n, locale_t,
  const wchar_t * restrict, __darwin_va_list);
int vwprintf_l(locale_t, const wchar_t * restrict, __darwin_va_list);
size_t wcrtomb_l(char * restrict, wchar_t, mbstate_t * restrict,
     locale_t);
int wcscoll_l(const wchar_t *, const wchar_t *, locale_t);
size_t wcsftime_l(wchar_t * restrict, size_t, const wchar_t * restrict,
  const struct tm * restrict, locale_t)
  __asm("_" "wcsftime_l" );
size_t wcsrtombs_l(char * restrict, const wchar_t ** restrict, size_t,
     mbstate_t * restrict, locale_t);
double wcstod_l(const wchar_t * restrict, wchar_t ** restrict, locale_t);
long wcstol_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
unsigned long
 wcstoul_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
int wcswidth_l(const wchar_t *, size_t, locale_t);
size_t wcsxfrm_l(wchar_t * restrict, const wchar_t * restrict, size_t,
     locale_t);
int wctob_l(wint_t, locale_t);
int wcwidth_l(wchar_t, locale_t);
int wprintf_l(locale_t, const wchar_t * restrict, ...);
int wscanf_l(locale_t, const wchar_t * restrict, ...);

# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_wchar.h" 3 4

int vfwscanf_l(FILE * restrict, locale_t, const wchar_t * restrict,
  __darwin_va_list);
int vswscanf_l(const wchar_t * restrict, locale_t,
  const wchar_t * restrict, __darwin_va_list);
int vwscanf_l(locale_t, const wchar_t * restrict, __darwin_va_list);
float wcstof_l(const wchar_t * restrict, wchar_t ** restrict, locale_t);
long double
 wcstold_l(const wchar_t * restrict, wchar_t ** restrict, locale_t);

long long
 wcstoll_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
unsigned long long
 wcstoull_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);


# 120 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/xlocale/_wchar.h" 3 4

size_t mbsnrtowcs_l(wchar_t * restrict, const char ** restrict, size_t,
     size_t, mbstate_t * restrict, locale_t);
int wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t) ;
int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t n, locale_t) ;
size_t wcsnrtombs_l(char * restrict, const wchar_t ** restrict, size_t,
     size_t, mbstate_t * restrict, locale_t);









wchar_t *fgetwln_l(FILE * restrict, size_t *, locale_t) ;

# 229 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/wchar.h" 2 3 4
# 897 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 906 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/float.h" 1 3 4
# 29 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/float.h" 3 4
#define _FLOAT_H___ 


#undef FLT_RADIX
#define FLT_RADIX __FLT_RADIX__


#undef FLT_MANT_DIG
#undef DBL_MANT_DIG
#undef LDBL_MANT_DIG
#define FLT_MANT_DIG __FLT_MANT_DIG__
#define DBL_MANT_DIG __DBL_MANT_DIG__
#define LDBL_MANT_DIG __LDBL_MANT_DIG__
# 50 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/float.h" 3 4
#undef FLT_DIG
#undef DBL_DIG
#undef LDBL_DIG
#define FLT_DIG __FLT_DIG__
#define DBL_DIG __DBL_DIG__
#define LDBL_DIG __LDBL_DIG__


#undef FLT_MIN_EXP
#undef DBL_MIN_EXP
#undef LDBL_MIN_EXP
#define FLT_MIN_EXP __FLT_MIN_EXP__
#define DBL_MIN_EXP __DBL_MIN_EXP__
#define LDBL_MIN_EXP __LDBL_MIN_EXP__






#undef FLT_MIN_10_EXP
#undef DBL_MIN_10_EXP
#undef LDBL_MIN_10_EXP
#define FLT_MIN_10_EXP __FLT_MIN_10_EXP__
#define DBL_MIN_10_EXP __DBL_MIN_10_EXP__
#define LDBL_MIN_10_EXP __LDBL_MIN_10_EXP__


#undef FLT_MAX_EXP
#undef DBL_MAX_EXP
#undef LDBL_MAX_EXP
#define FLT_MAX_EXP __FLT_MAX_EXP__
#define DBL_MAX_EXP __DBL_MAX_EXP__
#define LDBL_MAX_EXP __LDBL_MAX_EXP__






#undef FLT_MAX_10_EXP
#undef DBL_MAX_10_EXP
#undef LDBL_MAX_10_EXP
#define FLT_MAX_10_EXP __FLT_MAX_10_EXP__
#define DBL_MAX_10_EXP __DBL_MAX_10_EXP__
#define LDBL_MAX_10_EXP __LDBL_MAX_10_EXP__





#undef FLT_MAX
#undef DBL_MAX
#undef LDBL_MAX
#define FLT_MAX __FLT_MAX__
#define DBL_MAX __DBL_MAX__
#define LDBL_MAX __LDBL_MAX__



#undef FLT_EPSILON
#undef DBL_EPSILON
#undef LDBL_EPSILON
#define FLT_EPSILON __FLT_EPSILON__
#define DBL_EPSILON __DBL_EPSILON__
#define LDBL_EPSILON __LDBL_EPSILON__


#undef FLT_MIN
#undef DBL_MIN
#undef LDBL_MIN
#define FLT_MIN __FLT_MIN__
#define DBL_MIN __DBL_MIN__
#define LDBL_MIN __LDBL_MIN__



#undef FLT_ROUNDS
#define FLT_ROUNDS 1
# 193 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/float.h" 3 4
#undef FLT_EVAL_METHOD



#define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
# 208 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/float.h" 3 4
#undef DECIMAL_DIG
#define DECIMAL_DIG __DECIMAL_DIG__






#undef FLT_DECIMAL_DIG
#undef DBL_DECIMAL_DIG
#undef LDBL_DECIMAL_DIG
#define FLT_DECIMAL_DIG __FLT_DECIMAL_DIG__
#define DBL_DECIMAL_DIG __DBL_DECIMAL_DIG__
#define LDBL_DECIMAL_DIG __LDBL_DECIMAL_DIG__


#undef FLT_HAS_SUBNORM
#undef DBL_HAS_SUBNORM
#undef LDBL_HAS_SUBNORM
#define FLT_HAS_SUBNORM __FLT_HAS_DENORM__
#define DBL_HAS_SUBNORM __DBL_HAS_DENORM__
#define LDBL_HAS_SUBNORM __LDBL_HAS_DENORM__


#undef FLT_TRUE_MIN
#undef DBL_TRUE_MIN
#undef LDBL_TRUE_MIN
#define FLT_TRUE_MIN __FLT_DENORM_MIN__
#define DBL_TRUE_MIN __DBL_DENORM_MIN__
#define LDBL_TRUE_MIN __LDBL_DENORM_MIN__
# 907 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/limits.h" 1 3 4
# 908 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 918 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/locale.h" 1 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/locale.h" 3 4
#define _LOCALE_H_ 



#define LC_ALL 0
#define LC_COLLATE 1
#define LC_CTYPE 2
#define LC_MONETARY 3
#define LC_NUMERIC 4
#define LC_TIME 5
#define LC_MESSAGES 6

#define _LC_LAST 7


char *setlocale(int, const char *);

# 919 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 942 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define HAS_POSIX_2008_LOCALE 
#define USE_LOCALE 






#define HAS_SKIP_LOCALE_INIT 



#define USE_LOCALE_COLLATE 


#define USE_LOCALE_CTYPE 


#define USE_LOCALE_NUMERIC 


#define USE_LOCALE_MESSAGES 


#define USE_LOCALE_MONETARY 


#define USE_LOCALE_TIME 
# 1009 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define USE_THREAD_SAFE_LOCALE 


#define USE_POSIX_2008_LOCALE 
# 1027 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/setjmp.h" 1 3 4
# 24 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/setjmp.h" 3 4
#define _BSD_SETJMP_H 
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/setjmp.h" 3 4
#define _JBLEN ((9 * 2) + 3 + 16)
typedef int jmp_buf[((9 * 2) + 3 + 16)];
typedef int sigjmp_buf[((9 * 2) + 3 + 16) + 1];
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/setjmp.h" 3 4

extern int setjmp(jmp_buf);
extern void longjmp(jmp_buf, int) __attribute__((__noreturn__));


int _setjmp(jmp_buf);
void _longjmp(jmp_buf, int) __attribute__((__noreturn__));
int sigsetjmp(sigjmp_buf, int);
void siglongjmp(sigjmp_buf, int) __attribute__((__noreturn__));



void longjmperror(void);


# 1028 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1042 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define BSDish 
# 1125 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
    typedef intmax_t PERL_INTMAX_T;
    typedef uintmax_t PERL_UINTMAX_T;
# 1135 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#undef PeRl_INT64_C
#undef PeRl_UINT64_C







#define PeRl_INT64_C(c) CAT2(c,L)
#define PeRl_UINT64_C(c) CAT2(c,UL)
# 1269 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_MULTICONCAT_MAXARG 64






#define PERL_MULTICONCAT_IX_NARGS 0
#define PERL_MULTICONCAT_IX_PLAIN_PV 1
#define PERL_MULTICONCAT_IX_PLAIN_LEN 2
#define PERL_MULTICONCAT_IX_UTF8_PV 3
#define PERL_MULTICONCAT_IX_UTF8_LEN 4
#define PERL_MULTICONCAT_IX_LENGTHS 5
#define PERL_MULTICONCAT_HEADER_SIZE 5






#define PERL_DONT_CREATE_GVSV 
# 1298 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION 


#define MEM_SIZE Size_t





#define PERL_STRLEN_ROUNDUP_QUANTUM Size_t_size







#define PERL_STRLEN_EXPAND_SHIFT 2
# 1324 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 1 3 4
# 1325 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
#define STRUCT_OFFSET(s,m) offsetof(s,m)
# 1337 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Ptrdiff_t ptrdiff_t
# 1380 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define safemalloc safesysmalloc
#define safecalloc safesyscalloc
#define saferealloc safesysrealloc
#define safefree safesysfree
#define CHECK_MALLOC_TOO_LATE_FOR(ch) ((void)0)
#define CHECK_MALLOC_TAINT(newval) ((void)0)
#define MALLOC_CHECK_TAINT(argc,argv,env) 



#define TOO_LATE_FOR_(ch,what) Perl_croak(aTHX_ "\"-%c\" is on the #! line, it must also be used on the command line%s", (char)(ch), what)
#define TOO_LATE_FOR(ch) TOO_LATE_FOR_(ch, "")
#define MALLOC_TOO_LATE_FOR(ch) TOO_LATE_FOR_(ch, " with $ENV{PERL_MALLOC_OPT}")
#define MALLOC_CHECK_TAINT2(argc,argv) MALLOC_CHECK_TAINT(argc,argv,NULL)
# 1402 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define memzero(d,l) memset(d,0,l)
# 1455 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/times.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/times.h" 3 4
#define _SYS_TIMES_H_ 
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/times.h" 3 4
struct tms {
 clock_t tms_utime;
 clock_t tms_stime;
 clock_t tms_cutime;
 clock_t tms_cstime;
};


clock_t times(struct tms *);

# 1456 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/errno.h" 1 3 4
# 1459 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1578 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LIB_INVARG 0
#define RMS_DIR 0
#define RMS_FAC 0
#define RMS_FEX 0
#define RMS_FNF 0
#define RMS_IFI 0
#define RMS_ISI 0
#define RMS_PRV 0
#define SS_ACCVIO 0
#define SS_DEVOFFLINE 0
#define SS_IVCHAN 0
#define SS_NORMAL 0
#define SS_NOPRIV 0
#define SS_BUFFEROVF 0
# 1609 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define SETERRNO(errcode,vmserrcode) (errno = (errcode))



#define dSAVEDERRNO int saved_errno
#define dSAVE_ERRNO int saved_errno = errno
#define SAVE_ERRNO (saved_errno = errno)
#define RESTORE_ERRNO (errno = saved_errno)
# 1642 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define ERRSV GvSVn(PL_errgv)


#define CLEAR_ERRSV() STMT_START { SV ** const svp = &GvSV(PL_errgv); if (!*svp) { *svp = newSVpvs(""); } else if (SvREADONLY(*svp)) { SvREFCNT_dec_NN(*svp); *svp = newSVpvs(""); } else { SV *const errsv = *svp; SvPVCLEAR(errsv); SvPOK_only(errsv); if (SvMAGICAL(errsv)) { mg_free(errsv); } } } STMT_END
# 1663 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define SANE_ERRSV() STMT_START { SV ** const svp = &GvSV(PL_errgv); if (!*svp) { *svp = newSVpvs(""); } else if (SvREADONLY(*svp)) { SV *dupsv = newSVsv(*svp); SvREFCNT_dec_NN(*svp); *svp = dupsv; } else { SV *const errsv = *svp; if (SvMAGICAL(errsv)) { mg_free(errsv); } } } STMT_END
# 1692 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define DEFSV GvSVn(PL_defgv)
#define DEFSV_set(sv) (GvSV(PL_defgv) = (sv))
#define SAVE_DEFSV SAVESPTR(GvSV(PL_defgv))
# 1719 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define UNKNOWN_ERRNO_MSG "(unknown)"




#define Strerror(e) strerror(e)




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ioctl.h" 1 3 4
# 1730 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1752 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define htoni htonl
#define ntohi ntohl
# 1928 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define my_sprintf sprintf
# 1946 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_SNPRINTF_CHECK(len,max,api) STMT_START { if ((max) > 0 && (Size_t)len > (max)) Perl_croak_nocontext("panic: %s buffer overflow", STRINGIFY(api)); } STMT_END






#define my_snprintf(buffer,max,...) ({ int len = snprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, snprintf); len; })
#define PERL_MY_SNPRINTF_GUARDED 
# 1967 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define my_vsnprintf(buffer,max,...) ({ int len = vsnprintf(buffer, max, __VA_ARGS__); PERL_SNPRINTF_CHECK(len, max, vsnprintf); len; })
#define PERL_MY_VSNPRINTF_GUARDED 
# 1999 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_MY_SNPRINTF_POST_GUARD(len,max) PERL_UNUSED_VAR(len)





#define PERL_MY_VSNPRINTF_POST_GUARD(len,max) PERL_UNUSED_VAR(len)



#define my_strlcat strlcat
# 2021 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define my_strlcpy strlcpy



#define my_strnlen strnlen
# 2034 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
typedef long IV;
typedef unsigned long UV;
# 2047 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define IV_MAX PERL_QUAD_MAX
#define IV_MIN PERL_QUAD_MIN
#define UV_MAX PERL_UQUAD_MAX
#define UV_MIN PERL_UQUAD_MIN

#define IV_IS_QUAD 
#define UV_IS_QUAD 
# 2091 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Size_t_MAX (~(Size_t)0)
#define SSize_t_MAX (SSize_t)(~(Size_t)0 >> 1)

#define IV_DIG (BIT_DIGITS(IVSIZE * 8))
#define UV_DIG (BIT_DIGITS(UVSIZE * 8))


#define PERL_PRESERVE_IVUV 
# 2114 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PTRV UV
#define INT2PTR(any,d) (any)(d)
# 2128 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PTR2ul(p) INT2PTR(unsigned long,p)
# 2139 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NUM2PTR(any,d) (any)(PTRV)(d)
#define PTR2IV(p) INT2PTR(IV,p)
#define PTR2UV(p) INT2PTR(UV,p)
#define PTR2NV(p) NUM2PTR(NV,p)
#define PTR2nat(p) (PTRV)(p)
# 2155 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define DPTR2FPTR(t,p) ((t)PTR2nat(p))
#define FPTR2DPTR(t,p) ((t)PTR2nat(p))
# 2195 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
   typedef double NV;
# 2360 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_DIG DBL_DIG
#define NV_MANT_DIG DBL_MANT_DIG
#define NV_MIN DBL_MIN
#define NV_MAX DBL_MAX
#define NV_MIN_EXP DBL_MIN_EXP
#define NV_MAX_EXP DBL_MAX_EXP
#define NV_MIN_10_EXP DBL_MIN_10_EXP
#define NV_MAX_10_EXP DBL_MAX_10_EXP
#define NV_EPSILON DBL_EPSILON
#define NV_MAX DBL_MAX
#define NV_MIN DBL_MIN


#define Perl_acos acos
#define Perl_asin asin
#define Perl_atan atan
#define Perl_atan2 atan2
#define Perl_ceil ceil
#define Perl_cos cos
#define Perl_cosh cosh
#define Perl_exp exp

#define Perl_floor floor
#define Perl_fmod fmod
#define Perl_log log
#define Perl_log10 log10
#define Perl_pow pow
#define Perl_sin sin
#define Perl_sinh sinh
#define Perl_sqrt sqrt
#define Perl_tan tan
#define Perl_tanh tanh

#define Perl_modf(x,y) modf(x,y)
#define Perl_frexp(x,y) frexp(x,y)
#define Perl_ldexp(x,y) ldexp(x,y)



#define Perl_isnan(x) isnan(x)




#define Perl_isinf(x) isinf(x)






#define Perl_isfinite(x) isfinite(x)
# 2421 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 1 3 4
# 11 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#define FIXINC_WRAP_MATH_H_MATH_EXCEPTION 1
# 39 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#define __MATH_H__ 


#define __MATH__ 






# 59 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 72 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#define HUGE_VAL __builtin_huge_val()
#define HUGE_VALF __builtin_huge_valf()
#define HUGE_VALL __builtin_huge_vall()
#define NAN __builtin_nanf("0x7fc00000")







#define INFINITY HUGE_VALF





#define FP_NAN 1
#define FP_INFINITE 2
#define FP_ZERO 3
#define FP_NORMAL 4
#define FP_SUBNORMAL 5
#define FP_SUPERNORMAL 6
# 112 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#undef FP_FAST_FMA
#undef FP_FAST_FMAF
#undef FP_FAST_FMAL



#define FP_ILOGB0 (-2147483647 - 1)
#define FP_ILOGBNAN (-2147483647 - 1)


#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2

#define math_errhandling (__math_errhandling())
extern int __math_errhandling(void);
# 141 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#define fpclassify(x) ( sizeof(x) == sizeof(float) ? __fpclassifyf((float)(x)) : sizeof(x) == sizeof(double) ? __fpclassifyd((double)(x)) : __fpclassifyl((long double)(x)))




extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 164 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#define isnormal(x) ( sizeof(x) == sizeof(float) ? __inline_isnormalf((float)(x)) : sizeof(x) == sizeof(double) ? __inline_isnormald((double)(x)) : __inline_isnormall((long double)(x)))




#define isfinite(x) ( sizeof(x) == sizeof(float) ? __inline_isfinitef((float)(x)) : sizeof(x) == sizeof(double) ? __inline_isfinited((double)(x)) : __inline_isfinitel((long double)(x)))




#define isinf(x) ( sizeof(x) == sizeof(float) ? __inline_isinff((float)(x)) : sizeof(x) == sizeof(double) ? __inline_isinfd((double)(x)) : __inline_isinfl((long double)(x)))




#define isnan(x) ( sizeof(x) == sizeof(float) ? __inline_isnanf((float)(x)) : sizeof(x) == sizeof(double) ? __inline_isnand((double)(x)) : __inline_isnanl((long double)(x)))




#define signbit(x) ( sizeof(x) == sizeof(float) ? __inline_signbitf((float)(x)) : sizeof(x) == sizeof(double) ? __inline_signbitd((double)(x)) : __inline_signbitl((long double)(x)))




extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinited(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinff(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfd(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanf(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnand(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormald(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitf(float);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitd(double);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435082228750796873653722224568e-38F;
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= ((double)2.22507385850720138309023271733240406e-308L);
}
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626267781732175260e-4932L;
}
# 323 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);

#define isgreater(x,y) __builtin_isgreater((x),(y))
#define isgreaterequal(x,y) __builtin_isgreaterequal((x),(y))
#define isless(x,y) __builtin_isless((x),(y))
#define islessequal(x,y) __builtin_islessequal((x),(y))
#define islessgreater(x,y) __builtin_islessgreater((x),(y))
#define isunordered(x,y) __builtin_isunordered((x),(y))



extern float __inff(void)
 ;
extern double __inf(void)
 ;
extern long double __infl(void)
 ;
extern float __nan(void)
 ;
# 603 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
extern float __exp10f(float) ;
extern double __exp10(double) ;





extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 620 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
extern float __cospif(float) ;
extern double __cospi(double) ;
extern float __sinpif(float) ;
extern double __sinpi(double) ;
extern float __tanpif(float) ;
extern double __tanpi(double) ;
# 651 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

extern __inline __attribute__((__gnu_inline__)) __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) ;
extern double j1(double) ;
extern double jn(int, double) ;
extern double y0(double) ;
extern double y1(double) ;
extern double yn(int, double) ;
extern double scalb(double, double);
extern int signgam;



#define M_E 2.71828182845904523536028747135266250
#define M_LOG2E 1.44269504088896340735992468100189214
#define M_LOG10E 0.434294481903251827651128918916605082
#define M_LN2 0.693147180559945309417232121458176568
#define M_LN10 2.30258509299404568401799145468436421
#define M_PI 3.14159265358979323846264338327950288
#define M_PI_2 1.57079632679489661923132169163975144
#define M_PI_4 0.785398163397448309615660845819875721
#define M_1_PI 0.318309886183790671537767526745028724
#define M_2_PI 0.636619772367581343075535053490057448
#define M_2_SQRTPI 1.12837916709551257389615890312154517
#define M_SQRT2 1.41421356237309504880168872420969808
#define M_SQRT1_2 0.707106781186547524400844362104849039

#define MAXFLOAT 0x1.fffffep+127f
# 745 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include-fixed/math.h" 3 4
#define FP_SNAN FP_NAN
#define FP_QNAN FP_NAN
#define HUGE MAXFLOAT
#define X_TLOSS 1.41484755040568800000e+16
#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6



extern long int rinttol(double)
 ;

extern long int roundtol(double)
 ;

extern double drem(double, double)
 ;

extern int finite(double)
 ;

extern double gamma(double)
 ;

extern double significand(double)
 ;



struct exception {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
};





# 2422 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4

#define Perl_fp_class(x) fpclassify(x)
#define Perl_fp_class_inf(x) (Perl_fp_class(x)==FP_INFINITE)
#define Perl_fp_class_nan(x) (Perl_fp_class(x)==FP_NAN)
#define Perl_fp_class_norm(x) (Perl_fp_class(x)==FP_NORMAL)
#define Perl_fp_class_denorm(x) (Perl_fp_class(x)==FP_SUBNORMAL)
#define Perl_fp_class_zero(x) (Perl_fp_class(x)==FP_ZERO)
# 2690 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Perl_isfinitel(x) isfinite(x)
# 2712 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define USE_PERL_ATOF 
# 2721 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Perl_atof(s) Perl_my_atof(s)
#define Perl_atof2(s,n) Perl_my_atof3(aTHX_ (s), &(n), 0)




#define my_atof2(a,b) my_atof3(a,b,0)
# 2773 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_UCHAR_MIN ((unsigned char)0)
#define PERL_UCHAR_MAX ((unsigned char)UCHAR_MAX)

#define PERL_USHORT_MIN ((unsigned short)0)
#define PERL_USHORT_MAX ((unsigned short)USHRT_MAX)

#define PERL_SHORT_MAX ((short)SHRT_MAX)
#define PERL_SHORT_MIN ((short)SHRT_MIN)

#define PERL_UINT_MAX ((unsigned int)UINT_MAX)
#define PERL_UINT_MIN ((unsigned int)0)

#define PERL_INT_MAX ((int)INT_MAX)
#define PERL_INT_MIN ((int)INT_MIN)

#define PERL_ULONG_MAX ((unsigned long)ULONG_MAX)
#define PERL_ULONG_MIN ((unsigned long)0L)

#define PERL_LONG_MAX ((long)LONG_MAX)
#define PERL_LONG_MIN ((long)LONG_MIN)


#define PERL_UQUAD_MAX (~(UV)0)
#define PERL_UQUAD_MIN ((UV)0)
#define PERL_QUAD_MAX ((IV) (PERL_UQUAD_MAX >> 1))
#define PERL_QUAD_MIN (-PERL_QUAD_MAX - ((3 & -1) == 3))
# 2838 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
typedef size_t STRLEN;

typedef struct op OP;
typedef struct cop COP;
typedef struct unop UNOP;
typedef struct unop_aux UNOP_AUX;
typedef struct binop BINOP;
typedef struct listop LISTOP;
typedef struct logop LOGOP;
typedef struct pmop PMOP;
typedef struct svop SVOP;
typedef struct padop PADOP;
typedef struct pvop PVOP;
typedef struct loop LOOP;
typedef struct methop METHOP;






typedef struct block_hooks BHK;
typedef struct custom_op XOP;

typedef struct interpreter PerlInterpreter;





#define STRUCT_SV sv

typedef struct sv SV;
typedef struct av AV;
typedef struct hv HV;
typedef struct cv CV;
typedef struct p5rx REGEXP;
typedef struct gp GP;
typedef struct gv GV;
typedef struct io IO;
typedef struct context PERL_CONTEXT;
typedef struct block BLOCK;
typedef struct invlist INVLIST;

typedef struct magic MAGIC;
typedef struct xpv XPV;
typedef struct xpviv XPVIV;
typedef struct xpvuv XPVUV;
typedef struct xpvnv XPVNV;
typedef struct xpvmg XPVMG;
typedef struct xpvlv XPVLV;
typedef struct xpvinvlist XINVLIST;
typedef struct xpvav XPVAV;
typedef struct xpvhv XPVHV;
typedef struct xpvgv XPVGV;
typedef struct xpvcv XPVCV;
typedef struct xpvbm XPVBM;
typedef struct xpvfm XPVFM;
typedef struct xpvio XPVIO;
typedef struct mgvtbl MGVTBL;
typedef union any ANY;
typedef struct ptr_tbl_ent PTR_TBL_ENT_t;
typedef struct ptr_tbl PTR_TBL_t;
typedef struct clone_params CLONE_PARAMS;



typedef struct padlist PADLIST;
typedef AV PAD;
typedef struct padnamelist PADNAMELIST;
typedef struct padname PADNAME;



#define PERL_OP_PARENT 




#define PERL_COPY_ON_WRITE 



#define PERL_ANY_COW 
# 2930 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 1 3 4
# 15 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define PERL_HANDY_H_ 


#define Null(type) ((type)NULL)
# 57 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define Nullch Null(char*)
#define Nullfp Null(PerlIO*)
#define Nullsv Null(SV*)



#undef TRUE


#undef FALSE

#define TRUE (1)
#define FALSE (0)
# 97 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define MUTABLE_PTR(p) ({ void *p_ = (p); p_; })




#define MUTABLE_AV(p) ((AV *)MUTABLE_PTR(p))
#define MUTABLE_CV(p) ((CV *)MUTABLE_PTR(p))
#define MUTABLE_GV(p) ((GV *)MUTABLE_PTR(p))
#define MUTABLE_HV(p) ((HV *)MUTABLE_PTR(p))
#define MUTABLE_IO(p) ((IO *)MUTABLE_PTR(p))
#define MUTABLE_SV(p) ((SV *)MUTABLE_PTR(p))




#define HAS_BOOL 1
# 152 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define cBOOL(cbool) ((cbool) ? (bool)1 : (bool)0)






#define FUNCTION__ __func__
# 208 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
typedef signed char I8;
typedef unsigned char U8;
typedef short I16;
typedef unsigned short U16;
typedef int I32;
typedef unsigned int U32;


typedef long I64;
typedef unsigned long U64;





#define U8_MAX UINT8_MAX






#define U8_MIN PERL_UCHAR_MIN



#define I16_MAX INT16_MAX




#define I16_MIN INT16_MIN




#define U16_MAX UINT16_MAX






#define U16_MIN PERL_USHORT_MIN



#define I32_MAX INT32_MAX






#define I32_MIN INT32_MIN







#define U32_MAX UINT_MAX
# 282 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define U32_MIN PERL_UINT_MIN
# 301 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
    typedef int_fast8_t PERL_INT_FAST8_T;
    typedef uint_fast8_t PERL_UINT_FAST8_T;
    typedef int_fast16_t PERL_INT_FAST16_T;
    typedef uint_fast16_t PERL_UINT_FAST16_T;
# 317 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define BIT_DIGITS(N) (((N)*146)/485 + 1)
#define TYPE_DIGITS(T) BIT_DIGITS(sizeof(T) * 8)
#define TYPE_CHARS(T) (TYPE_DIGITS(T) + 2)


#define Ctl(ch) ((ch) & 037)
# 342 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define nBIT_MASK(n) ((UINTMAX_C(1) << (n)) - 1)


#define nBIT_UMAX(n) nBIT_MASK(n)
# 366 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define __ASSERT_(statement) 
# 463 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define STR_WITH_LEN(s) ("" s ""), (sizeof(s)-1)


#define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))
#define newSVpvs_flags(str,flags) Perl_newSVpvn_flags(aTHX_ STR_WITH_LEN(str), flags)

#define newSVpvs_share(str) Perl_newSVpvn_share(aTHX_ STR_WITH_LEN(str), 0)
#define sv_catpvs_flags(sv,str,flags) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), flags)

#define sv_catpvs_nomg(sv,str) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), 0)

#define sv_catpvs(sv,str) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), SV_GMAGIC)

#define sv_catpvs_mg(sv,str) Perl_sv_catpvn_flags(aTHX_ sv, STR_WITH_LEN(str), SV_GMAGIC|SV_SMAGIC)

#define sv_setpvs(sv,str) Perl_sv_setpvn(aTHX_ sv, STR_WITH_LEN(str))
#define sv_setpvs_mg(sv,str) Perl_sv_setpvn_mg(aTHX_ sv, STR_WITH_LEN(str))
#define sv_setref_pvs(rv,classname,str) Perl_sv_setref_pvn(aTHX_ rv, classname, STR_WITH_LEN(str))

#define savepvs(str) Perl_savepvn(aTHX_ STR_WITH_LEN(str))
#define savesharedpvs(str) Perl_savesharedpvn(aTHX_ STR_WITH_LEN(str))
#define gv_stashpvs(str,create) Perl_gv_stashpvn(aTHX_ STR_WITH_LEN(str), create)


#define gv_fetchpvs(namebeg,flags,sv_type) Perl_gv_fetchpvn_flags(aTHX_ STR_WITH_LEN(namebeg), flags, sv_type)

#define gv_fetchpvn gv_fetchpvn_flags
#define sv_catxmlpvs(dsv,str,utf8) Perl_sv_catxmlpvn(aTHX_ dsv, STR_WITH_LEN(str), utf8)



#define lex_stuff_pvs(pv,flags) Perl_lex_stuff_pvn(aTHX_ STR_WITH_LEN(pv), flags)

#define get_cvs(str,flags) Perl_get_cvn_flags(aTHX_ STR_WITH_LEN(str), (flags))





#define PERL_VERSION_MAJOR PERL_REVISION




#define PERL_VERSION_MINOR PERL_VERSION




#define PERL_VERSION_PATCH PERL_SUBVERSION




#define PERL_JNP_TO_DECIMAL_(maJor,miNor,Patch) (10 * ((maJor) * 1000000) + ((miNor) * 1000) + (Patch))


#define PERL_DECIMAL_VERSION_ PERL_JNP_TO_DECIMAL_(PERL_VERSION_MAJOR, PERL_VERSION_MINOR, PERL_VERSION_PATCH)
# 575 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define PERL_VERSION_EQ(j,n,p) (((p) == '*') ? ( (j) == PERL_VERSION_MAJOR && (n) == PERL_VERSION_MINOR) : (PERL_DECIMAL_VERSION_ == PERL_JNP_TO_DECIMAL_(j,n,p)))




#define PERL_VERSION_NE(j,n,p) (! PERL_VERSION_EQ(j,n,p))

#define PERL_VERSION_LT(j,n,p) (PERL_DECIMAL_VERSION_ < PERL_JNP_TO_DECIMAL_( (j), (n), (((p) == '*') ? 0 : p)))



#define PERL_VERSION_GE(j,n,p) (! PERL_VERSION_LT(j,n,p))

#define PERL_VERSION_LE(j,n,p) (PERL_DECIMAL_VERSION_ < PERL_JNP_TO_DECIMAL_( (j), (((p) == '*') ? ((n)+1) : (n)), (((p) == '*') ? 0 : p)))



#define PERL_VERSION_GT(j,n,p) (! PERL_VERSION_LE(j,n,p))
# 709 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define strNE(s1,s2) (strcmp(s1,s2) != 0)
#define strEQ(s1,s2) (strcmp(s1,s2) == 0)
#define strLT(s1,s2) (strcmp(s1,s2) < 0)
#define strLE(s1,s2) (strcmp(s1,s2) <= 0)
#define strGT(s1,s2) (strcmp(s1,s2) > 0)
#define strGE(s1,s2) (strcmp(s1,s2) >= 0)

#define strnNE(s1,s2,l) (strncmp(s1,s2,l) != 0)
#define strnEQ(s1,s2,l) (strncmp(s1,s2,l) == 0)

#define memEQ(s1,s2,l) (memcmp(((const void *) (s1)), ((const void *) (s2)), l) == 0)
#define memNE(s1,s2,l) (! memEQ(s1,s2,l))


#define memEQs(s1,l,s2) (((sizeof(s2)-1) == (l)) && memEQ((s1), ("" s2 ""), (sizeof(s2)-1)))

#define memNEs(s1,l,s2) (! memEQs(s1, l, s2))
# 746 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define memLT(s1,s2,l) (memcmp(s1,s2,l) < 0)
#define memLE(s1,s2,l) (memcmp(s1,s2,l) <= 0)
#define memGT(s1,s2,l) (memcmp(s1,s2,l) > 0)
#define memGE(s1,s2,l) (memcmp(s1,s2,l) >= 0)

#define memCHRs(s1,c) ((const char *) memchr("" s1 "" , c, sizeof(s1)-1))
# 768 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define CTYPE256 
# 1382 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define WIDEST_UTYPE U64
# 1401 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define FITS_IN_8_BITS(c) ( (sizeof(c) == 1) || !(((WIDEST_UTYPE)((c) | 0)) & ~0xFF))
# 1412 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define withinCOUNT(c,l,n) (__ASSERT_((NV) (l) >= 0) __ASSERT_((NV) (n) >= 0) withinCOUNT_KNOWN_VALID_((c), (l), (n)))
# 1421 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define withinCOUNT_KNOWN_VALID_(c,l,n) (((WIDEST_UTYPE) (((c)) - ((l) | 0))) <= (((WIDEST_UTYPE) ((n) | 0))))





#define inRANGE(c,l,u) (__ASSERT_((NV) (l) >= 0) __ASSERT_((u) >= (l)) ( (sizeof(c) == sizeof(U8)) ? inRANGE_helper_(U8, (c), (l), ((u))) : (sizeof(c) == sizeof(U16)) ? inRANGE_helper_(U16,(c), (l), ((u))) : (sizeof(c) == sizeof(U32)) ? inRANGE_helper_(U32,(c), (l), ((u))) : (__ASSERT_(sizeof(c) == sizeof(WIDEST_UTYPE)) inRANGE_helper_(WIDEST_UTYPE,(c), (l), ((u))))))
# 1437 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define inRANGE_helper_(cast,c,l,u) withinCOUNT_KNOWN_VALID_(((cast) (c)), (l), ((u) - (l)))
# 1460 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isASCII(c) ((WIDEST_UTYPE)((c) | 0) < 128)





#define isOCTAL_A(c) (((WIDEST_UTYPE)((c) | 0) & ~7) == '0')
# 1486 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _CC_WORDCHAR 0
#define _CC_DIGIT 1
#define _CC_ALPHA 2
#define _CC_LOWER 3
#define _CC_UPPER 4
#define _CC_PUNCT 5
#define _CC_PRINT 6
#define _CC_ALPHANUMERIC 7
#define _CC_GRAPH 8
#define _CC_CASED 9
#define _CC_SPACE 10
#define _CC_BLANK 11
#define _CC_XDIGIT 12
#define _CC_CNTRL 13
#define _CC_ASCII 14
#define _CC_VERTSPACE 15

#define _HIGHEST_REGCOMP_DOT_H_SYNC _CC_VERTSPACE



#define _CC_IDFIRST 16
#define _CC_CHARNAME_CONT 17
#define _CC_NONLATIN1_FOLD 18
#define _CC_NONLATIN1_SIMPLE_FOLD 19
#define _CC_QUOTEMETA 20
#define _CC_NON_FINAL_FOLD 21
#define _CC_IS_IN_SOME_FOLD 22
#define _CC_BINDIGIT 23
#define _CC_OCTDIGIT 24
#define _CC_MNEMONIC_CNTRL 25



#define _CC_UTF8_START_BYTE_IS_FOR_AT_LEAST_SURROGATE 31
# 1555 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define POSIX_CC_COUNT (_HIGHEST_REGCOMP_DOT_H_SYNC + 1)








extern const U32 PL_charclass[];




#define _CC_mask(classnum) (1U << (classnum))



#define _generic_isCC(c,classnum) cBOOL(FITS_IN_8_BITS(c) && (PL_charclass[(U8) (c)] & _CC_mask(classnum)))




#define _CC_mask_A(classnum) (_CC_mask(classnum) | _CC_mask(_CC_ASCII))




#define _generic_isCC_A(c,classnum) (FITS_IN_8_BITS(c) && ((PL_charclass[(U8) (c)] & _CC_mask_A(classnum)) == _CC_mask_A(classnum)))
# 1597 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isALPHA_A(c) inRANGE((~('A' ^ 'a') & (c)), 'A', 'Z')
#define isGRAPH_A(c) inRANGE(c, ' ' + 1, 0x7e)
#define isLOWER_A(c) inRANGE(c, 'a', 'z')
#define isPRINT_A(c) inRANGE(c, ' ', 0x7e)
#define isUPPER_A(c) inRANGE(c, 'A', 'Z')

#define isALPHANUMERIC_A(c) _generic_isCC_A(c, _CC_ALPHANUMERIC)
#define isBLANK_A(c) _generic_isCC_A(c, _CC_BLANK)
#define isCNTRL_A(c) _generic_isCC_A(c, _CC_CNTRL)
#define isDIGIT_A(c) inRANGE(c, '0', '9')
#define isPUNCT_A(c) _generic_isCC_A(c, _CC_PUNCT)
#define isSPACE_A(c) _generic_isCC_A(c, _CC_SPACE)
#define isWORDCHAR_A(c) _generic_isCC_A(c, _CC_WORDCHAR)
#define isXDIGIT_A(c) _generic_isCC(c, _CC_XDIGIT)

#define isIDFIRST_A(c) _generic_isCC_A(c, _CC_IDFIRST)
#define isALPHA_L1(c) _generic_isCC(c, _CC_ALPHA)
#define isALPHANUMERIC_L1(c) _generic_isCC(c, _CC_ALPHANUMERIC)
#define isBLANK_L1(c) _generic_isCC(c, _CC_BLANK)


#define isCHARNAME_CONT(c) _generic_isCC(c, _CC_CHARNAME_CONT)

#define isCNTRL_L1(c) _generic_isCC(c, _CC_CNTRL)
#define isGRAPH_L1(c) _generic_isCC(c, _CC_GRAPH)
#define isLOWER_L1(c) _generic_isCC(c, _CC_LOWER)
#define isPRINT_L1(c) _generic_isCC(c, _CC_PRINT)
#define isPSXSPC_L1(c) isSPACE_L1(c)
#define isPUNCT_L1(c) _generic_isCC(c, _CC_PUNCT)
#define isSPACE_L1(c) _generic_isCC(c, _CC_SPACE)
#define isUPPER_L1(c) _generic_isCC(c, _CC_UPPER)
#define isWORDCHAR_L1(c) _generic_isCC(c, _CC_WORDCHAR)
#define isIDFIRST_L1(c) _generic_isCC(c, _CC_IDFIRST)
# 1646 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define HAS_NONLATIN1_FOLD_CLOSURE(c) ( (! cBOOL(FITS_IN_8_BITS(c))) || (PL_charclass[(U8) (c)] & _CC_mask(_CC_NONLATIN1_FOLD)))



#define _isQUOTEMETA(c) _generic_isCC(c, _CC_QUOTEMETA)
# 1803 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isALPHANUMERIC(c) isALPHANUMERIC_A(c)
#define isALPHA(c) isALPHA_A(c)
#define isASCII_A(c) isASCII(c)
#define isASCII_L1(c) isASCII(c)
#define isBLANK(c) isBLANK_A(c)
#define isCNTRL(c) isCNTRL_A(c)
#define isDIGIT(c) isDIGIT_A(c)
#define isGRAPH(c) isGRAPH_A(c)
#define isIDFIRST(c) isIDFIRST_A(c)
#define isLOWER(c) isLOWER_A(c)
#define isPRINT(c) isPRINT_A(c)
#define isPSXSPC_A(c) isSPACE_A(c)
#define isPSXSPC(c) isPSXSPC_A(c)
#define isPSXSPC_L1(c) isSPACE_L1(c)
#define isPUNCT(c) isPUNCT_A(c)
#define isSPACE(c) isSPACE_A(c)
#define isUPPER(c) isUPPER_A(c)
#define isWORDCHAR(c) isWORDCHAR_A(c)
#define isXDIGIT(c) isXDIGIT_A(c)
# 1832 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define toLOWER(c) (isUPPER(c) ? (U8)((c) + ('a' - 'A')) : (c))
#define toUPPER(c) (isLOWER(c) ? (U8)((c) - ('a' - 'A')) : (c))





#define toFOLD(c) toLOWER(c)
#define toTITLE(c) toUPPER(c)

#define toLOWER_A(c) toLOWER(c)
#define toUPPER_A(c) toUPPER(c)
#define toFOLD_A(c) toFOLD(c)
#define toTITLE_A(c) toTITLE(c)


#define toLOWER_LATIN1(c) ((! FITS_IN_8_BITS(c)) ? (c) : PL_latin1_lc[ (U8) (c) ])


#define toLOWER_L1(c) toLOWER_LATIN1(c)




#define toUPPER_LATIN1_MOD(c) ((! FITS_IN_8_BITS(c)) ? (c) : PL_mod_latin1_uc[ (U8) (c) ])


#define IN_UTF8_CTYPE_LOCALE PL_in_utf8_CTYPE_locale
# 1872 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_LC_base(c,utf8_locale_classnum,non_utf8) (! FITS_IN_8_BITS(c) ? 0 : IN_UTF8_CTYPE_LOCALE ? cBOOL(PL_charclass[(U8) (c)] & _CC_mask(utf8_locale_classnum)) : cBOOL(non_utf8))
# 1884 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_LC(c,utf8_locale_classnum,non_utf8_func) _generic_LC_base(c,utf8_locale_classnum, non_utf8_func( (_LC_CAST) (c)))





#define _generic_LC_underscore(c,utf8_locale_classnum,non_utf8_func) _generic_LC_base(c, utf8_locale_classnum, (non_utf8_func( (_LC_CAST) (c)) || (char)(c) == '_'))
# 1899 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_toLOWER_LC(c,function,cast) (! FITS_IN_8_BITS(c) ? (c) : (IN_UTF8_CTYPE_LOCALE) ? PL_latin1_lc[ (U8) (c) ] : (cast)function((cast)(c)))
# 1911 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_toUPPER_LC(c,function,cast) (! FITS_IN_8_BITS(c) ? (c) : ((! IN_UTF8_CTYPE_LOCALE) ? (cast)function((cast)(c)) : ((((U8)(c)) == MICRO_SIGN) ? GREEK_CAPITAL_LETTER_MU : ((((U8)(c)) == LATIN_SMALL_LETTER_Y_WITH_DIAERESIS) ? LATIN_CAPITAL_LETTER_Y_WITH_DIAERESIS : ((((U8)(c)) == LATIN_SMALL_LETTER_SHARP_S) ? (__ASSERT_(0) (c)) : PL_mod_latin1_uc[ (U8) (c) ])))))
# 1930 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_toFOLD_LC(c,function,cast) ((UNLIKELY((c) == MICRO_SIGN) && IN_UTF8_CTYPE_LOCALE) ? GREEK_SMALL_LETTER_MU : (__ASSERT_(! IN_UTF8_CTYPE_LOCALE || (c) != LATIN_SMALL_LETTER_SHARP_S) _generic_toLOWER_LC(c, function, cast)))
# 1939 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isASCII_LC(c) (FITS_IN_8_BITS(c) && isascii( (U8) (c)))





#define isBLANK_LC(c) _generic_LC(c, _CC_BLANK, isblank)




#define _LC_CAST U8
# 1990 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isALPHA_LC(c) _generic_LC(c, _CC_ALPHA, isalpha)
#define isALPHANUMERIC_LC(c) _generic_LC(c, _CC_ALPHANUMERIC, isalnum)
#define isCNTRL_LC(c) _generic_LC(c, _CC_CNTRL, iscntrl)
#define isDIGIT_LC(c) _generic_LC(c, _CC_DIGIT, isdigit)
#define isGRAPH_LC(c) _generic_LC(c, _CC_GRAPH, isgraph)
#define isIDFIRST_LC(c) _generic_LC_underscore(c, _CC_IDFIRST, isalpha)
#define isLOWER_LC(c) _generic_LC(c, _CC_LOWER, islower)
#define isPRINT_LC(c) _generic_LC(c, _CC_PRINT, isprint)
#define isPUNCT_LC(c) _generic_LC(c, _CC_PUNCT, ispunct)
#define isSPACE_LC(c) _generic_LC(c, _CC_SPACE, isspace)
#define isUPPER_LC(c) _generic_LC(c, _CC_UPPER, isupper)
#define isWORDCHAR_LC(c) _generic_LC_underscore(c, _CC_WORDCHAR, isalnum)
#define isXDIGIT_LC(c) _generic_LC(c, _CC_XDIGIT, isxdigit)


#define toLOWER_LC(c) _generic_toLOWER_LC((c), tolower, U8)
#define toUPPER_LC(c) _generic_toUPPER_LC((c), toupper, U8)
#define toFOLD_LC(c) _generic_toFOLD_LC((c), tolower, U8)
# 2031 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isIDCONT(c) isWORDCHAR(c)
#define isIDCONT_A(c) isWORDCHAR_A(c)
#define isIDCONT_L1(c) isWORDCHAR_L1(c)
#define isIDCONT_LC(c) isWORDCHAR_LC(c)
#define isPSXSPC_LC(c) isSPACE_LC(c)
# 2051 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_uvchr(classnum,above_latin1,c) ((c) < 256 ? _generic_isCC(c, classnum) : above_latin1(c))


#define _generic_invlist_uvchr(classnum,c) ((c) < 256 ? _generic_isCC(c, classnum) : _is_uni_FOO(classnum, c))


#define isALPHA_uvchr(c) _generic_invlist_uvchr(_CC_ALPHA, c)
#define isALPHANUMERIC_uvchr(c) _generic_invlist_uvchr(_CC_ALPHANUMERIC, c)
#define isASCII_uvchr(c) isASCII(c)
#define isBLANK_uvchr(c) _generic_uvchr(_CC_BLANK, is_HORIZWS_cp_high, c)
#define isCNTRL_uvchr(c) isCNTRL_L1(c)
#define isDIGIT_uvchr(c) _generic_invlist_uvchr(_CC_DIGIT, c)
#define isGRAPH_uvchr(c) _generic_invlist_uvchr(_CC_GRAPH, c)
#define isIDCONT_uvchr(c) _generic_uvchr(_CC_WORDCHAR, _is_uni_perl_idcont, c)

#define isIDFIRST_uvchr(c) _generic_uvchr(_CC_IDFIRST, _is_uni_perl_idstart, c)

#define isLOWER_uvchr(c) _generic_invlist_uvchr(_CC_LOWER, c)
#define isPRINT_uvchr(c) _generic_invlist_uvchr(_CC_PRINT, c)

#define isPUNCT_uvchr(c) _generic_invlist_uvchr(_CC_PUNCT, c)
#define isSPACE_uvchr(c) _generic_uvchr(_CC_SPACE, is_XPERLSPACE_cp_high, c)
#define isPSXSPC_uvchr(c) isSPACE_uvchr(c)

#define isUPPER_uvchr(c) _generic_invlist_uvchr(_CC_UPPER, c)
#define isVERTWS_uvchr(c) _generic_uvchr(_CC_VERTSPACE, is_VERTWS_cp_high, c)
#define isWORDCHAR_uvchr(c) _generic_invlist_uvchr(_CC_WORDCHAR, c)
#define isXDIGIT_uvchr(c) _generic_uvchr(_CC_XDIGIT, is_XDIGIT_cp_high, c)

#define toFOLD_uvchr(c,s,l) to_uni_fold(c,s,l)
#define toLOWER_uvchr(c,s,l) to_uni_lower(c,s,l)
#define toTITLE_uvchr(c,s,l) to_uni_title(c,s,l)
#define toUPPER_uvchr(c,s,l) to_uni_upper(c,s,l)



#define isALPHA_uni(c) isALPHA_uvchr(c)
#define isALPHANUMERIC_uni(c) isALPHANUMERIC_uvchr(c)
#define isASCII_uni(c) isASCII_uvchr(c)
#define isBLANK_uni(c) isBLANK_uvchr(c)
#define isCNTRL_uni(c) isCNTRL_uvchr(c)
#define isDIGIT_uni(c) isDIGIT_uvchr(c)
#define isGRAPH_uni(c) isGRAPH_uvchr(c)
#define isIDCONT_uni(c) isIDCONT_uvchr(c)
#define isIDFIRST_uni(c) isIDFIRST_uvchr(c)
#define isLOWER_uni(c) isLOWER_uvchr(c)
#define isPRINT_uni(c) isPRINT_uvchr(c)
#define isPUNCT_uni(c) isPUNCT_uvchr(c)
#define isSPACE_uni(c) isSPACE_uvchr(c)
#define isPSXSPC_uni(c) isPSXSPC_uvchr(c)
#define isUPPER_uni(c) isUPPER_uvchr(c)
#define isVERTWS_uni(c) isVERTWS_uvchr(c)
#define isWORDCHAR_uni(c) isWORDCHAR_uvchr(c)
#define isXDIGIT_uni(c) isXDIGIT_uvchr(c)
#define toFOLD_uni(c,s,l) toFOLD_uvchr(c,s,l)
#define toLOWER_uni(c,s,l) toLOWER_uvchr(c,s,l)
#define toTITLE_uni(c,s,l) toTITLE_uvchr(c,s,l)
#define toUPPER_uni(c,s,l) toUPPER_uvchr(c,s,l)






#define _generic_LC_uvchr(latin1,above_latin1,c) (c < 256 ? latin1(c) : above_latin1(c))

#define _generic_LC_invlist_uvchr(latin1,classnum,c) (c < 256 ? latin1(c) : _is_uni_FOO(classnum, c))


#define isALPHA_LC_uvchr(c) _generic_LC_invlist_uvchr(isALPHA_LC, _CC_ALPHA, c)
#define isALPHANUMERIC_LC_uvchr(c) _generic_LC_invlist_uvchr(isALPHANUMERIC_LC, _CC_ALPHANUMERIC, c)

#define isASCII_LC_uvchr(c) isASCII_LC(c)
#define isBLANK_LC_uvchr(c) _generic_LC_uvchr(isBLANK_LC, is_HORIZWS_cp_high, c)

#define isCNTRL_LC_uvchr(c) (c < 256 ? isCNTRL_LC(c) : 0)
#define isDIGIT_LC_uvchr(c) _generic_LC_invlist_uvchr(isDIGIT_LC, _CC_DIGIT, c)
#define isGRAPH_LC_uvchr(c) _generic_LC_invlist_uvchr(isGRAPH_LC, _CC_GRAPH, c)
#define isIDCONT_LC_uvchr(c) _generic_LC_uvchr(isIDCONT_LC, _is_uni_perl_idcont, c)

#define isIDFIRST_LC_uvchr(c) _generic_LC_uvchr(isIDFIRST_LC, _is_uni_perl_idstart, c)

#define isLOWER_LC_uvchr(c) _generic_LC_invlist_uvchr(isLOWER_LC, _CC_LOWER, c)
#define isPRINT_LC_uvchr(c) _generic_LC_invlist_uvchr(isPRINT_LC, _CC_PRINT, c)
#define isPSXSPC_LC_uvchr(c) isSPACE_LC_uvchr(c)
#define isPUNCT_LC_uvchr(c) _generic_LC_invlist_uvchr(isPUNCT_LC, _CC_PUNCT, c)
#define isSPACE_LC_uvchr(c) _generic_LC_uvchr(isSPACE_LC, is_XPERLSPACE_cp_high, c)

#define isUPPER_LC_uvchr(c) _generic_LC_invlist_uvchr(isUPPER_LC, _CC_UPPER, c)
#define isWORDCHAR_LC_uvchr(c) _generic_LC_invlist_uvchr(isWORDCHAR_LC, _CC_WORDCHAR, c)

#define isXDIGIT_LC_uvchr(c) _generic_LC_uvchr(isXDIGIT_LC, is_XDIGIT_cp_high, c)


#define isBLANK_LC_uni(c) isBLANK_LC_uvchr(UNI_TO_NATIVE(c))
# 2167 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _utf8_safe_assert(p,e) ((e) > (p))


#define _generic_utf8_safe(classnum,p,e,above_latin1) ((! _utf8_safe_assert(p, e)) ? (_force_out_malformed_utf8_message((U8 *) (p), (U8 *) (e), 0, 1), 0) : (UTF8_IS_INVARIANT(*(p))) ? _generic_isCC(*(p), classnum) : (UTF8_IS_DOWNGRADEABLE_START(*(p)) ? ((LIKELY((e) - (p) > 1 && UTF8_IS_CONTINUATION(*((p)+1)))) ? _generic_isCC(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1 )), classnum) : (_force_out_malformed_utf8_message( (U8 *) (p), (U8 *) (e), 0, 1), 0)) : above_latin1))
# 2184 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_func_utf8_safe(classnum,above_latin1,p,e) _generic_utf8_safe(classnum, p, e, above_latin1(p, e))

#define _generic_non_invlist_utf8_safe(classnum,above_latin1,p,e) _generic_utf8_safe(classnum, p, e, (UNLIKELY((e) - (p) < UTF8SKIP(p)) ? (_force_out_malformed_utf8_message( (U8 *) (p), (U8 *) (e), 0, 1), 0) : above_latin1(p)))







#define _generic_invlist_utf8_safe(classnum,p,e) _generic_utf8_safe(classnum, p, e, _is_utf8_FOO(classnum, p, e))






#define _generic_utf8_safe_no_upper_latin1(classnum,p,e,above_latin1) (__ASSERT_(_utf8_safe_assert(p, e)) (UTF8_IS_INVARIANT(*(p))) ? _generic_isCC(*(p), classnum) : (UTF8_IS_DOWNGRADEABLE_START(*(p))) ? 0 : above_latin1)
# 2210 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isALPHA_utf8(p,e) isALPHA_utf8_safe(p, e)
#define isALPHANUMERIC_utf8(p,e) isALPHANUMERIC_utf8_safe(p, e)
#define isASCII_utf8(p,e) isASCII_utf8_safe(p, e)
#define isBLANK_utf8(p,e) isBLANK_utf8_safe(p, e)
#define isCNTRL_utf8(p,e) isCNTRL_utf8_safe(p, e)
#define isDIGIT_utf8(p,e) isDIGIT_utf8_safe(p, e)
#define isGRAPH_utf8(p,e) isGRAPH_utf8_safe(p, e)
#define isIDCONT_utf8(p,e) isIDCONT_utf8_safe(p, e)
#define isIDFIRST_utf8(p,e) isIDFIRST_utf8_safe(p, e)
#define isLOWER_utf8(p,e) isLOWER_utf8_safe(p, e)
#define isPRINT_utf8(p,e) isPRINT_utf8_safe(p, e)
#define isPSXSPC_utf8(p,e) isPSXSPC_utf8_safe(p, e)
#define isPUNCT_utf8(p,e) isPUNCT_utf8_safe(p, e)
#define isSPACE_utf8(p,e) isSPACE_utf8_safe(p, e)
#define isUPPER_utf8(p,e) isUPPER_utf8_safe(p, e)
#define isVERTWS_utf8(p,e) isVERTWS_utf8_safe(p, e)
#define isWORDCHAR_utf8(p,e) isWORDCHAR_utf8_safe(p, e)
#define isXDIGIT_utf8(p,e) isXDIGIT_utf8_safe(p, e)

#define isALPHA_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_ALPHA, p, e)
#define isALPHANUMERIC_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_ALPHANUMERIC, p, e)

#define isASCII_utf8_safe(p,e) (__ASSERT_(_utf8_safe_assert(p, e)) isASCII(*(p)))



#define isBLANK_utf8_safe(p,e) _generic_non_invlist_utf8_safe(_CC_BLANK, is_HORIZWS_high, p, e)
# 2245 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isCNTRL_utf8_safe(p,e) _generic_utf8_safe(_CC_CNTRL, p, e, 0)


#define isDIGIT_utf8_safe(p,e) _generic_utf8_safe_no_upper_latin1(_CC_DIGIT, p, e, _is_utf8_FOO(_CC_DIGIT, p, e))


#define isGRAPH_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_GRAPH, p, e)
#define isIDCONT_utf8_safe(p,e) _generic_func_utf8_safe(_CC_WORDCHAR, _is_utf8_perl_idcont, p, e)
# 2261 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isIDFIRST_utf8_safe(p,e) _generic_func_utf8_safe(_CC_IDFIRST, _is_utf8_perl_idstart, (U8 *) (p), (U8 *) (e))



#define isLOWER_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_LOWER, p, e)
#define isPRINT_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_PRINT, p, e)
#define isPSXSPC_utf8_safe(p,e) isSPACE_utf8_safe(p, e)
#define isPUNCT_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_PUNCT, p, e)
#define isSPACE_utf8_safe(p,e) _generic_non_invlist_utf8_safe(_CC_SPACE, is_XPERLSPACE_high, p, e)

#define isUPPER_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_UPPER, p, e)
#define isVERTWS_utf8_safe(p,e) _generic_non_invlist_utf8_safe(_CC_VERTSPACE, is_VERTWS_high, p, e)

#define isWORDCHAR_utf8_safe(p,e) _generic_invlist_utf8_safe(_CC_WORDCHAR, p, e)

#define isXDIGIT_utf8_safe(p,e) _generic_utf8_safe_no_upper_latin1(_CC_XDIGIT, p, e, (UNLIKELY((e) - (p) < UTF8SKIP(p)) ? (_force_out_malformed_utf8_message( (U8 *) (p), (U8 *) (e), 0, 1), 0) : is_XDIGIT_high(p)))






#define toFOLD_utf8(p,e,s,l) toFOLD_utf8_safe(p,e,s,l)
#define toLOWER_utf8(p,e,s,l) toLOWER_utf8_safe(p,e,s,l)
#define toTITLE_utf8(p,e,s,l) toTITLE_utf8_safe(p,e,s,l)
#define toUPPER_utf8(p,e,s,l) toUPPER_utf8_safe(p,e,s,l)


#define _toFOLD_utf8_flags(p,e,s,l,f) _to_utf8_fold_flags (p,e,s,l,f)
#define _toLOWER_utf8_flags(p,e,s,l,f) _to_utf8_lower_flags(p,e,s,l,f)
#define _toTITLE_utf8_flags(p,e,s,l,f) _to_utf8_title_flags(p,e,s,l,f)
#define _toUPPER_utf8_flags(p,e,s,l,f) _to_utf8_upper_flags(p,e,s,l,f)

#define toFOLD_utf8_safe(p,e,s,l) _toFOLD_utf8_flags(p,e,s,l, FOLD_FLAGS_FULL)
#define toLOWER_utf8_safe(p,e,s,l) _toLOWER_utf8_flags(p,e,s,l, 0)
#define toTITLE_utf8_safe(p,e,s,l) _toTITLE_utf8_flags(p,e,s,l, 0)
#define toUPPER_utf8_safe(p,e,s,l) _toUPPER_utf8_flags(p,e,s,l, 0)

#define isALPHA_LC_utf8(p,e) isALPHA_LC_utf8_safe(p, e)
#define isALPHANUMERIC_LC_utf8(p,e) isALPHANUMERIC_LC_utf8_safe(p, e)
#define isASCII_LC_utf8(p,e) isASCII_LC_utf8_safe(p, e)
#define isBLANK_LC_utf8(p,e) isBLANK_LC_utf8_safe(p, e)
#define isCNTRL_LC_utf8(p,e) isCNTRL_LC_utf8_safe(p, e)
#define isDIGIT_LC_utf8(p,e) isDIGIT_LC_utf8_safe(p, e)
#define isGRAPH_LC_utf8(p,e) isGRAPH_LC_utf8_safe(p, e)
#define isIDCONT_LC_utf8(p,e) isIDCONT_LC_utf8_safe(p, e)
#define isIDFIRST_LC_utf8(p,e) isIDFIRST_LC_utf8_safe(p, e)
#define isLOWER_LC_utf8(p,e) isLOWER_LC_utf8_safe(p, e)
#define isPRINT_LC_utf8(p,e) isPRINT_LC_utf8_safe(p, e)
#define isPSXSPC_LC_utf8(p,e) isPSXSPC_LC_utf8_safe(p, e)
#define isPUNCT_LC_utf8(p,e) isPUNCT_LC_utf8_safe(p, e)
#define isSPACE_LC_utf8(p,e) isSPACE_LC_utf8_safe(p, e)
#define isUPPER_LC_utf8(p,e) isUPPER_LC_utf8_safe(p, e)
#define isWORDCHAR_LC_utf8(p,e) isWORDCHAR_LC_utf8_safe(p, e)
#define isXDIGIT_LC_utf8(p,e) isXDIGIT_LC_utf8_safe(p, e)





#define _generic_LC_utf8_safe(macro,p,e,above_latin1) (__ASSERT_(_utf8_safe_assert(p, e)) (UTF8_IS_INVARIANT(*(p))) ? macro(*(p)) : (UTF8_IS_DOWNGRADEABLE_START(*(p)) ? ((LIKELY((e) - (p) > 1 && UTF8_IS_CONTINUATION(*((p)+1)))) ? macro(EIGHT_BIT_UTF8_TO_NATIVE(*(p), *((p)+1))) : (_force_out_malformed_utf8_message( (U8 *) (p), (U8 *) (e), 0, 1), 0)) : above_latin1))
# 2332 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _generic_LC_invlist_utf8_safe(macro,classnum,p,e) _generic_LC_utf8_safe(macro, p, e, _is_utf8_FOO(classnum, p, e))



#define _generic_LC_func_utf8_safe(macro,above_latin1,p,e) _generic_LC_utf8_safe(macro, p, e, above_latin1(p, e))


#define _generic_LC_non_invlist_utf8_safe(classnum,above_latin1,p,e) _generic_LC_utf8_safe(classnum, p, e, (UNLIKELY((e) - (p) < UTF8SKIP(p)) ? (_force_out_malformed_utf8_message( (U8 *) (p), (U8 *) (e), 0, 1), 0) : above_latin1(p)))






#define isALPHANUMERIC_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isALPHANUMERIC_LC, _CC_ALPHANUMERIC, p, e)


#define isALPHA_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isALPHA_LC, _CC_ALPHA, p, e)

#define isASCII_LC_utf8_safe(p,e) (__ASSERT_(_utf8_safe_assert(p, e)) isASCII_LC(*(p)))

#define isBLANK_LC_utf8_safe(p,e) _generic_LC_non_invlist_utf8_safe(isBLANK_LC, is_HORIZWS_high, p, e)

#define isCNTRL_LC_utf8_safe(p,e) _generic_LC_utf8_safe(isCNTRL_LC, p, e, 0)

#define isDIGIT_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isDIGIT_LC, _CC_DIGIT, p, e)

#define isGRAPH_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isGRAPH_LC, _CC_GRAPH, p, e)

#define isIDCONT_LC_utf8_safe(p,e) _generic_LC_func_utf8_safe(isIDCONT_LC, _is_utf8_perl_idcont, p, e)


#define isIDFIRST_LC_utf8_safe(p,e) _generic_LC_func_utf8_safe(isIDFIRST_LC, _is_utf8_perl_idstart, p, e)


#define isLOWER_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isLOWER_LC, _CC_LOWER, p, e)

#define isPRINT_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isPRINT_LC, _CC_PRINT, p, e)

#define isPSXSPC_LC_utf8_safe(p,e) isSPACE_LC_utf8_safe(p, e)
#define isPUNCT_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isPUNCT_LC, _CC_PUNCT, p, e)

#define isSPACE_LC_utf8_safe(p,e) _generic_LC_non_invlist_utf8_safe(isSPACE_LC, is_XPERLSPACE_high, p, e)

#define isUPPER_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isUPPER_LC, _CC_UPPER, p, e)

#define isWORDCHAR_LC_utf8_safe(p,e) _generic_LC_invlist_utf8_safe(isWORDCHAR_LC, _CC_WORDCHAR, p, e)

#define isXDIGIT_LC_utf8_safe(p,e) _generic_LC_non_invlist_utf8_safe(isXDIGIT_LC, is_XDIGIT_high, p, e)




#define isALPHAU(c) isALPHA_L1(c)
#define isDIGIT_L1(c) isDIGIT_A(c)
#define isOCTAL(c) isOCTAL_A(c)
#define isOCTAL_L1(c) isOCTAL_A(c)
#define isXDIGIT_L1(c) isXDIGIT_A(c)
#define isALNUM(c) isWORDCHAR(c)
#define isALNUM_A(c) isALNUM(c)
#define isALNUMU(c) isWORDCHAR_L1(c)
#define isALNUM_LC(c) isWORDCHAR_LC(c)
#define isALNUM_uni(c) isWORDCHAR_uni(c)
#define isALNUM_LC_uvchr(c) isWORDCHAR_LC_uvchr(c)
#define isALNUM_utf8(p,e) isWORDCHAR_utf8(p,e)
#define isALNUM_utf8_safe(p,e) isWORDCHAR_utf8_safe(p,e)
#define isALNUM_LC_utf8(p,e) isWORDCHAR_LC_utf8(p,e)
#define isALNUM_LC_utf8_safe(p,e) isWORDCHAR_LC_utf8_safe(p,e)
#define isALNUMC_A(c) isALPHANUMERIC_A(c)
#define isALNUMC_L1(c) isALPHANUMERIC_L1(c)
#define isALNUMC(c) isALPHANUMERIC(c)
#define isALNUMC_LC(c) isALPHANUMERIC_LC(c)
#define isALNUMC_uni(c) isALPHANUMERIC_uni(c)
#define isALNUMC_LC_uvchr(c) isALPHANUMERIC_LC_uvchr(c)
#define isALNUMC_utf8(p,e) isALPHANUMERIC_utf8(p,e)
#define isALNUMC_utf8_safe(p,e) isALPHANUMERIC_utf8_safe(p,e)
#define isALNUMC_LC_utf8_safe(p,e) isALPHANUMERIC_LC_utf8_safe(p,e)
# 2420 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define toCTRL(c) (__ASSERT_(FITS_IN_8_BITS(c)) toUPPER(((U8)(c))) ^ 64)
# 2440 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
typedef U32 line_t;
#define NOLINE ((line_t) 4294967295UL)


#define is_LAX_VERSION(a,b) (a != Perl_prescan_version(aTHX_ a, FALSE, b, NULL, NULL, NULL, NULL))


#define is_STRICT_VERSION(a,b) (a != Perl_prescan_version(aTHX_ a, TRUE, b, NULL, NULL, NULL, NULL))


#define BADVERSION(a,b,c) if (b) { *b = c; } return a;
# 2465 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define XDIGIT_VALUE(c) (__ASSERT_(isXDIGIT(c)) ((NATIVE_TO_LATIN1(c) >> 6) & 1) + ((NATIVE_TO_LATIN1(c) >> 3) & 8) + ((c) & 0xF))





#define READ_XDIGIT(s) ((s)++, XDIGIT_VALUE(*((s) - 1)))




#define OCTAL_VALUE(c) (__ASSERT_(isOCTAL(c)) (7 & (c)))
# 2492 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define isALPHA_FOLD_EQ(c1,c2) (__ASSERT_(isALPHA_A(c1) || isALPHA_A(c2)) ((c1) & ~('A' ^ 'a')) == ((c2) & ~('A' ^ 'a')))


#define isALPHA_FOLD_NE(c1,c2) (! isALPHA_FOLD_EQ((c1), (c2)))
# 2597 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define NEWSV(x,len) newSV(len)


#define MEM_SIZE_MAX ((MEM_SIZE)-1)

#define _PERL_STRLEN_ROUNDUP_UNCHECKED(n) (((n) - 1 + PERL_STRLEN_ROUNDUP_QUANTUM) & ~((MEM_SIZE)PERL_STRLEN_ROUNDUP_QUANTUM - 1))
# 2616 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) ( sizeof(MEM_SIZE) < sizeof(n) || sizeof(t) > ((MEM_SIZE)1 << 8*(sizeof(MEM_SIZE) - sizeof(n))))
# 2637 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define _MEM_WRAP_WILL_WRAP(n,t) ((_MEM_WRAP_NEEDS_RUNTIME_CHECK(n,t) ? (MEM_SIZE)(n) : MEM_SIZE_MAX/sizeof(t)) > MEM_SIZE_MAX/sizeof(t))



#define MEM_WRAP_CHECK(n,t) (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) && (croak_memory_wrap(),0))



#define MEM_WRAP_CHECK_1(n,t,a) (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) && (Perl_croak_nocontext("%s",(a)),0))




#define MEM_WRAP_CHECK_s(n,t,a) (void)(UNLIKELY(_MEM_WRAP_WILL_WRAP(n,t)) && (Perl_croak_nocontext("" a ""),0))



#define MEM_WRAP_CHECK_(n,t) MEM_WRAP_CHECK(n,t),

#define PERL_STRLEN_ROUNDUP(n) ((void)(((n) > MEM_SIZE_MAX - 2 * PERL_STRLEN_ROUNDUP_QUANTUM) ? (croak_memory_wrap(),0) : 0), _PERL_STRLEN_ROUNDUP_UNCHECKED(n))
# 2726 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define MEM_LOG_ALLOC(n,t,a) (a)


#define MEM_LOG_REALLOC(n,t,v,a) (a)


#define MEM_LOG_FREE(a) (a)


#define Newx(v,n,t) (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
#define Newxc(v,n,t,c) (v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_ALLOC(n,t,safemalloc((MEM_SIZE)((n)*sizeof(t))))))
#define Newxz(v,n,t) (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_ALLOC(n,t,safecalloc((n),sizeof(t)))))



#define New(x,v,n,t) Newx(v,n,t)
#define Newc(x,v,n,t,c) Newxc(v,n,t,c)
#define Newz(x,v,n,t) Newxz(v,n,t)


#define Renew(v,n,t) (v = (MEM_WRAP_CHECK_(n,t) (t*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))

#define Renewc(v,n,t,c) (v = (MEM_WRAP_CHECK_(n,t) (c*)MEM_LOG_REALLOC(n,t,v,saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))))






#define Safefree(d) safefree(MEM_LOG_FREE((Malloc_t)(d)))





#define perl_assert_ptr(p) assert( ((void*)(p)) != 0 )


#define Move(s,d,n,t) (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define Copy(s,d,n,t) (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), (void)memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define Zero(d,n,t) (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), (void)memzero((char*)(d), (n) * sizeof(t)))


#define MoveD(s,d,n,t) (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), memmove((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define CopyD(s,d,n,t) (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), perl_assert_ptr(s), memcpy((char*)(d),(const char*)(s), (n) * sizeof(t)))
#define ZeroD(d,n,t) (MEM_WRAP_CHECK_(n,t) perl_assert_ptr(d), memzero((char*)(d), (n) * sizeof(t)))

#define PoisonWith(d,n,t,b) (MEM_WRAP_CHECK_(n,t) (void)memset((char*)(d), (U8)(b), (n) * sizeof(t)))
#define PoisonNew(d,n,t) PoisonWith(d,n,t,0xAB)
#define PoisonFree(d,n,t) PoisonWith(d,n,t,0xEF)
#define Poison(d,n,t) PoisonFree(d,n,t)




#define PERL_POISON_EXPR(x) 



#define StructCopy(s,d,t) (*((t*)(d)) = *((t*)(s)))
# 2804 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define C_ARRAY_LENGTH(a) (sizeof(a)/sizeof((a)[0]))
#define C_ARRAY_END(a) ((a) + C_ARRAY_LENGTH(a))



#define Perl_va_copy(s,d) va_copy(d, s)
# 2819 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/handy.h" 3 4
#define pTHX_FORMAT "Perl interpreter: 0x%p"
#define pTHX__FORMAT ", Perl interpreter: 0x%p"
#define pTHX_VALUE_ (void *)my_perl,
#define pTHX_VALUE (void *)my_perl
#define pTHX__VALUE_ ,(void *)my_perl,
#define pTHX__VALUE ,(void *)my_perl
# 2931 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/charclass_invlists.h" 1 3 4
# 23 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/charclass_invlists.h" 3 4
#define NUM_ANYOF_CODE_POINTS (1 << 8)


#define PL_E_FORMAT_PRECISION 2
# 73996 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/charclass_invlists.h" 3 4
typedef enum {
 SCX_Unknown = 0,
 SCX_Adlam = 1,
 SCX_Ahom = 2,
 SCX_Anatolian_Hieroglyphs = 3,
 SCX_Arabic = 4,
 SCX_Armenian = 5,
 SCX_Avestan = 6,
 SCX_Balinese = 7,
 SCX_Bamum = 8,
 SCX_Bassa_Vah = 9,
 SCX_Batak = 10,
 SCX_Bengali = 11,
 SCX_Bhaiksuki = 12,
 SCX_Bopomofo = 13,
 SCX_Brahmi = 14,
 SCX_Braille = 15,
 SCX_Buginese = 16,
 SCX_Buhid = 17,
 SCX_Canadian_Aboriginal = 18,
 SCX_Carian = 19,
 SCX_Caucasian_Albanian = 20,
 SCX_Chakma = 21,
 SCX_Cham = 22,
 SCX_Cherokee = 23,
 SCX_Chorasmian = 24,
 SCX_Common = 25,
 SCX_Coptic = 26,
 SCX_Cuneiform = 27,
 SCX_Cypriot = 28,
 SCX_Cyrillic = 29,
 SCX_Deseret = 30,
 SCX_Devanagari = 31,
 SCX_Dives_Akuru = 32,
 SCX_Dogra = 33,
 SCX_Duployan = 34,
 SCX_Egyptian_Hieroglyphs = 35,
 SCX_Elbasan = 36,
 SCX_Elymaic = 37,
 SCX_Ethiopic = 38,
 SCX_Georgian = 39,
 SCX_Glagolitic = 40,
 SCX_Gothic = 41,
 SCX_Grantha = 42,
 SCX_Greek = 43,
 SCX_Gujarati = 44,
 SCX_Gunjala_Gondi = 45,
 SCX_Gurmukhi = 46,
 SCX_Han = 47,
 SCX_Hanb = 48,
 SCX_Hangul = 49,
 SCX_Hanifi_Rohingya = 50,
 SCX_Hanunoo = 51,
 SCX_Hatran = 52,
 SCX_Hebrew = 53,
 SCX_Hiragana = 54,
 SCX_Imperial_Aramaic = 55,
 SCX_Inherited = 56,
 SCX_Inscriptional_Pahlavi = 57,
 SCX_Inscriptional_Parthian = 58,
 SCX_INVALID = 59,
 SCX_Javanese = 60,
 SCX_Jpan = 61,
 SCX_Kaithi = 62,
 SCX_Kannada = 63,
 SCX_Katakana = 64,
 SCX_Kayah_Li = 65,
 SCX_Kharoshthi = 66,
 SCX_Khitan_Small_Script = 67,
 SCX_Khmer = 68,
 SCX_Khojki = 69,
 SCX_Khudawadi = 70,
 SCX_Kore = 71,
 SCX_Lao = 72,
 SCX_Latin = 73,
 SCX_Lepcha = 74,
 SCX_Limbu = 75,
 SCX_Linear_A = 76,
 SCX_Linear_B = 77,
 SCX_Lisu = 78,
 SCX_Lycian = 79,
 SCX_Lydian = 80,
 SCX_Mahajani = 81,
 SCX_Makasar = 82,
 SCX_Malayalam = 83,
 SCX_Mandaic = 84,
 SCX_Manichaean = 85,
 SCX_Marchen = 86,
 SCX_Masaram_Gondi = 87,
 SCX_Medefaidrin = 88,
 SCX_Meetei_Mayek = 89,
 SCX_Mende_Kikakui = 90,
 SCX_Meroitic_Cursive = 91,
 SCX_Meroitic_Hieroglyphs = 92,
 SCX_Miao = 93,
 SCX_Modi = 94,
 SCX_Mongolian = 95,
 SCX_Mro = 96,
 SCX_Multani = 97,
 SCX_Myanmar = 98,
 SCX_Nabataean = 99,
 SCX_Nandinagari = 100,
 SCX_New_Tai_Lue = 101,
 SCX_Newa = 102,
 SCX_Nko = 103,
 SCX_Nushu = 104,
 SCX_Nyiakeng_Puachue_Hmong = 105,
 SCX_Ogham = 106,
 SCX_Ol_Chiki = 107,
 SCX_Old_Hungarian = 108,
 SCX_Old_Italic = 109,
 SCX_Old_North_Arabian = 110,
 SCX_Old_Permic = 111,
 SCX_Old_Persian = 112,
 SCX_Old_Sogdian = 113,
 SCX_Old_South_Arabian = 114,
 SCX_Old_Turkic = 115,
 SCX_Oriya = 116,
 SCX_Osage = 117,
 SCX_Osmanya = 118,
 SCX_Pahawh_Hmong = 119,
 SCX_Palmyrene = 120,
 SCX_Pau_Cin_Hau = 121,
 SCX_Phags_Pa = 122,
 SCX_Phoenician = 123,
 SCX_Psalter_Pahlavi = 124,
 SCX_Rejang = 125,
 SCX_Runic = 126,
 SCX_Samaritan = 127,
 SCX_Saurashtra = 128,
 SCX_Sharada = 129,
 SCX_Shavian = 130,
 SCX_Siddham = 131,
 SCX_SignWriting = 132,
 SCX_Sinhala = 133,
 SCX_Sogdian = 134,
 SCX_Sora_Sompeng = 135,
 SCX_Soyombo = 136,
 SCX_Sundanese = 137,
 SCX_Syloti_Nagri = 138,
 SCX_Syriac = 139,
 SCX_Tagalog = 140,
 SCX_Tagbanwa = 141,
 SCX_Tai_Le = 142,
 SCX_Tai_Tham = 143,
 SCX_Tai_Viet = 144,
 SCX_Takri = 145,
 SCX_Tamil = 146,
 SCX_Tangut = 147,
 SCX_Telugu = 148,
 SCX_Thaana = 149,
 SCX_Thai = 150,
 SCX_Tibetan = 151,
 SCX_Tifinagh = 152,
 SCX_Tirhuta = 153,
 SCX_Ugaritic = 154,
 SCX_Vai = 155,
 SCX_Wancho = 156,
 SCX_Warang_Citi = 157,
 SCX_Yezidi = 158,
 SCX_Yi = 159,
 SCX_Zanabazar_Square = 160,
 SCX_use_AUX_TABLE_1 = -1,
 SCX_use_AUX_TABLE_2 = -2,
 SCX_use_AUX_TABLE_3 = -3,
 SCX_use_AUX_TABLE_4 = -4,
 SCX_use_AUX_TABLE_5 = -5,
 SCX_use_AUX_TABLE_6 = -6,
 SCX_use_AUX_TABLE_7 = -7,
 SCX_use_AUX_TABLE_8 = -8,
 SCX_use_AUX_TABLE_9 = -9,
 SCX_use_AUX_TABLE_10 = -10,
 SCX_use_AUX_TABLE_11 = -11,
 SCX_use_AUX_TABLE_12 = -12,
 SCX_use_AUX_TABLE_13 = -13,
 SCX_use_AUX_TABLE_14 = -14,
 SCX_use_AUX_TABLE_15 = -15,
 SCX_use_AUX_TABLE_16 = -16,
 SCX_use_AUX_TABLE_17 = -17,
 SCX_use_AUX_TABLE_18 = -18,
 SCX_use_AUX_TABLE_19 = -19,
 SCX_use_AUX_TABLE_20 = -20,
 SCX_use_AUX_TABLE_21 = -21,
 SCX_use_AUX_TABLE_22 = -22,
 SCX_use_AUX_TABLE_23 = -23,
 SCX_use_AUX_TABLE_24 = -24,
 SCX_use_AUX_TABLE_25 = -25,
 SCX_use_AUX_TABLE_26 = -26,
 SCX_use_AUX_TABLE_27 = -27,
 SCX_use_AUX_TABLE_28 = -28,
 SCX_use_AUX_TABLE_29 = -29,
 SCX_use_AUX_TABLE_30 = -30,
 SCX_use_AUX_TABLE_31 = -31,
 SCX_use_AUX_TABLE_32 = -32,
 SCX_use_AUX_TABLE_33 = -33,
 SCX_use_AUX_TABLE_34 = -34,
 SCX_use_AUX_TABLE_35 = -35,
 SCX_use_AUX_TABLE_36 = -36,
 SCX_use_AUX_TABLE_37 = -37,
 SCX_use_AUX_TABLE_38 = -38,
 SCX_use_AUX_TABLE_39 = -39,
 SCX_use_AUX_TABLE_40 = -40,
 SCX_use_AUX_TABLE_41 = -41,
 SCX_use_AUX_TABLE_42 = -42,
 SCX_use_AUX_TABLE_43 = -43,
 SCX_use_AUX_TABLE_44 = -44,
 SCX_use_AUX_TABLE_45 = -45,
 SCX_use_AUX_TABLE_46 = -46,
 SCX_use_AUX_TABLE_47 = -47,
 SCX_use_AUX_TABLE_48 = -48,
 SCX_use_AUX_TABLE_49 = -49,
 SCX_use_AUX_TABLE_50 = -50,
 SCX_use_AUX_TABLE_51 = -51,
 SCX_use_AUX_TABLE_52 = -52,
 SCX_use_AUX_TABLE_53 = -53,
 SCX_use_AUX_TABLE_54 = -54,
 SCX_use_AUX_TABLE_55 = -55
} SCX_enum;
# 419852 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/charclass_invlists.h" 3 4
#define MAX_FOLD_FROMS 3
# 2932 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4



#define USE_64_BIT_RAWIO 
# 2944 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define FSEEKSIZE LSEEKSIZE







#define USE_64_BIT_STDIO 
# 3056 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unixish.h" 1 3 4
# 24 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unixish.h" 3 4
#define HAS_IOCTL 





#define HAS_UTIME 






#define HAS_GROUP 






#define HAS_PASSWD 

#define HAS_KILL 
#define HAS_WAIT 
# 57 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unixish.h" 3 4
#undef USEMYBINMODE







#define Stat_t struct stat





#define USE_STAT_RDEV 






#undef ACME_MESS
# 114 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unixish.h" 3 4
#define ABORT() kill(PerlProc_getpid(),SIGABRT);







#define fwrite1 fwrite

#define Stat(fname,bufptr) stat((fname),(bufptr))







#define Fstat(fd,bufptr) fstat((fd),(bufptr))


#define Fflush(fp) fflush(fp)
#define Mkdir(path,mode) mkdir((path),(mode))
# 150 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unixish.h" 3 4
#define PERL_SYS_INIT_BODY(c,v) MALLOC_CHECK_TAINT2(*c,*v) PERL_FPU_INIT; PERLIO_INIT; MALLOC_INIT




#define PERL_SYS_TERM_BODY() HINTS_REFCNT_TERM; KEYWORD_PLUGIN_MUTEX_TERM; OP_CHECK_MUTEX_TERM; OP_REFCNT_TERM; PERLIO_TERM; MALLOC_TERM; LOCALE_TERM; USER_PROP_MUTEX_TERM; ENV_TERM;







#define BIT_BUCKET "/dev/null"

#define dXSUB_SYS dNOOP


#define USE_ENVIRON_ARRAY 
# 3057 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 3091 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define USE_ENVIRON_ARRAY 
# 3113 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
    typedef siginfo_t Siginfo_t;
# 3138 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_FPU_INIT PL_sigfpe_saved = (Sighandler_t) signal(SIGFPE, SIG_IGN)
#define PERL_FPU_PRE_EXEC { Sigsave_t xfpe; rsignal_save(SIGFPE, PL_sigfpe_saved, &xfpe);
#define PERL_FPU_POST_EXEC rsignal_restore(SIGFPE, &xfpe); }
# 3184 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_SYS_FPU_INIT NOOP



#define PERL_SYS_INIT3_BODY(argvp,argcp,envp) PERL_SYS_INIT_BODY(argvp,argcp)
# 3212 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_SYS_INIT(argc,argv) Perl_sys_init(argc, argv)
#define PERL_SYS_INIT3(argc,argv,env) Perl_sys_init3(argc, argv, env)
#define PERL_SYS_TERM() Perl_sys_term()


#define PERL_WRITE_MSG_TO_CONSOLE(io,msg,len) PerlIO_write(io, msg, len)
# 3261 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_TSA__(x) 
#undef PERL_TSA_ACTIVE





#define PERL_TSA_CAPABILITY(x) PERL_TSA__(capability(x))
# 3278 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_TSA_GUARDED_BY(x) PERL_TSA__(guarded_by(x))







#define PERL_TSA_PT_GUARDED_BY(x) PERL_TSA__(pt_guarded_by(x))







#define PERL_TSA_REQUIRES(x) PERL_TSA__(requires_capability(x))
# 3305 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_TSA_EXCLUDES(x) PERL_TSA__(locks_excluded(x))
# 3314 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_TSA_ACQUIRE(x) PERL_TSA__(acquire_capability(x))
# 3323 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_TSA_RELEASE(x) PERL_TSA__(release_capability(x))
# 3332 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_TSA_NO_TSA PERL_TSA__(no_thread_safety_analysis)
# 3352 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 1 3 4
# 53 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4
#define _PTHREAD_H 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/sched.h" 1 3 4
# 57 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 2 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4
#define _PTHREAD_QOS_H 
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 3 4
#define _SYS_QOS_H 
# 114 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 3 4
#define __QOS_ENUM(name,type,...) enum { __VA_ARGS__ }; typedef type name ##_t
#define __QOS_CLASS_AVAILABLE(...) 
# 130 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 3 4
enum { QOS_CLASS_USER_INTERACTIVE = 0x21, QOS_CLASS_USER_INITIATED = 0x19, QOS_CLASS_DEFAULT = 0x15, QOS_CLASS_UTILITY = 0x11, QOS_CLASS_BACKGROUND = 0x09, QOS_CLASS_UNSPECIFIED = 0x00, }; typedef unsigned int qos_class_t
# 143 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 3 4
 ;

#undef __QOS_ENUM







#define QOS_MIN_RELATIVE_PRIORITY (-15)






# 170 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 3 4

qos_class_t
qos_class_self(void);
# 192 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/qos.h" 3 4

qos_class_t
qos_class_main(void);


# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 2 3 4







# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4

int
pthread_attr_set_qos_class_np(pthread_attr_t *__attr,
  qos_class_t __qos_class, int __relative_priority);
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4

int
pthread_attr_get_qos_class_np(pthread_attr_t * restrict __attr,
  qos_class_t * restrict __qos_class,
  int * restrict __relative_priority);
# 153 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4

int
pthread_set_qos_class_self_np(qos_class_t __qos_class,
  int __relative_priority);
# 184 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4

int
pthread_get_qos_class_np(pthread_t __pthread,
  qos_class_t * restrict __qos_class,
  int * restrict __relative_priority);
# 211 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4
typedef struct pthread_override_s* pthread_override_t;
# 263 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4

pthread_override_t
pthread_override_qos_class_start_np(pthread_t __pthread,
  qos_class_t __qos_class, int __relative_priority);
# 291 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread/qos.h" 3 4

int
pthread_override_qos_class_end_np(pthread_override_t __override);


# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 2 3 4
# 105 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4

# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4
#define pthread_cleanup_push(func,val) { struct __darwin_pthread_handler_rec __handler; pthread_t __self = pthread_self(); __handler.__routine = func; __handler.__arg = val; __handler.__next = __self->__cleanup_stack; __self->__cleanup_stack = &__handler;
# 125 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4
#define pthread_cleanup_pop(execute) __self->__cleanup_stack = __handler.__next; if (execute) (__handler.__routine)(__handler.__arg); }
# 135 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4
#define PTHREAD_CREATE_JOINABLE 1
#define PTHREAD_CREATE_DETACHED 2

#define PTHREAD_INHERIT_SCHED 1
#define PTHREAD_EXPLICIT_SCHED 2

#define PTHREAD_CANCEL_ENABLE 0x01
#define PTHREAD_CANCEL_DISABLE 0x00
#define PTHREAD_CANCEL_DEFERRED 0x02
#define PTHREAD_CANCEL_ASYNCHRONOUS 0x00


#define PTHREAD_CANCELED ((void *) 1)


#define PTHREAD_SCOPE_SYSTEM 1
#define PTHREAD_SCOPE_PROCESS 2

#define PTHREAD_PROCESS_SHARED 1
#define PTHREAD_PROCESS_PRIVATE 2




#define PTHREAD_PRIO_NONE 0
#define PTHREAD_PRIO_INHERIT 1
#define PTHREAD_PRIO_PROTECT 2




#define PTHREAD_MUTEX_NORMAL 0
#define PTHREAD_MUTEX_ERRORCHECK 1
#define PTHREAD_MUTEX_RECURSIVE 2
#define PTHREAD_MUTEX_DEFAULT PTHREAD_MUTEX_NORMAL




#define PTHREAD_MUTEX_POLICY_FAIRSHARE_NP 1
#define PTHREAD_MUTEX_POLICY_FIRSTFIT_NP 3




#define PTHREAD_RWLOCK_INITIALIZER {_PTHREAD_RWLOCK_SIG_init, {0}}




#define PTHREAD_MUTEX_INITIALIZER {_PTHREAD_MUTEX_SIG_init, {0}}




#define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER {_PTHREAD_ERRORCHECK_MUTEX_SIG_init, {0}}
#define PTHREAD_RECURSIVE_MUTEX_INITIALIZER {_PTHREAD_RECURSIVE_MUTEX_SIG_init, {0}}




#define _PTHREAD_SWIFT_IMPORTER_NULLABILITY_COMPAT defined(SWIFT_CLASS_EXTRA) && (!defined(SWIFT_SDK_OVERLAY_PTHREAD_EPOCH) || (SWIFT_SDK_OVERLAY_PTHREAD_EPOCH < 1))
# 207 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4
#define PTHREAD_COND_INITIALIZER {_PTHREAD_COND_SIG_init, {0}}





#define PTHREAD_ONCE_INIT {_PTHREAD_ONCE_SIG_init, {0}}





int pthread_atfork(void (* )(void), void (* )(void),
  void (* )(void));


int pthread_attr_destroy(pthread_attr_t *);


int pthread_attr_getdetachstate(const pthread_attr_t *, int *);


int pthread_attr_getguardsize(const pthread_attr_t * restrict, size_t * restrict);


int pthread_attr_getinheritsched(const pthread_attr_t * restrict, int * restrict);


int pthread_attr_getschedparam(const pthread_attr_t * restrict,
  struct sched_param * restrict);


int pthread_attr_getschedpolicy(const pthread_attr_t * restrict, int * restrict);


int pthread_attr_getscope(const pthread_attr_t * restrict, int * restrict);


int pthread_attr_getstack(const pthread_attr_t * restrict,
  void * * restrict, size_t * restrict);


int pthread_attr_getstackaddr(const pthread_attr_t * restrict,
  void * * restrict);


int pthread_attr_getstacksize(const pthread_attr_t * restrict, size_t * restrict);


int pthread_attr_init(pthread_attr_t *);


int pthread_attr_setdetachstate(pthread_attr_t *, int);


int pthread_attr_setguardsize(pthread_attr_t *, size_t);


int pthread_attr_setinheritsched(pthread_attr_t *, int);


int pthread_attr_setschedparam(pthread_attr_t * restrict,
  const struct sched_param * restrict);


int pthread_attr_setschedpolicy(pthread_attr_t *, int);


int pthread_attr_setscope(pthread_attr_t *, int);


int pthread_attr_setstack(pthread_attr_t *, void *, size_t);


int pthread_attr_setstackaddr(pthread_attr_t *, void *);


int pthread_attr_setstacksize(pthread_attr_t *, size_t);


int pthread_cancel(pthread_t) __asm("_" "pthread_cancel" );


int pthread_cond_broadcast(pthread_cond_t *);


int pthread_cond_destroy(pthread_cond_t *);


int pthread_cond_init(
  pthread_cond_t * restrict,
  const pthread_condattr_t * restrict)
  __asm("_" "pthread_cond_init" );


int pthread_cond_signal(pthread_cond_t *);


int pthread_cond_timedwait(
  pthread_cond_t * restrict, pthread_mutex_t * restrict,
  const struct timespec * restrict)
  __asm("_" "pthread_cond_timedwait" );


int pthread_cond_wait(pthread_cond_t * restrict,
  pthread_mutex_t * restrict) __asm("_" "pthread_cond_wait" );


int pthread_condattr_destroy(pthread_condattr_t *);


int pthread_condattr_init(pthread_condattr_t *);


int pthread_condattr_getpshared(const pthread_condattr_t * restrict,
  int * restrict);


int pthread_condattr_setpshared(pthread_condattr_t *, int);



int pthread_create(pthread_t * restrict,
  const pthread_attr_t * restrict,
  void * (* )(void * ),
  void * restrict);







int pthread_detach(pthread_t);


int pthread_equal(pthread_t , pthread_t );


void pthread_exit(void * ) __attribute__((__noreturn__));


int pthread_getconcurrency(void);


int pthread_getschedparam(pthread_t , int * restrict,
  struct sched_param * restrict);


void* pthread_getspecific(pthread_key_t);


int pthread_join(pthread_t , void * * )
  __asm("_" "pthread_join" );


int pthread_key_create(pthread_key_t *, void (* )(void *));


int pthread_key_delete(pthread_key_t);


int pthread_mutex_destroy(pthread_mutex_t *);


int pthread_mutex_getprioceiling(const pthread_mutex_t * restrict,
  int * restrict);


int pthread_mutex_init(pthread_mutex_t * restrict,
  const pthread_mutexattr_t * restrict);


int pthread_mutex_lock(pthread_mutex_t *);


int pthread_mutex_setprioceiling(pthread_mutex_t * restrict, int,
  int * restrict);


int pthread_mutex_trylock(pthread_mutex_t *);


int pthread_mutex_unlock(pthread_mutex_t *);


int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm("_" "pthread_mutexattr_destroy" );


int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t * restrict,
  int * restrict);


int pthread_mutexattr_getprotocol(const pthread_mutexattr_t * restrict,
  int * restrict);


int pthread_mutexattr_getpshared(const pthread_mutexattr_t * restrict,
  int * restrict);


int pthread_mutexattr_gettype(const pthread_mutexattr_t * restrict,
  int * restrict);


int pthread_mutexattr_getpolicy_np(const pthread_mutexattr_t * restrict,
  int * restrict);


int pthread_mutexattr_init(pthread_mutexattr_t *);


int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);


int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);


int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);


int pthread_mutexattr_settype(pthread_mutexattr_t *, int);


int pthread_mutexattr_setpolicy_np(pthread_mutexattr_t *, int);



int pthread_once(pthread_once_t *, void (* )(void));


int pthread_rwlock_destroy(pthread_rwlock_t * ) __asm("_" "pthread_rwlock_destroy" );


int pthread_rwlock_init(pthread_rwlock_t * restrict,
  const pthread_rwlockattr_t * restrict)
  __asm("_" "pthread_rwlock_init" );


int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_rdlock" );


int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_tryrdlock" );


int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_trywrlock" );


int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_wrlock" );


int pthread_rwlock_unlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_unlock" );


int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);


int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t * restrict,
  int * restrict);


int pthread_rwlockattr_init(pthread_rwlockattr_t *);


int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);


pthread_t pthread_self(void);


int pthread_setcancelstate(int , int * )
  __asm("_" "pthread_setcancelstate" );


int pthread_setcanceltype(int , int * )
  __asm("_" "pthread_setcanceltype" );


int pthread_setconcurrency(int);


int pthread_setschedparam(pthread_t, int, const struct sched_param *);


int pthread_setspecific(pthread_key_t , const void * );


void pthread_testcancel(void) __asm("_" "pthread_testcancel" );





int pthread_is_threaded_np(void);


int pthread_threadid_np(pthread_t ,__uint64_t* );



int pthread_getname_np(pthread_t,char*,size_t);


int pthread_setname_np(const char*);



int pthread_main_np(void);



mach_port_t pthread_mach_thread_np(pthread_t);


size_t pthread_get_stacksize_np(pthread_t);


void* pthread_get_stackaddr_np(pthread_t);



int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t );



int pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *,
  const struct timespec * );




int pthread_create_suspended_np(
  pthread_t * , const pthread_attr_t * ,
  void * (* )(void * ), void * );






int pthread_kill(pthread_t, int);


 pthread_t pthread_from_mach_thread_np(mach_port_t);


int pthread_sigmask(int, const sigset_t * , sigset_t * )
  __asm("_" "pthread_sigmask" );


void pthread_yield_np(void);



void pthread_jit_write_protect_np(int enabled);



int pthread_jit_write_protect_supported_np(void);
# 582 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/pthread.h" 3 4

int
pthread_cpu_number_np(size_t *cpu_number_out);



# 3353 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
typedef pthread_t perl_os_thread;
typedef pthread_mutex_t perl_mutex;
typedef pthread_cond_t perl_cond;
typedef pthread_key_t perl_key;



typedef struct {
    perl_mutex lock;
    perl_cond wakeup;
    ssize_t readers_count;
} perl_RnW1_mutex_t;
# 3396 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STATUS_UNIX PL_statusvalue
# 3609 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STATUS_NATIVE PL_statusvalue_posix

#define STATUS_NATIVE_CHILD_SET(n) STMT_START { PL_statusvalue_posix = (n); if (PL_statusvalue_posix == -1) PL_statusvalue = -1; else { PL_statusvalue = (WIFEXITED(PL_statusvalue_posix) ? (WEXITSTATUS(PL_statusvalue_posix) << 8) : 0) | (WIFSIGNALED(PL_statusvalue_posix) ? (WTERMSIG(PL_statusvalue_posix) & 0x7F) : 0) | (WIFSIGNALED(PL_statusvalue_posix) && WCOREDUMP(PL_statusvalue_posix) ? 0x80 : 0); } } STMT_END
# 3647 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STATUS_UNIX_SET(n) STMT_START { PL_statusvalue = (n); if (PL_statusvalue != -1) PL_statusvalue &= 0xFFFF; } STMT_END





#define STATUS_UNIX_EXIT_SET(n) STATUS_UNIX_SET(n)
#define STATUS_EXIT_SET(n) STATUS_UNIX_SET(n)
#define STATUS_CURRENT STATUS_UNIX
#define STATUS_EXIT STATUS_UNIX
#define STATUS_ALL_SUCCESS (PL_statusvalue = 0, PL_statusvalue_posix = 0)
#define STATUS_ALL_FAILURE (PL_statusvalue = 1, PL_statusvalue_posix = 1)



#define PERL_EXIT_EXPECTED 0x01
#define PERL_EXIT_DESTRUCT_END 0x02
#define PERL_EXIT_WARN 0x04
#define PERL_EXIT_ABORT 0x08







#define PERL_FS_VER_FMT "%d.%d.%d"




#define PERL_FS_VERSION PERL_VERSION_STRING
# 3688 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_FLUSHALL_FOR_CHILD PerlIO_flush((PerlIO*)NULL)
# 3697 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_WAIT_FOR_CHILDREN NOOP




#define PERL_SET_INTERP(i) (PL_curinterp = (PerlInterpreter*)(i))



#define PERL_GET_INTERP (PL_curinterp)




#define PERL_GET_THX ((PerlInterpreter *)PERL_GET_CONTEXT)

#define PERL_SET_THX(t) PERL_SET_CONTEXT(t)
# 3729 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define SVf_(n) "-" STRINGIFY(n) "p"



#define SVf "-p"



#define SVf32 SVf_(32)



#define SVf256 SVf_(256)


#define SVfARG(p) ((void*)(p))


#define HEKf "2p"





#define HEKf256 "3p"


#define HEKfARG(p) ((void*)(p))






#define UTF8f "d%" UVuf "%4p"

#define UTF8fARG(u,l,p) (int)cBOOL(u), (UV)(l), (void*)(p)

#define PNf UTF8f
#define PNfARG(pn) (int)1, (UV)PadnameLEN(pn), (void *)PadnamePV(pn)
# 3780 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define UVf UVuf



#define NDEBUG 1

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/assert.h" 1 3 4
# 52 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/assert.h" 3 4
#undef assert
#undef __assert


#define assert(e) ((void)0)
# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/assert.h" 3 4
#define _ASSERT_H_ 



#define static_assert _Static_assert
# 3787 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4





#define NORETURN_FUNCTION_END NOT_REACHED;





#define EXPECT(expr,val) __builtin_expect(expr,val)
# 3818 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LIKELY(cond) EXPECT(cBOOL(cond),TRUE)
#define UNLIKELY(cond) EXPECT(cBOOL(cond),FALSE)
# 3845 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STATIC_ASSERT_DECL(COND) static_assert(COND, #COND)
# 3861 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STATIC_ASSERT_STMT(COND) STMT_START { STATIC_ASSERT_DECL(COND); } STMT_END
# 3911 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define ASSUME(x) assert(x)

#define NOT_REACHED ASSUME(!"UNREACHABLE")

#undef HAS_BUILTIN_UNREACHABLE






#define Pause pause
# 3960 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
union any {
    void* any_ptr;
    SV* any_sv;
    SV** any_svp;
    GV* any_gv;
    AV* any_av;
    HV* any_hv;
    OP* any_op;
    char* any_pv;
    char** any_pvp;
    I32 any_i32;
    U32 any_u32;
    IV any_iv;
    UV any_uv;
    long any_long;
    _Bool any_bool;
    void (*any_dptr) (void*);
    void (*any_dxptr) (PerlInterpreter* my_perl __attribute__((unused)), void*);
};


typedef I32 (*filter_t) (PerlInterpreter* my_perl __attribute__((unused)), int, SV *, int);

#define FILTER_READ(idx,sv,len) filter_read(idx, sv, len)
#define FILTER_DATA(idx) (PL_parser ? AvARRAY(PL_parser->rsfp_filters)[idx] : NULL)

#define FILTER_ISREADER(idx) (PL_parser && PL_parser->rsfp_filters && idx >= AvFILLp(PL_parser->rsfp_filters))


#define PERL_FILTER_EXISTS(i) (PL_parser && PL_parser->rsfp_filters && (Size_t) (i) < av_count(PL_parser->rsfp_filters))
# 4013 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_CALLCONV 



#define PERL_CALLCONV_NO_RET PERL_CALLCONV






#define PERL_STATIC_NO_RET STATIC






#define PERL_STATIC_INLINE_NO_RET PERL_STATIC_INLINE



#define PERL_STATIC_FORCE_INLINE PERL_STATIC_INLINE



#define PERL_STATIC_FORCE_INLINE_NO_RET PERL_STATIC_INLINE



# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 1 3 4
# 13 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define __Inc__IPerl___ 
# 50 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 1 3 4
# 12 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
#define PERLIO_H_ 
# 44 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
#define ftell ftello



#define fseek fseeko
# 60 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
typedef struct _PerlIO PerlIOl;
typedef struct _PerlIO_funcs PerlIO_funcs;
typedef PerlIOl *PerlIO;
#define PerlIO PerlIO
#define PERLIO_LAYERS 1

#define PERLIO_FUNCS_DECL(funcs) const PerlIO_funcs funcs
#define PERLIO_FUNCS_CAST(funcs) (PerlIO_funcs*)(funcs)

 void PerlIO_define_layer(PerlInterpreter* my_perl __attribute__((unused)), PerlIO_funcs *tab);
 PerlIO_funcs *PerlIO_find_layer(PerlInterpreter* my_perl __attribute__((unused)), const char *name,
                                              STRLEN len,
                                              int load);
 PerlIO *PerlIO_push(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const PerlIO_funcs *tab,
                                  const char *mode, SV *arg);
 void PerlIO_pop(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 AV* PerlIO_get_layers(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
 void PerlIO_clone(PerlInterpreter* my_perl __attribute__((unused)), PerlInterpreter *proto,
                                CLONE_PARAMS *param);
# 100 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
#define PERLIO_NOT_STDIO 0
# 142 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
#define PERLIOBUF_DEFAULT_BUFSIZ (BUFSIZ > 8192 ? BUFSIZ : 8192)
# 157 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
#define PERLIO_DUP_CLONE 1
#define PERLIO_DUP_FD 2




# 171 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlio.h" 3 4
 void PerlIO_init(PerlInterpreter* my_perl __attribute__((unused)));


 int PerlIO_stdoutf(const char *, ...)
    __attribute__((format(__printf__,1,2)));


 int PerlIO_puts(PerlIO *, const char *);


 PerlIO *PerlIO_open(const char *, const char *);


 PerlIO *PerlIO_openn(PerlInterpreter* my_perl __attribute__((unused)), const char *layers, const char *mode,
                                   int fd, int imode, int perm, PerlIO *old,
                                   int narg, SV **arg);


 int PerlIO_eof(PerlIO *);


 int PerlIO_error(PerlIO *);


 void PerlIO_clearerr(PerlIO *);


 int PerlIO_getc(PerlIO *);


 int PerlIO_putc(PerlIO *, int);


 int PerlIO_ungetc(PerlIO *, int);


 PerlIO *PerlIO_fdopen(int, const char *);


 PerlIO *PerlIO_importFILE(FILE *, const char *);


 FILE *PerlIO_exportFILE(PerlIO *, const char *);


 FILE *PerlIO_findFILE(PerlIO *);


 void PerlIO_releaseFILE(PerlIO *, FILE *);


 ssize_t PerlIO_read(PerlIO *, void *, size_t);


 ssize_t PerlIO_unread(PerlIO *, const void *, size_t);


 ssize_t PerlIO_write(PerlIO *, const void *, size_t);


 void PerlIO_setlinebuf(PerlIO *);


 int PerlIO_printf(PerlIO *, const char *, ...)
    __attribute__((format(__printf__,2,3)));


 int PerlIO_vprintf(PerlIO *, const char *, va_list);


 off_t PerlIO_tell(PerlIO *);


 int PerlIO_seek(PerlIO *, off_t, int);


 void PerlIO_rewind(PerlIO *);


 int PerlIO_has_base(PerlIO *);


 int PerlIO_has_cntptr(PerlIO *);


 int PerlIO_fast_gets(PerlIO *);


 int PerlIO_canset_cnt(PerlIO *);


 char *PerlIO_get_ptr(PerlIO *);


 ssize_t PerlIO_get_cnt(PerlIO *);


 void PerlIO_set_cnt(PerlIO *, ssize_t);


 void PerlIO_set_ptrcnt(PerlIO *, char *, ssize_t);


 char *PerlIO_get_base(PerlIO *);


 ssize_t PerlIO_get_bufsiz(PerlIO *);


 PerlIO *PerlIO_tmpfile(void);


 PerlIO *PerlIO_tmpfile_flags(int flags);


 PerlIO *PerlIO_stdin(void);


 PerlIO *PerlIO_stdout(void);


 PerlIO *PerlIO_stderr(void);


 int PerlIO_getpos(PerlIO *, SV *);


 int PerlIO_setpos(PerlIO *, SV *);


 PerlIO *PerlIO_fdupopen(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *, CLONE_PARAMS *, int);


 char *PerlIO_modestr(PerlIO *, char *buf);


 int PerlIO_isutf8(PerlIO *);


 int PerlIO_apply_layers(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const char *mode,
                                      const char *names);


 int PerlIO_binmode(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, int iotype, int omode,
                                 const char *names);


 char *PerlIO_getname(PerlIO *, char *);


 void PerlIO_destruct(PerlInterpreter* my_perl __attribute__((unused)));

 int PerlIO_intmode2str(int rawmode, char *mode, int *writing);


 void PerlIO_cleanup(PerlInterpreter* my_perl __attribute__((unused)));

 void PerlIO_debug(const char *fmt, ...)
    __attribute__((format(__printf__,1,2)));
typedef struct PerlIO_list_s PerlIO_list_t;




# 51 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 2 3 4

typedef void (*Sighandler1_t) (int);
typedef void (*Sighandler3_t) (int, Siginfo_t*, void*);





typedef Sighandler1_t Sighandler_t;
# 286 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlSIO_stdin stdin
#define PerlSIO_stdout stdout
#define PerlSIO_stderr stderr
#define PerlSIO_fopen(x,y) fopen(x,y)






#define PerlSIO_fclose(f) fclose(f)
#define PerlSIO_feof(f) feof(f)
#define PerlSIO_ferror(f) ferror(f)

#define PerlSIO_clearerr(f) clearerr(f)
#define PerlSIO_fgetc(f) fgetc(f)




#define PerlSIO_get_base(f) NULL
#define PerlSIO_get_bufsiz(f) 0





#define PerlSIO_get_cnt(f) 0
#define PerlSIO_get_ptr(f) NULL

#define PerlSIO_fputc(c,f) fputc(c,f)
#define PerlSIO_fputs(s,f) fputs(s,f)
#define PerlSIO_fflush(f) Fflush(f)
#define PerlSIO_fgets(s,n,f) fgets(s,n,f)
# 331 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlSIO_ungetc(c,f) ungetc(c,f)

#define PerlSIO_fileno(f) fileno(f)
#define PerlSIO_fdopen(f,s) fdopen(f,s)
#define PerlSIO_freopen(p,m,f) freopen(p,m,f)
#define PerlSIO_fread(buf,sz,count,f) fread(buf,sz,count,f)
#define PerlSIO_fwrite(buf,sz,count,f) fwrite(buf,sz,count,f)
#define PerlSIO_setbuf(f,b) setbuf(f,b)
#define PerlSIO_setvbuf(f,b,t,s) setvbuf(f,b,t,s)



#define PerlSIO_set_cnt(f,c) PerlIOProc_abort()




#define PerlSIO_set_ptr(f,p) PerlIOProc_abort()

#define PerlSIO_setlinebuf(f) setlinebuf(f)
#define PerlSIO_printf fprintf
#define PerlSIO_stdoutf printf
#define PerlSIO_vprintf(f,fmt,a) vfprintf(f,fmt,a)
#define PerlSIO_ftell(f) ftell(f)
#define PerlSIO_fseek(f,o,w) fseek(f,o,w)
#define PerlSIO_fgetpos(f,p) fgetpos(f,p)
#define PerlSIO_fsetpos(f,p) fsetpos(f,p)
#define PerlSIO_rewind(f) rewind(f)
#define PerlSIO_tmpfile() tmpfile()
#define PerlSIO_fdupopen(f) (f)
# 437 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlDir_mkdir(name,mode) Mkdir((name), (mode))



#define PerlDir_chdir(name) chdir((name))

#define PerlDir_rmdir(name) rmdir((name))
#define PerlDir_close(dir) closedir((dir))
#define PerlDir_open(name) opendir((name))
#define PerlDir_read(dir) readdir((dir))
#define PerlDir_rewind(dir) rewinddir((dir))
#define PerlDir_seek(dir,loc) seekdir((dir), (loc))
#define PerlDir_tell(dir) telldir((dir))
# 569 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlEnv_putenv(str) (ENV_LOCK, (putenv(str) ? (ENV_UNLOCK, 1) : (ENV_UNLOCK, 0)))





#define PerlEnv_getenv(str) mortal_getenv(str)
#define PerlEnv_getenv_len(str,l) getenv_len((str), (l))




#define PerlEnv_ENVgetenv(str) PerlEnv_getenv((str))
#define PerlEnv_ENVgetenv_len(str,l) PerlEnv_getenv_len((str), (l))

#define PerlEnv_uname(name) uname((name))
# 598 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlEnv_clearenv(str) (ENV_LOCK, (clearenv(str) ? (ENV_UNLOCK, 1) : (ENV_UNLOCK, 0)))


#define PerlEnv_get_childenv() get_childenv()
#define PerlEnv_free_childenv(e) free_childenv((e))
#define PerlEnv_get_childdir() get_childdir()
#define PerlEnv_free_childdir(d) free_childdir((d))
# 759 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlLIO_access(file,mode) access((file), (mode))
#define PerlLIO_chmod(file,mode) chmod((file), (mode))
#define PerlLIO_chown(file,owner,grp) chown((file), (owner), (grp))

#define PerlLIO_chsize(fd,size) ftruncate((fd), (size))





#define PerlLIO_close(fd) close((fd))
#define PerlLIO_dup(fd) dup((fd))
#define PerlLIO_dup2(fd1,fd2) dup2((fd1), (fd2))
#define PerlLIO_flock(fd,op) FLOCK((fd), (op))
#define PerlLIO_fstat(fd,buf) Fstat((fd), (buf))
#define PerlLIO_ioctl(fd,u,buf) ioctl((fd), (u), (buf))
#define PerlLIO_isatty(fd) isatty((fd))
#define PerlLIO_link(oldname,newname) link((oldname), (newname))
#define PerlLIO_symlink(oldname,newname) symlink((oldname), (newname))
#define PerlLIO_readlink(path,buf,bufsiz) readlink((path), (buf), (bufsiz))
#define PerlLIO_lseek(fd,offset,mode) lseek((fd), (offset), (mode))
#define PerlLIO_stat(name,buf) Stat((name), (buf))

#define PerlLIO_lstat(name,buf) lstat((name), (buf))



#define PerlLIO_mktemp(file) mktemp((file))
#define PerlLIO_open(file,flag) open((file), (flag))
#define PerlLIO_open3(file,flag,perm) open((file), (flag), (perm))
#define PerlLIO_read(fd,buf,count) read((fd), (buf), (count))
#define PerlLIO_rename(old,new) rename((old), (new))
#define PerlLIO_setmode(fd,mode) setmode((fd), (mode))
#define PerlLIO_tmpnam(str) tmpnam((str))
#define PerlLIO_umask(mode) umask((mode))
#define PerlLIO_unlink(file) unlink((file))
#define PerlLIO_utime(file,time) utime((file), (time))
#define PerlLIO_write(fd,buf,count) write((fd), (buf), (count))
# 907 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlMem_malloc(size) malloc((size))
#define PerlMem_realloc(buf,size) realloc((buf), (size))
#define PerlMem_free(buf) free((buf))
#define PerlMem_calloc(num,size) calloc((num), (size))
#define PerlMem_get_lock() 
#define PerlMem_free_lock() 
#define PerlMem_is_locked() 0


#define PerlMemShared_malloc(size) malloc((size))
#define PerlMemShared_realloc(buf,size) realloc((buf), (size))
#define PerlMemShared_free(buf) free((buf))
#define PerlMemShared_calloc(num,size) calloc((num), (size))
#define PerlMemShared_get_lock() 
#define PerlMemShared_free_lock() 
#define PerlMemShared_is_locked() 0


#define PerlMemParse_malloc(size) malloc((size))
#define PerlMemParse_realloc(buf,size) realloc((buf), (size))
#define PerlMemParse_free(buf) free((buf))
#define PerlMemParse_calloc(num,size) calloc((num), (size))
#define PerlMemParse_get_lock() 
#define PerlMemParse_free_lock() 
#define PerlMemParse_is_locked() 0
# 1116 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlProc_abort() abort()
#define PerlProc_crypt(c,s) crypt((c), (s))
#define PerlProc_exit(s) exit((s))
#define PerlProc__exit(s) _exit((s))
#define PerlProc_execl(c,w,x,y,z) execl((c), (w), (x), (y), (z))

#define PerlProc_execv(c,a) execv((c), (a))
#define PerlProc_execvp(c,a) execvp((c), (a))
#define PerlProc_getuid() getuid()
#define PerlProc_geteuid() geteuid()
#define PerlProc_getgid() getgid()
#define PerlProc_getegid() getegid()
#define PerlProc_getlogin() getlogin()
#define PerlProc_kill(i,a) kill((i), (a))
#define PerlProc_killpg(i,a) killpg((i), (a))
#define PerlProc_pause() Pause()
#define PerlProc_popen(c,m) my_popen((c), (m))
#define PerlProc_popen_list(m,n,a) my_popen_list((m),(n),(a))
#define PerlProc_pclose(f) my_pclose((f))
#define PerlProc_pipe(fd) pipe((fd))
#define PerlProc_setuid(u) setuid((u))
#define PerlProc_setgid(g) setgid((g))
#define PerlProc_sleep(t) sleep((t))
#define PerlProc_times(t) times((t))
#define PerlProc_wait(t) wait((t))
#define PerlProc_waitpid(p,s,f) waitpid((p), (s), (f))
#define PerlProc_setjmp(b,n) Sigsetjmp((b), (n))
#define PerlProc_longjmp(b,n) Siglongjmp((b), (n))
#define PerlProc_signal(n,h) signal((n), (h))
#define PerlProc_fork() my_fork()
#define PerlProc_getpid() getpid()
#define PerlProc_gettimeofday(t,z) gettimeofday((t),(z))
# 1382 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/iperlsys.h" 3 4
#define PerlSock_htonl(x) htonl(x)
#define PerlSock_htons(x) htons(x)
#define PerlSock_ntohl(x) ntohl(x)
#define PerlSock_ntohs(x) ntohs(x)
#define PerlSock_accept(s,a,l) accept(s, a, l)
#define PerlSock_bind(s,n,l) bind(s, n, l)
#define PerlSock_connect(s,n,l) connect(s, n, l)

#define PerlSock_gethostbyaddr(a,l,t) gethostbyaddr(a, l, t)
#define PerlSock_gethostbyname(n) gethostbyname(n)
#define PerlSock_gethostent gethostent
#define PerlSock_endhostent endhostent
#define PerlSock_gethostname(n,l) gethostname(n, l)

#define PerlSock_getnetbyaddr(n,t) getnetbyaddr(n, t)
#define PerlSock_getnetbyname(n) getnetbyname(n)
#define PerlSock_getnetent getnetent
#define PerlSock_endnetent endnetent
#define PerlSock_getpeername(s,n,l) getpeername(s, n, l)

#define PerlSock_getprotobyname(n) getprotobyname(n)
#define PerlSock_getprotobynumber(n) getprotobynumber(n)
#define PerlSock_getprotoent getprotoent
#define PerlSock_endprotoent endprotoent

#define PerlSock_getservbyname(n,p) getservbyname(n, p)
#define PerlSock_getservbyport(port,p) getservbyport(port, p)
#define PerlSock_getservent getservent
#define PerlSock_endservent endservent

#define PerlSock_getsockname(s,n,l) getsockname(s, n, l)
#define PerlSock_getsockopt(s,l,n,v,i) getsockopt(s, l, n, v, i)
#define PerlSock_inet_addr(c) inet_addr(c)
#define PerlSock_inet_ntoa(i) inet_ntoa(i)
#define PerlSock_listen(s,b) listen(s, b)
#define PerlSock_recv(s,b,l,f) recv(s, b, l, f)
#define PerlSock_recvfrom(s,b,l,f,from,fromlen) recvfrom(s, b, l, f, from, fromlen)

#define PerlSock_select(n,r,w,e,t) select(n, r, w, e, t)
#define PerlSock_send(s,b,l,f) send(s, b, l, f)
#define PerlSock_sendto(s,b,l,f,t,tlen) sendto(s, b, l, f, t, tlen)

#define PerlSock_sethostent(f) sethostent(f)
#define PerlSock_setnetent(f) setnetent(f)
#define PerlSock_setprotoent(f) setprotoent(f)
#define PerlSock_setservent(f) setservent(f)
#define PerlSock_setsockopt(s,l,n,v,len) setsockopt(s, l, n, v, len)

#define PerlSock_shutdown(s,h) shutdown(s, h)
#define PerlSock_socket(a,t,p) socket(a, t, p)
#define PerlSock_socketpair(a,t,p,f) socketpair(a, t, p, f)
# 4044 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 4059 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define USE_HASH_SEED 


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perly.h" 1 3 4






#define PERL_BISON_VERSION 30003
# 199 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perly.h" 3 4
union YYSTYPE
{

    I32 ival;

    char *pval;
    OP *opval;
    GV *gvval;

};

typedef union YYSTYPE YYSTYPE;
#define YYSTYPE_IS_TRIVIAL 1
#define YYSTYPE_IS_DECLARED 1




int yyparse (void);
# 4063 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4




#define PERL_BITFIELD8 U8


#define PERL_BITFIELD16 U16


#define PERL_BITFIELD32 U32


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 1 3 4
# 132 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
typedef enum {
 SVt_NULL,

 SVt_IV,
 SVt_NV,

 SVt_PV,
 SVt_INVLIST,
 SVt_PVIV,
 SVt_PVNV,
 SVt_PVMG,
 SVt_REGEXP,

 SVt_PVGV,
 SVt_PVLV,
 SVt_PVAV,
 SVt_PVHV,
 SVt_PVCV,
 SVt_PVFM,
 SVt_PVIO,



 SVt_LAST
} svtype;
# 166 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SVt_MASK 0x1f



#define SVt_PVBM SVt_PVMG


#define SVt_RV SVt_IV
# 187 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define PERL_ARENA_ROOTS_SIZE (SVt_LAST)


typedef struct he HE;
typedef struct hek HEK;




#define _SV_HEAD(ptrtype) ptrtype sv_any; U32 sv_refcnt; U32 sv_flags





#define _NV_BODYLESS_UNION NV svu_nv;




#define _SV_HEAD_UNION union { char* svu_pv; IV svu_iv; UV svu_uv; _NV_BODYLESS_UNION SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u _SV_HEAD_DEBUG
# 230 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define _SV_HEAD_DEBUG 


struct sv {
    void* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct gv {
    XPVGV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct cv {
    XPVCV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct av {
    XPVAV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct hv {
    XPVHV* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct io {
    XPVIO* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct p5rx {
    struct regexp* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

struct invlist {
    XINVLIST* sv_any; U32 sv_refcnt; U32 sv_flags;
    union { char* svu_pv; IV svu_iv; UV svu_uv; NV svu_nv; SV* svu_rv; SV** svu_array; HE** svu_hash; GP* svu_gp; PerlIO *svu_fp; } sv_u ;
};

#undef _SV_HEAD
#undef _SV_HEAD_UNION
# 339 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvANY(sv) (sv)->sv_any
#define SvFLAGS(sv) (sv)->sv_flags
#define SvREFCNT(sv) (sv)->sv_refcnt

#define SvREFCNT_inc(sv) Perl_SvREFCNT_inc(MUTABLE_SV(sv))
#define SvREFCNT_inc_simple(sv) SvREFCNT_inc(sv)
#define SvREFCNT_inc_NN(sv) Perl_SvREFCNT_inc_NN(MUTABLE_SV(sv))
#define SvREFCNT_inc_void(sv) Perl_SvREFCNT_inc_void(MUTABLE_SV(sv))


#define SvREFCNT_inc_simple_void(sv) STMT_START { if (sv) SvREFCNT(sv)++; } STMT_END
#define SvREFCNT_inc_simple_NN(sv) (++(SvREFCNT(sv)),MUTABLE_SV(sv))
#define SvREFCNT_inc_void_NN(sv) (void)(++SvREFCNT(MUTABLE_SV(sv)))
#define SvREFCNT_inc_simple_void_NN(sv) (void)(++SvREFCNT(MUTABLE_SV(sv)))

#define SvREFCNT_dec(sv) Perl_SvREFCNT_dec(aTHX_ MUTABLE_SV(sv))
#define SvREFCNT_dec_NN(sv) Perl_SvREFCNT_dec_NN(aTHX_ MUTABLE_SV(sv))

#define SVTYPEMASK 0xff
#define SvTYPE(sv) ((svtype)((sv)->sv_flags & SVTYPEMASK))




#define SvIS_FREED(sv) UNLIKELY(((sv)->sv_flags == SVTYPEMASK))



#define SvUPGRADE(sv,mt) ((void)(SvTYPE(sv) >= (mt) || (sv_upgrade(sv, mt),1)))


#define SVf_IOK 0x00000100
#define SVf_NOK 0x00000200
#define SVf_POK 0x00000400
#define SVf_ROK 0x00000800

#define SVp_IOK 0x00001000
#define SVp_NOK 0x00002000
#define SVp_POK 0x00004000
#define SVp_SCREAM 0x00008000
#define SVphv_CLONEABLE SVp_SCREAM
#define SVpgv_GP SVp_SCREAM
#define SVprv_PCS_IMPORTED SVp_SCREAM
# 394 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SVf_PROTECT 0x00010000
#define SVs_PADTMP 0x00020000
#define SVs_PADSTALE 0x00040000

#define SVs_TEMP 0x00080000
#define SVs_OBJECT 0x00100000
#define SVs_GMG 0x00200000
#define SVs_SMG 0x00400000
#define SVs_RMG 0x00800000

#define SVf_FAKE 0x01000000
# 416 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SVf_OOK 0x02000000


#define SVf_BREAK 0x04000000





#define SVf_READONLY 0x08000000




#define SVf_THINKFIRST (SVf_READONLY|SVf_PROTECT|SVf_ROK|SVf_FAKE |SVs_RMG|SVf_IsCOW)


#define SVf_OK (SVf_IOK|SVf_NOK|SVf_POK|SVf_ROK| SVp_IOK|SVp_NOK|SVp_POK|SVpgv_GP)


#define PRIVSHIFT 4







#define SVf_AMAGIC 0x10000000
#define SVf_IsCOW 0x10000000




#define SVf_UTF8 0x20000000




#define SVphv_SHAREKEYS 0x20000000
# 466 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SVpav_REAL 0x40000000

#define SVphv_LAZYDEL 0x40000000


#define SVf_IVisUV 0x80000000

#define SVpav_REIFY 0x80000000

#define SVphv_HASKFLAGS 0x80000000

#define SVprv_WEAKREF 0x80000000


#define _XPV_HEAD HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u
# 489 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define xpv_len xpv_len_u.xpvlenu_len

union _xnvu {
    NV xnv_nv;
    HV * xgv_stash;
    line_t xnv_lines;
    _Bool xnv_bm_tail;
};

union _xivu {
    IV xivu_iv;
    UV xivu_uv;
    HEK * xivu_namehek;
    _Bool xivu_eval_seen;

};

union _xmgu {
    MAGIC* xmg_magic;
    STRLEN xmg_hash_index;
};

struct xpv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
};

struct xpviv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xiv_u;
};

#define xiv_iv xiv_u.xivu_iv

struct xpvuv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xuv_u;
};

#define xuv_uv xuv_u.xivu_uv

struct xpvnv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
};


struct xpvmg {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
};

struct xpvlv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
    union {
 STRLEN xlvu_targoff;
 ssize_t xlvu_stargoff;
    } xlv_targoff_u;
    STRLEN xlv_targlen;
    SV* xlv_targ;
    char xlv_type;

    char xlv_flags;

};

#define xlv_targoff xlv_targoff_u.xlvu_targoff

struct xpvinvlist {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    IV prev_index;
    STRLEN iterator;
    _Bool is_offset;





};



struct xpvgv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xiv_u;
    union _xnvu xnv_u;
};

typedef U32 cv_flags_t;

#define _XPVCV_COMMON HV * xcv_stash; union { OP * xcv_start; ANY xcv_xsubany; } xcv_start_u; union { OP * xcv_root; void (*xcv_xsub) (pTHX_ CV*); } xcv_root_u; union { GV * xcv_gv; HEK * xcv_hek; } xcv_gv_u; char * xcv_file; union { PADLIST * xcv_padlist; void * xcv_hscxt; } xcv_padlist_u; CV * xcv_outside; U32 xcv_outside_seq; cv_flags_t xcv_flags; I32 xcv_depth
# 610 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
struct xpvfm {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    HV * xcv_stash; union { OP * xcv_start; ANY xcv_xsubany; } xcv_start_u; union { OP * xcv_root; void (*xcv_xsub) (PerlInterpreter* my_perl __attribute__((unused)), CV*); } xcv_root_u; union { GV * xcv_gv; HEK * xcv_hek; } xcv_gv_u; char * xcv_file; union { PADLIST * xcv_padlist; void * xcv_hscxt; } xcv_padlist_u; CV * xcv_outside; U32 xcv_outside_seq; cv_flags_t xcv_flags; I32 xcv_depth;
};


struct xpvio {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    union _xivu xiv_u;

    PerlIO * xio_ofp;
# 630 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
    union {
 DIR * xiou_dirp;
 void * xiou_any;
    } xio_dirpu;

    IV xio_page;
    IV xio_page_len;
    IV xio_lines_left;
    char * xio_top_name;
    GV * xio_top_gv;
    char * xio_fmt_name;
    GV * xio_fmt_gv;
    char * xio_bottom_name;
    GV * xio_bottom_gv;
    char xio_type;
    U8 xio_flags;
};

#define xio_dirp xio_dirpu.xiou_dirp
#define xio_any xio_dirpu.xiou_any

#define IOf_ARGV 1
#define IOf_START 2
#define IOf_FLUSH 4
#define IOf_DIDTOP 8
#define IOf_UNTAINT 16
#define IOf_NOLINE 32
#define IOf_FAKE_DIRP 64
# 869 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvNIOK(sv) (SvFLAGS(sv) & (SVf_IOK|SVf_NOK))
#define SvNIOKp(sv) (SvFLAGS(sv) & (SVp_IOK|SVp_NOK))
#define SvNIOK_off(sv) (SvFLAGS(sv) &= ~(SVf_IOK|SVf_NOK| SVp_IOK|SVp_NOK|SVf_IVisUV))


#define assert_not_ROK(sv) assert_(!SvROK(sv) || !SvRV(sv))
#define assert_not_glob(sv) assert_(!isGV_with_GP(sv))

#define SvOK(sv) (SvFLAGS(sv) & SVf_OK)
#define SvOK_off(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_IVisUV|SVf_UTF8), SvOOK_off(sv))



#define SvOK_off_exc_UV(sv) (assert_not_ROK(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_UTF8), SvOOK_off(sv))




#define SvOKp(sv) (SvFLAGS(sv) & (SVp_IOK|SVp_NOK|SVp_POK))
#define SvIOKp(sv) (SvFLAGS(sv) & SVp_IOK)
#define SvIOKp_on(sv) (assert_not_glob(sv) SvFLAGS(sv) |= SVp_IOK)

#define SvNOKp(sv) (SvFLAGS(sv) & SVp_NOK)
#define SvNOKp_on(sv) (assert_not_glob(sv) SvFLAGS(sv) |= SVp_NOK)
#define SvPOKp(sv) (SvFLAGS(sv) & SVp_POK)
#define SvPOKp_on(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) |= SVp_POK)


#define SvIOK(sv) (SvFLAGS(sv) & SVf_IOK)
#define SvIOK_on(sv) (assert_not_glob(sv) SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))

#define SvIOK_off(sv) (SvFLAGS(sv) &= ~(SVf_IOK|SVp_IOK|SVf_IVisUV))
#define SvIOK_only(sv) (SvOK_off(sv), SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))

#define SvIOK_only_UV(sv) (assert_not_glob(sv) SvOK_off_exc_UV(sv), SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))


#define SvIOK_UV(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV)) == (SVf_IOK|SVf_IVisUV))

#define SvUOK(sv) SvIOK_UV(sv)
#define SvIOK_notUV(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV)) == SVf_IOK)


#define SvIsUV(sv) (SvFLAGS(sv) & SVf_IVisUV)
#define SvIsUV_on(sv) (SvFLAGS(sv) |= SVf_IVisUV)
#define SvIsUV_off(sv) (SvFLAGS(sv) &= ~SVf_IVisUV)

#define SvNOK(sv) (SvFLAGS(sv) & SVf_NOK)
#define SvNOK_on(sv) (assert_not_glob(sv) SvFLAGS(sv) |= (SVf_NOK|SVp_NOK))

#define SvNOK_off(sv) (SvFLAGS(sv) &= ~(SVf_NOK|SVp_NOK))
#define SvNOK_only(sv) (SvOK_off(sv), SvFLAGS(sv) |= (SVf_NOK|SVp_NOK))
# 950 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvUTF8(sv) (SvFLAGS(sv) & SVf_UTF8)
#define SvUTF8_on(sv) (SvFLAGS(sv) |= (SVf_UTF8))
#define SvUTF8_off(sv) (SvFLAGS(sv) &= ~(SVf_UTF8))

#define SvPOK(sv) (SvFLAGS(sv) & SVf_POK)
#define SvPOK_on(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) |= (SVf_POK|SVp_POK))

#define SvPOK_off(sv) (SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
#define SvPOK_only(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_IVisUV|SVf_UTF8), SvFLAGS(sv) |= (SVf_POK|SVp_POK))



#define SvPOK_only_UTF8(sv) (assert_not_ROK(sv) assert_not_glob(sv) SvFLAGS(sv) &= ~(SVf_OK| SVf_IVisUV), SvFLAGS(sv) |= (SVf_POK|SVp_POK))




#define SvVOK(sv) (SvMAGICAL(sv) && mg_find(sv,PERL_MAGIC_vstring))
# 976 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvVSTRING_mg(sv) (SvMAGICAL(sv) ? mg_find(sv,PERL_MAGIC_vstring) : NULL)


#define SvOOK(sv) (SvFLAGS(sv) & SVf_OOK)
#define SvOOK_on(sv) (SvFLAGS(sv) |= SVf_OOK)
# 991 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvOOK_off(sv) ((void)(SvOOK(sv) && (sv_backoff(sv),0)))

#define SvFAKE(sv) (SvFLAGS(sv) & SVf_FAKE)
#define SvFAKE_on(sv) (SvFLAGS(sv) |= SVf_FAKE)
#define SvFAKE_off(sv) (SvFLAGS(sv) &= ~SVf_FAKE)

#define SvROK(sv) (SvFLAGS(sv) & SVf_ROK)
#define SvROK_on(sv) (SvFLAGS(sv) |= SVf_ROK)
#define SvROK_off(sv) (SvFLAGS(sv) &= ~(SVf_ROK))

#define SvMAGICAL(sv) (SvFLAGS(sv) & (SVs_GMG|SVs_SMG|SVs_RMG))
#define SvMAGICAL_on(sv) (SvFLAGS(sv) |= (SVs_GMG|SVs_SMG|SVs_RMG))
#define SvMAGICAL_off(sv) (SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))

#define SvGMAGICAL(sv) (SvFLAGS(sv) & SVs_GMG)
#define SvGMAGICAL_on(sv) (SvFLAGS(sv) |= SVs_GMG)
#define SvGMAGICAL_off(sv) (SvFLAGS(sv) &= ~SVs_GMG)

#define SvSMAGICAL(sv) (SvFLAGS(sv) & SVs_SMG)
#define SvSMAGICAL_on(sv) (SvFLAGS(sv) |= SVs_SMG)
#define SvSMAGICAL_off(sv) (SvFLAGS(sv) &= ~SVs_SMG)

#define SvRMAGICAL(sv) (SvFLAGS(sv) & SVs_RMG)
#define SvRMAGICAL_on(sv) (SvFLAGS(sv) |= SVs_RMG)
#define SvRMAGICAL_off(sv) (SvFLAGS(sv) &= ~SVs_RMG)

#define SvAMAGIC(sv) (SvROK(sv) && SvOBJECT(SvRV(sv)) && HvAMAGIC(SvSTASH(SvRV(sv))))



#define HvAMAGIC(hv) (SvFLAGS(hv) & SVf_AMAGIC)
#define HvAMAGIC_on(hv) (SvFLAGS(hv) |= SVf_AMAGIC)
#define HvAMAGIC_off(hv) (SvFLAGS(hv) &=~ SVf_AMAGIC)



#define SvPOK_nog(sv) ((SvFLAGS(sv) & (SVf_POK|SVs_GMG)) == SVf_POK)
#define SvIOK_nog(sv) ((SvFLAGS(sv) & (SVf_IOK|SVs_GMG)) == SVf_IOK)
#define SvUOK_nog(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV|SVs_GMG)) == (SVf_IOK|SVf_IVisUV))
#define SvNOK_nog(sv) ((SvFLAGS(sv) & (SVf_NOK|SVs_GMG)) == SVf_NOK)
#define SvNIOK_nog(sv) (SvNIOK(sv) && !(SvFLAGS(sv) & SVs_GMG))

#define SvPOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)
#define SvIOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_THINKFIRST|SVs_GMG)) == SVf_IOK)
#define SvUOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV|SVf_THINKFIRST|SVs_GMG)) == (SVf_IOK|SVf_IVisUV))
#define SvNOK_nogthink(sv) ((SvFLAGS(sv) & (SVf_NOK|SVf_THINKFIRST|SVs_GMG)) == SVf_NOK)
#define SvNIOK_nogthink(sv) (SvNIOK(sv) && !(SvFLAGS(sv) & (SVf_THINKFIRST|SVs_GMG)))

#define SvPOK_utf8_nog(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVs_GMG)) == (SVf_POK|SVf_UTF8))
#define SvPOK_utf8_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_THINKFIRST|SVs_GMG)) == (SVf_POK|SVf_UTF8))

#define SvPOK_byte_nog(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVs_GMG)) == SVf_POK)
#define SvPOK_byte_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)

#define SvPOK_pure_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_IOK|SVf_NOK|SVf_ROK|SVpgv_GP|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)

#define SvPOK_utf8_pure_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_IOK|SVf_NOK|SVf_ROK|SVpgv_GP|SVf_THINKFIRST|SVs_GMG)) == (SVf_POK|SVf_UTF8))

#define SvPOK_byte_pure_nogthink(sv) ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_IOK|SVf_NOK|SVf_ROK|SVpgv_GP|SVf_THINKFIRST|SVs_GMG)) == SVf_POK)
# 1066 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvGAMAGIC(sv) (SvGMAGICAL(sv) || SvAMAGIC(sv))

#define Gv_AMG(stash) (HvNAME(stash) && Gv_AMupdate(stash,FALSE) ? 1 : (HvAMAGIC_off(stash), 0))




#define SvWEAKREF(sv) ((SvFLAGS(sv) & (SVf_ROK|SVprv_WEAKREF)) == (SVf_ROK|SVprv_WEAKREF))

#define SvWEAKREF_on(sv) (SvFLAGS(sv) |= (SVf_ROK|SVprv_WEAKREF))
#define SvWEAKREF_off(sv) (SvFLAGS(sv) &= ~(SVf_ROK|SVprv_WEAKREF))

#define SvPCS_IMPORTED(sv) ((SvFLAGS(sv) & (SVf_ROK|SVprv_PCS_IMPORTED)) == (SVf_ROK|SVprv_PCS_IMPORTED))

#define SvPCS_IMPORTED_on(sv) (SvFLAGS(sv) |= (SVf_ROK|SVprv_PCS_IMPORTED))
#define SvPCS_IMPORTED_off(sv) (SvFLAGS(sv) &= ~(SVf_ROK|SVprv_PCS_IMPORTED))
# 1107 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvTHINKFIRST(sv) (SvFLAGS(sv) & SVf_THINKFIRST)

#define SVs_PADMY 0
#define SvPADMY(sv) !(SvFLAGS(sv) & SVs_PADTMP)

#define SvPADMY_on(sv) SvPADTMP_off(sv)


#define SvPADTMP(sv) (SvFLAGS(sv) & (SVs_PADTMP))
#define SvPADSTALE(sv) (SvFLAGS(sv) & (SVs_PADSTALE))

#define SvPADTMP_on(sv) (SvFLAGS(sv) |= SVs_PADTMP)
#define SvPADTMP_off(sv) (SvFLAGS(sv) &= ~SVs_PADTMP)
#define SvPADSTALE_on(sv) Perl_SvPADSTALE_on(MUTABLE_SV(sv))
#define SvPADSTALE_off(sv) Perl_SvPADSTALE_off(MUTABLE_SV(sv))

#define SvTEMP(sv) (SvFLAGS(sv) & SVs_TEMP)
#define SvTEMP_on(sv) (SvFLAGS(sv) |= SVs_TEMP)
#define SvTEMP_off(sv) (SvFLAGS(sv) &= ~SVs_TEMP)

#define SvOBJECT(sv) (SvFLAGS(sv) & SVs_OBJECT)
#define SvOBJECT_on(sv) (SvFLAGS(sv) |= SVs_OBJECT)
#define SvOBJECT_off(sv) (SvFLAGS(sv) &= ~SVs_OBJECT)
# 1147 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvREADONLY(sv) (SvFLAGS(sv) & (SVf_READONLY|SVf_PROTECT))




#define SvREADONLY_on(sv) (SvFLAGS(sv) |= SVf_READONLY)
#define SvREADONLY_off(sv) (SvFLAGS(sv) &= ~SVf_READONLY)


#define SvSCREAM(sv) ((SvFLAGS(sv) & (SVp_SCREAM|SVp_POK)) == (SVp_SCREAM|SVp_POK))
#define SvSCREAM_on(sv) (SvFLAGS(sv) |= SVp_SCREAM)
#define SvSCREAM_off(sv) (SvFLAGS(sv) &= ~SVp_SCREAM)


#define SvCOMPILED(sv) 0
#define SvCOMPILED_on(sv) 
#define SvCOMPILED_off(sv) 
# 1176 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvTAIL(_svtail) (((XPVNV*)SvANY(_svtail))->xnv_u.xnv_bm_tail)




#define SvVALID(_svvalid) ( SvPOKp(_svvalid) && SvSMAGICAL(_svvalid) && SvMAGIC(_svvalid) && (SvMAGIC(_svvalid)->mg_type == PERL_MAGIC_bm || mg_find(_svvalid, PERL_MAGIC_bm)) )







#define SvRVx(sv) SvRV(sv)
# 1215 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvLEN(sv) ((XPV*) SvANY(sv))->xpv_len

#define SvEND(sv) ((sv)->sv_u.svu_pv + ((XPV*)SvANY(sv))->xpv_cur)
# 1293 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvPVX(sv) ((sv)->sv_u.svu_pv)
#define SvCUR(sv) ((XPV*) SvANY(sv))->xpv_cur
#define SvIVX(sv) ((XPVIV*) SvANY(sv))->xiv_iv
#define SvUVX(sv) ((XPVUV*) SvANY(sv))->xuv_uv
#define SvNVX(sv) ((XPVNV*) SvANY(sv))->xnv_u.xnv_nv
#define SvRV(sv) ((sv)->sv_u.svu_rv)
#define SvRV_const(sv) (0 + (sv)->sv_u.svu_rv)
#define SvMAGIC(sv) ((XPVMG*) SvANY(sv))->xmg_u.xmg_magic
#define SvSTASH(sv) ((XPVMG*) SvANY(sv))->xmg_stash






#define SvPVX_mutable(sv) (0 + (sv)->sv_u.svu_pv)
#define SvPVX_const(sv) ((const char*)(0 + (sv)->sv_u.svu_pv))







#define SvIVXx(sv) SvIVX(sv)
#define SvUVXx(sv) SvUVX(sv)
#define SvNVXx(sv) SvNVX(sv)
#define SvPVXx(sv) SvPVX(sv)
#define SvLENx(sv) SvLEN(sv)
#define SvENDx(sv) ((PL_Sv = (sv)), SvEND(PL_Sv))





#define SvIV_please(sv) STMT_START {if (!SvIOKp(sv) && (SvFLAGS(sv) & (SVf_NOK|SVf_POK))) (void) SvIV(sv); } STMT_END


#define SvIV_please_nomg(sv) (!(SvFLAGS(sv) & (SVf_IOK|SVp_IOK)) && (SvFLAGS(sv) & (SVf_NOK|SVf_POK)) ? (sv_2iv_flags(sv, 0), SvIOK(sv)) : SvIOK(sv))



#define SvIV_set(sv,val) STMT_START { assert(PL_valid_types_IV_set[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); (((XPVIV*) SvANY(sv))->xiv_iv = (val)); } STMT_END




#define SvNV_set(sv,val) STMT_START { assert(PL_valid_types_NV_set[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); (((XPVNV*)SvANY(sv))->xnv_u.xnv_nv = (val)); } STMT_END




#define SvPV_set(sv,val) STMT_START { assert(PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); ((sv)->sv_u.svu_pv = (val)); } STMT_END






#define SvUV_set(sv,val) STMT_START { assert(PL_valid_types_IV_set[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); (((XPVUV*)SvANY(sv))->xuv_uv = (val)); } STMT_END




#define SvRV_set(sv,val) STMT_START { assert(PL_valid_types_RV[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); ((sv)->sv_u.svu_rv = (val)); } STMT_END






#define SvMAGIC_set(sv,val) STMT_START { assert(SvTYPE(sv) >= SVt_PVMG); (((XPVMG*)SvANY(sv))->xmg_u.xmg_magic = (val)); } STMT_END


#define SvSTASH_set(sv,val) STMT_START { assert(SvTYPE(sv) >= SVt_PVMG); (((XPVMG*) SvANY(sv))->xmg_stash = (val)); } STMT_END


#define SvCUR_set(sv,val) STMT_START { assert(PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); (((XPV*) SvANY(sv))->xpv_cur = (val)); } STMT_END






#define SvLEN_set(sv,val) STMT_START { assert(PL_valid_types_PVX[SvTYPE(sv) & SVt_MASK]); assert(!isGV_with_GP(sv)); assert(!(SvTYPE(sv) == SVt_PVIO && !(IoFLAGS(sv) & IOf_FAKE_DIRP))); (((XPV*) SvANY(sv))->xpv_len = (val)); } STMT_END






#define SvEND_set(sv,val) STMT_START { assert(SvTYPE(sv) >= SVt_PV); SvCUR_set(sv, (val) - SvPVX(sv)); } STMT_END
# 1399 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvPV_renew(sv,n) STMT_START { SvLEN_set(sv, n); SvPV_set((sv), (MEM_WRAP_CHECK_(n,char) (char*)saferealloc((Malloc_t)SvPVX(sv), (MEM_SIZE)((n))))); } STMT_END






#define SvPV_shrink_to_cur(sv) STMT_START { const STRLEN _lEnGtH = SvCUR(sv) + 1; SvPV_renew(sv, _lEnGtH); } STMT_END
# 1419 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvPV_free(sv) STMT_START { assert(SvTYPE(sv) >= SVt_PV); if (SvLEN(sv)) { assert(!SvROK(sv)); if(UNLIKELY(SvOOK(sv))) { STRLEN zok; SvOOK_offset(sv, zok); SvPV_set(sv, SvPVX_mutable(sv) - zok); SvFLAGS(sv) &= ~SVf_OOK; } Safefree(SvPVX(sv)); } } STMT_END
# 1450 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define BmFLAGS(sv) (SvTAIL(sv) ? FBMcf_TAIL : 0)
# 1462 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define BmUSEFUL(sv) ((XPVIV*) SvANY(sv))->xiv_u.xivu_iv




#define BmRARE(sv) 0
#define BmPREVIOUS(sv) 0


#define FmLINES(sv) ((XPVIV*) SvANY(sv))->xiv_iv

#define LvTYPE(sv) ((XPVLV*) SvANY(sv))->xlv_type
#define LvTARG(sv) ((XPVLV*) SvANY(sv))->xlv_targ
#define LvTARGOFF(sv) ((XPVLV*) SvANY(sv))->xlv_targoff
#define LvSTARGOFF(sv) ((XPVLV*) SvANY(sv))->xlv_targoff_u.xlvu_stargoff
#define LvTARGLEN(sv) ((XPVLV*) SvANY(sv))->xlv_targlen
#define LvFLAGS(sv) ((XPVLV*) SvANY(sv))->xlv_flags

#define LVf_NEG_OFF 0x1
#define LVf_NEG_LEN 0x2
#define LVf_OUT_OF_RANGE 0x4

#define IoIFP(sv) (sv)->sv_u.svu_fp
#define IoOFP(sv) ((XPVIO*) SvANY(sv))->xio_ofp
#define IoDIRP(sv) ((XPVIO*) SvANY(sv))->xio_dirp
#define IoANY(sv) ((XPVIO*) SvANY(sv))->xio_any
#define IoLINES(sv) ((XPVIO*) SvANY(sv))->xiv_u.xivu_iv
#define IoPAGE(sv) ((XPVIO*) SvANY(sv))->xio_page
#define IoPAGE_LEN(sv) ((XPVIO*) SvANY(sv))->xio_page_len
#define IoLINES_LEFT(sv) ((XPVIO*) SvANY(sv))->xio_lines_left
#define IoTOP_NAME(sv) ((XPVIO*) SvANY(sv))->xio_top_name
#define IoTOP_GV(sv) ((XPVIO*) SvANY(sv))->xio_top_gv
#define IoFMT_NAME(sv) ((XPVIO*) SvANY(sv))->xio_fmt_name
#define IoFMT_GV(sv) ((XPVIO*) SvANY(sv))->xio_fmt_gv
#define IoBOTTOM_NAME(sv) ((XPVIO*) SvANY(sv))->xio_bottom_name
#define IoBOTTOM_GV(sv) ((XPVIO*) SvANY(sv))->xio_bottom_gv
#define IoTYPE(sv) ((XPVIO*) SvANY(sv))->xio_type
#define IoFLAGS(sv) ((XPVIO*) SvANY(sv))->xio_flags


#define IoTYPE_RDONLY '<'
#define IoTYPE_WRONLY '>'
#define IoTYPE_RDWR '+'
#define IoTYPE_APPEND 'a'
#define IoTYPE_PIPE '|'
#define IoTYPE_STD '-'
#define IoTYPE_SOCKET 's'
#define IoTYPE_CLOSED ' '
#define IoTYPE_IMPLICIT 'I'
#define IoTYPE_NUMERIC '#'
# 1539 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define sv_taint(sv) sv_magic((sv), NULL, PERL_MAGIC_taint, NULL, 0)




#define SvTAINTED(sv) (SvMAGICAL(sv) && sv_tainted(sv))

#define SvTAINTED_on(sv) STMT_START{ if(UNLIKELY(TAINTING_get)){sv_taint(sv);} }STMT_END
#define SvTAINTED_off(sv) STMT_START{ if(UNLIKELY(TAINTING_get)){sv_untaint(sv);} }STMT_END

#define SvTAINT(sv) STMT_START { assert(TAINTING_get || !TAINT_get); if (UNLIKELY(TAINT_get)) SvTAINTED_on(sv); } STMT_END
# 1833 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvIV(sv) (SvIOK_nog(sv) ? SvIVX(sv) : sv_2iv(sv))
#define SvUV(sv) (SvUOK_nog(sv) ? SvUVX(sv) : sv_2uv(sv))
#define SvNV(sv) (SvNOK_nog(sv) ? SvNVX(sv) : sv_2nv(sv))

#define SvIV_nomg(sv) (SvIOK(sv) ? SvIVX(sv) : sv_2iv_flags(sv, 0))
#define SvUV_nomg(sv) (SvUOK(sv) ? SvUVX(sv) : sv_2uv_flags(sv, 0))
#define SvNV_nomg(sv) (SvNOK(sv) ? SvNVX(sv) : sv_2nv_flags(sv, 0))



#define SvPV(sv,len) SvPV_flags(sv, len, SV_GMAGIC)
#define SvPV_const(sv,len) SvPV_flags_const(sv, len, SV_GMAGIC)
#define SvPV_mutable(sv,len) SvPV_flags_mutable(sv, len, SV_GMAGIC)

#define SvPV_flags(sv,len,flags) (SvPOK_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_2pv_flags(sv, &len, flags))


#define SvPV_flags_const(sv,len,flags) (SvPOK_nog(sv) ? ((len = SvCUR(sv)), SvPVX_const(sv)) : (const char*) sv_2pv_flags(sv, &len, (flags|SV_CONST_RETURN)))



#define SvPV_flags_const_nolen(sv,flags) (SvPOK_nog(sv) ? SvPVX_const(sv) : (const char*) sv_2pv_flags(sv, 0, (flags|SV_CONST_RETURN)))



#define SvPV_flags_mutable(sv,len,flags) (SvPOK_nog(sv) ? ((len = SvCUR(sv)), SvPVX_mutable(sv)) : sv_2pv_flags(sv, &len, (flags|SV_MUTABLE_RETURN)))




#define SvPV_force(sv,len) SvPV_force_flags(sv, len, SV_GMAGIC)
#define SvPV_force_nolen(sv) SvPV_force_flags_nolen(sv, SV_GMAGIC)
#define SvPV_force_mutable(sv,len) SvPV_force_flags_mutable(sv, len, SV_GMAGIC)

#define SvPV_force_nomg(sv,len) SvPV_force_flags(sv, len, 0)
#define SvPV_force_nomg_nolen(sv) SvPV_force_flags_nolen(sv, 0)

#define SvPV_force_flags(sv,len,flags) (SvPOK_pure_nogthink(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_pvn_force_flags(sv, &len, flags))



#define SvPV_force_flags_nolen(sv,flags) (SvPOK_pure_nogthink(sv) ? SvPVX(sv) : sv_pvn_force_flags(sv, 0, flags))



#define SvPV_force_flags_mutable(sv,len,flags) (SvPOK_pure_nogthink(sv) ? ((len = SvCUR(sv)), SvPVX_mutable(sv)) : sv_pvn_force_flags(sv, &len, flags|SV_MUTABLE_RETURN))




#define SvPV_nolen(sv) (SvPOK_nog(sv) ? SvPVX(sv) : sv_2pv_flags(sv, 0, SV_GMAGIC))




#define SvPV_nomg_nolen(sv) (SvPOK_nog(sv) ? SvPVX(sv) : sv_2pv_flags(sv, 0, 0))



#define SvPV_nolen_const(sv) (SvPOK_nog(sv) ? SvPVX_const(sv) : sv_2pv_flags(sv, 0, SV_GMAGIC|SV_CONST_RETURN))



#define SvPV_nomg(sv,len) SvPV_flags(sv, len, 0)
#define SvPV_nomg_const(sv,len) SvPV_flags_const(sv, len, 0)
#define SvPV_nomg_const_nolen(sv) SvPV_flags_const_nolen(sv, 0)



#define SvPVutf8(sv,len) (SvPOK_utf8_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_2pvutf8(sv, &len))



#define SvPVutf8_or_null(sv,len) (SvPOK_utf8_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : (SvGETMAGIC(sv), SvOK(sv)) ? sv_2pvutf8_flags(sv, &len, 0) : ((len = 0), NULL))




#define SvPVutf8_nomg(sv,len) (SvPOK_utf8_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_2pvutf8_flags(sv, &len, 0))



#define SvPVutf8_or_null_nomg(sv,len) (SvPOK_utf8_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : SvOK(sv) ? sv_2pvutf8_flags(sv, &len, 0) : ((len = 0), NULL))




#define SvPVutf8_force(sv,len) (SvPOK_utf8_pure_nogthink(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_pvutf8n_force(sv, &len))



#define SvPVutf8_nolen(sv) (SvPOK_utf8_nog(sv) ? SvPVX(sv) : sv_2pvutf8(sv, 0))





#define SvPVbyte(sv,len) (SvPOK_byte_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_2pvbyte(sv, &len))



#define SvPVbyte_or_null(sv,len) (SvPOK_byte_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : (SvGETMAGIC(sv), SvOK(sv)) ? sv_2pvbyte_flags(sv, &len, 0) : ((len = 0), NULL))




#define SvPVbyte_nomg(sv,len) (SvPOK_byte_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_2pvbyte_flags(sv, &len, 0))



#define SvPVbyte_or_null_nomg(sv,len) (SvPOK_utf8_nog(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : SvOK(sv) ? sv_2pvbyte_flags(sv, &len, 0) : ((len = 0), NULL))




#define SvPVbyte_force(sv,len) (SvPOK_byte_pure_nogthink(sv) ? ((len = SvCUR(sv)), SvPVX(sv)) : sv_pvbyten_force(sv, &len))



#define SvPVbyte_nolen(sv) (SvPOK_byte_nog(sv) ? SvPVX(sv) : sv_2pvbyte(sv, 0))
# 1962 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvPVx_force(sv,len) sv_pvn_force(sv, &len)
#define SvPVutf8x_force(sv,len) sv_pvutf8n_force(sv, &len)
#define SvPVbytex_force(sv,len) sv_pvbyten_force(sv, &len)

#define SvTRUEx(sv) SvTRUE(sv)
#define SvTRUEx_nomg(sv) SvTRUE_nomg(sv)
#define SvTRUE_nomg_NN(sv) SvTRUE_common(sv, TRUE)



#define SvIVx(sv) ({SV *_sv = MUTABLE_SV(sv); SvIV(_sv); })
#define SvUVx(sv) ({SV *_sv = MUTABLE_SV(sv); SvUV(_sv); })
#define SvNVx(sv) ({SV *_sv = MUTABLE_SV(sv); SvNV(_sv); })
#define SvPVx(sv,len) ({SV *_sv = (sv); SvPV(_sv, len); })
#define SvPVx_const(sv,len) ({SV *_sv = (sv); SvPV_const(_sv, len); })
#define SvPVx_nolen(sv) ({SV *_sv = (sv); SvPV_nolen(_sv); })
#define SvPVx_nolen_const(sv) ({SV *_sv = (sv); SvPV_nolen_const(_sv); })
#define SvPVutf8x(sv,len) ({SV *_sv = (sv); SvPVutf8(_sv, len); })
#define SvPVbytex(sv,len) ({SV *_sv = (sv); SvPVbyte(_sv, len); })
#define SvPVbytex_nolen(sv) ({SV *_sv = (sv); SvPVbyte_nolen(_sv); })
# 2000 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvPVXtrue(sv) ( ((XPV*)SvANY((sv))) && ( ((XPV*)SvANY((sv)))->xpv_cur > 1 || ( ((XPV*)SvANY((sv)))->xpv_cur && *(sv)->sv_u.svu_pv != '0' ) ) )
# 2011 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvIsCOW(sv) (SvFLAGS(sv) & SVf_IsCOW)
#define SvIsCOW_on(sv) (SvFLAGS(sv) |= SVf_IsCOW)
#define SvIsCOW_off(sv) (SvFLAGS(sv) &= ~SVf_IsCOW)
#define SvIsCOW_shared_hash(sv) (SvIsCOW(sv) && SvLEN(sv) == 0)

#define SvSHARED_HEK_FROM_PV(pvx) ((struct hek*)(pvx - STRUCT_OFFSET(struct hek, hek_key)))







#define SvSHARED_HASH(sv) (0 + SvSHARED_HEK_FROM_PV(SvPVX_const(sv))->hek_hash)


#define SV_UTF8_NO_ENCODING 0







#define SV_IMMEDIATE_UNREF 1
#define SV_GMAGIC 2
#define SV_COW_DROP_PV 4
#define SV_NOSTEAL 16
#define SV_CONST_RETURN 32
#define SV_MUTABLE_RETURN 64
#define SV_SMAGIC 128
#define SV_HAS_TRAILING_NUL 256
#define SV_COW_SHARED_HASH_KEYS 512




#define SV_COW_OTHER_PVS 1024

#define SV_UNDEF_RETURNS_NULL 2048



#define SV_FORCE_UTF8_UPGRADE 4096


#define SV_SKIP_OVERLOAD 8192
#define SV_CATBYTES 16384
#define SV_CATUTF8 32768
# 2071 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SV_DO_COW_SVSETSV 0



#define sv_unref(sv) sv_unref_flags(sv, 0)
#define sv_force_normal(sv) sv_force_normal_flags(sv, 0)
#define sv_usepvn(sv,p,l) sv_usepvn_flags(sv, p, l, 0)
#define sv_usepvn_mg(sv,p,l) sv_usepvn_flags(sv, p, l, SV_SMAGIC)







#define SV_CHECK_THINKFIRST_COW_DROP(sv) if (SvTHINKFIRST(sv)) sv_force_normal_flags(sv, SV_COW_DROP_PV)



#define SvCANCOW(sv) (SvIsCOW(sv) ? SvLEN(sv) ? CowREFCNT(sv) != SV_COW_REFCNT_MAX : 1 : (SvFLAGS(sv) & CAN_COW_MASK) == CAN_COW_FLAGS && SvCUR(sv)+1 < SvLEN(sv))





#define CowREFCNT(sv) (*(U8 *)(SvPVX(sv)+SvLEN(sv)-1))
#define SV_COW_REFCNT_MAX nBIT_UMAX(sizeof(U8) * CHARBITS)
#define CAN_COW_MASK (SVf_POK|SVf_ROK|SVp_POK|SVf_FAKE| SVf_OOK|SVf_BREAK|SVf_READONLY|SVf_PROTECT)



#define CAN_COW_FLAGS (SVp_POK|SVf_POK)

#define SV_CHECK_THINKFIRST(sv) if (SvTHINKFIRST(sv)) sv_force_normal_flags(sv, 0)





#define sv_pv(sv) SvPV_nolen(sv)
#define sv_pvutf8(sv) SvPVutf8_nolen(sv)
#define sv_pvbyte(sv) SvPVbyte_nolen(sv)

#define sv_pvn_force_nomg(sv,lp) sv_pvn_force_flags(sv, lp, 0)
#define sv_utf8_upgrade_flags(sv,flags) sv_utf8_upgrade_flags_grow(sv, flags, 0)
#define sv_utf8_upgrade_nomg(sv) sv_utf8_upgrade_flags(sv, 0)
#define sv_utf8_downgrade(sv,fail_ok) sv_utf8_downgrade_flags(sv, fail_ok, SV_GMAGIC)
#define sv_utf8_downgrade_nomg(sv,fail_ok) sv_utf8_downgrade_flags(sv, fail_ok, 0)
#define sv_catpvn_nomg(dsv,sstr,slen) sv_catpvn_flags(dsv, sstr, slen, 0)
#define sv_catpv_nomg(dsv,sstr) sv_catpv_flags(dsv, sstr, 0)
#define sv_setsv(dsv,ssv) sv_setsv_flags(dsv, ssv, SV_GMAGIC|SV_DO_COW_SVSETSV)

#define sv_setsv_nomg(dsv,ssv) sv_setsv_flags(dsv, ssv, SV_DO_COW_SVSETSV)
#define sv_catsv(dsv,ssv) sv_catsv_flags(dsv, ssv, SV_GMAGIC)
#define sv_catsv_nomg(dsv,ssv) sv_catsv_flags(dsv, ssv, 0)
#define sv_catsv_mg(dsv,ssv) sv_catsv_flags(dsv, ssv, SV_GMAGIC|SV_SMAGIC)
#define sv_catpvn(dsv,sstr,slen) sv_catpvn_flags(dsv, sstr, slen, SV_GMAGIC)
#define sv_catpvn_mg(dsv,sstr,slen) sv_catpvn_flags(dsv, sstr, slen, SV_GMAGIC|SV_SMAGIC);
#define sv_copypv(dsv,ssv) sv_copypv_flags(dsv, ssv, SV_GMAGIC)
#define sv_copypv_nomg(dsv,ssv) sv_copypv_flags(dsv, ssv, 0)
#define sv_2pv(sv,lp) sv_2pv_flags(sv, lp, SV_GMAGIC)
#define sv_2pv_nolen(sv) sv_2pv(sv, 0)
#define sv_2pvbyte(sv,lp) sv_2pvbyte_flags(sv, lp, SV_GMAGIC)
#define sv_2pvbyte_nolen(sv) sv_2pvbyte(sv, 0)
#define sv_2pvutf8(sv,lp) sv_2pvutf8_flags(sv, lp, SV_GMAGIC)
#define sv_2pvutf8_nolen(sv) sv_2pvutf8(sv, 0)
#define sv_2pv_nomg(sv,lp) sv_2pv_flags(sv, lp, 0)
#define sv_pvn_force(sv,lp) sv_pvn_force_flags(sv, lp, SV_GMAGIC)
#define sv_utf8_upgrade(sv) sv_utf8_upgrade_flags(sv, SV_GMAGIC)
#define sv_2iv(sv) sv_2iv_flags(sv, SV_GMAGIC)
#define sv_2uv(sv) sv_2uv_flags(sv, SV_GMAGIC)
#define sv_2nv(sv) sv_2nv_flags(sv, SV_GMAGIC)
#define sv_eq(sv1,sv2) sv_eq_flags(sv1, sv2, SV_GMAGIC)
#define sv_cmp(sv1,sv2) sv_cmp_flags(sv1, sv2, SV_GMAGIC)
#define sv_cmp_locale(sv1,sv2) sv_cmp_locale_flags(sv1, sv2, SV_GMAGIC)
#define sv_collxfrm(sv,nxp) sv_collxfrm_flags(sv, nxp, SV_GMAGIC)
#define sv_2bool(sv) sv_2bool_flags(sv, SV_GMAGIC)
#define sv_2bool_nomg(sv) sv_2bool_flags(sv, 0)
#define sv_insert(bigstr,offset,len,little,littlelen) Perl_sv_insert_flags(aTHX_ (bigstr),(offset), (len), (little), (littlelen), SV_GMAGIC)


#define sv_mortalcopy(sv) Perl_sv_mortalcopy_flags(aTHX_ sv, SV_GMAGIC|SV_DO_COW_SVSETSV)

#define sv_cathek(sv,hek) STMT_START { HEK * const bmxk = hek; sv_catpvn_flags(sv, HEK_KEY(bmxk), HEK_LEN(bmxk), HEK_UTF8(bmxk) ? SV_CATUTF8 : SV_CATBYTES); } STMT_END







#define sv_catpvn_nomg_utf8_upgrade(dsv,sstr,slen,nsv) STMT_START { if (!(nsv)) nsv = newSVpvn_flags(sstr, slen, SVs_TEMP); else sv_setpvn(nsv, sstr, slen); SvUTF8_off(nsv); sv_utf8_upgrade(nsv); sv_catsv_nomg(dsv, nsv); } STMT_END
# 2172 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define sv_catpvn_nomg_maybeutf8(dsv,sstr,slen,is_utf8) sv_catpvn_flags(dsv, sstr, slen, (is_utf8)?SV_CATUTF8:SV_CATBYTES)
# 2192 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define newRV_inc(sv) newRV(sv)
# 2259 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvPVCLEAR(sv) sv_setpv_bufsize(sv,0,0)
#define SvSHARE(sv) PL_sharehook(aTHX_ sv)
#define SvLOCK(sv) PL_lockhook(aTHX_ sv)
#define SvUNLOCK(sv) PL_unlockhook(aTHX_ sv)
#define SvDESTROYABLE(sv) PL_destroyhook(aTHX_ sv)

#define SvGETMAGIC(x) ((void)(UNLIKELY(SvGMAGICAL(x)) && mg_get(x)))
#define SvSETMAGIC(x) STMT_START { if (UNLIKELY(SvSMAGICAL(x))) mg_set(x); } STMT_END

#define SvSetSV_and(dst,src,finally) STMT_START { if (LIKELY((dst) != (src))) { sv_setsv(dst, src); finally; } } STMT_END






#define SvSetSV_nosteal_and(dst,src,finally) STMT_START { if (LIKELY((dst) != (src))) { sv_setsv_flags(dst, src, SV_GMAGIC | SV_NOSTEAL | SV_DO_COW_SVSETSV); finally; } } STMT_END







#define SvSetSV(dst,src) SvSetSV_and(dst,src, ;)

#define SvSetSV_nosteal(dst,src) SvSetSV_nosteal_and(dst,src, ;)


#define SvSetMagicSV(dst,src) SvSetSV_and(dst,src,SvSETMAGIC(dst))

#define SvSetMagicSV_nosteal(dst,src) SvSetSV_nosteal_and(dst,src,SvSETMAGIC(dst))




#define SvPEEK(sv) sv_peek(sv)
# 2305 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvIMMORTAL_INTERP(sv) ((Size_t)((sv) - &PL_sv_yes) < 4)


#define SvIMMORTAL_TRUE(sv) ((sv) == &PL_sv_yes)


#define SvIMMORTAL(sv) ( SvREADONLY(sv) && (SvIMMORTAL_INTERP(sv) || (sv) == &PL_sv_placeholder))







#define SvREFCNT_IMMORTAL ((~(U32)0)/2)
# 2332 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define boolSV(b) ((b) ? &PL_sv_yes : &PL_sv_no)

#define isGV(sv) (SvTYPE(sv) == SVt_PVGV)
# 2344 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define isGV_with_GP(pwadak) (((SvFLAGS(pwadak) & (SVp_POK|SVpgv_GP)) == SVpgv_GP) && (SvTYPE(pwadak) == SVt_PVGV || SvTYPE(pwadak) == SVt_PVLV))


#define isGV_with_GP_on(sv) STMT_START { assert (SvTYPE(sv) == SVt_PVGV || SvTYPE(sv) == SVt_PVLV); assert (!SvPOKp(sv)); assert (!SvIOKp(sv)); (SvFLAGS(sv) |= SVpgv_GP); } STMT_END





#define isGV_with_GP_off(sv) STMT_START { assert (SvTYPE(sv) == SVt_PVGV || SvTYPE(sv) == SVt_PVLV); assert (!SvPOKp(sv)); assert (!SvIOKp(sv)); (SvFLAGS(sv) &= ~SVpgv_GP); } STMT_END
# 2363 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define isREGEXP(sv) (SvTYPE(sv) == SVt_REGEXP || (SvFLAGS(sv) & (SVTYPEMASK|SVpgv_GP|SVf_FAKE)) == (SVt_PVLV|SVf_FAKE))






#define SvGROW(sv,len) (SvIsCOW(sv) || SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))




#define SvGROW_mutable(sv,len) (SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX_mutable(sv))

#define Sv_Grow sv_grow

#define CLONEf_COPY_STACKS 1
#define CLONEf_KEEP_PTR_TABLE 2
#define CLONEf_CLONE_HOST 4
#define CLONEf_JOIN_IN 8

struct clone_params {
  AV* stashes;
  UV flags;
  PerlInterpreter *proto_perl;
  PerlInterpreter *new_perl;
  AV *unreferenced;
};



#define newSVsv(sv) newSVsv_flags((sv), SV_GMAGIC|SV_NOSTEAL)
#define newSVsv_nomg(sv) newSVsv_flags((sv), SV_NOSTEAL)
# 2407 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define newSVpvn_utf8(s,len,u) newSVpvn_flags((s), (len), (u) ? SVf_UTF8 : 0)
# 2417 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define newSVpadname(pn) newSVpvn_utf8(PadnamePV(pn), PadnameLEN(pn), TRUE)
# 2460 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SvOOK_offset(sv,offset) STMT_START { STATIC_ASSERT_STMT(sizeof(offset) == sizeof(STRLEN)); if (SvOOK(sv)) { (offset) = ((U8*)SvPVX_const(sv))[-1]; if (!(offset)) { Copy(SvPVX_const(sv) - 1 - sizeof(STRLEN), (U8*)&(offset), sizeof(STRLEN), U8); } } else { (offset) = 0; } } STMT_END
# 2474 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define newIO() MUTABLE_IO(newSV_type(SVt_PVIO))
# 2525 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sv.h" 3 4
#define SV_CONSTS_COUNT 35
# 4077 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 1 3 4
# 21 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 1 3 4
# 18 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define PERL_UTF8_H_ 1







#define USE_UTF8_IN_NAMES (PL_hints & HINT_UTF8)


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 1 3 4
# 19 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define PERL_REGCHARCLASS_H_ 
# 29 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_LNBREAK_safe(s,e,is_utf8) ( ((e)-(s) > 2) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\f') ) ? 1 : ( '\r' == ((const U8*)s)[0] ) ? ( ( '\n' == ((const U8*)s)[1] ) ? 2 : 1 ) : ( is_utf8 ) ? ( ( 0xC2 == ((const U8*)s)[0] ) ? ( ( 0x85 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( ( ( 0xE2 == ((const U8*)s)[0] ) && ( 0x80 == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xA8, 0xA9) ) ) ? 3 : 0 ) : ( 0x85 == ((const U8*)s)[0] ) ) : ((e)-(s) > 1) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\f') ) ? 1 : ( '\r' == ((const U8*)s)[0] ) ? ( ( '\n' == ((const U8*)s)[1] ) ? 2 : 1 ) : ( is_utf8 ) ? ( ( ( 0xC2 == ((const U8*)s)[0] ) && ( 0x85 == ((const U8*)s)[1] ) ) ? 2 : 0 ) : ( 0x85 == ((const U8*)s)[0] ) ) : ((e)-(s) > 0) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\r') ) ? 1 : ( !( is_utf8 ) ) ? ( 0x85 == ((const U8*)s)[0] ) : 0 ) : 0 )
# 54 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_LNBREAK_utf8_safe(s,e) ( ((e)-(s) > 2) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\f') ) ? 1 : ( '\r' == ((const U8*)s)[0] ) ? ( ( '\n' == ((const U8*)s)[1] ) ? 2 : 1 ) : ( 0xC2 == ((const U8*)s)[0] ) ? ( ( 0x85 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( ( ( 0xE2 == ((const U8*)s)[0] ) && ( 0x80 == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xA8, 0xA9) ) ) ? 3 : 0 ): ((e)-(s) > 1) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\f') ) ? 1 : ( '\r' == ((const U8*)s)[0] ) ? ( ( '\n' == ((const U8*)s)[1] ) ? 2 : 1 ) : ( ( 0xC2 == ((const U8*)s)[0] ) && ( 0x85 == ((const U8*)s)[1] ) ) ? 2 : 0 ): ((e)-(s) > 0) ? ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\r') ) : 0 )
# 72 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_LNBREAK_latin1_safe(s,e) ( ((e)-(s) > 1) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\f') || 0x85 == ((const U8*)s)[0] ) ? 1 : ( '\r' == ((const U8*)s)[0] ) ? ( ( '\n' == ((const U8*)s)[1] ) ? 2 : 1 ) : 0 ) : ((e)-(s) > 0) ? ( inRANGE_helper_(U8, ((const U8*)s)[0], '\n', '\r') || 0x85 == ((const U8*)s)[0] ): 0 )
# 88 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_HORIZWS_high(s) ( ( 0xE1 == ((const U8*)s)[0] ) ? ( ( ( 0x9A == ((const U8*)s)[1] ) && ( 0x80 == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( 0xE2 == ((const U8*)s)[0] ) ? ( ( 0x80 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x8A) || 0xAF == ((const U8*)s)[2] ) ? 3 : 0 ) : ( ( 0x81 == ((const U8*)s)[1] ) && ( 0x9F == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( ( ( 0xE3 == ((const U8*)s)[0] ) && ( 0x80 == ((const U8*)s)[1] ) ) && ( 0x80 == ((const U8*)s)[2] ) ) ? 3 : 0 )
# 98 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_HORIZWS_cp_high(cp) ( 0x1680 == cp || ( 0x1680 < cp && ( inRANGE_helper_(UV, cp, 0x2000, 0x200A) || ( 0x200A < cp && ( 0x202F == cp || ( 0x202F < cp && ( 0x205F == cp || 0x3000 == cp ) ) ) ) ) ) )
# 110 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_VERTWS_high(s) ( ( ( ( 0xE2 == ((const U8*)s)[0] ) && ( 0x80 == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xA8, 0xA9) ) ) ? 3 : 0 )



#define is_VERTWS_cp_high(cp) ( inRANGE_helper_(UV, cp, 0x2028, 0x2029) )
# 123 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_XDIGIT_high(s) ( ( 0xEF == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x90, 0x99) || inRANGE_helper_(U8, ((const U8*)s)[2], 0xA1, 0xA6) ) ? 3 : 0 ) : ( ( 0xBD == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x81, 0x86) ) ) ? 3 : 0 ): 0 )







#define is_XDIGIT_cp_high(cp) ( inRANGE_helper_(UV, cp, 0xFF10, 0xFF19) || ( 0xFF19 < cp && ( inRANGE_helper_(UV, cp, 0xFF21, 0xFF26) || inRANGE_helper_(UV, cp, 0xFF41, 0xFF46) ) ) )
# 141 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_XPERLSPACE_high(s) ( ( 0xE1 == ((const U8*)s)[0] ) ? ( ( ( 0x9A == ((const U8*)s)[1] ) && ( 0x80 == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( 0xE2 == ((const U8*)s)[0] ) ? ( ( 0x80 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x8A) || inRANGE_helper_(U8, ((const U8*)s)[2], 0xA8, 0xA9) || 0xAF == ((const U8*)s)[2] ) ? 3 : 0 ) : ( ( 0x81 == ((const U8*)s)[1] ) && ( 0x9F == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( ( ( 0xE3 == ((const U8*)s)[0] ) && ( 0x80 == ((const U8*)s)[1] ) ) && ( 0x80 == ((const U8*)s)[2] ) ) ? 3 : 0 )
# 151 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_XPERLSPACE_cp_high(cp) ( 0x1680 == cp || ( 0x1680 < cp && ( inRANGE_helper_(UV, cp, 0x2000, 0x200A) || ( 0x200A < cp && ( inRANGE_helper_(UV, cp, 0x2028, 0x2029) || ( 0x2029 < cp && ( 0x202F == cp || ( 0x202F < cp && ( 0x205F == cp || 0x3000 == cp ) ) ) ) ) ) ) ) )
# 164 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_NONCHAR_utf8_safe(s,e) ( ( ( LIKELY((e) > (s)) ) && ( LIKELY(((e) - (s)) >= UTF8SKIP(s)) ) ) ? ( ( 0xEF == ((const U8*)s)[0] ) ? ( ( 0xB7 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x90, 0xAF) ) ? 3 : 0 ) : ( ( 0xBF == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xBE, 0xBF) ) ) ? 3 : 0 ) : ( 0xF0 == ((const U8*)s)[0] ) ? ( ( ( ( ((const U8*)s)[1] == 0x9F || ( ( ((const U8*)s)[1] & 0xEF ) == 0xAF ) ) && ( 0xBF == ((const U8*)s)[2] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[3], 0xBE, 0xBF) ) ) ? 4 : 0 ) : ( inRANGE_helper_(U8, ((const U8*)s)[0], 0xF1, 0xF3) ) ? ( ( ( ( ( ((const U8*)s)[1] & 0xCF ) == 0x8F ) && ( 0xBF == ((const U8*)s)[2] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[3], 0xBE, 0xBF) ) ) ? 4 : 0 ) : ( ( ( ( 0xF4 == ((const U8*)s)[0] ) && ( 0x8F == ((const U8*)s)[1] ) ) && ( 0xBF == ((const U8*)s)[2] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[3], 0xBE, 0xBF) ) ) ? 4 : 0 ) : 0 )
# 181 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_SURROGATE_utf8_safe(s,e) ( ( ( ( ( ((e) - (s)) >= 3 ) && ( 0xED == ((const U8*)s)[0] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[1], 0xA0, 0xBF) ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0xBF) ) ) ? 3 : 0 )
# 190 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_QUOTEMETA_high(s) ( ( 0xCD == ((const U8*)s)[0] ) ? ( ( 0x8F == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xD8 == ((const U8*)s)[0] ) ? ( ( 0x9C == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0x85 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x9F, 0xA0) ) ? 3 : 0 ) : ( 0x9A == ((const U8*)s)[1] ) ? ( ( 0x80 == ((const U8*)s)[2] ) ? 3 : 0 ) : ( 0x9E == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xB4, 0xB5) ) ? 3 : 0 ) : ( ( 0xA0 == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x8B, 0x8E) ) ) ? 3 : 0 ): ( 0xE2 == ((const U8*)s)[0] ) ? ( ( 0x80 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0xBE) ) ? 3 : 0 ) : ( 0x81 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x81, 0x93) || inRANGE_helper_(U8, ((const U8*)s)[2], 0x95, 0xAF) ) ? 3 : 0 ) : ( 0x86 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x90, 0xBF) ) ? 3 : 0 ) : ( inRANGE_helper_(U8, ((const U8*)s)[1], 0x87, 0x90) || inRANGE_helper_(U8, ((const U8*)s)[1], 0x94, 0x9C) || inRANGE_helper_(U8, ((const U8*)s)[1], 0x9F, 0xAF) || inRANGE_helper_(U8, ((const U8*)s)[1], 0xB8, 0xB9) ) ? 3 : ( 0x91 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x9F) ) ? 3 : 0 ) : ( 0x9D == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0xB5) ) ? 3 : 0 ) : ( ( 0x9E == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x94, 0xBF) ) ) ? 3 : 0 ): ( 0xE3 == ((const U8*)s)[0] ) ? ( ( 0x80 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x83) || inRANGE_helper_(U8, ((const U8*)s)[2], 0x88, 0xA0) || 0xB0 == ((const U8*)s)[2] ) ? 3 : 0 ) : ( ( 0x85 == ((const U8*)s)[1] ) && ( 0xA4 == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( 0xEF == ((const U8*)s)[0] ) ? ( ( 0xB4 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xBE, 0xBF) ) ? 3 : 0 ) : ( 0xB8 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x8F) ) ? 3 : 0 ) : ( 0xB9 == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x85, 0x86) ) ? 3 : 0 ) : ( 0xBB == ((const U8*)s)[1] ) ? ( ( 0xBF == ((const U8*)s)[2] ) ? 3 : 0 ) : ( 0xBE == ((const U8*)s)[1] ) ? ( ( 0xA0 == ((const U8*)s)[2] ) ? 3 : 0 ) : ( ( 0xBF == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xB0, 0xB8) ) ) ? 3 : 0 ): ( 0xF0 == ((const U8*)s)[0] ) ? ( ( 0x9B == ((const U8*)s)[1] ) ? ( ( ( 0xB2 == ((const U8*)s)[2] ) && ( inRANGE_helper_(U8, ((const U8*)s)[3], 0xA0, 0xA3) ) ) ? 4 : 0 ) : ( ( ( 0x9D == ((const U8*)s)[1] ) && ( 0x85 == ((const U8*)s)[2] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[3], 0xB3, 0xBA) ) ) ? 4 : 0 ): ( ( 0xF3 == ((const U8*)s)[0] ) && ( 0xA0 == ((const U8*)s)[1] ) ) ? 4 : 0 )
# 245 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_MULTI_CHAR_FOLD_utf8_safe_part0_(s,e) ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ? 3 : 2 ) : ( ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 )






#define is_MULTI_CHAR_FOLD_utf8_safe_part1_(s,e) ( ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ? 2 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[2], 's', 't') ) ? 3 : ( ( 0xC5 == ((const U8*)s)[2] ) && ( 0xBF == ((const U8*)s)[3] ) ) ? 4 : 0 ) : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( ( 0xBC == ((const U8*)s)[1] ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 3 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xFD ) == 0xAC ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB1 == ((const U8*)s)[1] || 0xB7 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? ( ( ( 0xCE == ((const U8*)s)[4] ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 6 : 4 ) : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB9 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x88 == ((const U8*)s)[3] ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[5], 0x80, 0x81) ) ? 6 : 0 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 6 : 0 ) : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( 0x81 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x93 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x85 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x88 == ((const U8*)s)[3] ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[5], 0x80, 0x81) ) ? 6 : 0 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 6 : 0 ) : ( 0x93 == ((const U8*)s)[3] ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[5], 0x80, 0x81) ) ? 6 : 4 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 6 : 4 ) : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? ( ( ( 0xCE == ((const U8*)s)[4] ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 6 : 4 ) : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0x8E == ((const U8*)s)[1] ) && ( 0xCE == ((const U8*)s)[2] ) ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] ) ? ( ( ( 0xD6 == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB4 == ((const U8*)s)[1] ) ? ( ( ( 0xD5 == ((const U8*)s)[2] ) && ( ( ( ((const U8*)s)[3] & 0xF7 ) == 0xA5 ) || ((const U8*)s)[3] == 0xAB || ((const U8*)s)[3] == 0xB6 ) ) ? 4 : 0 ) : ( ( ( 0xBE == ((const U8*)s)[1] ) && ( 0xD5 == ((const U8*)s)[2] ) ) && ( 0xB6 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( ( ( ( ((const U8*)s)[2] & 0xD8 ) == 0x80 ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 5 : 0 ) : ( ( ( ( 0xBD == ((const U8*)s)[1] ) && ( ( ( ((const U8*)s)[2] & 0xF8 ) == 0xA0 ) || ( ( ((const U8*)s)[2] & 0xFB ) == 0xB0 ) || ((const U8*)s)[2] == 0xBC ) ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 5 : 0 ) : 0 )
# 327 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_MULTI_CHAR_FOLD_utf8_safe_part2_(s,e) ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ? 3 : 2 ) : ( ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ? 2 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[2], 's', 't') ) ? 3 : ( ( 0xC5 == ((const U8*)s)[2] ) && ( 0xBF == ((const U8*)s)[3] ) ) ? 4 : 0 ) : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( ( 0xBC == ((const U8*)s)[1] ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 3 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xFD ) == 0xAC ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB1 == ((const U8*)s)[1] || 0xB7 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0xB9 == ((const U8*)s)[1] ) && ( 0xCD == ((const U8*)s)[2] ) ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( 0x81 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x93 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x85 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x93 == ((const U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0x8E == ((const U8*)s)[1] ) && ( 0xCE == ((const U8*)s)[2] ) ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] ) ? ( ( ( 0xD6 == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB4 == ((const U8*)s)[1] ) ? ( ( ( 0xD5 == ((const U8*)s)[2] ) && ( ( ( ((const U8*)s)[3] & 0xF7 ) == 0xA5 ) || ((const U8*)s)[3] == 0xAB || ((const U8*)s)[3] == 0xB6 ) ) ? 4 : 0 ) : ( ( ( 0xBE == ((const U8*)s)[1] ) && ( 0xD5 == ((const U8*)s)[2] ) ) && ( 0xB6 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : 0 )
# 384 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_MULTI_CHAR_FOLD_utf8_safe_part3_(s,e) ( ((e)-(s) > 2) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ? 3 : 2 ) : ( ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ? 2 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( ( 0xBF == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[2], 's', 't') ) ) ? 3 : 0 ) : ( ( ( 0xCA == ((const U8*)s)[0] ) && ( 0xBC == ((const U8*)s)[1] ) ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 3 : 0 ): ((e)-(s) > 1) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) && ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ) ? 2 : 0 ): 0 )
# 416 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_MULTI_CHAR_FOLD_utf8_safe(s,e) ( ((e)-(s) > 5) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? is_MULTI_CHAR_FOLD_utf8_safe_part0_(s,e) : is_MULTI_CHAR_FOLD_utf8_safe_part1_(s,e) ): ((e)-(s) > 4) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ? 3 : 2 ) : ( ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ? 2 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 3 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[2], 's', 't') ) ? 3 : ( ( 0xC5 == ((const U8*)s)[2] ) && ( 0xBF == ((const U8*)s)[3] ) ) ? 4 : 0 ) : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( ( 0xBC == ((const U8*)s)[1] ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 3 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xFD ) == 0xAC ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB1 == ((const U8*)s)[1] || 0xB7 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0xB9 == ((const U8*)s)[1] ) && ( 0xCD == ((const U8*)s)[2] ) ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( 0x81 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x93 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x85 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x93 == ((const U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 4 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( ( ( 0x8E == ((const U8*)s)[1] ) && ( 0xCE == ((const U8*)s)[2] ) ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] ) ? ( ( ( 0xD6 == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xB4 == ((const U8*)s)[1] ) ? ( ( ( 0xD5 == ((const U8*)s)[2] ) && ( ( ( ((const U8*)s)[3] & 0xF7 ) == 0xA5 ) || ((const U8*)s)[3] == 0xAB || ((const U8*)s)[3] == 0xB6 ) ) ? 4 : 0 ) : ( ( ( 0xBE == ((const U8*)s)[1] ) && ( 0xD5 == ((const U8*)s)[2] ) ) && ( 0xB6 == ((const U8*)s)[3] ) ) ? 4 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( ( ( ( ((const U8*)s)[2] & 0xD8 ) == 0x80 ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 5 : 0 ) : ( ( ( ( 0xBD == ((const U8*)s)[1] ) && ( ( ( ((const U8*)s)[2] & 0xF8 ) == 0xA0 ) || ( ( ((const U8*)s)[2] & 0xFB ) == 0xB0 ) || ((const U8*)s)[2] == 0xBC ) ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 5 : 0 ) : 0 ) : ((e)-(s) > 3) ? is_MULTI_CHAR_FOLD_utf8_safe_part2_(s,e) : is_MULTI_CHAR_FOLD_utf8_safe_part3_(s,e) )
# 482 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part0_(s,e) ( ( 0x81 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x93 == ((const U8*)s)[3] ) ) ? 0x1FE4 : 0 ) : ( 0x85 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x88 == ((const U8*)s)[3] ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( 0x80 == ((const U8*)s)[5] ) ? 0x1FE2 : ( 0x81 == ((const U8*)s)[5] ) ? 0x3B0 : 0 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 0x1FE7 : 0 ) : ( 0x93 == ((const U8*)s)[3] ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( 0x80 == ((const U8*)s)[5] ) ? 0x1F52 : ( 0x81 == ((const U8*)s)[5] ) ? 0x1F54 : 0x1F50 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 0x1F56 : 0x1F50 ) : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x1FE6 : 0 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? ( ( ( 0xCE == ((const U8*)s)[4] ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 0x1FF7 : 0x1FF6 ) : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FF3 : 0 ) : ( ( ( 0x8E == ((const U8*)s)[1] ) && ( 0xCE == ((const U8*)s)[2] ) ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FF4 : 0 )
# 509 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part1_(s,e) ( ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] ) ? ( ( ( 0xD6 == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x587 : 0 ) : ( 0xB4 == ((const U8*)s)[1] ) ? ( ( 0xD5 == ((const U8*)s)[2] ) ? ( ( 0xA5 == ((const U8*)s)[3] ) ? 0xFB14 : ( 0xAB == ((const U8*)s)[3] ) ? 0xFB15 : ( 0xAD == ((const U8*)s)[3] ) ? 0xFB17 : ( 0xB6 == ((const U8*)s)[3] ) ? 0xFB13 : 0 ) : 0 ) : ( ( ( 0xBE == ((const U8*)s)[1] ) && ( 0xD5 == ((const U8*)s)[2] ) ) && ( 0xB6 == ((const U8*)s)[3] ) ) ? 0xFB16 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( 0x80 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F80 : 0 ) : ( 0x81 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F81 : 0 ) : ( 0x82 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F82 : 0 ) : ( 0x83 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F83 : 0 ) : ( 0x84 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F84 : 0 ) : ( 0x85 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F85 : 0 ) : ( 0x86 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F86 : 0 ) : ( 0x87 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F87 : 0 ) : ( 0xA0 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F90 : 0 ) : ( 0xA1 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F91 : 0 ) : ( 0xA2 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F92 : 0 ) : ( 0xA3 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F93 : 0 ) : ( 0xA4 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F94 : 0 ) : ( 0xA5 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F95 : 0 ) : ( 0xA6 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F96 : 0 ) : ( ( ( 0xA7 == ((const U8*)s)[2] ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F97 : 0 ) : ( 0xBD == ((const U8*)s)[1] ) ? ( ( 0xA0 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA0 : 0 ) : ( 0xA1 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA1 : 0 ) : ( 0xA2 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA2 : 0 ) : ( 0xA3 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA3 : 0 ) : ( 0xA4 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA4 : 0 ) : ( 0xA5 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA5 : 0 ) : ( 0xA6 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA6 : 0 ) : ( 0xA7 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA7 : 0 ) : ( 0xB0 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FB2 : 0 ) : ( 0xB4 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FC2 : 0 ) : ( ( ( 0xBC == ((const U8*)s)[2] ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FF2 : 0 ) : 0 ) : 0 )
# 581 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part2_(s,e) ( ( 0x81 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x93 == ((const U8*)s)[3] ) ) ? 0x1FE4 : 0 ) : ( 0x85 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x93 == ((const U8*)s)[3] ) ? 0x1F50 : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x1FE6 : 0 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 0x1FF6 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FF3 : 0 ) : ( ( ( 0x8E == ((const U8*)s)[1] ) && ( 0xCE == ((const U8*)s)[2] ) ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FF4 : 0 )
# 596 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part3_(s,e) ( ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] ) ? ( ( ( 0xD6 == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x587 : 0 ) : ( 0xB4 == ((const U8*)s)[1] ) ? ( ( 0xD5 == ((const U8*)s)[2] ) ? ( ( 0xA5 == ((const U8*)s)[3] ) ? 0xFB14 : ( 0xAB == ((const U8*)s)[3] ) ? 0xFB15 : ( 0xAD == ((const U8*)s)[3] ) ? 0xFB17 : ( 0xB6 == ((const U8*)s)[3] ) ? 0xFB13 : 0 ) : 0 ) : ( ( ( 0xBE == ((const U8*)s)[1] ) && ( 0xD5 == ((const U8*)s)[2] ) ) && ( 0xB6 == ((const U8*)s)[3] ) ) ? 0xFB16 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( 0x80 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F80 : 0 ) : ( 0x81 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F81 : 0 ) : ( 0x82 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F82 : 0 ) : ( 0x83 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F83 : 0 ) : ( 0x84 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F84 : 0 ) : ( 0x85 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F85 : 0 ) : ( 0x86 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F86 : 0 ) : ( 0x87 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F87 : 0 ) : ( 0xA0 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F90 : 0 ) : ( 0xA1 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F91 : 0 ) : ( 0xA2 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F92 : 0 ) : ( 0xA3 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F93 : 0 ) : ( 0xA4 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F94 : 0 ) : ( 0xA5 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F95 : 0 ) : ( 0xA6 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F96 : 0 ) : ( ( ( 0xA7 == ((const U8*)s)[2] ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1F97 : 0 ) : ( 0xBD == ((const U8*)s)[1] ) ? ( ( 0xA0 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA0 : 0 ) : ( 0xA1 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA1 : 0 ) : ( 0xA2 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA2 : 0 ) : ( 0xA3 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA3 : 0 ) : ( 0xA4 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA4 : 0 ) : ( 0xA5 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA5 : 0 ) : ( 0xA6 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA6 : 0 ) : ( 0xA7 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FA7 : 0 ) : ( 0xB0 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FB2 : 0 ) : ( 0xB4 == ((const U8*)s)[2] ) ? ( ( ( 0xCE == ((const U8*)s)[3] ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FC2 : 0 ) : ( ( ( 0xBC == ((const U8*)s)[2] ) && ( 0xCE == ((const U8*)s)[3] ) ) && ( 0xB9 == ((const U8*)s)[4] ) ) ? 0x1FF2 : 0 ) : 0 ) : 0 )
# 668 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part4_(s,e) ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 0x1E9A : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) ? 0xFB03 : ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ? 0xFB04 : 0xFB00 ) : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 0x1E96 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 0x130 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 0x1F0 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 0xDF : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 0x1E97 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E98 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E99 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[2] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[2] ) && ( 0xBF == ((const U8*)s)[3] ) ) ? 0xDF : 0 ) : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( ( 0xBC == ((const U8*)s)[1] ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 0x149 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( 0xAC == ((const U8*)s)[1] ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FB4 : 0 ) : ( 0xAE == ((const U8*)s)[1] ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FC4 : 0 ) : ( 0xB1 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 0x1FB6 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FB3 : 0 ) : ( 0xB7 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 0x1FC6 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FC3 : 0 ) : ( ( ( 0xB9 == ((const U8*)s)[1] ) && ( 0xCD == ((const U8*)s)[2] ) ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x1FD6 : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( 0x81 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x93 == ((const U8*)s)[3] ) ) ? 0x1FE4 : 0 ) : ( 0x85 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x93 == ((const U8*)s)[3] ) ? 0x1F50 : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x1FE6 : 0 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 0x1FF6 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FF3 : 0 ) : ( ( ( 0x8E == ((const U8*)s)[1] ) && ( 0xCE == ((const U8*)s)[2] ) ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FF4 : 0 ) : ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] ) ? ( ( ( 0xD6 == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x587 : 0 ) : ( 0xB4 == ((const U8*)s)[1] ) ? ( ( 0xD5 == ((const U8*)s)[2] ) ? ( ( 0xA5 == ((const U8*)s)[3] ) ? 0xFB14 : ( 0xAB == ((const U8*)s)[3] ) ? 0xFB15 : ( 0xAD == ((const U8*)s)[3] ) ? 0xFB17 : ( 0xB6 == ((const U8*)s)[3] ) ? 0xFB13 : 0 ) : 0 ) : ( ( ( 0xBE == ((const U8*)s)[1] ) && ( 0xD5 == ((const U8*)s)[2] ) ) && ( 0xB6 == ((const U8*)s)[3] ) ) ? 0xFB16 : 0 ) : 0 )
# 742 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part5_(s,e) ( ((e)-(s) > 2) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 0x1E9A : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) ? 0xFB03 : ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ? 0xFB04 : 0xFB00 ) : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 0x1E96 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 0x130 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 0x1F0 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 0xDF : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 0x1E97 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E98 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E99 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[2] & 0xDF ) == 'T' ) ? 0xFB05 : 0 ) : 0 ) : ( ( ( 0xCA == ((const U8*)s)[0] ) && ( 0xBC == ((const U8*)s)[1] ) ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 0x149 : 0 ): ((e)-(s) > 1) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? 0xFB00 : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : 0 ) : 0 ) : 0 )
# 787 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part6_(s,e) ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 0x1E9A : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) ? 0xFB03 : ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ? 0xFB04 : 0xFB00 ) : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 0x1E96 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 0x130 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 0x1F0 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 0xDF : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 0x1E97 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E98 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E99 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[2] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[2] ) && ( 0xBF == ((const U8*)s)[3] ) ) ? 0xDF : 0 ) : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( ( 0xBC == ((const U8*)s)[1] ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 0x149 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( 0xAC == ((const U8*)s)[1] ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FB4 : 0 ) : ( 0xAE == ((const U8*)s)[1] ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FC4 : 0 ) : ( 0xB1 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? ( ( ( 0xCE == ((const U8*)s)[4] ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 0x1FB7 : 0x1FB6 ) : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FB3 : 0 ) : ( 0xB7 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? ( ( ( 0xCE == ((const U8*)s)[4] ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 0x1FC7 : 0x1FC6 ) : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FC3 : 0 ) : ( 0xB9 == ((const U8*)s)[1] ) ? ( ( 0xCC == ((const U8*)s)[2] ) ? ( ( 0x88 == ((const U8*)s)[3] ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( 0x80 == ((const U8*)s)[5] ) ? 0x1FD2 : ( 0x81 == ((const U8*)s)[5] ) ? 0x390 : 0 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 0x1FD7 : 0 ) : 0 ) : ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x1FD6 : 0 ) : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? what_MULTI_CHAR_FOLD_utf8_safe_part0_(s,e) : what_MULTI_CHAR_FOLD_utf8_safe_part1_(s,e) )
# 851 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe_part7_(s,e) ( ((e)-(s) > 4) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) ? ( ( ( 0xCA == ((const U8*)s)[1] ) && ( 0xBE == ((const U8*)s)[2] ) ) ? 0x1E9A : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) ? 0xFB03 : ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ? 0xFB04 : 0xFB00 ) : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'H' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0xB1 == ((const U8*)s)[2] ) ) ? 0x1E96 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'I' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x87 == ((const U8*)s)[2] ) ) ? 0x130 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8C == ((const U8*)s)[2] ) ) ? 0x1F0 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[1] ) && ( 0xBF == ((const U8*)s)[2] ) ) ? 0xDF : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x88 == ((const U8*)s)[2] ) ) ? 0x1E97 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'W' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E98 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ? ( ( ( 0xCC == ((const U8*)s)[1] ) && ( 0x8A == ((const U8*)s)[2] ) ) ? 0x1E99 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[2] & 0xDF ) == 'T' ) ? 0xFB05 : ( ( 0xC5 == ((const U8*)s)[2] ) && ( 0xBF == ((const U8*)s)[3] ) ) ? 0xDF : 0 ) : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( ( 0xBC == ((const U8*)s)[1] ) && ( ( ((const U8*)s)[2] & 0xDF ) == 'N' ) ) ? 0x149 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( 0xAC == ((const U8*)s)[1] ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FB4 : 0 ) : ( 0xAE == ((const U8*)s)[1] ) ? ( ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FC4 : 0 ) : ( 0xB1 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 0x1FB6 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FB3 : 0 ) : ( 0xB7 == ((const U8*)s)[1] ) ? ( ( 0xCD == ((const U8*)s)[2] ) ? ( ( 0x82 == ((const U8*)s)[3] ) ? 0x1FC6 : 0 ) : ( ( 0xCE == ((const U8*)s)[2] ) && ( 0xB9 == ((const U8*)s)[3] ) ) ? 0x1FC3 : 0 ) : ( ( ( 0xB9 == ((const U8*)s)[1] ) && ( 0xCD == ((const U8*)s)[2] ) ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 0x1FD6 : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? what_MULTI_CHAR_FOLD_utf8_safe_part2_(s,e) : what_MULTI_CHAR_FOLD_utf8_safe_part3_(s,e) ): ((e)-(s) > 3) ? what_MULTI_CHAR_FOLD_utf8_safe_part4_(s,e) : what_MULTI_CHAR_FOLD_utf8_safe_part5_(s,e) )
# 904 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_utf8_safe(s,e) ( ((e)-(s) > 5) ? what_MULTI_CHAR_FOLD_utf8_safe_part6_(s,e) : what_MULTI_CHAR_FOLD_utf8_safe_part7_(s,e) )
# 913 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_MULTI_CHAR_FOLD_latin1_safe(s,e) ( ((e)-(s) > 2) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ? 3 : 2 ) : ( ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) && ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ) ? 2 : 0 ): ((e)-(s) > 1) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ) ? 2 : 0 ) : ( ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) && ( inRANGE_helper_(U8, ((const U8*)s)[1], 'S', 'T') || inRANGE_helper_(U8, ((const U8*)s)[1], 's', 't') ) ) ? 2 : 0 ): 0 )
# 927 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define what_MULTI_CHAR_FOLD_latin1_safe(s,e) ( ((e)-(s) > 2) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) ? 0xFB03 : ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ? 0xFB04 : 0xFB00 ) : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : 0 ) : 0 ) : ((e)-(s) > 1) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? 0xFB00 : ( ( ((const U8*)s)[1] & 0xDF ) == 'I' ) ? 0xFB01 : ( ( ((const U8*)s)[1] & 0xDF ) == 'L' ) ? 0xFB02 : 0 ) : ( ( ((const U8*)s)[0] & 0xDF ) == 'S' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'S' ) ? 0xDF : ( ( ((const U8*)s)[1] & 0xDF ) == 'T' ) ? 0xFB05 : 0 ) : 0 ) : 0 )
# 956 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_THREE_CHAR_FOLD_utf8_safe(s,e) ( ((e)-(s) > 5) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) && ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ) ? 3 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( 0xB1 == ((const U8*)s)[1] || 0xB7 == ((const U8*)s)[1] ) ? ( ( ( ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) && ( 0xCE == ((const U8*)s)[4] ) ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 6 : 0 ) : ( ( ( 0xB9 == ((const U8*)s)[1] ) && ( 0xCC == ((const U8*)s)[2] ) ) && ( 0x88 == ((const U8*)s)[3] ) ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[5], 0x80, 0x81) ) ? 6 : 0 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 6 : 0 ) : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( 0x85 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x88 == ((const U8*)s)[3] || 0x93 == ((const U8*)s)[3] ) ) ? ( ( 0xCC == ((const U8*)s)[4] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[5], 0x80, 0x81) ) ? 6 : 0 ) : ( ( 0xCD == ((const U8*)s)[4] ) && ( 0x82 == ((const U8*)s)[5] ) ) ? 6 : 0 ) : 0 ) : ( ( ( ( ( 0x89 == ((const U8*)s)[1] ) && ( 0xCD == ((const U8*)s)[2] ) ) && ( 0x82 == ((const U8*)s)[3] ) ) && ( 0xCE == ((const U8*)s)[4] ) ) && ( 0xB9 == ((const U8*)s)[5] ) ) ? 6 : 0 ) : 0 ) : ( ( ( ((e)-(s) > 2) && ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ) && ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ) && ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ) ? 3 : 0 )
# 981 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_THREE_CHAR_FOLD_latin1_safe(s,e) ( ( ( ( ( ((e) - (s)) >= 3 ) && ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ) && ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ) && ( ( ( ((const U8*)s)[2] & 0xDF ) == 'I' ) || ( ( ((const U8*)s)[2] & 0xDF ) == 'L' ) ) ) ? 3 : 0 )
# 990 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_THREE_CHAR_FOLD_HEAD_utf8_safe(s,e) ( ((e)-(s) > 3) ? ( ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) || ( ( ((const U8*)s)[0] & 0xDE ) == 'H' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) || ( ( ((const U8*)s)[0] & 0xDB ) == 'S' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? 1 : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? 2 : 1 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xFD ) == 0xAC ) ? 2 : ( 0xB1 == ((const U8*)s)[1] || 0xB7 == ((const U8*)s)[1] ) ? ( ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 2 ) : ( 0xB9 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x88 == ((const U8*)s)[3] ) ) ? 4 : 2 ) : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( 0x81 == ((const U8*)s)[1] || 0x8E == ((const U8*)s)[1] ) ? 2 : ( 0x85 == ((const U8*)s)[1] ) ? ( ( ( 0xCC == ((const U8*)s)[2] ) && ( 0x88 == ((const U8*)s)[3] || 0x93 == ((const U8*)s)[3] ) ) ? 4 : 2 ) : ( 0x89 == ((const U8*)s)[1] ) ? ( ( ( 0xCD == ((const U8*)s)[2] ) && ( 0x82 == ((const U8*)s)[3] ) ) ? 4 : 2 ) : 0 ) : ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] || 0xB4 == ((const U8*)s)[1] || 0xBE == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xD8 ) == 0x80 ) ? 3 : 0 ) : ( ( 0xBD == ((const U8*)s)[1] ) && ( ( ( ((const U8*)s)[2] & 0xF8 ) == 0xA0 ) || ( ( ((const U8*)s)[2] & 0xFB ) == 0xB0 ) || ((const U8*)s)[2] == 0xBC ) ) ? 3 : 0 ) : 0 ) : ((e)-(s) > 2) ? ( ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) || ( ( ((const U8*)s)[0] & 0xDE ) == 'H' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) || ( ( ((const U8*)s)[0] & 0xDB ) == 'S' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? 1 : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? 2 : 1 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ( ((const U8*)s)[1] & 0xFD ) == 0xAC ) || ( ( ((const U8*)s)[1] & 0xF7 ) == 0xB1 ) || ((const U8*)s)[1] == 0xB7 ) ? 2 : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( ( ( ((const U8*)s)[1] & 0xFB ) == 0x81 ) || ((const U8*)s)[1] == 0x89 || ((const U8*)s)[1] == 0x8E ) ? 2 : 0 ) : ( 0xD5 == ((const U8*)s)[0] ) ? ( ( 0xA5 == ((const U8*)s)[1] || 0xB4 == ((const U8*)s)[1] || 0xBE == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xD8 ) == 0x80 ) ? 3 : 0 ) : ( ( 0xBD == ((const U8*)s)[1] ) && ( ( ( ((const U8*)s)[2] & 0xF8 ) == 0xA0 ) || ( ( ((const U8*)s)[2] & 0xFB ) == 0xB0 ) || ((const U8*)s)[2] == 0xBC ) ) ? 3 : 0 ) : 0 ) : ((e)-(s) > 1) ? ( ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) || ( ( ((const U8*)s)[0] & 0xDE ) == 'H' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) || ( ( ((const U8*)s)[0] & 0xDB ) == 'S' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? 1 : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? 2 : 1 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0xBF == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ( ((const U8*)s)[1] & 0xFD ) == 0xAC ) || ( ( ((const U8*)s)[1] & 0xF7 ) == 0xB1 ) || ((const U8*)s)[1] == 0xB7 ) ? 2 : 0 ) : ( 0xCF == ((const U8*)s)[0] ) ? ( ( ( ( ((const U8*)s)[1] & 0xFB ) == 0x81 ) || ((const U8*)s)[1] == 0x89 || ((const U8*)s)[1] == 0x8E ) ? 2 : 0 ) : ( ( 0xD5 == ((const U8*)s)[0] ) && ( 0xA5 == ((const U8*)s)[1] || 0xB4 == ((const U8*)s)[1] || 0xBE == ((const U8*)s)[1] ) ) ? 2 : 0 ): ((e)-(s) > 0) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) || ( ( ((const U8*)s)[0] & 0xDE ) == 'H' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) || ( ( ((const U8*)s)[0] & 0xDB ) == 'S' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ): 0 )
# 1062 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_THREE_CHAR_FOLD_HEAD_latin1_safe(s,e) ( ((e)-(s) > 1) ? ( ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) || ( ( ((const U8*)s)[0] & 0xDE ) == 'H' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) || ( ( ((const U8*)s)[0] & 0xDB ) == 'S' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ) ? 1 : ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 'F' ) ? 2 : 1 ) : 0 ) : ((e)-(s) > 0) ? ( ( ( ((const U8*)s)[0] & 0xDF ) == 'A' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'F' ) || ( ( ((const U8*)s)[0] & 0xDE ) == 'H' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'J' ) || ( ( ((const U8*)s)[0] & 0xDB ) == 'S' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'T' ) || ( ( ((const U8*)s)[0] & 0xDF ) == 'Y' ) ): 0 )
# 1078 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_FOLDS_TO_MULTI_utf8(s) ( ( 0xC3 == ((const U8*)s)[0] ) ? ( ( 0x9F == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xC4 == ((const U8*)s)[0] || 0xC7 == ((const U8*)s)[0] ) ? ( ( 0xB0 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0x89 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 0x90 ) ? 2 : 0 ) : ( 0xD6 == ((const U8*)s)[0] ) ? ( ( 0x87 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( 0xBA == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x96, 0x9A) || 0x9E == ((const U8*)s)[2] ) ? 3 : 0 ) : ( 0xBD == ((const U8*)s)[1] ) ? ( ( ( ((const U8*)s)[2] & 0xF9 ) == 0x90 ) ? 3 : 0 ) : ( 0xBE == ((const U8*)s)[1] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0xAF) || inRANGE_helper_(U8, ((const U8*)s)[2], 0xB2, 0xB4) || inRANGE_helper_(U8, ((const U8*)s)[2], 0xB6, 0xB7) || 0xBC == ((const U8*)s)[2] ) ? 3 : 0 ) : ( ( 0xBF == ((const U8*)s)[1] ) && ( ( ( ((const U8*)s)[2] & 0xCA ) == 0x82 ) || ( ( ((const U8*)s)[2] & 0xF7 ) == 0x84 ) || ((const U8*)s)[2] == 0xA4 || ( ( ((const U8*)s)[2] & 0xF7 ) == 0xB4 ) ) ) ? 3 : 0 ): ( ( ( 0xEF == ((const U8*)s)[0] ) && ( 0xAC == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x86) || inRANGE_helper_(U8, ((const U8*)s)[2], 0x93, 0x97) ) ) ? 3 : 0 )
# 1105 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_PROBLEMATIC_LOCALE_FOLD_utf8(s) ( ( ((const U8*)s)[0] <= 0x7F ) ? 1 : ( inRANGE_helper_(U8, ((const U8*)s)[0], 0xC2, 0xC3) ) ? 2 : ( 0xC4 == ((const U8*)s)[0] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[1], 0xB0, 0xB1) ) ? 2 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0x89 == ((const U8*)s)[1] || 0xB8 == ((const U8*)s)[1] || 0xBF == ((const U8*)s)[1] ) ? 2 : 0 ): ( 0xC7 == ((const U8*)s)[0] ) ? ( ( 0xB0 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCC == ((const U8*)s)[0] ) ? ( ( 0x87 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 0x9C ) ? 2 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( ( 0xBA == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x96, 0x9A) || 0x9E == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( 0xE2 == ((const U8*)s)[0] ) ? ( ( ( 0x84 == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xAA, 0xAB) ) ) ? 3 : 0 ): ( ( ( 0xEF == ((const U8*)s)[0] ) && ( 0xAC == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x86) ) ) ? 3 : 0 )
# 1126 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_PROBLEMATIC_LOCALE_FOLD_cp(cp) ( cp <= 0xFF || ( 0xFF < cp && ( inRANGE_helper_(UV, cp, 0x130, 0x131) || ( 0x131 < cp && ( 0x149 == cp || ( 0x149 < cp && ( 0x178 == cp || ( 0x178 < cp && ( 0x17F == cp || ( 0x17F < cp && ( 0x1F0 == cp || ( 0x1F0 < cp && ( 0x307 == cp || ( 0x307 < cp && ( 0x39C == cp || ( 0x39C < cp && ( 0x3BC == cp || ( 0x3BC < cp && ( inRANGE_helper_(UV, cp, 0x1E96, 0x1E9A) || ( 0x1E9A < cp && ( 0x1E9E == cp || ( 0x1E9E < cp && ( inRANGE_helper_(UV, cp, 0x212A, 0x212B) || inRANGE_helper_(UV, cp, 0xFB00, 0xFB06) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
# 1146 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_PROBLEMATIC_LOCALE_FOLDEDS_START_utf8(s) ( ( ((const U8*)s)[0] <= 0x7F ) ? 1 : ( inRANGE_helper_(U8, ((const U8*)s)[0], 0xC2, 0xC3) ) ? 2 : ( 0xC4 == ((const U8*)s)[0] ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[1], 0xB0, 0xB1) ) ? 2 : 0 ) : ( 0xC5 == ((const U8*)s)[0] ) ? ( ( 0x89 == ((const U8*)s)[1] || 0xB8 == ((const U8*)s)[1] || 0xBF == ((const U8*)s)[1] ) ? 2 : 0 ): ( 0xC7 == ((const U8*)s)[0] ) ? ( ( 0xB0 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCA == ((const U8*)s)[0] ) ? ( ( 0xBC == ((const U8*)s)[1] ) ? 2 : 0 ) : ( 0xCE == ((const U8*)s)[0] ) ? ( ( ( ((const U8*)s)[1] & 0xDF ) == 0x9C ) ? 2 : 0 ) : ( 0xE1 == ((const U8*)s)[0] ) ? ( ( ( 0xBA == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x96, 0x9A) || 0x9E == ((const U8*)s)[2] ) ) ? 3 : 0 ): ( 0xE2 == ((const U8*)s)[0] ) ? ( ( ( 0x84 == ((const U8*)s)[1] ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0xAA, 0xAB) ) ) ? 3 : 0 ): ( ( ( 0xEF == ((const U8*)s)[0] ) && ( 0xAC == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0x86) ) ) ? 3 : 0 )
# 1167 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_PROBLEMATIC_LOCALE_FOLDEDS_START_cp(cp) ( cp <= 0xFF || ( 0xFF < cp && ( inRANGE_helper_(UV, cp, 0x130, 0x131) || ( 0x131 < cp && ( 0x149 == cp || ( 0x149 < cp && ( 0x178 == cp || ( 0x178 < cp && ( 0x17F == cp || ( 0x17F < cp && ( 0x1F0 == cp || ( 0x1F0 < cp && ( 0x2BC == cp || ( 0x2BC < cp && ( 0x39C == cp || ( 0x39C < cp && ( 0x3BC == cp || ( 0x3BC < cp && ( inRANGE_helper_(UV, cp, 0x1E96, 0x1E9A) || ( 0x1E9A < cp && ( 0x1E9E == cp || ( 0x1E9E < cp && ( inRANGE_helper_(UV, cp, 0x212A, 0x212B) || inRANGE_helper_(UV, cp, 0xFB00, 0xFB06) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
# 1187 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_PATWS_safe(s,e,is_utf8) ( ( LIKELY((e) > (s)) ) ? ( ( inRANGE_helper_(U8, ((const U8*)s)[0], '\t', '\r') || ' ' == ((const U8*)s)[0] ) ? 1 : (! is_utf8 ) ? ( 0x85 == ((const U8*)s)[0] ) : ( LIKELY(((e) - (s)) >= UTF8SKIP(s)) ) ? ( ( 0xC2 == ((const U8*)s)[0] ) ? ( ( 0x85 == ((const U8*)s)[1] ) ? 2 : 0 ) : ( ( ( 0xE2 == ((const U8*)s)[0] ) && ( 0x80 == ((const U8*)s)[1] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x8E, 0x8F) || inRANGE_helper_(U8, ((const U8*)s)[2], 0xA8, 0xA9) ) ) ? 3 : 0 ) : 0 ) : 0 )
# 1205 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regcharclass.h" 3 4
#define is_HANGUL_ED_utf8_safe(s,e) ( ( ( ( ( ((e) - (s)) >= 3 ) && ( 0xED == ((const U8*)s)[0] ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[1], 0x80, 0x9F) ) ) && ( inRANGE_helper_(U8, ((const U8*)s)[2], 0x80, 0xBF) ) ) ? 3 : 0 )
# 30 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unicode_constants.h" 1 3 4
# 9 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unicode_constants.h" 3 4
#define PERL_UNICODE_CONSTANTS_H_ 1
# 48 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/unicode_constants.h" 3 4
#define UNICODE_MAJOR_VERSION 13
#define UNICODE_DOT_VERSION 0
#define UNICODE_DOT_DOT_VERSION 0



#define LATIN_SMALL_LETTER_LONG_S_UTF8 "\xC5\xBF"

#define COMBINING_GRAVE_ACCENT_UTF8 "\xCC\x80"
#define COMBINING_DOT_ABOVE_UTF8 "\xCC\x87"

#define LATIN_CAPITAL_LETTER_SHARP_S_UTF8 "\xE1\xBA\x9E"

#define LATIN_SMALL_LIGATURE_LONG_S_T_UTF8 "\xEF\xAC\x85"
#define LATIN_SMALL_LIGATURE_ST_UTF8 "\xEF\xAC\x86"
#define LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE_UTF8 "\xC4\xB0"
#define LATIN_SMALL_LETTER_DOTLESS_I_UTF8 "\xC4\xB1"

#define HYPHEN_UTF8 "\xE2\x80\x90"
#define BOM_UTF8_FIRST_BYTE 0xEF
#define BOM_UTF8_TAIL "\xBB\xBF"

#define BOM_UTF8 "\xEF\xBB\xBF"

#define REPLACEMENT_CHARACTER_UTF8 "\xEF\xBF\xBD"

#define MAX_UNICODE_UTF8 "\xF4\x8F\xBF\xBF"

#define NBSP_NATIVE 0xA0
#define NBSP_UTF8 "\xC2\xA0"

#define DEL_NATIVE 0x7F
#define CR_NATIVE 0x0D
#define LF_NATIVE 0x0A
#define VT_NATIVE 0x0B
#define ESC_NATIVE 0x1B
#define LATIN_SMALL_LETTER_SHARP_S_NATIVE 0xDF
#define LATIN_SMALL_LETTER_SHARP_S_UTF8 "\xC3\x9F"
#define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE_NATIVE 0xE5
#define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE_NATIVE 0xC5
#define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS_NATIVE 0xFF
#define MICRO_SIGN_NATIVE 0xB5
#define MICRO_SIGN_UTF8 "\xC2\xB5"
# 31 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 2 3 4


#define FOLD_FLAGS_LOCALE 0x1
#define FOLD_FLAGS_FULL 0x2
#define FOLD_FLAGS_NOMIX_ASCII 0x4
# 53 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define is_ascii_string(s,len) is_utf8_invariant_string(s, len)
#define is_invariant_string(s,len) is_utf8_invariant_string(s, len)

#define uvoffuni_to_utf8_flags(d,uv,flags) uvoffuni_to_utf8_flags_msgs(d, uv, flags, 0)

#define uvchr_to_utf8(a,b) uvchr_to_utf8_flags(a,b,0)
#define uvchr_to_utf8_flags(d,uv,flags) uvchr_to_utf8_flags_msgs(d,uv,flags, 0)

#define uvchr_to_utf8_flags_msgs(d,uv,flags,msgs) uvoffuni_to_utf8_flags_msgs(d,NATIVE_TO_UNI(uv),flags, msgs)

#define utf8_to_uvchr_buf(s,e,lenp) utf8_to_uvchr_buf_helper((const U8 *) (s), (const U8 *) e, lenp)

#define utf8n_to_uvchr(s,len,lenp,flags) utf8n_to_uvchr_error(s, len, lenp, flags, 0)

#define utf8n_to_uvchr_error(s,len,lenp,flags,errors) utf8n_to_uvchr_msgs(s, len, lenp, flags, errors, 0)


#define to_uni_fold(c,p,lenp) _to_uni_fold_flags(c, p, lenp, FOLD_FLAGS_FULL)

#define foldEQ_utf8(s1,pe1,l1,u1,s2,pe2,l2,u2) foldEQ_utf8_flags(s1, pe1, l1, u1, s2, pe2, l2, u2, 0)

#define FOLDEQ_UTF8_NOMIX_ASCII (1 << 0)
#define FOLDEQ_LOCALE (1 << 1)
#define FOLDEQ_S1_ALREADY_FOLDED (1 << 2)
#define FOLDEQ_S2_ALREADY_FOLDED (1 << 3)
#define FOLDEQ_S1_FOLDS_SANE (1 << 4)
#define FOLDEQ_S2_FOLDS_SANE (1 << 5)
# 89 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4

# 104 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_MAXBYTES 13
# 131 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
extern const unsigned char PL_utf8skip[];



# 181 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define NATIVE_TO_LATIN1(ch) (__ASSERT_(FITS_IN_8_BITS(ch)) ((U8) ((ch) | 0)))
#define LATIN1_TO_NATIVE(ch) (__ASSERT_(FITS_IN_8_BITS(ch)) ((U8) ((ch) | 0)))







#define NATIVE_UTF8_TO_I8(ch) (__ASSERT_(FITS_IN_8_BITS(ch)) ((U8) ((ch) | 0)))
#define I8_TO_NATIVE_UTF8(ch) (__ASSERT_(FITS_IN_8_BITS(ch)) ((U8) ((ch) | 0)))

#define UNI_TO_NATIVE(ch) ((UV) ((ch) | 0))
#define NATIVE_TO_UNI(ch) ((UV) ((ch) | 0))
# 255 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF_ACCUMULATION_SHIFT 6



#define QUESTION_MARK_CTRL DEL_NATIVE





#define isUTF8_POSSIBLY_PROBLEMATIC(c) (__ASSERT_(FITS_IN_8_BITS(c)) (U8) c >= 0xED)


#define UNICODE_IS_PERL_EXTENDED(uv) UNLIKELY((UV) (uv) > 0x7FFFFFFF)






#define UTF_CONTINUATION_MASK ((U8) (nBIT_MASK(UTF_ACCUMULATION_SHIFT)))



#define UTF_IS_CONTINUATION_MASK ((U8) (0xFF << UTF_ACCUMULATION_SHIFT))





#define UTF_CONTINUATION_MARK (UTF_IS_CONTINUATION_MASK & 0xB0)



#define UTF8_IS_CONTINUATION(c) (__ASSERT_(FITS_IN_8_BITS(c)) (((NATIVE_UTF8_TO_I8(c) & UTF_IS_CONTINUATION_MASK) == UTF_CONTINUATION_MARK)))






#define OFFUNI_IS_INVARIANT(c) (((WIDEST_UTYPE)(c)) < UTF_CONTINUATION_MARK)
# 308 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UVCHR_IS_INVARIANT(cp) (OFFUNI_IS_INVARIANT(NATIVE_TO_UNI(cp)))
# 331 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define __COMMON_UNI_SKIP(uv) (UV) (uv) < (32 * (1U << ( UTF_ACCUMULATION_SHIFT))) ? 2 : (UV) (uv) < (16 * (1U << (2 * UTF_ACCUMULATION_SHIFT))) ? 3 : (UV) (uv) < ( 8 * (1U << (3 * UTF_ACCUMULATION_SHIFT))) ? 4 : (UV) (uv) < ( 4 * (1U << (4 * UTF_ACCUMULATION_SHIFT))) ? 5 : (UV) (uv) < ( 2 * (1U << (5 * UTF_ACCUMULATION_SHIFT))) ? 6 :
# 344 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define __BASE_UNI_SKIP(uv) (__COMMON_UNI_SKIP(uv) LIKELY((UV) (uv) < ((UV) 1U << (6 * UTF_ACCUMULATION_SHIFT))) ? 7 : UTF8_MAXBYTES)
# 357 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define OFFUNISKIP(uv) (OFFUNI_IS_INVARIANT(uv) ? 1 : __BASE_UNI_SKIP(uv))
# 368 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UVCHR_SKIP(uv) ( UVCHR_IS_INVARIANT(uv) ? 1 : __BASE_UNI_SKIP(uv))

#define UTF_MIN_START_BYTE ((UTF_CONTINUATION_MARK >> UTF_ACCUMULATION_SHIFT) | UTF_START_MARK(2))
# 379 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_IS_START_base(c) (__ASSERT_(FITS_IN_8_BITS(c)) (NATIVE_UTF8_TO_I8(c) >= UTF_MIN_START_BYTE))





#define UTF8_IS_START(c) UTF8_IS_START_base(c)


#define UTF_MIN_ABOVE_LATIN1_BYTE ((0x100 >> UTF_ACCUMULATION_SHIFT) | UTF_START_MARK(2))




#define UTF8_IS_ABOVE_LATIN1(c) (__ASSERT_(FITS_IN_8_BITS(c)) (NATIVE_UTF8_TO_I8(c) >= UTF_MIN_ABOVE_LATIN1_BYTE))





#define UTF8_IS_DOWNGRADEABLE_START(c) (__ASSERT_(FITS_IN_8_BITS(c)) inRANGE(NATIVE_UTF8_TO_I8(c), UTF_MIN_START_BYTE, UTF_MIN_ABOVE_LATIN1_BYTE - 1))






#define MAX_UTF8_TWO_BYTE (32 * (1U << UTF_ACCUMULATION_SHIFT) - 1)




#define MAX_PORTABLE_UTF8_TWO_BYTE (32 * nBIT_UMAX(5))
# 431 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_MAXBYTES_CASE MAX(UTF8_MAXBYTES, UTF8_MAX_FOLD_CHAR_EXPAND * OFFUNISKIP(0x10FFFF))
# 441 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define NATIVE_TO_ASCII(ch) NATIVE_TO_LATIN1(ch)
#define ASCII_TO_NATIVE(ch) LATIN1_TO_NATIVE(ch)


#define NATIVE_TO_UTF(ch) NATIVE_UTF8_TO_I8(ch)
#define NATIVE_TO_I8(ch) NATIVE_UTF8_TO_I8(ch)
#define UTF_TO_NATIVE(ch) I8_TO_NATIVE_UTF8(ch)
#define I8_TO_NATIVE(ch) I8_TO_NATIVE_UTF8(ch)
#define NATIVE8_TO_UNI(ch) NATIVE_TO_LATIN1(ch)





#define UTF_START_MARK(len) (UNLIKELY((len) > 7) ? 0xFF : ((U8) (0xFE << (7-(len)))))






#define UTF_START_MASK(len) (UNLIKELY((len) >= 7) ? 0x00 : (0x1F >> ((len)-2)))







#define UTF8_ACCUMULATE(old,new) (__ASSERT_(FITS_IN_8_BITS(new)) ((old) << UTF_ACCUMULATION_SHIFT) | ((NATIVE_UTF8_TO_I8(new)) & UTF_CONTINUATION_MASK))





#define UTF8_IS_NEXT_CHAR_DOWNGRADEABLE(s,e) ( UTF8_IS_DOWNGRADEABLE_START(*(s)) && ( (e) - (s) > 1) && UTF8_IS_CONTINUATION(*((s)+1)))





#define NATIVE_SKIP(uv) UVCHR_SKIP(uv)





#define UNISKIP(uv) UVCHR_SKIP(uv)


#define UTF8_IS_ABOVE_LATIN1_START(c) UTF8_IS_ABOVE_LATIN1(c)
# 502 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define EIGHT_BIT_UTF8_TO_NATIVE(HI,LO) ( __ASSERT_(UTF8_IS_DOWNGRADEABLE_START(HI)) __ASSERT_(UTF8_IS_CONTINUATION(LO)) LATIN1_TO_NATIVE(UTF8_ACCUMULATE(( NATIVE_UTF8_TO_I8(HI) & UTF_START_MASK(2)), (LO))))
# 513 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define TWO_BYTE_UTF8_TO_NATIVE(HI,LO) (__ASSERT_(FITS_IN_8_BITS(HI)) __ASSERT_(FITS_IN_8_BITS(LO)) __ASSERT_(PL_utf8skip[HI] == 2) __ASSERT_(UTF8_IS_CONTINUATION(LO)) UNI_TO_NATIVE(UTF8_ACCUMULATE((NATIVE_UTF8_TO_I8(HI) & UTF_START_MASK(2)), (LO))))
# 522 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define TWO_BYTE_UTF8_TO_UNI(HI,LO) NATIVE_TO_UNI(TWO_BYTE_UTF8_TO_NATIVE(HI, LO))
# 548 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8SKIP(s) PL_utf8skip[*(const U8*)(s)]
# 557 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_SKIP(s) UTF8SKIP(s)
# 579 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_CHK_SKIP(s) (UNLIKELY(s[0] == '\0') ? 1 : MIN(UTF8SKIP(s), my_strnlen((char *) (s), UTF8SKIP(s))))
# 591 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_SAFE_SKIP(s,e) (__ASSERT_((e) >= (s)) UNLIKELY(((e) - (s)) <= 0) ? 0 : MIN(((e) - (s)), UTF8_SKIP(s)))






#define UNI_IS_INVARIANT(cp) UVCHR_IS_INVARIANT(cp)
# 621 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_IS_INVARIANT(c) UVCHR_IS_INVARIANT((c) | 0)



#define NATIVE_BYTE_IS_INVARIANT(c) UVCHR_IS_INVARIANT(c)



#define UTF8_IS_CONTINUED(c) (__ASSERT_(FITS_IN_8_BITS(c)) (! UTF8_IS_INVARIANT(c)))
# 640 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define __BASE_TWO_BYTE_HI(c,translate_function) (__ASSERT_(! UVCHR_IS_INVARIANT(c)) I8_TO_NATIVE_UTF8((translate_function(c) >> UTF_ACCUMULATION_SHIFT) | UTF_START_MARK(2)))



#define __BASE_TWO_BYTE_LO(c,translate_function) (__ASSERT_(! UVCHR_IS_INVARIANT(c)) I8_TO_NATIVE_UTF8((translate_function(c) & UTF_CONTINUATION_MASK) | UTF_CONTINUATION_MARK))







#define UTF8_TWO_BYTE_HI_nocast(c) __BASE_TWO_BYTE_HI(c, NATIVE_TO_UNI)
#define UTF8_TWO_BYTE_LO_nocast(c) __BASE_TWO_BYTE_LO(c, NATIVE_TO_UNI)



#define UTF8_EIGHT_BIT_HI(c) (__ASSERT_(FITS_IN_8_BITS(c)) ( __BASE_TWO_BYTE_HI(c, NATIVE_TO_LATIN1)))

#define UTF8_EIGHT_BIT_LO(c) (__ASSERT_(FITS_IN_8_BITS(c)) (__BASE_TWO_BYTE_LO(c, NATIVE_TO_LATIN1)))
# 668 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_TWO_BYTE_HI(c) (__ASSERT_((sizeof(c) == 1) || !(((WIDEST_UTYPE)(c)) & ~MAX_UTF8_TWO_BYTE)) (__BASE_TWO_BYTE_HI(c, NATIVE_TO_UNI)))



#define UTF8_TWO_BYTE_LO(c) (__ASSERT_((sizeof(c) == 1) || !(((WIDEST_UTYPE)(c)) & ~MAX_UTF8_TWO_BYTE)) (__BASE_TWO_BYTE_LO(c, NATIVE_TO_UNI)))






#define ILLEGAL_UTF8_BYTE I8_TO_NATIVE_UTF8(0xC1)
# 688 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define isIDFIRST_lazy_if_safe(p,e,UTF) ((IN_BYTES || !UTF) ? isIDFIRST(*(p)) : isIDFIRST_utf8_safe(p, e))



#define isWORDCHAR_lazy_if_safe(p,e,UTF) ((IN_BYTES || !UTF) ? isWORDCHAR(*(p)) : isWORDCHAR_utf8_safe((U8 *) p, (U8 *) e))



#define isALNUM_lazy_if_safe(p,e,UTF) isWORDCHAR_lazy_if_safe(p, e, UTF)

#define UTF8_MAXLEN UTF8_MAXBYTES


#define UTF8_MAX_FOLD_CHAR_EXPAND 3

#define IN_BYTES UNLIKELY(CopHINTS_get(PL_curcop) & HINT_BYTES)
# 716 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define DO_UTF8(sv) (SvUTF8(sv) && !IN_BYTES)





#define IN_UNI_8_BIT (( ( (CopHINTS_get(PL_curcop) & HINT_UNI_8_BIT)) || ( CopHINTS_get(PL_curcop) & HINT_LOCALE_PARTIAL && _is_in_locale_category(FALSE, -1))) && (! IN_BYTES))







#define UTF8_ALLOW_EMPTY 0x0001
#define UTF8_GOT_EMPTY UTF8_ALLOW_EMPTY


#define UTF8_ALLOW_CONTINUATION 0x0002
#define UTF8_GOT_CONTINUATION UTF8_ALLOW_CONTINUATION


#define UTF8_ALLOW_NON_CONTINUATION 0x0004
#define UTF8_GOT_NON_CONTINUATION UTF8_ALLOW_NON_CONTINUATION


#define UTF8_ALLOW_SHORT 0x0008
#define UTF8_GOT_SHORT UTF8_ALLOW_SHORT




#define UTF8_ALLOW_LONG 0x0010
#define UTF8_ALLOW_LONG_AND_ITS_VALUE (UTF8_ALLOW_LONG|0x0020)
#define UTF8_GOT_LONG UTF8_ALLOW_LONG

#define UTF8_ALLOW_OVERFLOW 0x0080
#define UTF8_GOT_OVERFLOW UTF8_ALLOW_OVERFLOW

#define UTF8_DISALLOW_SURROGATE 0x0100
#define UTF8_GOT_SURROGATE UTF8_DISALLOW_SURROGATE
#define UTF8_WARN_SURROGATE 0x0200


#define UTF8_DISALLOW_NONCHAR 0x0400
#define UTF8_GOT_NONCHAR UTF8_DISALLOW_NONCHAR
#define UTF8_WARN_NONCHAR 0x0800


#define UTF8_DISALLOW_SUPER 0x1000
#define UTF8_GOT_SUPER UTF8_DISALLOW_SUPER
#define UTF8_WARN_SUPER 0x2000
# 778 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_DISALLOW_PERL_EXTENDED 0x4000
#define UTF8_GOT_PERL_EXTENDED UTF8_DISALLOW_PERL_EXTENDED
#define UTF8_WARN_PERL_EXTENDED 0x8000



#define UTF8_DISALLOW_ABOVE_31_BIT UTF8_DISALLOW_PERL_EXTENDED
#define UTF8_GOT_ABOVE_31_BIT UTF8_GOT_PERL_EXTENDED
#define UTF8_WARN_ABOVE_31_BIT UTF8_WARN_PERL_EXTENDED
#define UTF8_DISALLOW_FE_FF UTF8_DISALLOW_PERL_EXTENDED
#define UTF8_WARN_FE_FF UTF8_WARN_PERL_EXTENDED

#define UTF8_CHECK_ONLY 0x10000
#define _UTF8_NO_CONFIDENCE_IN_CURLEN 0x20000




#define UTF8_ALLOW_FFFF 0
#define UTF8_ALLOW_FE_FF 0
#define UTF8_ALLOW_SURROGATE 0


#define UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE (UTF8_DISALLOW_SUPER|UTF8_DISALLOW_SURROGATE)

#define UTF8_WARN_ILLEGAL_C9_INTERCHANGE (UTF8_WARN_SUPER|UTF8_WARN_SURROGATE)

#define UTF8_DISALLOW_ILLEGAL_INTERCHANGE (UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE|UTF8_DISALLOW_NONCHAR)

#define UTF8_WARN_ILLEGAL_INTERCHANGE (UTF8_WARN_ILLEGAL_C9_INTERCHANGE|UTF8_WARN_NONCHAR)






#define UTF8_ALLOW_ANY ( UTF8_ALLOW_CONTINUATION |UTF8_ALLOW_NON_CONTINUATION |UTF8_ALLOW_SHORT |UTF8_ALLOW_LONG |UTF8_ALLOW_OVERFLOW)







#define UTF8_ALLOW_ANYUV 0
#define UTF8_ALLOW_DEFAULT UTF8_ALLOW_ANYUV
# 836 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_IS_SURROGATE(s,e) is_SURROGATE_utf8_safe(s, e)


#define UTF8_IS_REPLACEMENT(s,send) is_REPLACEMENT_utf8_safe(s,send)

#define MAX_LEGAL_CP ((UV)IV_MAX)
# 878 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_IS_SUPER(s,e) (( ((e) > (s) + 3) && (*(U8*) (s)) >= 0xF4 && (UNLIKELY( ((*(U8*) (s)) > 0xF4) || (*((U8*) (s) + 1) >= 0x90))) && LIKELY((s) + UTF8SKIP(s) <= (e))) ? is_utf8_char_helper(s, s + UTF8SKIP(s), 0) : 0)
# 889 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_IS_NONCHAR_GIVEN_THAT_NON_SUPER_AND_GE_PROBLEMATIC(s,e) cBOOL(is_NONCHAR_utf8_safe(s,e))
# 907 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define UTF8_IS_NONCHAR(s,e) UTF8_IS_NONCHAR_GIVEN_THAT_NON_SUPER_AND_GE_PROBLEMATIC(s, e)


#define UNICODE_SURROGATE_FIRST 0xD800
#define UNICODE_SURROGATE_LAST 0xDFFF
#define UNICODE_REPLACEMENT 0xFFFD
#define UNICODE_BYTE_ORDER_MARK 0xFEFF



#define PERL_UNICODE_MAX 0x10FFFF

#define UNICODE_WARN_SURROGATE 0x0001
#define UNICODE_WARN_NONCHAR 0x0002
#define UNICODE_WARN_SUPER 0x0004
#define UNICODE_WARN_PERL_EXTENDED 0x0008
#define UNICODE_WARN_ABOVE_31_BIT UNICODE_WARN_PERL_EXTENDED
#define UNICODE_DISALLOW_SURROGATE 0x0010
#define UNICODE_DISALLOW_NONCHAR 0x0020
#define UNICODE_DISALLOW_SUPER 0x0040
#define UNICODE_DISALLOW_PERL_EXTENDED 0x0080




#define UNICODE_DISALLOW_ABOVE_31_BIT UNICODE_DISALLOW_PERL_EXTENDED

#define UNICODE_GOT_SURROGATE UNICODE_DISALLOW_SURROGATE
#define UNICODE_GOT_NONCHAR UNICODE_DISALLOW_NONCHAR
#define UNICODE_GOT_SUPER UNICODE_DISALLOW_SUPER
#define UNICODE_GOT_PERL_EXTENDED UNICODE_DISALLOW_PERL_EXTENDED

#define UNICODE_WARN_ILLEGAL_C9_INTERCHANGE (UNICODE_WARN_SURROGATE|UNICODE_WARN_SUPER)

#define UNICODE_WARN_ILLEGAL_INTERCHANGE (UNICODE_WARN_ILLEGAL_C9_INTERCHANGE|UNICODE_WARN_NONCHAR)

#define UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE (UNICODE_DISALLOW_SURROGATE|UNICODE_DISALLOW_SUPER)

#define UNICODE_DISALLOW_ILLEGAL_INTERCHANGE (UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE|UNICODE_DISALLOW_NONCHAR)



#define UNICODE_ALLOW_SURROGATE 0
#define UNICODE_ALLOW_SUPER 0
#define UNICODE_ALLOW_ANY 0



#define UNICODE_IS_SURROGATE(uv) UNLIKELY(((UV) (uv) & (~0xFFFF | 0xF800)) == 0xD800)


#define UNICODE_IS_REPLACEMENT(uv) UNLIKELY((UV) (uv) == UNICODE_REPLACEMENT)
#define UNICODE_IS_BYTE_ORDER_MARK(uv) UNLIKELY((UV) (uv) == UNICODE_BYTE_ORDER_MARK)



#define UNICODE_IS_32_CONTIGUOUS_NONCHARS(uv) UNLIKELY((UV) (uv) >= 0xFDD0 && (UV) (uv) <= 0xFDEF)





#define UNICODE_IS_END_PLANE_NONCHAR_GIVEN_NOT_SUPER(uv) UNLIKELY(((UV) (uv) & 0xFFFE) == 0xFFFE)


#define UNICODE_IS_NONCHAR(uv) ( UNICODE_IS_32_CONTIGUOUS_NONCHARS(uv) || ( LIKELY( ! UNICODE_IS_SUPER(uv)) && UNICODE_IS_END_PLANE_NONCHAR_GIVEN_NOT_SUPER(uv)))




#define UNICODE_IS_SUPER(uv) UNLIKELY((UV) (uv) > PERL_UNICODE_MAX)

#define LATIN_SMALL_LETTER_SHARP_S LATIN_SMALL_LETTER_SHARP_S_NATIVE
#define LATIN_SMALL_LETTER_Y_WITH_DIAERESIS LATIN_SMALL_LETTER_Y_WITH_DIAERESIS_NATIVE

#define MICRO_SIGN MICRO_SIGN_NATIVE
#define LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE_NATIVE

#define LATIN_SMALL_LETTER_A_WITH_RING_ABOVE LATIN_SMALL_LETTER_A_WITH_RING_ABOVE_NATIVE

#define UNICODE_GREEK_CAPITAL_LETTER_SIGMA 0x03A3
#define UNICODE_GREEK_SMALL_LETTER_FINAL_SIGMA 0x03C2
#define UNICODE_GREEK_SMALL_LETTER_SIGMA 0x03C3
#define GREEK_SMALL_LETTER_MU 0x03BC
#define GREEK_CAPITAL_LETTER_MU 0x039C

#define LATIN_CAPITAL_LETTER_Y_WITH_DIAERESIS 0x0178

#define LATIN_CAPITAL_LETTER_SHARP_S 0x1E9E

#define LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE 0x130
#define LATIN_SMALL_LETTER_DOTLESS_I 0x131
#define LATIN_SMALL_LETTER_LONG_S 0x017F
#define LATIN_SMALL_LIGATURE_LONG_S_T 0xFB05
#define LATIN_SMALL_LIGATURE_ST 0xFB06
#define KELVIN_SIGN 0x212A
#define ANGSTROM_SIGN 0x212B

#define UNI_DISPLAY_ISPRINT 0x0001
#define UNI_DISPLAY_BACKSLASH 0x0002
#define UNI_DISPLAY_BACKSPACE 0x0004

#define UNI_DISPLAY_QQ (UNI_DISPLAY_ISPRINT |UNI_DISPLAY_BACKSLASH |UNI_DISPLAY_BACKSPACE)




#define UNI_DISPLAY_REGEX (UNI_DISPLAY_ISPRINT|UNI_DISPLAY_BACKSLASH)


#define SHARP_S_SKIP 2

#define is_utf8_char_buf(buf,buf_end) isUTF8_CHAR(buf, buf_end)
#define bytes_from_utf8(s,lenp,is_utf8p) bytes_from_utf8_loc(s, lenp, is_utf8p, 0)
# 1053 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define isUTF8_CHAR_flags(s,e,flags) (UNLIKELY((e) <= (s)) ? 0 : (UTF8_IS_INVARIANT(*s)) ? 1 : UNLIKELY(((e) - (s)) < UTF8SKIP(s)) ? 0 : is_utf8_char_helper(s, e, flags))
# 1064 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/utf8.h" 3 4
#define IS_UTF8_CHAR(p,n) (isUTF8_CHAR(p, (p) + (n)) == n)
# 22 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 2 3 4

typedef ssize_t regnode_offset;

struct regnode {
    U8 flags;
    U8 type;
    U16 next_off;
};

typedef struct regnode regnode;

struct reg_substr_data;

struct reg_data;

struct regexp_engine;
struct regexp;

struct reg_substr_datum {
    ssize_t min_offset;
    ssize_t max_offset ;
    SV *substr;
    SV *utf8_substr;
    ssize_t end_shift;
};
struct reg_substr_data {
    U8 check_ix;
    struct reg_substr_datum data[3];
};


#define SV_SAVED_COPY SV *saved_copy;






typedef struct regexp_paren_pair {
    ssize_t start;
    ssize_t end;






    ssize_t start_tmp;
} regexp_paren_pair;
# 83 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
struct reg_code_block {
    STRLEN start;
    STRLEN end;
    OP *block;
    REGEXP *src_regex;
};



struct reg_code_blocks {
    int refcnt;
    int count;
    struct reg_code_block *cb;
};
# 111 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
typedef struct regexp {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    const struct regexp_engine* engine;
    REGEXP *mother_re;
    HV *paren_names;





    U32 extflags;
    U32 nparens;
    ssize_t minlen;
    ssize_t minlenret;
    STRLEN gofs;


    struct reg_substr_data *substrs;



    void *pprivate;

    U32 intflags;





    U32 lastparen;
    regexp_paren_pair *offs;
    char **recurse_locinput;
    U32 lastcloseparen;




    U32 pre_prefix:4;



    U32 compflags:9;



    char *subbeg;
    SV *saved_copy;
    ssize_t sublen;
    ssize_t suboffset;
    ssize_t subcoffset;
    ssize_t maxlen;




    CV *qr_anoncv;
} regexp;


#define RXp_PAREN_NAMES(rx) ((rx)->paren_names)


typedef struct re_scream_pos_data_s
{
    char **scream_olds;
    ssize_t *scream_pos;
} re_scream_pos_data;




typedef struct regexp_engine {
    REGEXP* (*comp) (PerlInterpreter* my_perl __attribute__((unused)), SV * const pattern, U32 flags);
    I32 (*exec) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, char* stringarg, char* strend,
                     char* strbeg, ssize_t minend, SV* sv,
                     void* data, U32 flags);
    char* (*intuit) (PerlInterpreter* my_perl __attribute__((unused)),
                        REGEXP * const rx,
                        SV *sv,
                        const char * const strbeg,
                        char *strpos,
                        char *strend,
                        const U32 flags,
                       re_scream_pos_data *data);
    SV* (*checkstr) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);
    void (*rxfree) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);
    void (*numbered_buff_FETCH) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren,
                                    SV * const sv);
    void (*numbered_buff_STORE) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren,
                                   SV const * const value);
    I32 (*numbered_buff_LENGTH) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const sv,
                                    const I32 paren);
    SV* (*named_buff) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const key,
                           SV * const value, const U32 flags);
    SV* (*named_buff_iter) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const lastkey,
                                const U32 flags);
    SV* (*qr_package)(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);

    void* (*dupe) (PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, CLONE_PARAMS *param);

    REGEXP* (*op_comp) (PerlInterpreter* my_perl __attribute__((unused)), SV ** const patternp, int pat_count,
      OP *expr, const struct regexp_engine* eng,
      REGEXP *old_re,
      _Bool *is_bare_re, U32 orig_rx_flags, U32 pm_flags);
} regexp_engine;






#define RX_BUFF_IDX_CARET_PREMATCH -5
#define RX_BUFF_IDX_CARET_POSTMATCH -4
#define RX_BUFF_IDX_CARET_FULLMATCH -3
#define RX_BUFF_IDX_PREMATCH -2
#define RX_BUFF_IDX_POSTMATCH -1
#define RX_BUFF_IDX_FULLMATCH 0
# 237 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define RXapif_FETCH 0x0001
#define RXapif_STORE 0x0002
#define RXapif_DELETE 0x0004
#define RXapif_CLEAR 0x0008
#define RXapif_EXISTS 0x0010
#define RXapif_SCALAR 0x0020
#define RXapif_FIRSTKEY 0x0040
#define RXapif_NEXTKEY 0x0080


#define RXapif_ONE 0x0100
#define RXapif_ALL 0x0200


#define RXapif_REGNAME 0x0400
#define RXapif_REGNAMES 0x0800
#define RXapif_REGNAMES_COUNT 0x1000
# 281 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define SvRX(sv) (Perl_get_re_arg(aTHX_ sv))
#define SvRXOK(sv) cBOOL(Perl_get_re_arg(aTHX_ sv))
# 296 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op_reg_common.h" 1 3 4
# 24 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op_reg_common.h" 3 4
#define RXf_PMf_STD_PMMOD_SHIFT 0






#define RXf_PMf_MULTILINE (1U << (RXf_PMf_STD_PMMOD_SHIFT+0))
#define RXf_PMf_SINGLELINE (1U << (RXf_PMf_STD_PMMOD_SHIFT+1))
#define RXf_PMf_FOLD (1U << (RXf_PMf_STD_PMMOD_SHIFT+2))
#define RXf_PMf_EXTENDED (1U << (RXf_PMf_STD_PMMOD_SHIFT+3))
#define RXf_PMf_EXTENDED_MORE (1U << (RXf_PMf_STD_PMMOD_SHIFT+4))
#define RXf_PMf_NOCAPTURE (1U << (RXf_PMf_STD_PMMOD_SHIFT+5))

#define RXf_PMf_KEEPCOPY (1U << (RXf_PMf_STD_PMMOD_SHIFT+6))







typedef enum {
    REGEX_DEPENDS_CHARSET = 0,
    REGEX_LOCALE_CHARSET,
    REGEX_UNICODE_CHARSET,
    REGEX_ASCII_RESTRICTED_CHARSET,
    REGEX_ASCII_MORE_RESTRICTED_CHARSET
} regex_charset;

#define _RXf_PMf_CHARSET_SHIFT ((RXf_PMf_STD_PMMOD_SHIFT)+7)
#define RXf_PMf_CHARSET (7U << (_RXf_PMf_CHARSET_SHIFT))




static __inline__ void
set_regex_charset(U32 * const flags, const regex_charset cs)
    __attribute__((nonnull(1)));

static __inline__ void
set_regex_charset(U32 * const flags, const regex_charset cs)
{



    *flags &= ~(7U << (((0)+7)));
    *flags |= (cs << ((0)+7));
}

static __inline__ regex_charset
get_regex_charset(const U32 flags)
    __attribute__((warn_unused_result));

static __inline__ regex_charset
get_regex_charset(const U32 flags)
{


    return (regex_charset) ((flags & (7U << (((0)+7)))) >> ((0)+7));
}

#define RXf_PMf_STRICT (1U<<(RXf_PMf_STD_PMMOD_SHIFT+10))

#define _RXf_PMf_SHIFT_COMPILETIME (RXf_PMf_STD_PMMOD_SHIFT+11)







#define RXf_PMf_SPLIT (1U<<(RXf_PMf_STD_PMMOD_SHIFT+11))



#define _RXf_PMf_SHIFT_NEXT (RXf_PMf_STD_PMMOD_SHIFT+12)



#define RXf_PMf_COMPILETIME (RXf_PMf_MULTILINE|RXf_PMf_SINGLELINE|RXf_PMf_FOLD|RXf_PMf_EXTENDED|RXf_PMf_EXTENDED_MORE|RXf_PMf_KEEPCOPY|RXf_PMf_NOCAPTURE|RXf_PMf_CHARSET|RXf_PMf_STRICT)
#define RXf_PMf_FLAGCOPYMASK (RXf_PMf_COMPILETIME|RXf_PMf_SPLIT)
# 121 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op_reg_common.h" 3 4
#define PMf_MULTILINE (1U<<0)
#define PMf_SINGLELINE (1U<<1)
#define PMf_FOLD (1U<<2)
#define PMf_EXTENDED (1U<<3)
#define PMf_EXTENDED_MORE (1U<<4)
#define PMf_NOCAPTURE (1U<<5)
#define PMf_KEEPCOPY (1U<<6)
#define PMf_CHARSET (7U<<7)
#define PMf_STRICT (1U<<10)
#define PMf_SPLIT (1U<<11)
# 297 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 2 3 4

#define RXf_PMf_STD_PMMOD (RXf_PMf_MULTILINE|RXf_PMf_SINGLELINE|RXf_PMf_FOLD|RXf_PMf_EXTENDED|RXf_PMf_EXTENDED_MORE|RXf_PMf_NOCAPTURE)

#define CASE_STD_PMMOD_FLAGS_PARSE_SET(pmfl,x_count) case IGNORE_PAT_MOD: *(pmfl) |= RXf_PMf_FOLD; break; case MULTILINE_PAT_MOD: *(pmfl) |= RXf_PMf_MULTILINE; break; case SINGLE_PAT_MOD: *(pmfl) |= RXf_PMf_SINGLELINE; break; case XTENDED_PAT_MOD: if (x_count == 0) { *(pmfl) |= RXf_PMf_EXTENDED; *(pmfl) &= ~RXf_PMf_EXTENDED_MORE; } else { *(pmfl) |= RXf_PMf_EXTENDED |RXf_PMf_EXTENDED_MORE; } (x_count)++; break; case NOCAPTURE_PAT_MOD: *(pmfl) |= RXf_PMf_NOCAPTURE; break;
# 316 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define STD_PMMOD_FLAGS_CLEAR(pmfl) *(pmfl) &= ~(RXf_PMf_FOLD|RXf_PMf_MULTILINE|RXf_PMf_SINGLELINE|RXf_PMf_EXTENDED|RXf_PMf_EXTENDED_MORE|RXf_PMf_CHARSET|RXf_PMf_NOCAPTURE)
# 326 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define DEFAULT_PAT_MOD '^'
#define EXEC_PAT_MOD 'e'
#define KEEPCOPY_PAT_MOD 'p'
#define NOCAPTURE_PAT_MOD 'n'
#define ONCE_PAT_MOD 'o'
#define GLOBAL_PAT_MOD 'g'
#define CONTINUE_PAT_MOD 'c'
#define MULTILINE_PAT_MOD 'm'
#define SINGLE_PAT_MOD 's'
#define IGNORE_PAT_MOD 'i'
#define XTENDED_PAT_MOD 'x'
#define NONDESTRUCT_PAT_MOD 'r'
#define LOCALE_PAT_MOD 'l'
#define UNICODE_PAT_MOD 'u'
#define DEPENDS_PAT_MOD 'd'
#define ASCII_RESTRICT_PAT_MOD 'a'

#define ONCE_PAT_MODS "o"
#define KEEPCOPY_PAT_MODS "p"
#define NOCAPTURE_PAT_MODS "n"
#define EXEC_PAT_MODS "e"
#define LOOP_PAT_MODS "gc"
#define NONDESTRUCT_PAT_MODS "r"
#define LOCALE_PAT_MODS "l"
#define UNICODE_PAT_MODS "u"
#define DEPENDS_PAT_MODS "d"
#define ASCII_RESTRICT_PAT_MODS "a"
#define ASCII_MORE_RESTRICT_PAT_MODS "aa"




#define STD_PAT_MODS "msixxn"

#define CHARSET_PAT_MODS ASCII_RESTRICT_PAT_MODS DEPENDS_PAT_MODS LOCALE_PAT_MODS UNICODE_PAT_MODS




#define INT_PAT_MODS STD_PAT_MODS KEEPCOPY_PAT_MODS

#define EXT_PAT_MODS ONCE_PAT_MODS KEEPCOPY_PAT_MODS NOCAPTURE_PAT_MODS
#define QR_PAT_MODS STD_PAT_MODS EXT_PAT_MODS CHARSET_PAT_MODS
#define M_PAT_MODS QR_PAT_MODS LOOP_PAT_MODS
#define S_PAT_MODS M_PAT_MODS EXEC_PAT_MODS NONDESTRUCT_PAT_MODS
# 382 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define RXf_SPLIT RXf_PMf_SPLIT
# 417 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define RXf_BASE_SHIFT (_RXf_PMf_SHIFT_NEXT + 2)


#define RXf_NO_INPLACE_SUBST (1U<<(RXf_BASE_SHIFT+2))
#define RXf_EVAL_SEEN (1U<<(RXf_BASE_SHIFT+3))


#define RXf_UNBOUNDED_QUANTIFIER_SEEN (1U<<(RXf_BASE_SHIFT+4))
#define RXf_CHECK_ALL (1U<<(RXf_BASE_SHIFT+5))


#define RXf_MATCH_UTF8 (1U<<(RXf_BASE_SHIFT+6))


#define RXf_USE_INTUIT_NOML (1U<<(RXf_BASE_SHIFT+7))
#define RXf_USE_INTUIT_ML (1U<<(RXf_BASE_SHIFT+8))
#define RXf_INTUIT_TAIL (1U<<(RXf_BASE_SHIFT+9))
#define RXf_USE_INTUIT (RXf_USE_INTUIT_NOML|RXf_USE_INTUIT_ML)


#define RXf_IS_ANCHORED (1U<<(RXf_BASE_SHIFT+10))


#define RXf_COPY_DONE (1U<<(RXf_BASE_SHIFT+11))


#define RXf_TAINTED_SEEN (1U<<(RXf_BASE_SHIFT+12))

#define RXf_TAINTED (1U<<(RXf_BASE_SHIFT+13))


#define RXf_START_ONLY (1U<<(RXf_BASE_SHIFT+14))
#define RXf_SKIPWHITE (1U<<(RXf_BASE_SHIFT+15))

#define RXf_WHITE (1U<<(RXf_BASE_SHIFT+16))
#define RXf_NULL (1U<<(RXf_BASE_SHIFT+17))
# 479 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define RX_ISTAINTED(rx_sv) (RX_EXTFLAGS(rx_sv) & RXf_TAINTED)
#define RXp_ISTAINTED(prog) (RXp_EXTFLAGS(prog) & RXf_TAINTED)
#define RX_TAINT_on(rx_sv) (RX_EXTFLAGS(rx_sv) |= RXf_TAINTED)
#define RXp_MATCH_TAINTED(prog) (RXp_EXTFLAGS(prog) & RXf_TAINTED_SEEN)
#define RX_MATCH_TAINTED(rx_sv) (RX_EXTFLAGS(rx_sv) & RXf_TAINTED_SEEN)
#define RXp_MATCH_TAINTED_on(prog) (RXp_EXTFLAGS(prog) |= RXf_TAINTED_SEEN)
#define RX_MATCH_TAINTED_on(rx_sv) (RX_EXTFLAGS(rx_sv) |= RXf_TAINTED_SEEN)
#define RXp_MATCH_TAINTED_off(prog) (RXp_EXTFLAGS(prog) &= ~RXf_TAINTED_SEEN)
#define RX_MATCH_TAINTED_off(rx_sv) (RX_EXTFLAGS(rx_sv) &= ~RXf_TAINTED_SEEN)


#define RXp_HAS_CUTGROUP(prog) ((prog)->intflags & PREGf_CUTGROUP_SEEN)

#define RX_MATCH_TAINTED_set(rx_sv,t) ((t) ? RX_MATCH_TAINTED_on(rx_sv) : RX_MATCH_TAINTED_off(rx_sv))



#define RXp_MATCH_COPIED(prog) (RXp_EXTFLAGS(prog) & RXf_COPY_DONE)
#define RX_MATCH_COPIED(rx_sv) (RX_EXTFLAGS(rx_sv) & RXf_COPY_DONE)
#define RXp_MATCH_COPIED_on(prog) (RXp_EXTFLAGS(prog) |= RXf_COPY_DONE)
#define RX_MATCH_COPIED_on(rx_sv) (RX_EXTFLAGS(rx_sv) |= RXf_COPY_DONE)
#define RXp_MATCH_COPIED_off(prog) (RXp_EXTFLAGS(prog) &= ~RXf_COPY_DONE)
#define RX_MATCH_COPIED_off(rx_sv) (RX_EXTFLAGS(rx_sv) &= ~RXf_COPY_DONE)
#define RX_MATCH_COPIED_set(rx_sv,t) ((t) ? RX_MATCH_COPIED_on(rx_sv) : RX_MATCH_COPIED_off(rx_sv))



#define RXp_EXTFLAGS(rx) ((rx)->extflags)
#define RXp_COMPFLAGS(rx) ((rx)->compflags)


#define RX_PRECOMP(rx_sv) (RX_WRAPPED(rx_sv) + ReANY(rx_sv)->pre_prefix)

#define RX_PRECOMP_const(rx_sv) (RX_WRAPPED_const(rx_sv) + ReANY(rx_sv)->pre_prefix)




#define RX_PRELEN(rx_sv) (RX_WRAPLEN(rx_sv) - ReANY(rx_sv)->pre_prefix - 1)


#define RX_WRAPPED(rx_sv) SvPVX(rx_sv)
#define RX_WRAPPED_const(rx_sv) SvPVX_const(rx_sv)
#define RX_WRAPLEN(rx_sv) SvCUR(rx_sv)
#define RX_CHECK_SUBSTR(rx_sv) (ReANY(rx_sv)->check_substr)
#define RX_REFCNT(rx_sv) SvREFCNT(rx_sv)
#define RX_EXTFLAGS(rx_sv) RXp_EXTFLAGS(ReANY(rx_sv))
#define RX_COMPFLAGS(rx_sv) RXp_COMPFLAGS(ReANY(rx_sv))
#define RXp_ENGINE(prog) ((prog)->engine)
#define RX_ENGINE(rx_sv) (RXp_ENGINE(ReANY(rx_sv)))
#define RXp_SUBBEG(prog) (prog->subbeg)
#define RX_SUBBEG(rx_sv) (RXp_SUBBEG(ReANY(rx_sv)))
#define RXp_SUBOFFSET(prog) (prog->suboffset)
#define RX_SUBOFFSET(rx_sv) (RXp_SUBOFFSET(ReANY(rx_sv)))
#define RX_SUBCOFFSET(rx_sv) (ReANY(rx_sv)->subcoffset)
#define RXp_OFFS(prog) (prog->offs)
#define RX_OFFS(rx_sv) (RXp_OFFS(ReANY(rx_sv)))
#define RXp_NPARENS(prog) (prog->nparens)
#define RX_NPARENS(rx_sv) (RXp_NPARENS(ReANY(rx_sv)))
#define RX_SUBLEN(rx_sv) (ReANY(rx_sv)->sublen)
#define RXp_MINLEN(prog) (prog->minlen)
#define RX_MINLEN(rx_sv) (RXp_MINLEN(ReANY(rx_sv)))
#define RXp_MINLENRET(prog) (prog->minlenret)
#define RX_MINLENRET(rx_sv) (RXp_MINLENRET(ReANY(rx_sv)))
#define RXp_GOFS(prog) (prog->gofs)
#define RX_GOFS(rx_sv) (RXp_GOFS(ReANY(rx_sv)))
#define RX_LASTPAREN(rx_sv) (ReANY(rx_sv)->lastparen)
#define RX_LASTCLOSEPAREN(rx_sv) (ReANY(rx_sv)->lastcloseparen)
#define RXp_SAVED_COPY(prog) (prog->saved_copy)
#define RX_SAVED_COPY(rx_sv) (RXp_SAVED_COPY(ReANY(rx_sv)))

#define RXp_ZERO_LEN(prog) (RXp_OFFS(prog)[0].start + (SSize_t)RXp_GOFS(prog) == RXp_OFFS(prog)[0].end)


#define RX_ZERO_LEN(rx_sv) (RXp_ZERO_LEN(ReANY(rx_sv)))






#define RXp_MATCH_COPY_FREE(prog) STMT_START {if (RXp_SAVED_COPY(prog)) { SV_CHECK_THINKFIRST_COW_DROP(RXp_SAVED_COPY(prog)); } if (RXp_MATCH_COPIED(prog)) { Safefree(RXp_SUBBEG(prog)); RXp_MATCH_COPIED_off(prog); }} STMT_END
# 575 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define RX_MATCH_COPY_FREE(rx_sv) RXp_MATCH_COPY_FREE(ReANY(rx_sv))

#define RXp_MATCH_UTF8(prog) (RXp_EXTFLAGS(prog) & RXf_MATCH_UTF8)
#define RX_MATCH_UTF8(rx_sv) (RX_EXTFLAGS(rx_sv) & RXf_MATCH_UTF8)
#define RXp_MATCH_UTF8_on(prog) (RXp_EXTFLAGS(prog) |= RXf_MATCH_UTF8)
#define RX_MATCH_UTF8_on(rx_sv) (RXp_MATCH_UTF8_on(ReANY(rx_sv)))
#define RXp_MATCH_UTF8_off(prog) (RXp_EXTFLAGS(prog) &= ~RXf_MATCH_UTF8)
#define RX_MATCH_UTF8_off(rx_sv) (RXp_MATCH_UTF8_off(ReANY(rx_sv))
#define RXp_MATCH_UTF8_set(prog,t) ((t) ? RXp_MATCH_UTF8_on(prog) : RXp_MATCH_UTF8_off(prog))


#define RX_MATCH_UTF8_set(rx_sv,t) (RXp_MATCH_UTF8_set(ReANY(rx_sv), t))


#define RX_UTF8(rx_sv) SvUTF8(rx_sv)




#define REXEC_COPY_STR 0x01
#define REXEC_CHECKED 0x02
#define REXEC_SCREAM 0x04
#define REXEC_IGNOREPOS 0x08
#define REXEC_NOT_FIRST 0x10





#define REXEC_COPY_SKIP_PRE 0x20
#define REXEC_COPY_SKIP_POST 0x40
#define REXEC_FAIL_ON_UNDERFLOW 0x80




#define ReREFCNT_inc(re) ({ REGEXP *const _rerefcnt_inc = (re); assert(SvTYPE(_rerefcnt_inc) == SVt_REGEXP); SvREFCNT_inc(_rerefcnt_inc); _rerefcnt_inc; })







#define ReREFCNT_dec(re) ({ REGEXP *const _rerefcnt_dec = (re); SvREFCNT_dec(_rerefcnt_dec); })
# 629 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
#define ReANY(re) Perl_ReANY((const REGEXP *)(re))



#define FBMcf_TAIL_DOLLAR 1
#define FBMcf_TAIL_DOLLARM 2
#define FBMcf_TAIL_Z 4
#define FBMcf_TAIL_z 8
#define FBMcf_TAIL (FBMcf_TAIL_DOLLAR|FBMcf_TAIL_DOLLARM|FBMcf_TAIL_Z|FBMcf_TAIL_z)

#define FBMrf_MULTILINE 1

struct regmatch_state;
struct regmatch_slab;





typedef struct {
    regexp *rex;
    PMOP *curpm;

    SV *saved_copy;

    char *subbeg;
    STRLEN sublen;
    STRLEN suboffset;
    STRLEN subcoffset;
    SV *sv;
    MAGIC *pos_magic;
    ssize_t pos;
    U8 pos_flags;
} regmatch_info_aux_eval;






typedef struct {
    regmatch_info_aux_eval *info_aux_eval;
    struct regmatch_state *old_regmatch_state;
    struct regmatch_slab *old_regmatch_slab;
    char *poscache;
} regmatch_info_aux;
# 689 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
typedef struct {
    REGEXP *prog;
    const char * strbeg;
    char *strend;
    char *till;
    SV *sv;
    char *ganch;
    char *cutpoint;
    regmatch_info_aux *info_aux;
    regmatch_info_aux_eval *info_aux_eval;
    I32 poscache_maxiter;
    I32 poscache_iter;
    STRLEN poscache_size;
    _Bool intuit;
    _Bool is_utf8_pat;
    _Bool is_utf8_target;
    _Bool warned;
} regmatch_info;





#define MAX_RECURSE_EVAL_NOCHANGE_DEPTH 10







#define MAX_MATCHES (MAX_FOLD_FROMS + 1 + 2)

struct next_matchable_info {
    U8 first_byte_mask;
    U8 first_byte_anded;
    U32 mask32;
    U32 anded32;
    PERL_INT_FAST8_T count;
    PERL_UINT_FAST8_T min_length;
    PERL_UINT_FAST8_T max_length;
    PERL_UINT_FAST8_T initial_definitive;
    PERL_UINT_FAST8_T initial_exact;
    PERL_UINT_FAST8_T lengths[(3 + 1 + 2)];






    U8 matches[18];
};

typedef I32 CHECKPOINT;

typedef struct regmatch_state {
    int resume_state;
    char *locinput;
    char *loceol;
    U8 *sr0;

    union {
# 771 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/regexp.h" 3 4
        regmatch_info_aux info_aux;

        regmatch_info_aux_eval info_aux_eval;




 struct {
     struct regmatch_state *prev_yes_state;
 } yes;




        struct {

     struct regmatch_state *prev_yes_state;
     U32 lastparen;
     U32 lastcloseparen;
     CHECKPOINT cp;

        } branchlike;

 struct {

     struct regmatch_state *prev_yes_state;
     U32 lastparen;
     U32 lastcloseparen;
     CHECKPOINT cp;

     regnode *next_branch;
 } branch;

 struct {

     struct regmatch_state *prev_yes_state;
     U32 lastparen;
     U32 lastcloseparen;
     CHECKPOINT cp;

     U32 accepted;
     _Bool longfold;
     U16 *jump;
     regnode *me;
     U8 *firstpos;
     U32 firstchars;
     U16 nextword;
     U16 topword;
 } trie;



 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *prev_curlyx;
            struct regmatch_state *prev_eval;
     REGEXP *prev_rex;
     CHECKPOINT cp;
     CHECKPOINT lastcp;
            U32 close_paren;
     regnode *B;
            char *prev_recurse_locinput;
 } eval;

 struct {

     struct regmatch_state *prev_yes_state;
     I32 wanted;
     I32 logical;
            U8 count;
            char *start;
            char *end;
     regnode *me;
 } ifmatch;

 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *prev_mark;
     SV* mark_name;
     char *mark_loc;
 } mark;

 struct {
     int val;
 } keeper;



 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *prev_curlyx;
     regnode *me;
     regnode *B;
     CHECKPOINT cp;
     _Bool minmod;
     int parenfloor;


     int count;
     char *lastloc;
 } curlyx;

 struct {

     struct regmatch_state *prev_yes_state;
     struct regmatch_state *save_curlyx;
     CHECKPOINT cp;
     CHECKPOINT lastcp;
     char *save_lastloc;
     I32 cache_offset;
     I32 cache_mask;
 } whilem;

 struct {

     struct regmatch_state *prev_yes_state;
     CHECKPOINT cp;
     U32 lastparen;
     U32 lastcloseparen;
     I32 alen;
     I32 count;
     _Bool minmod;
     regnode *A, *B;
     regnode *me;
            struct next_matchable_info Binfo;
 } curlym;

 struct {
     U32 paren;
     CHECKPOINT cp;
     U32 lastparen;
     U32 lastcloseparen;
     char *maxpos;
     char *oldloc;
     int count;
     int min, max;
     regnode *A, *B;
            struct next_matchable_info Binfo;
 } curly;

    } u;
} regmatch_state;







#define PERL_REGMATCH_SLAB_SLOTS ((4096 - 3 * sizeof (void*)) / sizeof(regmatch_state))


typedef struct regmatch_slab {
    regmatch_state states[((4096 - 3 * sizeof (void*)) / sizeof(regmatch_state))];
    struct regmatch_slab *prev, *next;
} regmatch_slab;
# 4078 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 1 3 4
# 12 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define PERL_UTIL_H_ 
# 36 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define PERL_FILE_IS_ABSOLUTE(f) (*(f) == '/')
# 56 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define ibcmp(s1,s2,len) cBOOL(! foldEQ(s1, s2, len))
#define ibcmp_locale(s1,s2,len) cBOOL(! foldEQ_locale(s1, s2, len))
#define ibcmp_utf8(s1,pe1,l1,u1,s2,pe2,l2,u2) cBOOL(! foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2))







#define PERL_DRAND48_QUAD 







typedef unsigned long perl_drand48_t;
# 86 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define PL_RANDOM_STATE_TYPE perl_drand48_t

#define Perl_drand48_init(seed) (Perl_drand48_init_r(&PL_random_state, (seed)))
#define Perl_drand48() (Perl_drand48_r(&PL_random_state))
# 185 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define HSm_APIVERLEN 0x0000001F
#define HS_APIVERLEN_MAX HSm_APIVERLEN
#define HSm_XSVERLEN 0x0000FF00
#define HS_XSVERLEN_MAX 0xFF

#define HSf_SETXSUBFN 0x00000020
#define HSf_POPMARK 0x00000040
#define HSf_IMP_CXT 0x00000080
#define HSm_INTRPSIZE 0xFFFF0000




#define HSm_KEY_MATCH (HSm_INTRPSIZE|HSf_IMP_CXT)
#define HSf_NOCHK HSm_KEY_MATCH


#define HS_GETINTERPSIZE(key) ((key) >> 16)



#define HS_GETXSVERLEN(key) ((key) >> 8 & 0xFF)
#define HS_GETAPIVERLEN(key) ((key) & HSm_APIVERLEN)




#define HS_KEYp(interpsize,cxt,setxsubfn,popmark,apiverlen,xsverlen) (((interpsize) << 16) | ((xsverlen) > HS_XSVERLEN_MAX ? (Perl_croak_nocontext("panic: handshake overflow"), HS_XSVERLEN_MAX) : (xsverlen) << 8) | (cBOOL(setxsubfn) ? HSf_SETXSUBFN : 0) | (cBOOL(cxt) ? HSf_IMP_CXT : 0) | (cBOOL(popmark) ? HSf_POPMARK : 0) | ((apiverlen) > HS_APIVERLEN_MAX ? (Perl_croak_nocontext("panic: handshake overflow"), HS_APIVERLEN_MAX) : (apiverlen)))
# 230 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define HS_KEY(setxsubfn,popmark,apiver,xsver) HS_KEYp(sizeof(PerlInterpreter), TRUE, setxsubfn, popmark, sizeof("" apiver "")-1, sizeof("" xsver "")-1)


#define HS_CXT aTHX
# 251 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/util.h" 3 4
#define instr(haystack,needle) strstr((char *) haystack, (char *) needle)


#define ninstr(big,bigend,little,lend) ((char *) memmem((big), (bigend) - (big), (little), (lend) - (little)))
# 4079 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/form.h" 1 3 4
# 10 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/form.h" 3 4
#define FF_END 0
#define FF_LINEMARK 1
#define FF_LITERAL 2
#define FF_SKIP 3
#define FF_FETCH 4
#define FF_CHECKNL 5
#define FF_CHECKCHOP 6
#define FF_SPACE 7
#define FF_HALFSPACE 8
#define FF_ITEM 9
#define FF_CHOP 10
#define FF_LINEGLOB 11
#define FF_DECIMAL 12
#define FF_NEWLINE 13
#define FF_BLANK 14
#define FF_MORE 15
#define FF_0DECIMAL 16
#define FF_LINESNGL 17
# 4080 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/gv.h" 1 3 4
# 11 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/gv.h" 3 4
struct gp {
    SV * gp_sv;
    struct io * gp_io;
    CV * gp_cv;
    U32 gp_cvgen;
    U32 gp_refcnt;
    HV * gp_hv;
    AV * gp_av;
    CV * gp_form;
    GV * gp_egv;
    U32 gp_line:31;
    U32 gp_flags:1;
    HEK * gp_file_hek;
};

#define GvXPVGV(gv) ((XPVGV*)SvANY(gv))
# 61 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/gv.h" 3 4
#define GvGP(gv) (0+(gv)->sv_u.svu_gp)
#define GvGP_set(gv,gp) ((gv)->sv_u.svu_gp = (gp))
#define GvFLAGS(gv) (GvXPVGV(gv)->xpv_cur)
#define GvSTASH(gv) (GvXPVGV(gv)->xnv_u.xgv_stash)
#define GvNAME_HEK(gv) (GvXPVGV(gv)->xiv_u.xivu_namehek)
#define GvNAME_get(gv) HEK_KEY(GvNAME_HEK(gv))
#define GvNAMELEN_get(gv) HEK_LEN(GvNAME_HEK(gv))
#define GvNAMEUTF8(gv) HEK_UTF8(GvNAME_HEK(gv))


#define GvNAME(gv) GvNAME_get(gv)
#define GvNAMELEN(gv) GvNAMELEN_get(gv)
# 101 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/gv.h" 3 4
#define GvSV(gv) (GvGP(gv)->gp_sv)

#define GvSVn(gv) (*(GvGP(gv)->gp_sv ? &(GvGP(gv)->gp_sv) : &(GvGP(gv_SVadd(gv))->gp_sv)))






#define GvREFCNT(gv) (GvGP(gv)->gp_refcnt)
#define GvIO(gv) ( (gv) && ( SvTYPE((const SV*)(gv)) == SVt_PVGV || SvTYPE((const SV*)(gv)) == SVt_PVLV ) && GvGP(gv) ? GvIOp(gv) : NULL )
# 122 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/gv.h" 3 4
#define GvIOp(gv) (GvGP(gv)->gp_io)
#define GvIOn(gv) (GvIO(gv) ? GvIOp(gv) : GvIOp(gv_IOadd(gv)))

#define GvFORM(gv) (GvGP(gv)->gp_form)
#define GvAV(gv) (GvGP(gv)->gp_av)

#define GvAVn(gv) (GvGP(gv)->gp_av ? GvGP(gv)->gp_av : GvGP(gv_AVadd(gv))->gp_av)


#define GvHV(gv) ((GvGP(gv))->gp_hv)

#define GvHVn(gv) (GvGP(gv)->gp_hv ? GvGP(gv)->gp_hv : GvGP(gv_HVadd(gv))->gp_hv)



#define GvCV(gv) (0+GvGP(gv)->gp_cv)
#define GvCV_set(gv,cv) (GvGP(gv)->gp_cv = (cv))
#define GvCVGEN(gv) (GvGP(gv)->gp_cvgen)
#define GvCVu(gv) (GvGP(gv)->gp_cvgen ? NULL : GvGP(gv)->gp_cv)

#define GvGPFLAGS(gv) (GvGP(gv)->gp_flags)

#define GvLINE(gv) (GvGP(gv)->gp_line)
#define GvFILE_HEK(gv) (GvGP(gv)->gp_file_hek)
#define GvFILEx(gv) HEK_KEY(GvFILE_HEK(gv))
#define GvFILE(gv) (GvFILE_HEK(gv) ? GvFILEx(gv) : NULL)
#define GvFILEGV(gv) (GvFILE_HEK(gv) ? gv_fetchfile(GvFILEx(gv)) : NULL)

#define GvEGV(gv) (GvGP(gv)->gp_egv)
#define GvEGVx(gv) (isGV_with_GP(gv) ? GvEGV(gv) : NULL)
#define GvENAME(gv) GvNAME(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAMELEN(gv) GvNAMELEN(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAMEUTF8(gv) GvNAMEUTF8(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvENAME_HEK(gv) GvNAME_HEK(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvESTASH(gv) GvSTASH(GvEGV(gv) ? GvEGV(gv) : gv)





#define GVf_INTRO 0x01
#define GVf_MULTI 0x02
#define GVf_ASSUMECV 0x04

#define GVf_IMPORTED 0xF0
#define GVf_IMPORTED_SV 0x10
#define GVf_IMPORTED_AV 0x20
#define GVf_IMPORTED_HV 0x40
#define GVf_IMPORTED_CV 0x80

#define GvINTRO(gv) (GvFLAGS(gv) & GVf_INTRO)
#define GvINTRO_on(gv) (GvFLAGS(gv) |= GVf_INTRO)
#define GvINTRO_off(gv) (GvFLAGS(gv) &= ~GVf_INTRO)

#define GvMULTI(gv) (GvFLAGS(gv) & GVf_MULTI)
#define GvMULTI_on(gv) (GvFLAGS(gv) |= GVf_MULTI)
#define GvMULTI_off(gv) (GvFLAGS(gv) &= ~GVf_MULTI)

#define GvASSUMECV(gv) (GvFLAGS(gv) & GVf_ASSUMECV)
#define GvASSUMECV_on(gv) (GvFLAGS(gv) |= GVf_ASSUMECV)
#define GvASSUMECV_off(gv) (GvFLAGS(gv) &= ~GVf_ASSUMECV)

#define GvIMPORTED(gv) (GvFLAGS(gv) & GVf_IMPORTED)
#define GvIMPORTED_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED)
#define GvIMPORTED_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED)

#define GvIMPORTED_SV(gv) (GvFLAGS(gv) & GVf_IMPORTED_SV)
#define GvIMPORTED_SV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_SV)
#define GvIMPORTED_SV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_SV)

#define GvIMPORTED_AV(gv) (GvFLAGS(gv) & GVf_IMPORTED_AV)
#define GvIMPORTED_AV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_AV)
#define GvIMPORTED_AV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_AV)

#define GvIMPORTED_HV(gv) (GvFLAGS(gv) & GVf_IMPORTED_HV)
#define GvIMPORTED_HV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_HV)
#define GvIMPORTED_HV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_HV)

#define GvIMPORTED_CV(gv) (GvFLAGS(gv) & GVf_IMPORTED_CV)
#define GvIMPORTED_CV_on(gv) (GvFLAGS(gv) |= GVf_IMPORTED_CV)
#define GvIMPORTED_CV_off(gv) (GvFLAGS(gv) &= ~GVf_IMPORTED_CV)


#define GvIN_PAD(gv) 0
#define GvIN_PAD_on(gv) NOOP
#define GvIN_PAD_off(gv) NOOP
#define Nullgv Null(GV*)


#define DM_RUID 0x001
#define DM_EUID 0x002
#define DM_UID (DM_RUID|DM_EUID)
#define DM_ARRAY_ISA 0x004
#define DM_RGID 0x010
#define DM_EGID 0x020
#define DM_GID (DM_RGID|DM_EGID)
#define DM_DELAY 0x100




#define GV_ADD 0x01


#define GV_ADDMULTI 0x02

#define GV_ADDWARN 0x04

#define GV_NOINIT 0x10


#define GV_NOADD_NOINIT 0x20

#define GV_NOEXPAND 0x40
#define GV_NOTQUAL 0x80

#define GV_AUTOLOAD 0x100
#define GV_CROAK 0x200
#define GV_ADDMG 0x400
#define GV_NO_SVGMAGIC 0x800

#define GV_CACHE_ONLY 0x1000



#define GV_SUPER 0x1000
#define GV_NOUNIVERSAL 0x2000


#define GV_AUTOLOAD_ISMETHOD 1






#define GV_NOADD_MASK (SVf_UTF8|GV_NOADD_NOINIT|GV_NOEXPAND|GV_NOTQUAL|GV_ADDMG|GV_NO_SVGMAGIC)





#define gv_fullname3(sv,gv,prefix) gv_fullname4(sv,gv,prefix,TRUE)
#define gv_efullname3(sv,gv,prefix) gv_efullname4(sv,gv,prefix,TRUE)
#define gv_fetchmethod(stash,name) gv_fetchmethod_autoload(stash, name, TRUE)
#define gv_fetchsv_nomg(n,f,t) gv_fetchsv(n,(f)|GV_NO_SVGMAGIC,t)
#define gv_init(gv,stash,name,len,multi) gv_init_pvn(gv,stash,name,len,GV_ADDMULTI*!!(multi))

#define gv_fetchmeth(stash,name,len,level) gv_fetchmeth_pvn(stash, name, len, level, 0)
#define gv_fetchmeth_autoload(stash,name,len,level) gv_fetchmeth_pvn_autoload(stash, name, len, level, 0)
#define gv_fetchmethod_flags(stash,name,flags) gv_fetchmethod_pv_flags(stash, name, flags)







#define gv_autoload4(stash,name,len,autoload) gv_autoload_pvn(stash, name, len, !!(autoload))

#define newGVgen(pack) newGVgen_flags(pack, 0)
#define gv_method_changed(gv) ( assert_(isGV_with_GP(gv)) GvREFCNT(gv) > 1 ? (void)++PL_sub_generation : mro_method_changed_in(GvSTASH(gv)) )







#define gv_AVadd(gv) gv_add_by_type((gv), SVt_PVAV)
#define gv_HVadd(gv) gv_add_by_type((gv), SVt_PVHV)
#define gv_IOadd(gv) gv_add_by_type((gv), SVt_PVIO)
#define gv_SVadd(gv) gv_add_by_type((gv), SVt_NULL)
# 4081 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 1 3 4
# 16 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
typedef ssize_t PADOFFSET;
#define NOT_IN_PAD ((PADOFFSET) -1)





struct padlist {
    ssize_t xpadl_max;
    union {
        PAD ** xpadlarr_alloc;

        struct {
            PADNAMELIST * padnl;
            PAD * pad_1;
            PAD * pad_2;
        } * xpadlarr_dbg;
    } xpadl_arr;
    U32 xpadl_id;
    U32 xpadl_outid;
};

struct padnamelist {
    ssize_t xpadnl_fill;
    PADNAME ** xpadnl_alloc;
    ssize_t xpadnl_max;
    PADOFFSET xpadnl_max_named;
    U32 xpadnl_refcnt;
};
# 54 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define PERL_PADNAME_MINIMAL 


#define _PADNAME_BASE char * xpadn_pv; HV * xpadn_ourstash; union { HV * xpadn_typestash; CV * xpadn_protocv; } xpadn_type_u; U32 xpadn_low; U32 xpadn_high; U32 xpadn_refcnt; int xpadn_gen; U8 xpadn_len; U8 xpadn_flags
# 71 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
struct padname {
    char * xpadn_pv; HV * xpadn_ourstash; union { HV * xpadn_typestash; CV * xpadn_protocv; } xpadn_type_u; U32 xpadn_low; U32 xpadn_high; U32 xpadn_refcnt; int xpadn_gen; U8 xpadn_len; U8 xpadn_flags;
};

struct padname_with_str {

    char * xpadn_pv; HV * xpadn_ourstash; union { HV * xpadn_typestash; CV * xpadn_protocv; } xpadn_type_u; U32 xpadn_low; U32 xpadn_high; U32 xpadn_refcnt; int xpadn_gen; U8 xpadn_len; U8 xpadn_flags;



    char xpadn_str[1];
};

#undef _PADNAME_BASE

#define PADNAME_FROM_PV(s) ((PADNAME *)((s) - STRUCT_OFFSET(struct padname_with_str, xpadn_str)))






#define PERL_PADSEQ_INTRO U32_MAX
#define COP_SEQMAX_INC (PL_cop_seqmax++, (void)(PL_cop_seqmax == PERL_PADSEQ_INTRO && PL_cop_seqmax++))
# 103 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define COP_SEQ_RANGE_LOW(pn) (pn)->xpadn_low
#define COP_SEQ_RANGE_HIGH(pn) (pn)->xpadn_high
#define PARENT_PAD_INDEX(pn) (pn)->xpadn_low
#define PARENT_FAKELEX_FLAGS(pn) (pn)->xpadn_high



#define PAD_FAKELEX_ANON 1
#define PAD_FAKELEX_MULTI 2



#define padnew_CLONE 1
#define padnew_SAVE 2
#define padnew_SAVESUB 4



typedef enum {
        padtidy_SUB,
        padtidy_SUBCLONE,
        padtidy_FORMAT
} padtidy_type;



#define padadd_OUR 0x01
#define padadd_STATE 0x02
#define padadd_NO_DUP_CHECK 0x04
#define padadd_STALEOK 0x08






#define pad_peg(label) 
# 155 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define ASSERT_CURPAD_LEGAL(label) 
#define ASSERT_CURPAD_ACTIVE(label) 
# 296 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define PadlistARRAY(pl) (pl)->xpadl_arr.xpadlarr_alloc
#define PadlistMAX(pl) (pl)->xpadl_max
#define PadlistNAMES(pl) *((PADNAMELIST **)PadlistARRAY(pl))
#define PadlistNAMESARRAY(pl) PadnamelistARRAY(PadlistNAMES(pl))
#define PadlistNAMESMAX(pl) PadnamelistMAX(PadlistNAMES(pl))
#define PadlistREFCNT(pl) 1

#define PadnamelistARRAY(pnl) (pnl)->xpadnl_alloc
#define PadnamelistMAX(pnl) (pnl)->xpadnl_fill
#define PadnamelistMAXNAMED(pnl) (pnl)->xpadnl_max_named
#define PadnamelistREFCNT(pnl) (pnl)->xpadnl_refcnt
#define PadnamelistREFCNT_dec(pnl) Perl_padnamelist_free(aTHX_ pnl)

#define PadARRAY(pad) AvARRAY(pad)
#define PadMAX(pad) AvFILLp(pad)

#define PadnamePV(pn) (pn)->xpadn_pv
#define PadnameLEN(pn) (pn)->xpadn_len
#define PadnameUTF8(pn) 1
#define PadnameSV(pn) newSVpvn_flags(PadnamePV(pn), PadnameLEN(pn), SVs_TEMP|SVf_UTF8)

#define PadnameFLAGS(pn) (pn)->xpadn_flags
#define PadnameIsOUR(pn) (!!(pn)->xpadn_ourstash)
#define PadnameOURSTASH(pn) (pn)->xpadn_ourstash
#define PadnameTYPE(pn) (pn)->xpadn_type_u.xpadn_typestash
#define PadnamePROTOCV(pn) (pn)->xpadn_type_u.xpadn_protocv
#define PadnameREFCNT(pn) (pn)->xpadn_refcnt
#define PadnameREFCNT_dec(pn) Perl_padname_free(aTHX_ pn)
#define PadnameOURSTASH_set(pn,s) (PadnameOURSTASH(pn) = (s))
#define PadnameTYPE_set(pn,s) (PadnameTYPE(pn) = (s))
#define PadnameOUTER(pn) (PadnameFLAGS(pn) & PADNAMEt_OUTER)
#define PadnameIsSTATE(pn) (PadnameFLAGS(pn) & PADNAMEt_STATE)
#define PadnameLVALUE(pn) (PadnameFLAGS(pn) & PADNAMEt_LVALUE)

#define PadnameLVALUE_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_LVALUE)
#define PadnameIsSTATE_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_STATE)

#define PADNAMEt_OUTER 1
#define PADNAMEt_STATE 2
#define PADNAMEt_LVALUE 4
#define PADNAMEt_TYPED 8
#define PADNAMEt_OUR 16


#define SvPAD_STATE PadnameIsSTATE
#define SvPAD_TYPED(pn) (!!PadnameTYPE(pn))
#define SvPAD_OUR(pn) (!!PadnameOURSTASH(pn))
#define SvPAD_STATE_on PadnameIsSTATE_on
#define SvPAD_TYPED_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_TYPED)
#define SvPAD_OUR_on(pn) (PadnameFLAGS(pn) |= PADNAMEt_OUR)
#define SvOURSTASH PadnameOURSTASH
#define SvOURSTASH_set PadnameOURSTASH_set
#define SVpad_STATE PADNAMEt_STATE
#define SVpad_TYPED PADNAMEt_TYPED
#define SVpad_OUR PADNAMEt_OUR





#define PAD_SV(po) (PL_curpad[po])
#define PAD_SETSV(po,sv) PL_curpad[po] = (sv)


#define PAD_SVl(po) (PL_curpad[po])

#define PAD_BASE_SV(padlist,po) (PadlistARRAY(padlist)[1]) ? AvARRAY(MUTABLE_AV((PadlistARRAY(padlist)[1])))[po] : NULL;





#define PAD_SET_CUR_NOSAVE(padlist,nth) PL_comppad = (PAD*) (PadlistARRAY(padlist)[nth]); PL_curpad = AvARRAY(PL_comppad); DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad 0x%" UVxf "[0x%" UVxf "] set_cur    depth=%d\n", PTR2UV(PL_comppad), PTR2UV(PL_curpad), (int)(nth)));







#define PAD_SET_CUR(padlist,nth) SAVECOMPPAD(); PAD_SET_CUR_NOSAVE(padlist,nth);




#define PAD_SAVE_SETNULLPAD() SAVECOMPPAD(); PL_comppad = NULL; PL_curpad = NULL; DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad set_null\n"));



#define PAD_SAVE_LOCAL(opad,npad) opad = PL_comppad; PL_comppad = (npad); PL_curpad = PL_comppad ? AvARRAY(PL_comppad) : NULL; DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad 0x%" UVxf "[0x%" UVxf "] save_local\n", PTR2UV(PL_comppad), PTR2UV(PL_curpad)));







#define PAD_RESTORE_LOCAL(opad) assert(!opad || !SvIS_FREED(opad)); PL_comppad = opad; PL_curpad = PL_comppad ? AvARRAY(PL_comppad) : NULL; DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad 0x%" UVxf "[0x%" UVxf "] restore_local\n", PTR2UV(PL_comppad), PTR2UV(PL_curpad)));
# 413 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define CX_CURPAD_SAVE(block) (block).oldcomppad = PL_comppad
#define CX_CURPAD_SV(block,po) (AvARRAY(MUTABLE_AV(((block).oldcomppad)))[po])
# 445 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define PAD_COMPNAME(po) PAD_COMPNAME_SV(po)
#define PAD_COMPNAME_SV(po) (PadnamelistARRAY(PL_comppad_name)[(po)])
#define PAD_COMPNAME_FLAGS(po) PadnameFLAGS(PAD_COMPNAME(po))
#define PAD_COMPNAME_FLAGS_isOUR(po) SvPAD_OUR(PAD_COMPNAME_SV(po))
#define PAD_COMPNAME_PV(po) PadnamePV(PAD_COMPNAME(po))

#define PAD_COMPNAME_TYPE(po) PadnameTYPE(PAD_COMPNAME(po))

#define PAD_COMPNAME_OURSTASH(po) (SvOURSTASH(PAD_COMPNAME_SV(po)))


#define PAD_COMPNAME_GEN(po) ((STRLEN)PadnamelistARRAY(PL_comppad_name)[po]->xpadn_gen)


#define PAD_COMPNAME_GEN_set(po,gen) (PadnamelistARRAY(PL_comppad_name)[po]->xpadn_gen = (gen))
# 478 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define PAD_CLONE_VARS(proto_perl,param) PL_comppad = av_dup(proto_perl->Icomppad, param); PL_curpad = PL_comppad ? AvARRAY(PL_comppad) : NULL; PL_comppad_name = padnamelist_dup(proto_perl->Icomppad_name, param); PL_comppad_name_fill = proto_perl->Icomppad_name_fill; PL_comppad_name_floor = proto_perl->Icomppad_name_floor; PL_min_intro_pending = proto_perl->Imin_intro_pending; PL_max_intro_pending = proto_perl->Imax_intro_pending; PL_padix = proto_perl->Ipadix; PL_padix_floor = proto_perl->Ipadix_floor; PL_pad_reset_pending = proto_perl->Ipad_reset_pending; PL_cop_seqmax = proto_perl->Icop_seqmax;
# 501 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define pad_add_name_pvs(name,flags,typestash,ourstash) Perl_pad_add_name_pvn(aTHX_ STR_WITH_LEN(name), flags, typestash, ourstash)
# 513 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pad.h" 3 4
#define pad_findmy_pvs(name,flags) Perl_pad_findmy_pvn(aTHX_ STR_WITH_LEN(name), flags)
# 4082 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cv.h" 1 3 4
# 13 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cv.h" 3 4
struct xpvcv {
    HV* xmg_stash; union _xmgu xmg_u; STRLEN xpv_cur; union { STRLEN xpvlenu_len; struct regexp* xpvlenu_rx; } xpv_len_u;
    HV * xcv_stash; union { OP * xcv_start; ANY xcv_xsubany; } xcv_start_u; union { OP * xcv_root; void (*xcv_xsub) (PerlInterpreter* my_perl __attribute__((unused)), CV*); } xcv_root_u; union { GV * xcv_gv; HEK * xcv_hek; } xcv_gv_u; char * xcv_file; union { PADLIST * xcv_padlist; void * xcv_hscxt; } xcv_padlist_u; CV * xcv_outside; U32 xcv_outside_seq; cv_flags_t xcv_flags; I32 xcv_depth;
};
# 38 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cv.h" 3 4
#define Nullcv Null(CV*)


#define CvSTASH(sv) (0+((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_stash)
#define CvSTASH_set(cv,st) Perl_cvstash_set(aTHX_ cv, st)
#define CvSTART(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_start_u.xcv_start
#define CvROOT(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_root_u.xcv_root
#define CvXSUB(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_root_u.xcv_xsub
#define CvXSUBANY(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_start_u.xcv_xsubany
#define CvGV(sv) Perl_CvGV(aTHX_ (CV *)(sv))
#define CvGV_set(cv,gv) Perl_cvgv_set(aTHX_ cv, gv)
#define CvHASGV(cv) cBOOL(SvANY(cv)->xcv_gv_u.xcv_gv)
#define CvFILE(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_file

#define CvFILE_set_from_cop(sv,cop) (CvFILE(sv) = savepv(CopFILE(cop)), CvDYNFILE_on(sv))





#define CvFILEGV(sv) (gv_fetchfile(CvFILE(sv)))
#define CvDEPTH(sv) (*Perl_CvDEPTH((const CV *)sv))


#define CvDEPTHunsafe(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_depth


#define CvPADLIST(sv) (*(assert_(!CvISXSUB((CV*)(sv))) &(((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_padlist)))





#define CvPADLIST_set(sv,padlist) (CvPADLIST(sv) = (padlist))

#define CvHSCXT(sv) *(assert_(CvISXSUB((CV*)(sv))) &(((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_padlist_u.xcv_hscxt))
# 86 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cv.h" 3 4
#define PoisonPADLIST(sv) NOOP


#define CvOUTSIDE(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_outside
#define CvOUTSIDE_SEQ(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_outside_seq
#define CvFLAGS(sv) ((XPVCV*)MUTABLE_PTR(SvANY(sv)))->xcv_flags


#define CvPROTO(sv) ( SvPOK(sv) ? SvTYPE(sv) == SVt_PVCV && CvAUTOLOAD(sv) ? SvEND(sv)+1 : SvPVX_const(sv) : NULL )






#define CvPROTOLEN(sv) ( SvPOK(sv) ? SvTYPE(sv) == SVt_PVCV && CvAUTOLOAD(sv) ? SvLEN(sv)-SvCUR(sv)-2 : SvCUR(sv) : 0 )
# 110 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cv.h" 3 4
#define CVf_METHOD 0x0001
#define CVf_LVALUE 0x0002
#define CVf_CONST 0x0004
#define CVf_ISXSUB 0x0008

#define CVf_WEAKOUTSIDE 0x0010
#define CVf_CLONE 0x0020
#define CVf_CLONED 0x0040
#define CVf_ANON 0x0080
#define CVf_UNIQUE 0x0100

#define CVf_NODEBUG 0x0200

#define CVf_CVGV_RC 0x0400



#define CVf_DYNFILE 0x1000
#define CVf_AUTOLOAD 0x2000
#define CVf_HASEVAL 0x4000
#define CVf_NAMED 0x8000
#define CVf_LEXICAL 0x10000
#define CVf_ANONCONST 0x20000


#define CVf_BUILTIN_ATTRS (CVf_METHOD|CVf_LVALUE|CVf_ANONCONST)

#define CvCLONE(cv) (CvFLAGS(cv) & CVf_CLONE)
#define CvCLONE_on(cv) (CvFLAGS(cv) |= CVf_CLONE)
#define CvCLONE_off(cv) (CvFLAGS(cv) &= ~CVf_CLONE)

#define CvCLONED(cv) (CvFLAGS(cv) & CVf_CLONED)
#define CvCLONED_on(cv) (CvFLAGS(cv) |= CVf_CLONED)
#define CvCLONED_off(cv) (CvFLAGS(cv) &= ~CVf_CLONED)

#define CvANON(cv) (CvFLAGS(cv) & CVf_ANON)
#define CvANON_on(cv) (CvFLAGS(cv) |= CVf_ANON)
#define CvANON_off(cv) (CvFLAGS(cv) &= ~CVf_ANON)


#define CvUNIQUE(cv) (CvFLAGS(cv) & CVf_UNIQUE)
#define CvUNIQUE_on(cv) (CvFLAGS(cv) |= CVf_UNIQUE)
#define CvUNIQUE_off(cv) (CvFLAGS(cv) &= ~CVf_UNIQUE)

#define CvNODEBUG(cv) (CvFLAGS(cv) & CVf_NODEBUG)
#define CvNODEBUG_on(cv) (CvFLAGS(cv) |= CVf_NODEBUG)
#define CvNODEBUG_off(cv) (CvFLAGS(cv) &= ~CVf_NODEBUG)

#define CvMETHOD(cv) (CvFLAGS(cv) & CVf_METHOD)
#define CvMETHOD_on(cv) (CvFLAGS(cv) |= CVf_METHOD)
#define CvMETHOD_off(cv) (CvFLAGS(cv) &= ~CVf_METHOD)

#define CvLVALUE(cv) (CvFLAGS(cv) & CVf_LVALUE)
#define CvLVALUE_on(cv) (CvFLAGS(cv) |= CVf_LVALUE)
#define CvLVALUE_off(cv) (CvFLAGS(cv) &= ~CVf_LVALUE)


#define CvEVAL(cv) (CvUNIQUE(cv) && !SvFAKE(cv))
#define CvEVAL_on(cv) (CvUNIQUE_on(cv),SvFAKE_off(cv))
#define CvEVAL_off(cv) CvUNIQUE_off(cv)


#define CvSPECIAL(cv) (CvUNIQUE(cv) && SvFAKE(cv))
#define CvSPECIAL_on(cv) (CvUNIQUE_on(cv),SvFAKE_on(cv))
#define CvSPECIAL_off(cv) (CvUNIQUE_off(cv),SvFAKE_off(cv))

#define CvCONST(cv) (CvFLAGS(cv) & CVf_CONST)
#define CvCONST_on(cv) (CvFLAGS(cv) |= CVf_CONST)
#define CvCONST_off(cv) (CvFLAGS(cv) &= ~CVf_CONST)

#define CvWEAKOUTSIDE(cv) (CvFLAGS(cv) & CVf_WEAKOUTSIDE)
#define CvWEAKOUTSIDE_on(cv) (CvFLAGS(cv) |= CVf_WEAKOUTSIDE)
#define CvWEAKOUTSIDE_off(cv) (CvFLAGS(cv) &= ~CVf_WEAKOUTSIDE)

#define CvISXSUB(cv) (CvFLAGS(cv) & CVf_ISXSUB)
#define CvISXSUB_on(cv) (CvFLAGS(cv) |= CVf_ISXSUB)
#define CvISXSUB_off(cv) (CvFLAGS(cv) &= ~CVf_ISXSUB)

#define CvCVGV_RC(cv) (CvFLAGS(cv) & CVf_CVGV_RC)
#define CvCVGV_RC_on(cv) (CvFLAGS(cv) |= CVf_CVGV_RC)
#define CvCVGV_RC_off(cv) (CvFLAGS(cv) &= ~CVf_CVGV_RC)







#define CvDYNFILE(cv) (CvFLAGS(cv) & CVf_DYNFILE)
#define CvDYNFILE_on(cv) (CvFLAGS(cv) |= CVf_DYNFILE)
#define CvDYNFILE_off(cv) (CvFLAGS(cv) &= ~CVf_DYNFILE)

#define CvAUTOLOAD(cv) (CvFLAGS(cv) & CVf_AUTOLOAD)
#define CvAUTOLOAD_on(cv) (CvFLAGS(cv) |= CVf_AUTOLOAD)
#define CvAUTOLOAD_off(cv) (CvFLAGS(cv) &= ~CVf_AUTOLOAD)

#define CvHASEVAL(cv) (CvFLAGS(cv) & CVf_HASEVAL)
#define CvHASEVAL_on(cv) (CvFLAGS(cv) |= CVf_HASEVAL)
#define CvHASEVAL_off(cv) (CvFLAGS(cv) &= ~CVf_HASEVAL)

#define CvNAMED(cv) (CvFLAGS(cv) & CVf_NAMED)
#define CvNAMED_on(cv) (CvFLAGS(cv) |= CVf_NAMED)
#define CvNAMED_off(cv) (CvFLAGS(cv) &= ~CVf_NAMED)

#define CvLEXICAL(cv) (CvFLAGS(cv) & CVf_LEXICAL)
#define CvLEXICAL_on(cv) (CvFLAGS(cv) |= CVf_LEXICAL)
#define CvLEXICAL_off(cv) (CvFLAGS(cv) &= ~CVf_LEXICAL)

#define CvANONCONST(cv) (CvFLAGS(cv) & CVf_ANONCONST)
#define CvANONCONST_on(cv) (CvFLAGS(cv) |= CVf_ANONCONST)
#define CvANONCONST_off(cv) (CvFLAGS(cv) &= ~CVf_ANONCONST)


#define XS_DYNAMIC_FILENAME 0x01

static __inline__ HEK *
CvNAME_HEK(CV *sv)
{
    return (((XPVCV*)({ void *p_ = ((sv)->sv_any); p_; }))->xcv_flags & 0x8000)
        ? ((XPVCV*)({ void *p_ = ((sv)->sv_any); p_; }))->xcv_gv_u.xcv_hek
        : 0;
}




#define CvGvNAME_HEK(sv) ( CvNAMED((CV*)sv) ? ((XPVCV*)MUTABLE_PTR(SvANY((SV*)sv)))->xcv_gv_u.xcv_hek : GvNAME_HEK(CvGV( (SV*) sv)) )







#define CvNAME_HEK_set(cv,hek) ( CvNAME_HEK((CV *)(cv)) ? unshare_hek(SvANY((CV *)(cv))->xcv_gv_u.xcv_hek) : (void)0, ((XPVCV*)MUTABLE_PTR(SvANY(cv)))->xcv_gv_u.xcv_hek = (hek), CvNAMED_on(cv) )
# 306 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cv.h" 3 4
typedef OP *(*Perl_call_checker)(PerlInterpreter* my_perl __attribute__((unused)), OP *, GV *, SV *);

#define CALL_CHECKER_REQUIRE_GV MGf_REQUIRE_GV

#define CV_NAME_NOTQUAL 1
# 4083 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opnames.h" 1 3 4
# 16 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opnames.h" 3 4
typedef enum opcode {
 OP_NULL = 0,
 OP_STUB = 1,
 OP_SCALAR = 2,
 OP_PUSHMARK = 3,
 OP_WANTARRAY = 4,
 OP_CONST = 5,
 OP_GVSV = 6,
 OP_GV = 7,
 OP_GELEM = 8,
 OP_PADSV = 9,
 OP_PADAV = 10,
 OP_PADHV = 11,
 OP_PADANY = 12,
 OP_RV2GV = 13,
 OP_RV2SV = 14,
 OP_AV2ARYLEN = 15,
 OP_RV2CV = 16,
 OP_ANONCODE = 17,
 OP_PROTOTYPE = 18,
 OP_REFGEN = 19,
 OP_SREFGEN = 20,
 OP_REF = 21,
 OP_BLESS = 22,
 OP_BACKTICK = 23,
 OP_GLOB = 24,
 OP_READLINE = 25,
 OP_RCATLINE = 26,
 OP_REGCMAYBE = 27,
 OP_REGCRESET = 28,
 OP_REGCOMP = 29,
 OP_MATCH = 30,
 OP_QR = 31,
 OP_SUBST = 32,
 OP_SUBSTCONT = 33,
 OP_TRANS = 34,
 OP_TRANSR = 35,
 OP_SASSIGN = 36,
 OP_AASSIGN = 37,
 OP_CHOP = 38,
 OP_SCHOP = 39,
 OP_CHOMP = 40,
 OP_SCHOMP = 41,
 OP_DEFINED = 42,
 OP_UNDEF = 43,
 OP_STUDY = 44,
 OP_POS = 45,
 OP_PREINC = 46,
 OP_I_PREINC = 47,
 OP_PREDEC = 48,
 OP_I_PREDEC = 49,
 OP_POSTINC = 50,
 OP_I_POSTINC = 51,
 OP_POSTDEC = 52,
 OP_I_POSTDEC = 53,
 OP_POW = 54,
 OP_MULTIPLY = 55,
 OP_I_MULTIPLY = 56,
 OP_DIVIDE = 57,
 OP_I_DIVIDE = 58,
 OP_MODULO = 59,
 OP_I_MODULO = 60,
 OP_REPEAT = 61,
 OP_ADD = 62,
 OP_I_ADD = 63,
 OP_SUBTRACT = 64,
 OP_I_SUBTRACT = 65,
 OP_CONCAT = 66,
 OP_MULTICONCAT = 67,
 OP_STRINGIFY = 68,
 OP_LEFT_SHIFT = 69,
 OP_RIGHT_SHIFT = 70,
 OP_LT = 71,
 OP_I_LT = 72,
 OP_GT = 73,
 OP_I_GT = 74,
 OP_LE = 75,
 OP_I_LE = 76,
 OP_GE = 77,
 OP_I_GE = 78,
 OP_EQ = 79,
 OP_I_EQ = 80,
 OP_NE = 81,
 OP_I_NE = 82,
 OP_NCMP = 83,
 OP_I_NCMP = 84,
 OP_SLT = 85,
 OP_SGT = 86,
 OP_SLE = 87,
 OP_SGE = 88,
 OP_SEQ = 89,
 OP_SNE = 90,
 OP_SCMP = 91,
 OP_BIT_AND = 92,
 OP_BIT_XOR = 93,
 OP_BIT_OR = 94,
 OP_NBIT_AND = 95,
 OP_NBIT_XOR = 96,
 OP_NBIT_OR = 97,
 OP_SBIT_AND = 98,
 OP_SBIT_XOR = 99,
 OP_SBIT_OR = 100,
 OP_NEGATE = 101,
 OP_I_NEGATE = 102,
 OP_NOT = 103,
 OP_COMPLEMENT = 104,
 OP_NCOMPLEMENT = 105,
 OP_SCOMPLEMENT = 106,
 OP_SMARTMATCH = 107,
 OP_ATAN2 = 108,
 OP_SIN = 109,
 OP_COS = 110,
 OP_RAND = 111,
 OP_SRAND = 112,
 OP_EXP = 113,
 OP_LOG = 114,
 OP_SQRT = 115,
 OP_INT = 116,
 OP_HEX = 117,
 OP_OCT = 118,
 OP_ABS = 119,
 OP_LENGTH = 120,
 OP_SUBSTR = 121,
 OP_VEC = 122,
 OP_INDEX = 123,
 OP_RINDEX = 124,
 OP_SPRINTF = 125,
 OP_FORMLINE = 126,
 OP_ORD = 127,
 OP_CHR = 128,
 OP_CRYPT = 129,
 OP_UCFIRST = 130,
 OP_LCFIRST = 131,
 OP_UC = 132,
 OP_LC = 133,
 OP_QUOTEMETA = 134,
 OP_RV2AV = 135,
 OP_AELEMFAST = 136,
 OP_AELEMFAST_LEX = 137,
 OP_AELEM = 138,
 OP_ASLICE = 139,
 OP_KVASLICE = 140,
 OP_AEACH = 141,
 OP_AVALUES = 142,
 OP_AKEYS = 143,
 OP_EACH = 144,
 OP_VALUES = 145,
 OP_KEYS = 146,
 OP_DELETE = 147,
 OP_EXISTS = 148,
 OP_RV2HV = 149,
 OP_HELEM = 150,
 OP_HSLICE = 151,
 OP_KVHSLICE = 152,
 OP_MULTIDEREF = 153,
 OP_UNPACK = 154,
 OP_PACK = 155,
 OP_SPLIT = 156,
 OP_JOIN = 157,
 OP_LIST = 158,
 OP_LSLICE = 159,
 OP_ANONLIST = 160,
 OP_ANONHASH = 161,
 OP_SPLICE = 162,
 OP_PUSH = 163,
 OP_POP = 164,
 OP_SHIFT = 165,
 OP_UNSHIFT = 166,
 OP_SORT = 167,
 OP_REVERSE = 168,
 OP_GREPSTART = 169,
 OP_GREPWHILE = 170,
 OP_MAPSTART = 171,
 OP_MAPWHILE = 172,
 OP_RANGE = 173,
 OP_FLIP = 174,
 OP_FLOP = 175,
 OP_AND = 176,
 OP_OR = 177,
 OP_XOR = 178,
 OP_DOR = 179,
 OP_COND_EXPR = 180,
 OP_ANDASSIGN = 181,
 OP_ORASSIGN = 182,
 OP_DORASSIGN = 183,
 OP_ENTERSUB = 184,
 OP_LEAVESUB = 185,
 OP_LEAVESUBLV = 186,
 OP_ARGCHECK = 187,
 OP_ARGELEM = 188,
 OP_ARGDEFELEM = 189,
 OP_CALLER = 190,
 OP_WARN = 191,
 OP_DIE = 192,
 OP_RESET = 193,
 OP_LINESEQ = 194,
 OP_NEXTSTATE = 195,
 OP_DBSTATE = 196,
 OP_UNSTACK = 197,
 OP_ENTER = 198,
 OP_LEAVE = 199,
 OP_SCOPE = 200,
 OP_ENTERITER = 201,
 OP_ITER = 202,
 OP_ENTERLOOP = 203,
 OP_LEAVELOOP = 204,
 OP_RETURN = 205,
 OP_LAST = 206,
 OP_NEXT = 207,
 OP_REDO = 208,
 OP_DUMP = 209,
 OP_GOTO = 210,
 OP_EXIT = 211,
 OP_METHOD = 212,
 OP_METHOD_NAMED = 213,
 OP_METHOD_SUPER = 214,
 OP_METHOD_REDIR = 215,
 OP_METHOD_REDIR_SUPER = 216,
 OP_ENTERGIVEN = 217,
 OP_LEAVEGIVEN = 218,
 OP_ENTERWHEN = 219,
 OP_LEAVEWHEN = 220,
 OP_BREAK = 221,
 OP_CONTINUE = 222,
 OP_OPEN = 223,
 OP_CLOSE = 224,
 OP_PIPE_OP = 225,
 OP_FILENO = 226,
 OP_UMASK = 227,
 OP_BINMODE = 228,
 OP_TIE = 229,
 OP_UNTIE = 230,
 OP_TIED = 231,
 OP_DBMOPEN = 232,
 OP_DBMCLOSE = 233,
 OP_SSELECT = 234,
 OP_SELECT = 235,
 OP_GETC = 236,
 OP_READ = 237,
 OP_ENTERWRITE = 238,
 OP_LEAVEWRITE = 239,
 OP_PRTF = 240,
 OP_PRINT = 241,
 OP_SAY = 242,
 OP_SYSOPEN = 243,
 OP_SYSSEEK = 244,
 OP_SYSREAD = 245,
 OP_SYSWRITE = 246,
 OP_EOF = 247,
 OP_TELL = 248,
 OP_SEEK = 249,
 OP_TRUNCATE = 250,
 OP_FCNTL = 251,
 OP_IOCTL = 252,
 OP_FLOCK = 253,
 OP_SEND = 254,
 OP_RECV = 255,
 OP_SOCKET = 256,
 OP_SOCKPAIR = 257,
 OP_BIND = 258,
 OP_CONNECT = 259,
 OP_LISTEN = 260,
 OP_ACCEPT = 261,
 OP_SHUTDOWN = 262,
 OP_GSOCKOPT = 263,
 OP_SSOCKOPT = 264,
 OP_GETSOCKNAME = 265,
 OP_GETPEERNAME = 266,
 OP_LSTAT = 267,
 OP_STAT = 268,
 OP_FTRREAD = 269,
 OP_FTRWRITE = 270,
 OP_FTREXEC = 271,
 OP_FTEREAD = 272,
 OP_FTEWRITE = 273,
 OP_FTEEXEC = 274,
 OP_FTIS = 275,
 OP_FTSIZE = 276,
 OP_FTMTIME = 277,
 OP_FTATIME = 278,
 OP_FTCTIME = 279,
 OP_FTROWNED = 280,
 OP_FTEOWNED = 281,
 OP_FTZERO = 282,
 OP_FTSOCK = 283,
 OP_FTCHR = 284,
 OP_FTBLK = 285,
 OP_FTFILE = 286,
 OP_FTDIR = 287,
 OP_FTPIPE = 288,
 OP_FTSUID = 289,
 OP_FTSGID = 290,
 OP_FTSVTX = 291,
 OP_FTLINK = 292,
 OP_FTTTY = 293,
 OP_FTTEXT = 294,
 OP_FTBINARY = 295,
 OP_CHDIR = 296,
 OP_CHOWN = 297,
 OP_CHROOT = 298,
 OP_UNLINK = 299,
 OP_CHMOD = 300,
 OP_UTIME = 301,
 OP_RENAME = 302,
 OP_LINK = 303,
 OP_SYMLINK = 304,
 OP_READLINK = 305,
 OP_MKDIR = 306,
 OP_RMDIR = 307,
 OP_OPEN_DIR = 308,
 OP_READDIR = 309,
 OP_TELLDIR = 310,
 OP_SEEKDIR = 311,
 OP_REWINDDIR = 312,
 OP_CLOSEDIR = 313,
 OP_FORK = 314,
 OP_WAIT = 315,
 OP_WAITPID = 316,
 OP_SYSTEM = 317,
 OP_EXEC = 318,
 OP_KILL = 319,
 OP_GETPPID = 320,
 OP_GETPGRP = 321,
 OP_SETPGRP = 322,
 OP_GETPRIORITY = 323,
 OP_SETPRIORITY = 324,
 OP_TIME = 325,
 OP_TMS = 326,
 OP_LOCALTIME = 327,
 OP_GMTIME = 328,
 OP_ALARM = 329,
 OP_SLEEP = 330,
 OP_SHMGET = 331,
 OP_SHMCTL = 332,
 OP_SHMREAD = 333,
 OP_SHMWRITE = 334,
 OP_MSGGET = 335,
 OP_MSGCTL = 336,
 OP_MSGSND = 337,
 OP_MSGRCV = 338,
 OP_SEMOP = 339,
 OP_SEMGET = 340,
 OP_SEMCTL = 341,
 OP_REQUIRE = 342,
 OP_DOFILE = 343,
 OP_HINTSEVAL = 344,
 OP_ENTEREVAL = 345,
 OP_LEAVEEVAL = 346,
 OP_ENTERTRY = 347,
 OP_LEAVETRY = 348,
 OP_GHBYNAME = 349,
 OP_GHBYADDR = 350,
 OP_GHOSTENT = 351,
 OP_GNBYNAME = 352,
 OP_GNBYADDR = 353,
 OP_GNETENT = 354,
 OP_GPBYNAME = 355,
 OP_GPBYNUMBER = 356,
 OP_GPROTOENT = 357,
 OP_GSBYNAME = 358,
 OP_GSBYPORT = 359,
 OP_GSERVENT = 360,
 OP_SHOSTENT = 361,
 OP_SNETENT = 362,
 OP_SPROTOENT = 363,
 OP_SSERVENT = 364,
 OP_EHOSTENT = 365,
 OP_ENETENT = 366,
 OP_EPROTOENT = 367,
 OP_ESERVENT = 368,
 OP_GPWNAM = 369,
 OP_GPWUID = 370,
 OP_GPWENT = 371,
 OP_SPWENT = 372,
 OP_EPWENT = 373,
 OP_GGRNAM = 374,
 OP_GGRGID = 375,
 OP_GGRENT = 376,
 OP_SGRENT = 377,
 OP_EGRENT = 378,
 OP_GETLOGIN = 379,
 OP_SYSCALL = 380,
 OP_LOCK = 381,
 OP_ONCE = 382,
 OP_CUSTOM = 383,
 OP_COREARGS = 384,
 OP_AVHVSWITCH = 385,
 OP_RUNCV = 386,
 OP_FC = 387,
 OP_PADCV = 388,
 OP_INTROCV = 389,
 OP_CLONECV = 390,
 OP_PADRANGE = 391,
 OP_REFASSIGN = 392,
 OP_LVREF = 393,
 OP_LVREFSLICE = 394,
 OP_LVAVREF = 395,
 OP_ANONCONST = 396,
 OP_ISA = 397,
 OP_CMPCHAIN_AND = 398,
 OP_CMPCHAIN_DUP = 399,
 OP_ENTERTRYCATCH = 400,
 OP_LEAVETRYCATCH = 401,
 OP_POPTRY = 402,
 OP_CATCH = 403,
 OP_max
} opcode;

#define MAXO 404
#define OP_FREED MAXO






#define OP_IS_SOCKET(op) ((op) >= OP_SEND && (op) <= OP_GETPEERNAME)


#define OP_IS_FILETEST(op) ((op) >= OP_FTRREAD && (op) <= OP_FTBINARY)


#define OP_IS_FILETEST_ACCESS(op) ((op) >= OP_FTRREAD && (op) <= OP_FTEEXEC)


#define OP_IS_NUMCOMPARE(op) ((op) >= OP_LT && (op) <= OP_I_NCMP)


#define OP_IS_DIRHOP(op) ((op) >= OP_READDIR && (op) <= OP_CLOSEDIR)


#define OP_IS_INFIX_BIT(op) ((op) >= OP_BIT_AND && (op) <= OP_SBIT_OR)
# 4084 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 1 3 4
# 37 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define OPCODE U16

typedef U16 Optype;




#define BASEOP OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(pTHX); PADOFFSET op_targ; PERL_BITFIELD16 op_type:9; PERL_BITFIELD16 op_opt:1; PERL_BITFIELD16 op_slabbed:1; PERL_BITFIELD16 op_savefree:1; PERL_BITFIELD16 op_static:1; PERL_BITFIELD16 op_folded:1; PERL_BITFIELD16 op_moresib:1; PERL_BITFIELD16 op_spare:1; U8 op_flags; U8 op_private;
# 67 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define OP_GIMME(op,dfl) (((op)->op_flags & OPf_WANT) ? ((op)->op_flags & OPf_WANT) : dfl)


#define OP_GIMME_REVERSE(flags) ((flags) & G_WANT)
# 88 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define GIMME_V Perl_gimme_V(aTHX)



#define OPf_WANT 3
#define OPf_WANT_VOID 1
#define OPf_WANT_SCALAR 2
#define OPf_WANT_LIST 3
#define OPf_KIDS 4
#define OPf_PARENS 8

#define OPf_REF 16

#define OPf_MOD 32

#define OPf_STACKED 64




#define OPf_SPECIAL 128
# 153 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define OPf_FOLDED (1<<16)


#define OPf_LIST OPf_WANT_LIST
#define OPf_KNOW OPf_WANT


#define GIMME (PL_op->op_flags & OPf_WANT ? ((PL_op->op_flags & OPf_WANT) == OPf_WANT_LIST ? G_ARRAY : G_SCALAR) : dowantarray())
# 173 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define OPpTRANS_ALL (OPpTRANS_USE_SVOP|OPpTRANS_CAN_FORCE_UTF8|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE)
#define OPpTRANS_FROM_UTF OPpTRANS_USE_SVOP
#define OPpTRANS_TO_UTF OPpTRANS_CAN_FORCE_UTF8




#define OPpENTERSUB_LVAL_MASK (OPpLVAL_INTRO|OPpENTERSUB_INARGS)



typedef union {
    PADOFFSET pad_offset;
    SV *sv;
    IV iv;
    UV uv;
    char *pv;
    ssize_t ssize;
} UNOP_AUX_item;


#define UNOP_AUX_item_sv(item) PAD_SVl((item)->pad_offset);







struct op {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
};

struct unop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
};

struct unop_aux {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP *op_first;
    UNOP_AUX_item *op_aux;
};

struct binop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;
};

struct logop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;






    OP * op_other;
};

struct listop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;
};

struct methop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    union {



        OP* op_first;
        SV* op_meth_sv;
    } op_u;

    PADOFFSET op_rclass_targ;



};

struct pmop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;

    PADOFFSET op_pmoffset;



    U32 op_pmflags;
    union {
        OP * op_pmreplroot;
        PADOFFSET op_pmtargetoff;
        GV * op_pmtargetgv;
    } op_pmreplrootu;
    union {
        OP * op_pmreplstart;

        PADOFFSET op_pmstashoff;



    } op_pmstashstartu;
    OP * op_code_list;
};


#define PM_GETRE(o) (SvTYPE(PL_regex_pad[(o)->op_pmoffset]) == SVt_REGEXP ? (REGEXP*)(PL_regex_pad[(o)->op_pmoffset]) : NULL)
# 294 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define PM_SETRE(o,r) STMT_START { REGEXP *const _pm_setre = (r); assert(_pm_setre); PL_regex_pad[(o)->op_pmoffset] = MUTABLE_SV(_pm_setre); } STMT_END
# 334 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define PMf_BASE_SHIFT (_RXf_PMf_SHIFT_NEXT+2)



#define PMf_HAS_ERROR (1U<<(PMf_BASE_SHIFT+3))


#define PMf_RETAINT (1U<<(PMf_BASE_SHIFT+4))




#define PMf_ONCE (1U<<(PMf_BASE_SHIFT+5))


#define PMf_USED (1U<<(PMf_BASE_SHIFT+6))


#define PMf_CONST (1U<<(PMf_BASE_SHIFT+7))


#define PMf_KEEP (1U<<(PMf_BASE_SHIFT+8))

#define PMf_GLOBAL (1U<<(PMf_BASE_SHIFT+9))


#define PMf_CONTINUE (1U<<(PMf_BASE_SHIFT+10))


#define PMf_EVAL (1U<<(PMf_BASE_SHIFT+11))


#define PMf_NONDESTRUCT (1U<<(PMf_BASE_SHIFT+12))


#define PMf_HAS_CV (1U<<(PMf_BASE_SHIFT+13))



#define PMf_CODELIST_PRIVATE (1U<<(PMf_BASE_SHIFT+14))




#define PMf_IS_QR (1U<<(PMf_BASE_SHIFT+15))
#define PMf_USE_RE_EVAL (1U<<(PMf_BASE_SHIFT+16))



#define PMf_WILDCARD (1U<<(PMf_BASE_SHIFT+17))
# 395 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define PmopSTASH(o) ((o)->op_pmflags & PMf_ONCE ? PL_stashpad[(o)->op_pmstashstartu.op_pmstashoff] : NULL)


#define PmopSTASH_set(o,hv) (assert_((o)->op_pmflags & PMf_ONCE) (o)->op_pmstashstartu.op_pmstashoff = (hv) ? alloccopstash(hv) : 0)
# 414 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define PmopSTASHPV(o) (PmopSTASH(o) ? HvNAME_get(PmopSTASH(o)) : NULL)

#define PmopSTASHPV_set(o,pv) PmopSTASH_set((o), gv_stashpv(pv,GV_ADD))

struct svop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    SV * op_sv;
};

struct padop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    PADOFFSET op_padix;
};

struct pvop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    char * op_pv;
};

struct loop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;
    OP * op_first;
    OP * op_last;
    OP * op_redoop;
    OP * op_nextop;
    OP * op_lastop;
};

#define cUNOPx(o) ((UNOP*)(o))
#define cUNOP_AUXx(o) ((UNOP_AUX*)(o))
#define cBINOPx(o) ((BINOP*)(o))
#define cLISTOPx(o) ((LISTOP*)(o))
#define cLOGOPx(o) ((LOGOP*)(o))
#define cPMOPx(o) ((PMOP*)(o))
#define cSVOPx(o) ((SVOP*)(o))
#define cPADOPx(o) ((PADOP*)(o))
#define cPVOPx(o) ((PVOP*)(o))
#define cCOPx(o) ((COP*)(o))
#define cLOOPx(o) ((LOOP*)(o))
#define cMETHOPx(o) ((METHOP*)(o))

#define cUNOP cUNOPx(PL_op)
#define cUNOP_AUX cUNOP_AUXx(PL_op)
#define cBINOP cBINOPx(PL_op)
#define cLISTOP cLISTOPx(PL_op)
#define cLOGOP cLOGOPx(PL_op)
#define cPMOP cPMOPx(PL_op)
#define cSVOP cSVOPx(PL_op)
#define cPADOP cPADOPx(PL_op)
#define cPVOP cPVOPx(PL_op)
#define cCOP cCOPx(PL_op)
#define cLOOP cLOOPx(PL_op)

#define cUNOPo cUNOPx(o)
#define cUNOP_AUXo cUNOP_AUXx(o)
#define cBINOPo cBINOPx(o)
#define cLISTOPo cLISTOPx(o)
#define cLOGOPo cLOGOPx(o)
#define cPMOPo cPMOPx(o)
#define cSVOPo cSVOPx(o)
#define cPADOPo cPADOPx(o)
#define cPVOPo cPVOPx(o)
#define cCOPo cCOPx(o)
#define cLOOPo cLOOPx(o)

#define kUNOP cUNOPx(kid)
#define kUNOP_AUX cUNOP_AUXx(kid)
#define kBINOP cBINOPx(kid)
#define kLISTOP cLISTOPx(kid)
#define kLOGOP cLOGOPx(kid)
#define kPMOP cPMOPx(kid)
#define kSVOP cSVOPx(kid)
#define kPADOP cPADOPx(kid)
#define kPVOP cPVOPx(kid)
#define kCOP cCOPx(kid)
#define kLOOP cLOOPx(kid)


typedef enum {
    OPclass_NULL,
    OPclass_BASEOP,
    OPclass_UNOP,
    OPclass_BINOP,
    OPclass_LOGOP,
    OPclass_LISTOP,
    OPclass_PMOP,
    OPclass_SVOP,
    OPclass_PADOP,
    OPclass_PVOP,
    OPclass_LOOP,
    OPclass_COP,
    OPclass_METHOP,
    OPclass_UNOP_AUX
} OPclass;



#define cGVOPx_gv(o) ((GV*)PAD_SVl(cPADOPx(o)->op_padix))

#define IS_PADGV(v) (v && isGV(v))
#define IS_PADCONST(v) (v && (SvREADONLY(v) || (SvIsCOW(v) && !SvLEN(v))))


#define cSVOPx_sv(v) (cSVOPx(v)->op_sv ? cSVOPx(v)->op_sv : PAD_SVl((v)->op_targ))

#define cSVOPx_svp(v) (cSVOPx(v)->op_sv ? &cSVOPx(v)->op_sv : &PAD_SVl((v)->op_targ))

#define cMETHOPx_rclass(v) PAD_SVl(cMETHOPx(v)->op_rclass_targ)
# 533 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define cMETHOPx_meth(v) cSVOPx_sv(v)

#define cGVOP_gv cGVOPx_gv(PL_op)
#define cGVOPo_gv cGVOPx_gv(o)
#define kGVOP_gv cGVOPx_gv(kid)
#define cSVOP_sv cSVOPx_sv(PL_op)
#define cSVOPo_sv cSVOPx_sv(o)
#define kSVOP_sv cSVOPx_sv(kid)


#define Nullop ((OP*)NULL)



#define OA_MARK 1
#define OA_FOLDCONST 2
#define OA_RETSCALAR 4
#define OA_TARGET 8
#define OA_TARGLEX 16
#define OA_OTHERINT 32
#define OA_DANGEROUS 64
#define OA_DEFGV 128


#define OCSHIFT 8

#define OA_CLASS_MASK (15 << OCSHIFT)

#define OA_BASEOP (0 << OCSHIFT)
#define OA_UNOP (1 << OCSHIFT)
#define OA_BINOP (2 << OCSHIFT)
#define OA_LOGOP (3 << OCSHIFT)
#define OA_LISTOP (4 << OCSHIFT)
#define OA_PMOP (5 << OCSHIFT)
#define OA_SVOP (6 << OCSHIFT)
#define OA_PADOP (7 << OCSHIFT)
#define OA_PVOP_OR_SVOP (8 << OCSHIFT)
#define OA_LOOP (9 << OCSHIFT)
#define OA_COP (10 << OCSHIFT)
#define OA_BASEOP_OR_UNOP (11 << OCSHIFT)
#define OA_FILESTATOP (12 << OCSHIFT)
#define OA_LOOPEXOP (13 << OCSHIFT)
#define OA_METHOP (14 << OCSHIFT)
#define OA_UNOP_AUX (15 << OCSHIFT)



#define OASHIFT 12

#define OA_SCALAR 1
#define OA_LIST 2
#define OA_AVREF 3
#define OA_HVREF 4
#define OA_CVREF 5
#define OA_FILEREF 6
#define OA_SCALARREF 7
#define OA_OPTIONAL 8
# 601 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define OP_REFCNT_INIT MUTEX_INIT(&PL_op_mutex)




#define OP_REFCNT_LOCK op_refcnt_lock()
#define OP_REFCNT_UNLOCK op_refcnt_unlock()

#define OP_REFCNT_TERM MUTEX_DESTROY(&PL_op_mutex)







#define OpREFCNT_set(o,n) ((o)->op_targ = (n))




#define OpREFCNT_inc(o) ((o) ? (++(o)->op_targ, (o)) : NULL)
#define OpREFCNT_dec(o) (--(o)->op_targ)



#define PERL_LOADMOD_DENY 0x1
#define PERL_LOADMOD_NOIMPORT 0x2
#define PERL_LOADMOD_IMPORT_OPS 0x4
# 641 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
typedef struct {
    size_t size;
    short map[1];
} OPtrans_map;
# 660 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define LINKLIST(o) ((o)->op_next ? (o)->op_next : op_linklist((OP*)o))



#define cv_ckproto(cv,gv,p) cv_ckproto_len_flags((cv), (gv), (p), (p) ? strlen(p) : 0, 0)
# 673 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 1 3 4
# 16 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#define PERL_REENTR_H_ 
# 38 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#define PERL_REENTR_API 0
# 47 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#undef HAS_SETLOCALE_R
# 87 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#define REENTR_MEMZERO(a,b) 0
# 133 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#define REENTRANT_PROTO_B_B 1
#define REENTRANT_PROTO_B_BI 2
#define REENTRANT_PROTO_B_BW 3
#define REENTRANT_PROTO_B_CCD 4
#define REENTRANT_PROTO_B_CCS 5
#define REENTRANT_PROTO_B_IBI 6
#define REENTRANT_PROTO_B_IBW 7
#define REENTRANT_PROTO_B_SB 8
#define REENTRANT_PROTO_B_SBI 9
#define REENTRANT_PROTO_I_BI 10
#define REENTRANT_PROTO_I_BW 11
#define REENTRANT_PROTO_I_CCSBWR 12
#define REENTRANT_PROTO_I_CCSD 13
#define REENTRANT_PROTO_I_CII 14
#define REENTRANT_PROTO_I_CIISD 15
#define REENTRANT_PROTO_I_CSBI 16
#define REENTRANT_PROTO_I_CSBIR 17
#define REENTRANT_PROTO_I_CSBWR 18
#define REENTRANT_PROTO_I_CSBWRE 19
#define REENTRANT_PROTO_I_CSD 20
#define REENTRANT_PROTO_I_CWISBWRE 21
#define REENTRANT_PROTO_I_CWISD 22
#define REENTRANT_PROTO_I_D 23
#define REENTRANT_PROTO_I_H 24
#define REENTRANT_PROTO_I_IBI 25
#define REENTRANT_PROTO_I_IBW 26
#define REENTRANT_PROTO_I_ICBI 27
#define REENTRANT_PROTO_I_ICSBWR 28
#define REENTRANT_PROTO_I_ICSD 29
#define REENTRANT_PROTO_I_ID 30
#define REENTRANT_PROTO_I_IISD 31
#define REENTRANT_PROTO_I_ISBWR 32
#define REENTRANT_PROTO_I_ISD 33
#define REENTRANT_PROTO_I_LISBI 34
#define REENTRANT_PROTO_I_LISD 35
#define REENTRANT_PROTO_I_SB 36
#define REENTRANT_PROTO_I_SBI 37
#define REENTRANT_PROTO_I_SBIE 38
#define REENTRANT_PROTO_I_SBIH 39
#define REENTRANT_PROTO_I_SBIR 40
#define REENTRANT_PROTO_I_SBWR 41
#define REENTRANT_PROTO_I_SBWRE 42
#define REENTRANT_PROTO_I_SD 43
#define REENTRANT_PROTO_I_TISD 44
#define REENTRANT_PROTO_I_TS 45
#define REENTRANT_PROTO_I_TSBI 46
#define REENTRANT_PROTO_I_TSBIR 47
#define REENTRANT_PROTO_I_TSBWR 48
#define REENTRANT_PROTO_I_TSR 49
#define REENTRANT_PROTO_I_TsISBWRE 50
#define REENTRANT_PROTO_I_UISBWRE 51
#define REENTRANT_PROTO_I_uISBWRE 52
#define REENTRANT_PROTO_S_CBI 53
#define REENTRANT_PROTO_S_CCSBI 54
#define REENTRANT_PROTO_S_CIISBIE 55
#define REENTRANT_PROTO_S_CSBI 56
#define REENTRANT_PROTO_S_CSBIE 57
#define REENTRANT_PROTO_S_CWISBIE 58
#define REENTRANT_PROTO_S_CWISBWIE 59
#define REENTRANT_PROTO_S_ICSBI 60
#define REENTRANT_PROTO_S_ISBI 61
#define REENTRANT_PROTO_S_LISBI 62
#define REENTRANT_PROTO_S_SBI 63
#define REENTRANT_PROTO_S_SBIE 64
#define REENTRANT_PROTO_S_SBW 65
#define REENTRANT_PROTO_S_TISBI 66
#define REENTRANT_PROTO_S_TS 67
#define REENTRANT_PROTO_S_TSBI 68
#define REENTRANT_PROTO_S_TSBIE 69
#define REENTRANT_PROTO_S_TWISBIE 70
#define REENTRANT_PROTO_V_D 71
#define REENTRANT_PROTO_V_H 72
#define REENTRANT_PROTO_V_ID 73
# 214 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#undef GETGRENT_R_HAS_BUFFER


#define GETGRGID_R_HAS_BUFFER 




#define GETGRNAM_R_HAS_BUFFER 







#define USE_GRENT_BUFFER 
# 240 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#undef GETGRENT_R_HAS_PTR


#define GETGRGID_R_HAS_PTR 




#define GETGRNAM_R_HAS_PTR 







#define USE_GRENT_PTR 
# 266 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#undef GETPWENT_R_HAS_PTR


#define GETPWNAM_R_HAS_PTR 




#define GETPWUID_R_HAS_PTR 







#define USE_PWENT_PTR 
# 292 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#undef GETSPNAM_R_HAS_PTR







#undef USE_SPENT_PTR







#undef GETGRENT_R_HAS_FPTR




#undef SETGRENT_R_HAS_FPTR




#undef ENDGRENT_R_HAS_FPTR







#undef USE_GRENT_FPTR







#undef GETPWENT_R_HAS_FPTR




#undef SETPWENT_R_HAS_FPTR




#undef ENDPWENT_R_HAS_FPTR







#undef USE_PWENT_FPTR







#undef GETPWENT_R_HAS_BUFFER


#define GETPWNAM_R_HAS_BUFFER 







#define USE_PWENT_BUFFER 
# 381 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
#undef GETSPNAM_R_HAS_BUFFER







#undef USE_SPENT_BUFFER







#undef GETHOSTENT_R_HAS_PTR




#undef GETHOSTBYADDR_R_HAS_PTR




#undef GETHOSTBYNAME_R_HAS_PTR







#undef USE_HOSTENT_PTR







#undef GETNETENT_R_HAS_PTR




#undef GETNETBYADDR_R_HAS_PTR




#undef GETNETBYNAME_R_HAS_PTR







#undef USE_NETENT_PTR







#undef GETPROTOENT_R_HAS_PTR




#undef GETPROTOBYNAME_R_HAS_PTR




#undef GETPROTOBYNUMBER_R_HAS_PTR







#undef USE_PROTOENT_PTR







#undef GETSERVENT_R_HAS_PTR




#undef GETSERVBYNAME_R_HAS_PTR




#undef GETSERVBYPORT_R_HAS_PTR







#undef USE_SERVENT_PTR







#undef GETHOSTENT_R_HAS_BUFFER




#undef GETHOSTBYADDR_R_HAS_BUFFER




#undef GETHOSTBYNAME_R_HAS_BUFFER







#undef USE_HOSTENT_BUFFER







#undef GETNETENT_R_HAS_BUFFER




#undef GETNETBYADDR_R_HAS_BUFFER




#undef GETNETBYNAME_R_HAS_BUFFER







#undef USE_NETENT_BUFFER







#undef GETPROTOENT_R_HAS_BUFFER




#undef GETPROTOBYNAME_R_HAS_BUFFER




#undef GETPROTOBYNUMBER_R_HAS_BUFFER







#undef USE_PROTOENT_BUFFER







#undef GETSERVENT_R_HAS_BUFFER




#undef GETSERVBYNAME_R_HAS_BUFFER




#undef GETSERVBYPORT_R_HAS_BUFFER







#undef USE_SERVENT_BUFFER







#undef GETHOSTENT_R_HAS_ERRNO




#undef GETHOSTBYADDR_R_HAS_ERRNO




#undef GETHOSTBYNAME_R_HAS_ERRNO







#undef USE_HOSTENT_ERRNO







#undef GETNETENT_R_HAS_ERRNO




#undef GETNETBYADDR_R_HAS_ERRNO




#undef GETNETBYNAME_R_HAS_ERRNO







#undef USE_NETENT_ERRNO



typedef struct {


        char* _asctime_buffer;
        size_t _asctime_size;
# 669 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
        char* _ctime_buffer;
        size_t _ctime_size;



        struct group _grent_struct;
        char* _grent_buffer;
        size_t _grent_size;

        struct group* _grent_ptr;
# 702 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
        char* _getlogin_buffer;
        size_t _getlogin_size;
# 739 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
        struct passwd _pwent_struct;
        char* _pwent_buffer;
        size_t _pwent_size;

        struct passwd* _pwent_ptr;
# 779 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
        struct tm _gmtime_struct;



        struct tm _localtime_struct;



        struct dirent* _readdir_struct;
        size_t _readdir_size;

        struct dirent* _readdir_ptr;
# 808 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/reentr.h" 3 4
        char* _strerror_buffer;
        size_t _strerror_size;



        char* _ttyname_buffer;
        size_t _ttyname_size;



    int dummy;
} REENTR;
# 674 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 2 3 4


#define NewOp(m,var,c,type) (var = (type *) Perl_Slab_Alloc(aTHX_ c*sizeof(type)))

#define NewOpSz(m,var,size) (var = (OP *) Perl_Slab_Alloc(aTHX_ size))

#define FreeOp(p) Perl_Slab_Free(aTHX_ p)
# 751 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
struct block_hooks {
    U32 bhk_flags;
    void (*bhk_start) (PerlInterpreter* my_perl __attribute__((unused)), int full);
    void (*bhk_pre_end) (PerlInterpreter* my_perl __attribute__((unused)), OP **seq);
    void (*bhk_post_end) (PerlInterpreter* my_perl __attribute__((unused)), OP **seq);
    void (*bhk_eval) (PerlInterpreter* my_perl __attribute__((unused)), OP *const saveop);
};
# 794 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define BhkFLAGS(hk) ((hk)->bhk_flags)

#define BHKf_bhk_start 0x01
#define BHKf_bhk_pre_end 0x02
#define BHKf_bhk_post_end 0x04
#define BHKf_bhk_eval 0x08

#define BhkENTRY(hk,which) ((BhkFLAGS(hk) & BHKf_ ## which) ? ((hk)->which) : NULL)


#define BhkENABLE(hk,which) STMT_START { BhkFLAGS(hk) |= BHKf_ ## which; assert(BhkENTRY(hk, which)); } STMT_END





#define BhkDISABLE(hk,which) STMT_START { BhkFLAGS(hk) &= ~(BHKf_ ## which); } STMT_END




#define BhkENTRY_set(hk,which,ptr) STMT_START { (hk)->which = ptr; BhkENABLE(hk, which); } STMT_END





#define CALL_BLOCK_HOOKS(which,arg) STMT_START { if (PL_blockhooks) { SSize_t i; for (i = av_top_index(PL_blockhooks); i >= 0; i--) { SV *sv = AvARRAY(PL_blockhooks)[i]; BHK *hk; assert(SvIOK(sv)); if (SvUOK(sv)) hk = INT2PTR(BHK *, SvUVX(sv)); else hk = INT2PTR(BHK *, SvIVX(sv)); if (BhkENTRY(hk, which)) BhkENTRY(hk, which)(aTHX_ arg); } } } STMT_END
# 843 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define RV2CVOPCV_MARK_EARLY 0x00000001
#define RV2CVOPCV_RETURN_NAME_GV 0x00000002
#define RV2CVOPCV_RETURN_STUB 0x00000004



#define RV2CVOPCV_FLAG_MASK 0x0000000f

#define op_lvalue(op,t) Perl_op_lvalue_flags(aTHX_ op,t,0)



#define OP_LVALUE_NO_CROAK 1
# 891 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
struct custom_op {
    U32 xop_flags;
    const char *xop_name;
    const char *xop_desc;
    U32 xop_class;
    void (*xop_peep)(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *oldop);
};




typedef union {
    const char *xop_name;
    const char *xop_desc;
    U32 xop_class;
    void (*xop_peep)(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *oldop);
    XOP *xop_ptr;
} XOPRETANY;

#define XopFLAGS(xop) ((xop)->xop_flags)

#define XOPf_xop_name 0x01
#define XOPf_xop_desc 0x02
#define XOPf_xop_class 0x04
#define XOPf_xop_peep 0x08


typedef enum {
    XOPe_xop_ptr = 0,
    XOPe_xop_name = 0x01,
    XOPe_xop_desc = 0x02,
    XOPe_xop_class = 0x04,
    XOPe_xop_peep = 0x08
} xop_flags_enum;

#define XOPd_xop_name PL_op_name[OP_CUSTOM]
#define XOPd_xop_desc PL_op_desc[OP_CUSTOM]
#define XOPd_xop_class OA_BASEOP
#define XOPd_xop_peep ((Perl_cpeep_t)0)

#define XopENTRY_set(xop,which,to) STMT_START { (xop)->which = (to); (xop)->xop_flags |= XOPf_ ## which; } STMT_END





#define XopENTRY(xop,which) ((XopFLAGS(xop) & XOPf_ ## which) ? (xop)->which : XOPd_ ## which)


#define XopENTRYCUSTOM(o,which) (Perl_custom_op_get_field(aTHX_ o, XOPe_ ## which).which)


#define XopDISABLE(xop,which) ((xop)->xop_flags &= ~XOPf_ ## which)
#define XopENABLE(xop,which) STMT_START { (xop)->xop_flags |= XOPf_ ## which; assert(XopENTRY(xop, which)); } STMT_END





#define Perl_custom_op_xop(x) (Perl_custom_op_get_field(x, XOPe_xop_ptr).xop_ptr)
# 1016 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define OP_NAME(o) ((o)->op_type == OP_CUSTOM ? XopENTRYCUSTOM(o, xop_name) : PL_op_name[(o)->op_type])


#define OP_DESC(o) ((o)->op_type == OP_CUSTOM ? XopENTRYCUSTOM(o, xop_desc) : PL_op_desc[(o)->op_type])


#define OP_CLASS(o) ((o)->op_type == OP_CUSTOM ? XopENTRYCUSTOM(o, xop_class) : (PL_opargs[(o)->op_type] & OA_CLASS_MASK))



#define OP_TYPE_IS(o,type) ((o) && (o)->op_type == (type))
#define OP_TYPE_IS_NN(o,type) ((o)->op_type == (type))
#define OP_TYPE_ISNT(o,type) ((o) && (o)->op_type != (type))
#define OP_TYPE_ISNT_NN(o,type) ((o)->op_type != (type))

#define OP_TYPE_IS_OR_WAS_NN(o,type) ( ((o)->op_type == OP_NULL ? (o)->op_targ : (o)->op_type) == (type) )





#define OP_TYPE_IS_OR_WAS(o,type) ( (o) && OP_TYPE_IS_OR_WAS_NN(o, type) )


#define OP_TYPE_ISNT_AND_WASNT_NN(o,type) ( ((o)->op_type == OP_NULL ? (o)->op_targ : (o)->op_type) != (type) )





#define OP_TYPE_ISNT_AND_WASNT(o,type) ( (o) && OP_TYPE_ISNT_AND_WASNT_NN(o, type) )



#define OP_IS_STAT(op) (OP_IS_FILETEST(op) || (op) == OP_LSTAT || (op) == OP_STAT)

#define OpHAS_SIBLING(o) (cBOOL((o)->op_moresib))
#define OpSIBLING(o) (0 + (o)->op_moresib ? (o)->op_sibparent : NULL)
#define OpMORESIB_set(o,sib) ((o)->op_moresib = 1, (o)->op_sibparent = (sib))
#define OpLASTSIB_set(o,parent) ((o)->op_moresib = 0, (o)->op_sibparent = (parent))

#define OpMAYBESIB_set(o,sib,parent) ((o)->op_sibparent = ((o)->op_moresib = cBOOL(sib)) ? (sib) : (parent))




#define OP_SIBLING(o) OpSIBLING(o)


#define newATTRSUB(f,o,p,a,b) Perl_newATTRSUB_x(aTHX_ f, o, p, a, b, FALSE)
#define newSUB(f,o,p,b) newATTRSUB((f), (o), (p), NULL, (b))


#define OP_CHECK_MUTEX_INIT MUTEX_INIT(&PL_check_mutex)
#define OP_CHECK_MUTEX_LOCK MUTEX_LOCK(&PL_check_mutex)
#define OP_CHECK_MUTEX_UNLOCK MUTEX_UNLOCK(&PL_check_mutex)
#define OP_CHECK_MUTEX_TERM MUTEX_DESTROY(&PL_check_mutex)
# 1086 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
#define MDEREF_reload 0

#define MDEREF_AV_pop_rv2av_aelem 1
#define MDEREF_AV_gvsv_vivify_rv2av_aelem 2
#define MDEREF_AV_padsv_vivify_rv2av_aelem 3
#define MDEREF_AV_vivify_rv2av_aelem 4
#define MDEREF_AV_padav_aelem 5
#define MDEREF_AV_gvav_aelem 6

#define MDEREF_HV_pop_rv2hv_helem 8
#define MDEREF_HV_gvsv_vivify_rv2hv_helem 9
#define MDEREF_HV_padsv_vivify_rv2hv_helem 10
#define MDEREF_HV_vivify_rv2hv_helem 11
#define MDEREF_HV_padhv_helem 12
#define MDEREF_HV_gvhv_helem 13

#define MDEREF_ACTION_MASK 0xf



#define MDEREF_INDEX_none 0x00
#define MDEREF_INDEX_const 0x10
#define MDEREF_INDEX_padsv 0x20
#define MDEREF_INDEX_gvsv 0x30

#define MDEREF_INDEX_MASK 0x30



#define MDEREF_FLAG_last 0x40

#define MDEREF_MASK 0x7F
#define MDEREF_SHIFT 7
# 1140 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/op.h" 3 4
struct op_argcheck_aux {
    UV params;
    UV opt_params;
    char slurpy;
};
# 4085 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 1 3 4
# 19 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define PERL_HASH_RANDOMIZE_KEYS 1





#define USE_PERL_PERTURB_KEYS 1
#define PL_HASH_RAND_BITS_ENABLED PL_hash_rand_bits_enabled

#define PERL_HASH_ITER_BUCKET(iter) (((iter)->xhv_riter) ^ ((iter)->xhv_rand))



struct he {



    HE *hent_next;
    HEK *hent_hek;
    union {
        SV *hent_val;
        size_t hent_refcount;
    } he_valu;
};


struct hek {
    U32 hek_hash;
    I32 hek_len;





     char hek_key[1];



};

struct shared_he {
    struct he shared_he_he;
    struct hek shared_he_hek;
};






struct mro_alg {
    AV *(*resolve)(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, U32 level);
    const char *name;
    U16 length;
    U16 kflags;
    U32 hash;
};

struct mro_meta {

    HV *mro_linear_all;



    SV *mro_linear_current;
    HV *mro_nextmethod;
    U32 cache_gen;
    U32 pkg_gen;
    const struct mro_alg *mro_which;
    HV *isa;
    HV *super;
    CV *destroy;
    U32 destroy_gen;
};

#define MRO_GET_PRIVATE_DATA(smeta,which) (((smeta)->mro_which && (which) == (smeta)->mro_which) ? (smeta)->mro_linear_current : Perl_mro_get_private_data(aTHX_ (smeta), (which)))
# 103 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
union _xhvnameu {
    HEK *xhvnameu_name;
    HEK **xhvnameu_names;
};

struct xpvhv_aux {
    union _xhvnameu xhv_name_u;
    AV *xhv_backreferences;
    HE *xhv_eiter;
    I32 xhv_riter;







    I32 xhv_name_count;
    struct mro_meta *xhv_mro_meta;

    U32 xhv_rand;
    U32 xhv_last_rand;


    U32 xhv_aux_flags;
};

#define HvAUXf_SCAN_STASH 0x1
#define HvAUXf_NO_DEREF 0x2



struct xpvhv {
    HV* xmg_stash;
    union _xmgu xmg_u;
    STRLEN xhv_keys;
    STRLEN xhv_max;
};
# 243 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define PERL_HASH_DEFAULT_HvMAX 7
# 255 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define PERL_HV_ALLOC_AUX_SIZE (1 << 9)


#define HEf_SVKEY -2


#define Nullhv Null(HV*)

#define HvARRAY(hv) ((hv)->sv_u.svu_hash)
# 274 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define HvFILL(hv) Perl_hv_fill(aTHX_ MUTABLE_HV(hv))
#define HvMAX(hv) ((XPVHV*) SvANY(hv))->xhv_max


#define HvAUX(hv) ((struct xpvhv_aux*)&(HvARRAY(hv)[HvMAX(hv)+1]))
#define HvRITER(hv) (*Perl_hv_riter_p(aTHX_ MUTABLE_HV(hv)))
#define HvEITER(hv) (*Perl_hv_eiter_p(aTHX_ MUTABLE_HV(hv)))
#define HvRITER_set(hv,r) Perl_hv_riter_set(aTHX_ MUTABLE_HV(hv), r)
#define HvEITER_set(hv,e) Perl_hv_eiter_set(aTHX_ MUTABLE_HV(hv), e)
#define HvRITER_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_riter : -1)
#define HvEITER_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_eiter : NULL)
#define HvRAND_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_rand : 0)
#define HvLASTRAND_get(hv) (SvOOK(hv) ? HvAUX(hv)->xhv_last_rand : 0)

#define HvNAME(hv) HvNAME_get(hv)
#define HvNAMELEN(hv) HvNAMELEN_get(hv)
#define HvENAME(hv) HvENAME_get(hv)
#define HvENAMELEN(hv) HvENAMELEN_get(hv)



#define HvMROMETA(hv) (HvAUX(hv)->xhv_mro_meta ? HvAUX(hv)->xhv_mro_meta : Perl_mro_meta_init(aTHX_ hv))



#define HvNAME_HEK_NN(hv) ( HvAUX(hv)->xhv_name_count ? *HvAUX(hv)->xhv_name_u.xhvnameu_names : HvAUX(hv)->xhv_name_u.xhvnameu_name )






#define HvNAME_HEK(hv) (SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name ? HvNAME_HEK_NN(hv) : NULL)

#define HvNAME_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) ? HEK_KEY(HvNAME_HEK_NN(hv)) : NULL)


#define HvNAMELEN_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) ? HEK_LEN(HvNAME_HEK_NN(hv)) : 0)


#define HvNAMEUTF8(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvNAME_HEK_NN(hv)) ? HEK_UTF8(HvNAME_HEK_NN(hv)) : 0)


#define HvENAME_HEK_NN(hv) ( HvAUX(hv)->xhv_name_count > 0 ? HvAUX(hv)->xhv_name_u.xhvnameu_names[0] : HvAUX(hv)->xhv_name_count < -1 ? HvAUX(hv)->xhv_name_u.xhvnameu_names[1] : HvAUX(hv)->xhv_name_count == -1 ? NULL : HvAUX(hv)->xhv_name_u.xhvnameu_name )






#define HvENAME_HEK(hv) (SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name ? HvENAME_HEK_NN(hv) : NULL)

#define HvENAME_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) ? HEK_KEY(HvENAME_HEK_NN(hv)) : NULL)


#define HvENAMELEN_get(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) ? HEK_LEN(HvENAME_HEK_NN(hv)) : 0)


#define HvENAMEUTF8(hv) ((SvOOK(hv) && HvAUX(hv)->xhv_name_u.xhvnameu_name && HvAUX(hv)->xhv_name_count != -1) ? HEK_UTF8(HvENAME_HEK_NN(hv)) : 0)




#define XHvTOTALKEYS(xhv) ((xhv)->xhv_keys)






#define HvKEYS(hv) HvUSEDKEYS(hv)
#define HvUSEDKEYS(hv) (HvTOTALKEYS(hv) - HvPLACEHOLDERS_get(hv))
#define HvTOTALKEYS(hv) XHvTOTALKEYS((XPVHV*) SvANY(hv))
#define HvPLACEHOLDERS(hv) (*Perl_hv_placeholders_p(aTHX_ MUTABLE_HV(hv)))
#define HvPLACEHOLDERS_get(hv) (SvMAGIC(hv) ? Perl_hv_placeholders_get(aTHX_ (const HV *)hv) : 0)
#define HvPLACEHOLDERS_set(hv,p) Perl_hv_placeholders_set(aTHX_ MUTABLE_HV(hv), p)

#define HvSHAREKEYS(hv) (SvFLAGS(hv) & SVphv_SHAREKEYS)
#define HvSHAREKEYS_on(hv) (SvFLAGS(hv) |= SVphv_SHAREKEYS)
#define HvSHAREKEYS_off(hv) (SvFLAGS(hv) &= ~SVphv_SHAREKEYS)
# 363 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define HvHASKFLAGS(hv) (SvFLAGS(hv) & SVphv_HASKFLAGS)
#define HvHASKFLAGS_on(hv) (SvFLAGS(hv) |= SVphv_HASKFLAGS)
#define HvHASKFLAGS_off(hv) (SvFLAGS(hv) &= ~SVphv_HASKFLAGS)

#define HvLAZYDEL(hv) (SvFLAGS(hv) & SVphv_LAZYDEL)
#define HvLAZYDEL_on(hv) (SvFLAGS(hv) |= SVphv_LAZYDEL)
#define HvLAZYDEL_off(hv) (SvFLAGS(hv) &= ~SVphv_LAZYDEL)


#define Nullhe Null(HE*)

#define HeNEXT(he) (he)->hent_next
#define HeKEY_hek(he) (he)->hent_hek
#define HeKEY(he) HEK_KEY(HeKEY_hek(he))
#define HeKEY_sv(he) (*(SV**)HeKEY(he))
#define HeKLEN(he) HEK_LEN(HeKEY_hek(he))
#define HeKUTF8(he) HEK_UTF8(HeKEY_hek(he))
#define HeKWASUTF8(he) HEK_WASUTF8(HeKEY_hek(he))
#define HeKLEN_UTF8(he) (HeKUTF8(he) ? -HeKLEN(he) : HeKLEN(he))
#define HeKFLAGS(he) HEK_FLAGS(HeKEY_hek(he))
#define HeVAL(he) (he)->he_valu.hent_val
#define HeHASH(he) HEK_HASH(HeKEY_hek(he))
#define HePV(he,lp) ((HeKLEN(he) == HEf_SVKEY) ? SvPV(HeKEY_sv(he),lp) : ((lp = HeKLEN(he)), HeKEY(he)))


#define HeUTF8(he) ((HeKLEN(he) == HEf_SVKEY) ? SvUTF8(HeKEY_sv(he)) : (U32)HeKUTF8(he))



#define HeSVKEY(he) ((HeKEY(he) && HeKLEN(he) == HEf_SVKEY) ? HeKEY_sv(he) : NULL)



#define HeSVKEY_force(he) (HeKEY(he) ? ((HeKLEN(he) == HEf_SVKEY) ? HeKEY_sv(he) : newSVpvn_flags(HeKEY(he), HeKLEN(he), SVs_TEMP | ( HeKUTF8(he) ? SVf_UTF8 : 0 ))) : &PL_sv_undef)







#define HeSVKEY_set(he,sv) ((HeKLEN(he) = HEf_SVKEY), (HeKEY_sv(he) = sv))


#define Nullhek Null(HEK*)

#define HEK_BASESIZE STRUCT_OFFSET(HEK, hek_key[0])
#define HEK_HASH(hek) (hek)->hek_hash
#define HEK_LEN(hek) (hek)->hek_len
#define HEK_KEY(hek) (hek)->hek_key
#define HEK_FLAGS(hek) (*((unsigned char *)(HEK_KEY(hek))+HEK_LEN(hek)+1))

#define HVhek_UTF8 0x01
#define HVhek_WASUTF8 0x02
#define HVhek_UNSHARED 0x08

#define HVhek_FREEKEY 0x100
#define HVhek_PLACEHOLD 0x200

#define HVhek_KEYCANONICAL 0x400


#define HVhek_MASK 0xFF

#define HVhek_ENABLEHVKFLAGS (HVhek_MASK & ~(HVhek_UNSHARED))

#define HEK_UTF8(hek) (HEK_FLAGS(hek) & HVhek_UTF8)
#define HEK_UTF8_on(hek) (HEK_FLAGS(hek) |= HVhek_UTF8)
#define HEK_UTF8_off(hek) (HEK_FLAGS(hek) &= ~HVhek_UTF8)
#define HEK_WASUTF8(hek) (HEK_FLAGS(hek) & HVhek_WASUTF8)
#define HEK_WASUTF8_on(hek) (HEK_FLAGS(hek) |= HVhek_WASUTF8)
#define HEK_WASUTF8_off(hek) (HEK_FLAGS(hek) &= ~HVhek_WASUTF8)






#define PERL_HV_ARRAY_ALLOC_BYTES(size) ((size) * sizeof(HE*))
# 451 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define HV_ITERNEXT_WANTPLACEHOLDERS 0x01

#define hv_iternext(hv) hv_iternext_flags(hv, 0)
#define hv_magic(hv,gv,how) sv_magic(MUTABLE_SV(hv), MUTABLE_SV(gv), how, NULL, 0)
#define hv_undef(hv) Perl_hv_undef_flags(aTHX_ hv, 0)

#define Perl_sharepvn(pv,len,hash) HEK_KEY(share_hek(pv, len, hash))
#define sharepvn(pv,len,hash) Perl_sharepvn(pv, len, hash)

#define share_hek_hek(hek) (++(((struct shared_he *)(((char *)hek) - STRUCT_OFFSET(struct shared_he, shared_he_hek))) ->shared_he_he.he_valu.hent_refcount), hek)






#define hv_store_ent(hv,keysv,val,hash) ((HE *) hv_common((hv), (keysv), NULL, 0, 0, HV_FETCH_ISSTORE, (val), (hash)))



#define hv_exists_ent(hv,keysv,hash) cBOOL(hv_common((hv), (keysv), NULL, 0, 0, HV_FETCH_ISEXISTS, 0, (hash)))

#define hv_fetch_ent(hv,keysv,lval,hash) ((HE *) hv_common((hv), (keysv), NULL, 0, 0, ((lval) ? HV_FETCH_LVALUE : 0), NULL, (hash)))


#define hv_delete_ent(hv,key,flags,hash) (MUTABLE_SV(hv_common((hv), (key), NULL, 0, 0, (flags) | HV_DELETE, NULL, (hash))))



#define hv_store_flags(hv,key,klen,val,hash,flags) ((SV**) hv_common((hv), NULL, (key), (klen), (flags), (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val), (hash)))




#define hv_store(hv,key,klen,val,hash) ((SV**) hv_common_key_len((hv), (key), (klen), (HV_FETCH_ISSTORE|HV_FETCH_JUST_SV), (val), (hash)))






#define hv_exists(hv,key,klen) cBOOL(hv_common_key_len((hv), (key), (klen), HV_FETCH_ISEXISTS, NULL, 0))


#define hv_fetch(hv,key,klen,lval) ((SV**) hv_common_key_len((hv), (key), (klen), (lval) ? (HV_FETCH_JUST_SV | HV_FETCH_LVALUE) : HV_FETCH_JUST_SV, NULL, 0))




#define hv_delete(hv,key,klen,flags) (MUTABLE_SV(hv_common_key_len((hv), (key), (klen), (flags) | HV_DELETE, NULL, 0)))






#define hv_existss(hv,key) hv_exists((hv), ("" key ""), (sizeof(key)-1))


#define hv_fetchs(hv,key,lval) hv_fetch((hv), ("" key ""), (sizeof(key)-1), (lval))


#define hv_deletes(hv,key,flags) hv_delete((hv), ("" key ""), (sizeof(key)-1), (flags))


#define hv_name_sets(hv,name,flags) hv_name_set((hv),("" name ""),(sizeof(name)-1), flags)


#define hv_stores(hv,key,val) hv_store((hv), ("" key ""), (sizeof(key)-1), (val), 0)
# 544 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
struct refcounted_he;


#define REFCOUNTED_HE_KEY_UTF8 0x00000001
#define REFCOUNTED_HE_EXISTS 0x00000002
# 626 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define HINTS_REFCNT_INIT MUTEX_INIT(&PL_hints_mutex)
#define HINTS_REFCNT_TERM MUTEX_DESTROY(&PL_hints_mutex)
# 636 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define HV_DISABLE_UVAR_XKEY 0x01


#define HV_FETCH_ISSTORE 0x04
#define HV_FETCH_ISEXISTS 0x08
#define HV_FETCH_LVALUE 0x10
#define HV_FETCH_JUST_SV 0x20
#define HV_DELETE 0x40
#define HV_FETCH_EMPTY_HE 0x80


#define HV_NAME_SETALL 0x02
# 657 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 3 4
#define newHV() MUTABLE_HV(newSV_type(SVt_PVHV))

# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 1 3 4
# 10 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 3 4
#define PERL_SEEN_HV_FUNC_H_ 
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_macro.h" 1 3 4

#define PERL_SEEN_HV_MACRO_H_ 


#define CAN64BITHASH 
# 33 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_macro.h" 3 4
#define _shifted_octet(type,ptr,idx,shift) (((type)(((U8*)(ptr))[(idx)]))<<(shift))





#define U8TO16_LE(ptr) (_shifted_octet(U16,(ptr),0, 0)| _shifted_octet(U16,(ptr),1, 8))


#define U8TO32_LE(ptr) (_shifted_octet(U32,(ptr),0, 0)| _shifted_octet(U32,(ptr),1, 8)| _shifted_octet(U32,(ptr),2,16)| _shifted_octet(U32,(ptr),3,24))




#define U8TO64_LE(ptr) (_shifted_octet(U64,(ptr),0, 0)| _shifted_octet(U64,(ptr),1, 8)| _shifted_octet(U64,(ptr),2,16)| _shifted_octet(U64,(ptr),3,24)| _shifted_octet(U64,(ptr),4,32)| _shifted_octet(U64,(ptr),5,40)| _shifted_octet(U64,(ptr),6,48)| _shifted_octet(U64,(ptr),7,56))
# 67 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_macro.h" 3 4
#define ROTL32(x,r) (((U32)(x) << (r)) | ((U32)(x) >> (32 - (r))))
#define ROTR32(x,r) (((U32)(x) << (32 - (r))) | ((U32)(x) >> (r)))
#define ROTL64(x,r) ( ( (U64)(x) << (r) ) | ( (U64)(x) >> ( 64 - (r) ) ) )
#define ROTR64(x,r) ( ( (U64)(x) << ( 64 - (r) ) ) | ( (U64)(x) >> (r) ) )




#define ROTL_UV(x,r) ROTL64(x,r)
#define ROTR_UV(x,r) ROTL64(x,r)





#define CAN64BITHASH 
# 12 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 2 3 4







#define PERL_HASH_FUNC_SIPHASH13 






#define PERL_HASH_USE_SBOX32_ALSO 1



#define SBOX32_MAX_LEN 24



# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 1 3 4

#define DEBUG_SBOX32_HASH 0

# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 1 3 4

#define DEBUG_ZAPHOD32_HASH 0
# 20 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 3 4
#define ZAPHOD32_WARN6(pat,v0,v1,v2,v3,v4,v5) 
#define ZAPHOD32_WARN5(pat,v0,v1,v2,v3,v4) 
#define ZAPHOD32_WARN4(pat,v0,v1,v2,v3) 
#define ZAPHOD32_WARN3(pat,v0,v1,v2) 
#define NOTE3(pat,v0,v1,v2) 
#define ZAPHOD32_WARN2(pat,v0,v1) 
# 66 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 3 4
#define ZAPHOD32_STATIC_INLINE PERL_STATIC_INLINE
# 80 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 3 4
#define ZAPHOD32_SCRAMBLE32(v,prime) STMT_START { v ^= (v>>9); v ^= (v<<21); v ^= (v>>16); v *= prime; v ^= (v>>17); v ^= (v<<15); v ^= (v>>23); } STMT_END
# 90 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 3 4
#define ZAPHOD32_FINALIZE(v0,v1,v2) STMT_START { ZAPHOD32_WARN3("v0=%08x v1=%08x v2=%08x - ZAPHOD32 FINALIZE\n", (unsigned int)v0, (unsigned int)v1, (unsigned int)v2); v2 += v0; v1 -= v2; v1 = ROTL32(v1, 6); v2 ^= v1; v2 = ROTL32(v2, 28); v1 ^= v2; v0 += v1; v1 = ROTL32(v1, 24); v2 += v1; v2 = ROTL32(v2, 18) + v1; v0 ^= v2; v0 = ROTL32(v0, 20); v2 += v0; v1 ^= v2; v0 += v1; v0 = ROTL32(v0, 5); v2 += v0; v2 = ROTL32(v2, 22); v0 -= v1; v1 -= v2; v1 = ROTL32(v1, 17); } STMT_END
# 116 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 3 4
#define ZAPHOD32_MIX(v0,v1,v2,text) STMT_START { ZAPHOD32_WARN4("v0=%08x v1=%08x v2=%08x - ZAPHOD32 %s MIX\n", (unsigned int)v0,(unsigned int)v1,(unsigned int)v2, text ); v0 = ROTL32(v0,16) - v2; v1 = ROTR32(v1,13) ^ v2; v2 = ROTL32(v2,17) + v1; v0 = ROTR32(v0, 2) + v1; v1 = ROTR32(v1,17) - v0; v2 = ROTR32(v2, 7) ^ v0; } STMT_END
# 128 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/zaphod32_hash.h" 3 4
static __inline__
void zaphod32_seed_state (
    const U8 *seed_ch,
    U8 *state_ch
) {
    const U32 *seed= (const U32 *)seed_ch;
    U32 *state= (U32 *)state_ch;







    state[0]= seed[0] ^ 0x43f6a888;
    state[1]= seed[1] ^ 0x5a308d31;
    state[2]= seed[2] ^ 0x3198a2e0;
    if (!state[0]) state[0] = 1;
    if (!state[1]) state[1] = 2;
    if (!state[2]) state[2] = 4;


    (void)( { state[0] ^= (state[0]>>9); state[0] ^= (state[0]<<21); state[0] ^= (state[0]>>16); state[0] *= 0x9fade23b; state[0] ^= (state[0]>>17); state[0] ^= (state[0]<<15); state[0] ^= (state[0]>>23); } );
    (void)( { state[1] ^= (state[1]>>9); state[1] ^= (state[1]<<21); state[1] ^= (state[1]>>16); state[1] *= 0xaa6f908d; state[1] ^= (state[1]>>17); state[1] ^= (state[1]<<15); state[1] ^= (state[1]>>23); } );
    (void)( { state[2] ^= (state[2]>>9); state[2] ^= (state[2]<<21); state[2] ^= (state[2]>>16); state[2] *= 0xcdf6b72d; state[2] ^= (state[2]>>17); state[2] ^= (state[2]<<15); state[2] ^= (state[2]>>23); } );



    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );


    (void)( { state[0] ^= (state[0]>>9); state[0] ^= (state[0]<<21); state[0] ^= (state[0]>>16); state[0] *= 0xc95d22a9; state[0] ^= (state[0]>>17); state[0] ^= (state[0]<<15); state[0] ^= (state[0]>>23); } );
    (void)( { state[1] ^= (state[1]>>9); state[1] ^= (state[1]<<21); state[1] ^= (state[1]>>16); state[1] *= 0x8497242b; state[1] ^= (state[1]>>17); state[1] ^= (state[1]<<15); state[1] ^= (state[1]>>23); } );
    (void)( { state[2] ^= (state[2]>>9); state[2] ^= (state[2]<<21); state[2] ^= (state[2]>>16); state[2] *= 0x9c5cc4e9; state[2] ^= (state[2]>>17); state[2] ^= (state[2]<<15); state[2] ^= (state[2]>>23); } );


    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );
    (void)( { ; state[0] = (((U32)(state[0]) << (16)) | ((U32)(state[0]) >> (32 - (16)))) - state[2]; state[1] = (((U32)(state[1]) << (32 - (13))) | ((U32)(state[1]) >> (13))) ^ state[2]; state[2] = (((U32)(state[2]) << (17)) | ((U32)(state[2]) >> (32 - (17)))) + state[1]; state[0] = (((U32)(state[0]) << (32 - (2))) | ((U32)(state[0]) >> (2))) + state[1]; state[1] = (((U32)(state[1]) << (32 - (17))) | ((U32)(state[1]) >> (17))) - state[0]; state[2] = (((U32)(state[2]) << (32 - (7))) | ((U32)(state[2]) >> (7))) ^ state[0]; } );

}

static __inline__
U32 zaphod32_hash_with_state(
    const U8 *state_ch,
    const U8 *key,
    const STRLEN key_len
) {
    U32 *state= (U32 *)state_ch;
    const U8 *end;
    STRLEN len = key_len;
    U32 v0= state[0];
    U32 v1= state[1];
    U32 v2= state[2] ^ (0xC41A7AB1 * ((U32)key_len + 1));

   

                                                          ;
    {
        switch (len) {
            default: goto zaphod32_read8;
            case 12: v2 += (U32)key[11] << 24;
            case 11: v2 += (U32)key[10] << 16;
            case 10: v2 += (U32)((((U16)(((U8*)((key+8)))[(0)]))<<(0))| (((U16)(((U8*)((key+8)))[(1)]))<<(8)));
                     v1 -= ((((U32)(((U8*)((key+4)))[(0)]))<<(0))| (((U32)(((U8*)((key+4)))[(1)]))<<(8))| (((U32)(((U8*)((key+4)))[(2)]))<<(16))| (((U32)(((U8*)((key+4)))[(3)]))<<(24)));
                     v0 += ((((U32)(((U8*)((key+0)))[(0)]))<<(0))| (((U32)(((U8*)((key+0)))[(1)]))<<(8))| (((U32)(((U8*)((key+0)))[(2)]))<<(16))| (((U32)(((U8*)((key+0)))[(3)]))<<(24)));
                     goto zaphod32_finalize;
            case 9: v2 += (U32)key[8];
            case 8: v1 -= ((((U32)(((U8*)((key+4)))[(0)]))<<(0))| (((U32)(((U8*)((key+4)))[(1)]))<<(8))| (((U32)(((U8*)((key+4)))[(2)]))<<(16))| (((U32)(((U8*)((key+4)))[(3)]))<<(24)));
                    v0 += ((((U32)(((U8*)((key+0)))[(0)]))<<(0))| (((U32)(((U8*)((key+0)))[(1)]))<<(8))| (((U32)(((U8*)((key+0)))[(2)]))<<(16))| (((U32)(((U8*)((key+0)))[(3)]))<<(24)));
                    goto zaphod32_finalize;
            case 7: v2 += (U32)key[6];
            case 6: v0 += (U32)((((U16)(((U8*)((key+4)))[(0)]))<<(0))| (((U16)(((U8*)((key+4)))[(1)]))<<(8)));
                    v1 -= ((((U32)(((U8*)((key+0)))[(0)]))<<(0))| (((U32)(((U8*)((key+0)))[(1)]))<<(8))| (((U32)(((U8*)((key+0)))[(2)]))<<(16))| (((U32)(((U8*)((key+0)))[(3)]))<<(24)));
                    goto zaphod32_finalize;
            case 5: v0 += (U32)key[4];
            case 4: v1 -= ((((U32)(((U8*)((key+0)))[(0)]))<<(0))| (((U32)(((U8*)((key+0)))[(1)]))<<(8))| (((U32)(((U8*)((key+0)))[(2)]))<<(16))| (((U32)(((U8*)((key+0)))[(3)]))<<(24)));
                    goto zaphod32_finalize;
            case 3: v2 += (U32)key[2];
            case 2: v0 += (U32)((((U16)(((U8*)((key)))[(0)]))<<(0))| (((U16)(((U8*)((key)))[(1)]))<<(8)));
                    break;
            case 1: v0 += (U32)key[0];
                    break;
            case 0: v2 ^= 0xFF;
                    break;

        }
        v0 -= v2;
        v2 = (((U32)(v2) << (8)) | ((U32)(v2) >> (32 - (8)))) ^ v0;
        v0 = (((U32)(v0) << (32 - (16))) | ((U32)(v0) >> (16))) + v2;
        v2 += v0;
        v0 += v0 >> 9;
        v0 += v2;
        v2 ^= v0;
        v2 += v2 << 4;
        v0 -= v2;
        v2 = (((U32)(v2) << (32 - (8))) | ((U32)(v2) >> (8))) ^ v0;
        v0 = (((U32)(v0) << (16)) | ((U32)(v0) >> (32 - (16)))) ^ v2;
        v2 = (((U32)(v2) << (10)) | ((U32)(v2) >> (32 - (10)))) + v0;
        v0 = (((U32)(v0) << (32 - (30))) | ((U32)(v0) >> (30))) + v2;
        v2 = (((U32)(v2) << (32 - (12))) | ((U32)(v2) >> (12)));
        return v0 ^ v2;
    }




    {
zaphod32_read8:
        len = key_len & 0x7;
        end = key + key_len - len;
        do {
            v1 -= ((((U32)(((U8*)((key+0)))[(0)]))<<(0))| (((U32)(((U8*)((key+0)))[(1)]))<<(8))| (((U32)(((U8*)((key+0)))[(2)]))<<(16))| (((U32)(((U8*)((key+0)))[(3)]))<<(24)));
            v0 += ((((U32)(((U8*)((key+4)))[(0)]))<<(0))| (((U32)(((U8*)((key+4)))[(1)]))<<(8))| (((U32)(((U8*)((key+4)))[(2)]))<<(16))| (((U32)(((U8*)((key+4)))[(3)]))<<(24)));
            (void)( { ; v0 = (((U32)(v0) << (16)) | ((U32)(v0) >> (32 - (16)))) - v2; v1 = (((U32)(v1) << (32 - (13))) | ((U32)(v1) >> (13))) ^ v2; v2 = (((U32)(v2) << (17)) | ((U32)(v2) >> (32 - (17)))) + v1; v0 = (((U32)(v0) << (32 - (2))) | ((U32)(v0) >> (2))) + v1; v1 = (((U32)(v1) << (32 - (17))) | ((U32)(v1) >> (17))) - v0; v2 = (((U32)(v2) << (32 - (7))) | ((U32)(v2) >> (7))) ^ v0; } );
            key += 8;
        } while ( key < end );
    }

    if ( len >= 4 ) {
        v1 -= ((((U32)(((U8*)((key)))[(0)]))<<(0))| (((U32)(((U8*)((key)))[(1)]))<<(8))| (((U32)(((U8*)((key)))[(2)]))<<(16))| (((U32)(((U8*)((key)))[(3)]))<<(24)));
        key += 4;
    }

    v0 += (U32)(key_len) << 24;
    switch (len & 0x3) {
        case 3: v2 += (U32)key[2];
        case 2: v0 += (U32)((((U16)(((U8*)((key)))[(0)]))<<(0))| (((U16)(((U8*)((key)))[(1)]))<<(8)));
                break;
        case 1: v0 += (U32)key[0];
                break;
        case 0: v2 ^= 0xFF;
                break;
    }
zaphod32_finalize:
    (void)( { ; v2 += v0; v1 -= v2; v1 = (((U32)(v1) << (6)) | ((U32)(v1) >> (32 - (6)))); v2 ^= v1; v2 = (((U32)(v2) << (28)) | ((U32)(v2) >> (32 - (28)))); v1 ^= v2; v0 += v1; v1 = (((U32)(v1) << (24)) | ((U32)(v1) >> (32 - (24)))); v2 += v1; v2 = (((U32)(v2) << (18)) | ((U32)(v2) >> (32 - (18)))) + v1; v0 ^= v2; v0 = (((U32)(v0) << (20)) | ((U32)(v0) >> (32 - (20)))); v2 += v0; v1 ^= v2; v0 += v1; v0 = (((U32)(v0) << (5)) | ((U32)(v0) >> (32 - (5)))); v2 += v0; v2 = (((U32)(v2) << (22)) | ((U32)(v2) >> (32 - (22)))); v0 -= v1; v1 -= v2; v1 = (((U32)(v1) << (17)) | ((U32)(v1) >> (32 - (17)))); } );

   

                                       ;

    return v0 ^ v1 ^ v2;
}

static __inline__ U32 zaphod32_hash(
    const U8 *seed_ch,
    const U8 *key,
    const STRLEN key_len
) {
    U32 state[3];
    zaphod32_seed_state(seed_ch,(U8*)state);
    return zaphod32_hash_with_state((U8*)state,key,key_len);
}
# 5 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 2 3 4
# 22 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 3 4
#define SBOX32_WARN6(pat,v0,v1,v2,v3,v4,v5) 
#define SBOX32_WARN5(pat,v0,v1,v2,v3,v4) 
#define SBOX32_WARN4(pat,v0,v1,v2,v3) 
#define SBOX32_WARN3(pat,v0,v1,v2) 
#define NOTE3(pat,v0,v1,v2) 
#define SBOX32_WARN2(pat,v0,v1) 
# 51 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 3 4
#define SBOX32_STATIC_INLINE PERL_STATIC_INLINE
# 80 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 3 4
#define SBOX32_STATE_WORDS (1 + (SBOX32_MAX_LEN * 256))
#define SBOX32_STATE_BYTES (SBOX32_STATE_WORDS * sizeof(U32))
#define SBOX32_STATE_BITS (SBOX32_STATE_BYTES * 8)


#define SBOX32_MIX4(v0,v1,v2,v3,text) STMT_START { SBOX32_WARN5("v0=%08x v1=%08x v2=%08x v3=%08x - SBOX32_MIX4 %s\n", (unsigned int)v0, (unsigned int)v1, (unsigned int)v2, (unsigned int)v3, text); v0 = ROTL32(v0,13) - v3; v1 ^= v2; v3 = ROTL32(v3, 9) + v1; v2 ^= v0; v0 = ROTL32(v0,14) ^ v3; v1 = ROTL32(v1,25) - v2; v3 ^= v1; v2 = ROTL32(v2, 4) - v0; } STMT_END
# 99 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 3 4
#define SBOX32_MIX3(v0,v1,v2,text) STMT_START { SBOX32_WARN4("v0=%08x v1=%08x v2=%08x - SBOX32_MIX3 %s\n", (unsigned int)v0,(unsigned int)v1,(unsigned int)v2, text ); v0 = ROTL32(v0,16) - v2; v1 = ROTR32(v1,13) ^ v2; v2 = ROTL32(v2,17) + v1; v0 = ROTR32(v0, 2) + v1; v1 = ROTR32(v1,17) - v0; v2 = ROTR32(v2, 7) ^ v0; } STMT_END
# 115 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 3 4
#define case_256_SBOX32(hash,state,key) 




#define case_255_SBOX32(hash,state,key) 




#define case_254_SBOX32(hash,state,key) 




#define case_253_SBOX32(hash,state,key) 




#define case_252_SBOX32(hash,state,key) 




#define case_251_SBOX32(hash,state,key) 




#define case_250_SBOX32(hash,state,key) 




#define case_249_SBOX32(hash,state,key) 




#define case_248_SBOX32(hash,state,key) 




#define case_247_SBOX32(hash,state,key) 




#define case_246_SBOX32(hash,state,key) 




#define case_245_SBOX32(hash,state,key) 




#define case_244_SBOX32(hash,state,key) 




#define case_243_SBOX32(hash,state,key) 




#define case_242_SBOX32(hash,state,key) 




#define case_241_SBOX32(hash,state,key) 




#define case_240_SBOX32(hash,state,key) 




#define case_239_SBOX32(hash,state,key) 




#define case_238_SBOX32(hash,state,key) 




#define case_237_SBOX32(hash,state,key) 




#define case_236_SBOX32(hash,state,key) 




#define case_235_SBOX32(hash,state,key) 




#define case_234_SBOX32(hash,state,key) 




#define case_233_SBOX32(hash,state,key) 




#define case_232_SBOX32(hash,state,key) 




#define case_231_SBOX32(hash,state,key) 




#define case_230_SBOX32(hash,state,key) 




#define case_229_SBOX32(hash,state,key) 




#define case_228_SBOX32(hash,state,key) 




#define case_227_SBOX32(hash,state,key) 




#define case_226_SBOX32(hash,state,key) 




#define case_225_SBOX32(hash,state,key) 




#define case_224_SBOX32(hash,state,key) 




#define case_223_SBOX32(hash,state,key) 




#define case_222_SBOX32(hash,state,key) 




#define case_221_SBOX32(hash,state,key) 




#define case_220_SBOX32(hash,state,key) 




#define case_219_SBOX32(hash,state,key) 




#define case_218_SBOX32(hash,state,key) 




#define case_217_SBOX32(hash,state,key) 




#define case_216_SBOX32(hash,state,key) 




#define case_215_SBOX32(hash,state,key) 




#define case_214_SBOX32(hash,state,key) 




#define case_213_SBOX32(hash,state,key) 




#define case_212_SBOX32(hash,state,key) 




#define case_211_SBOX32(hash,state,key) 




#define case_210_SBOX32(hash,state,key) 




#define case_209_SBOX32(hash,state,key) 




#define case_208_SBOX32(hash,state,key) 




#define case_207_SBOX32(hash,state,key) 




#define case_206_SBOX32(hash,state,key) 




#define case_205_SBOX32(hash,state,key) 




#define case_204_SBOX32(hash,state,key) 




#define case_203_SBOX32(hash,state,key) 




#define case_202_SBOX32(hash,state,key) 




#define case_201_SBOX32(hash,state,key) 




#define case_200_SBOX32(hash,state,key) 




#define case_199_SBOX32(hash,state,key) 




#define case_198_SBOX32(hash,state,key) 




#define case_197_SBOX32(hash,state,key) 




#define case_196_SBOX32(hash,state,key) 




#define case_195_SBOX32(hash,state,key) 




#define case_194_SBOX32(hash,state,key) 




#define case_193_SBOX32(hash,state,key) 




#define case_192_SBOX32(hash,state,key) 




#define case_191_SBOX32(hash,state,key) 




#define case_190_SBOX32(hash,state,key) 




#define case_189_SBOX32(hash,state,key) 




#define case_188_SBOX32(hash,state,key) 




#define case_187_SBOX32(hash,state,key) 




#define case_186_SBOX32(hash,state,key) 




#define case_185_SBOX32(hash,state,key) 




#define case_184_SBOX32(hash,state,key) 




#define case_183_SBOX32(hash,state,key) 




#define case_182_SBOX32(hash,state,key) 




#define case_181_SBOX32(hash,state,key) 




#define case_180_SBOX32(hash,state,key) 




#define case_179_SBOX32(hash,state,key) 




#define case_178_SBOX32(hash,state,key) 




#define case_177_SBOX32(hash,state,key) 




#define case_176_SBOX32(hash,state,key) 




#define case_175_SBOX32(hash,state,key) 




#define case_174_SBOX32(hash,state,key) 




#define case_173_SBOX32(hash,state,key) 




#define case_172_SBOX32(hash,state,key) 




#define case_171_SBOX32(hash,state,key) 




#define case_170_SBOX32(hash,state,key) 




#define case_169_SBOX32(hash,state,key) 




#define case_168_SBOX32(hash,state,key) 




#define case_167_SBOX32(hash,state,key) 




#define case_166_SBOX32(hash,state,key) 




#define case_165_SBOX32(hash,state,key) 




#define case_164_SBOX32(hash,state,key) 




#define case_163_SBOX32(hash,state,key) 




#define case_162_SBOX32(hash,state,key) 




#define case_161_SBOX32(hash,state,key) 




#define case_160_SBOX32(hash,state,key) 




#define case_159_SBOX32(hash,state,key) 




#define case_158_SBOX32(hash,state,key) 




#define case_157_SBOX32(hash,state,key) 




#define case_156_SBOX32(hash,state,key) 




#define case_155_SBOX32(hash,state,key) 




#define case_154_SBOX32(hash,state,key) 




#define case_153_SBOX32(hash,state,key) 




#define case_152_SBOX32(hash,state,key) 




#define case_151_SBOX32(hash,state,key) 




#define case_150_SBOX32(hash,state,key) 




#define case_149_SBOX32(hash,state,key) 




#define case_148_SBOX32(hash,state,key) 




#define case_147_SBOX32(hash,state,key) 




#define case_146_SBOX32(hash,state,key) 




#define case_145_SBOX32(hash,state,key) 




#define case_144_SBOX32(hash,state,key) 




#define case_143_SBOX32(hash,state,key) 




#define case_142_SBOX32(hash,state,key) 




#define case_141_SBOX32(hash,state,key) 




#define case_140_SBOX32(hash,state,key) 




#define case_139_SBOX32(hash,state,key) 




#define case_138_SBOX32(hash,state,key) 




#define case_137_SBOX32(hash,state,key) 




#define case_136_SBOX32(hash,state,key) 




#define case_135_SBOX32(hash,state,key) 




#define case_134_SBOX32(hash,state,key) 




#define case_133_SBOX32(hash,state,key) 




#define case_132_SBOX32(hash,state,key) 




#define case_131_SBOX32(hash,state,key) 




#define case_130_SBOX32(hash,state,key) 




#define case_129_SBOX32(hash,state,key) 




#define case_128_SBOX32(hash,state,key) 




#define case_127_SBOX32(hash,state,key) 




#define case_126_SBOX32(hash,state,key) 




#define case_125_SBOX32(hash,state,key) 




#define case_124_SBOX32(hash,state,key) 




#define case_123_SBOX32(hash,state,key) 




#define case_122_SBOX32(hash,state,key) 




#define case_121_SBOX32(hash,state,key) 




#define case_120_SBOX32(hash,state,key) 




#define case_119_SBOX32(hash,state,key) 




#define case_118_SBOX32(hash,state,key) 




#define case_117_SBOX32(hash,state,key) 




#define case_116_SBOX32(hash,state,key) 




#define case_115_SBOX32(hash,state,key) 




#define case_114_SBOX32(hash,state,key) 




#define case_113_SBOX32(hash,state,key) 




#define case_112_SBOX32(hash,state,key) 




#define case_111_SBOX32(hash,state,key) 




#define case_110_SBOX32(hash,state,key) 




#define case_109_SBOX32(hash,state,key) 




#define case_108_SBOX32(hash,state,key) 




#define case_107_SBOX32(hash,state,key) 




#define case_106_SBOX32(hash,state,key) 




#define case_105_SBOX32(hash,state,key) 




#define case_104_SBOX32(hash,state,key) 




#define case_103_SBOX32(hash,state,key) 




#define case_102_SBOX32(hash,state,key) 




#define case_101_SBOX32(hash,state,key) 




#define case_100_SBOX32(hash,state,key) 




#define case_99_SBOX32(hash,state,key) 




#define case_98_SBOX32(hash,state,key) 




#define case_97_SBOX32(hash,state,key) 




#define case_96_SBOX32(hash,state,key) 




#define case_95_SBOX32(hash,state,key) 




#define case_94_SBOX32(hash,state,key) 




#define case_93_SBOX32(hash,state,key) 




#define case_92_SBOX32(hash,state,key) 




#define case_91_SBOX32(hash,state,key) 




#define case_90_SBOX32(hash,state,key) 




#define case_89_SBOX32(hash,state,key) 




#define case_88_SBOX32(hash,state,key) 




#define case_87_SBOX32(hash,state,key) 




#define case_86_SBOX32(hash,state,key) 




#define case_85_SBOX32(hash,state,key) 




#define case_84_SBOX32(hash,state,key) 




#define case_83_SBOX32(hash,state,key) 




#define case_82_SBOX32(hash,state,key) 




#define case_81_SBOX32(hash,state,key) 




#define case_80_SBOX32(hash,state,key) 




#define case_79_SBOX32(hash,state,key) 




#define case_78_SBOX32(hash,state,key) 




#define case_77_SBOX32(hash,state,key) 




#define case_76_SBOX32(hash,state,key) 




#define case_75_SBOX32(hash,state,key) 




#define case_74_SBOX32(hash,state,key) 




#define case_73_SBOX32(hash,state,key) 




#define case_72_SBOX32(hash,state,key) 




#define case_71_SBOX32(hash,state,key) 




#define case_70_SBOX32(hash,state,key) 




#define case_69_SBOX32(hash,state,key) 




#define case_68_SBOX32(hash,state,key) 




#define case_67_SBOX32(hash,state,key) 




#define case_66_SBOX32(hash,state,key) 




#define case_65_SBOX32(hash,state,key) 




#define case_64_SBOX32(hash,state,key) 




#define case_63_SBOX32(hash,state,key) 




#define case_62_SBOX32(hash,state,key) 




#define case_61_SBOX32(hash,state,key) 




#define case_60_SBOX32(hash,state,key) 




#define case_59_SBOX32(hash,state,key) 




#define case_58_SBOX32(hash,state,key) 




#define case_57_SBOX32(hash,state,key) 




#define case_56_SBOX32(hash,state,key) 




#define case_55_SBOX32(hash,state,key) 




#define case_54_SBOX32(hash,state,key) 




#define case_53_SBOX32(hash,state,key) 




#define case_52_SBOX32(hash,state,key) 




#define case_51_SBOX32(hash,state,key) 




#define case_50_SBOX32(hash,state,key) 




#define case_49_SBOX32(hash,state,key) 




#define case_48_SBOX32(hash,state,key) 




#define case_47_SBOX32(hash,state,key) 




#define case_46_SBOX32(hash,state,key) 




#define case_45_SBOX32(hash,state,key) 




#define case_44_SBOX32(hash,state,key) 




#define case_43_SBOX32(hash,state,key) 




#define case_42_SBOX32(hash,state,key) 




#define case_41_SBOX32(hash,state,key) 




#define case_40_SBOX32(hash,state,key) 




#define case_39_SBOX32(hash,state,key) 




#define case_38_SBOX32(hash,state,key) 




#define case_37_SBOX32(hash,state,key) 




#define case_36_SBOX32(hash,state,key) 




#define case_35_SBOX32(hash,state,key) 




#define case_34_SBOX32(hash,state,key) 




#define case_33_SBOX32(hash,state,key) 




#define case_32_SBOX32(hash,state,key) 




#define case_31_SBOX32(hash,state,key) 




#define case_30_SBOX32(hash,state,key) 




#define case_29_SBOX32(hash,state,key) 




#define case_28_SBOX32(hash,state,key) 




#define case_27_SBOX32(hash,state,key) 




#define case_26_SBOX32(hash,state,key) 




#define case_25_SBOX32(hash,state,key) 


#define case_24_SBOX32(hash,state,key) _SBOX32_CASE(24,hash,state,key)




#define case_23_SBOX32(hash,state,key) _SBOX32_CASE(23,hash,state,key)




#define case_22_SBOX32(hash,state,key) _SBOX32_CASE(22,hash,state,key)




#define case_21_SBOX32(hash,state,key) _SBOX32_CASE(21,hash,state,key)




#define case_20_SBOX32(hash,state,key) _SBOX32_CASE(20,hash,state,key)




#define case_19_SBOX32(hash,state,key) _SBOX32_CASE(19,hash,state,key)




#define case_18_SBOX32(hash,state,key) _SBOX32_CASE(18,hash,state,key)




#define case_17_SBOX32(hash,state,key) _SBOX32_CASE(17,hash,state,key)




#define case_16_SBOX32(hash,state,key) _SBOX32_CASE(16,hash,state,key)




#define case_15_SBOX32(hash,state,key) _SBOX32_CASE(15,hash,state,key)




#define case_14_SBOX32(hash,state,key) _SBOX32_CASE(14,hash,state,key)




#define case_13_SBOX32(hash,state,key) _SBOX32_CASE(13,hash,state,key)




#define case_12_SBOX32(hash,state,key) _SBOX32_CASE(12,hash,state,key)




#define case_11_SBOX32(hash,state,key) _SBOX32_CASE(11,hash,state,key)




#define case_10_SBOX32(hash,state,key) _SBOX32_CASE(10,hash,state,key)




#define case_9_SBOX32(hash,state,key) _SBOX32_CASE(9,hash,state,key)




#define case_8_SBOX32(hash,state,key) _SBOX32_CASE(8,hash,state,key)




#define case_7_SBOX32(hash,state,key) _SBOX32_CASE(7,hash,state,key)




#define case_6_SBOX32(hash,state,key) _SBOX32_CASE(6,hash,state,key)




#define case_5_SBOX32(hash,state,key) _SBOX32_CASE(5,hash,state,key)




#define case_4_SBOX32(hash,state,key) _SBOX32_CASE(4,hash,state,key)




#define case_3_SBOX32(hash,state,key) _SBOX32_CASE(3,hash,state,key)




#define case_2_SBOX32(hash,state,key) _SBOX32_CASE(2,hash,state,key)




#define case_1_SBOX32(hash,state,key) _SBOX32_CASE(1,hash,state,key)




#define XORSHIFT96_set(r,x,y,z,t) STMT_START { t = (x ^ ( x << 10 ) ); x = y; y = z; r = z = (z ^ ( z >> 26 ) ) ^ ( t ^ ( t >> 5 ) ); } STMT_END





#define XORSHIFT128_set(r,x,y,z,w,t) STMT_START { t = ( x ^ ( x << 5 ) ); x = y; y = z; z = w; r = w = ( w ^ ( w >> 29 ) ) ^ ( t ^ ( t >> 12 ) ); } STMT_END





#define SBOX32_SCRAMBLE32(v,prime) STMT_START { v ^= (v>>9); v ^= (v<<21); v ^= (v>>16); v *= prime; v ^= (v>>17); v ^= (v<<15); v ^= (v>>23); } STMT_END
# 1416 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/sbox32_hash.h" 3 4
#define SBOX32_CHURN_ROUNDS 5


#define SBOX32_SKIP_MASK 0x3


#define _SBOX32_CASE(len,hash,state,key) case len: hash ^= state[ 1 + ( 256 * ( len - 1 ) ) + key[ len - 1 ] ];




static __inline__ void sbox32_seed_state96 (
    const U8 *seed_ch,
    U8 *state_ch
) {
    const U32 *seed= (const U32 *)seed_ch;
    U32 *state= (U32 *)state_ch;
    U32 *state_cursor = state + 1;
    U32 *sbox32_end = state + 1 + (256 * 24);
    U32 s0 = seed[0] ^ 0x68736168;
    U32 s1 = seed[1] ^ 0x786f6273;
    U32 s2 = seed[2] ^ 0x646f6f67;
    U32 t1,t2,i;


    if (!s0) s0 = 1;
    if (!s1) s1 = 2;
    if (!s2) s2 = 4;



    for ( i = 0; i < 5; i++ )
        (void)( { ; s0 = (((U32)(s0) << (16)) | ((U32)(s0) >> (32 - (16)))) - s2; s1 = (((U32)(s1) << (32 - (13))) | ((U32)(s1) >> (13))) ^ s2; s2 = (((U32)(s2) << (17)) | ((U32)(s2) >> (32 - (17)))) + s1; s0 = (((U32)(s0) << (32 - (2))) | ((U32)(s0) >> (2))) + s1; s1 = (((U32)(s1) << (32 - (17))) | ((U32)(s1) >> (17))) - s0; s2 = (((U32)(s2) << (32 - (7))) | ((U32)(s2) >> (7))) ^ s0; } );

    while ( state_cursor < sbox32_end ) {
        U32 *row_end = state_cursor + 256;
        for ( ; state_cursor < row_end; state_cursor++ ) {
            (void)( { t1 = (s0 ^ ( s0 << 10 ) ); s0 = s1; s1 = s2; *state_cursor = s2 = (s2 ^ ( s2 >> 26 ) ) ^ ( t1 ^ ( t1 >> 5 ) ); } );
        }
    }
    (void)( { t2 = (s0 ^ ( s0 << 10 ) ); s0 = s1; s1 = s2; *state = s2 = (s2 ^ ( s2 >> 26 ) ) ^ ( t2 ^ ( t2 >> 5 ) ); } );
}

static __inline__ void sbox32_seed_state128 (
    const U8 *seed_ch,
    U8 *state_ch
) {
    U32 *seed= (U32 *)seed_ch;
    U32 *state= (U32 *)state_ch;
    U32 *state_cursor = state + 1;
    U32 *sbox32_end = state + 1 + (256 * 24);
    U32 s0 = seed[0] ^ 0x68736168;
    U32 s1 = seed[1] ^ 0x786f6273;
    U32 s2 = seed[2] ^ 0x646f6f67;
    U32 s3 = seed[3] ^ 0x74736166;
    U32 t1,t2,i;


    if (!s0) s0 = 1;
    if (!s1) s1 = 2;
    if (!s2) s2 = 4;
    if (!s3) s3 = 8;



    for ( i = 0; i < 5; i++ )
        (void)( { ; s0 = (((U32)(s0) << (13)) | ((U32)(s0) >> (32 - (13)))) - s3; s1 ^= s2; s3 = (((U32)(s3) << (9)) | ((U32)(s3) >> (32 - (9)))) + s1; s2 ^= s0; s0 = (((U32)(s0) << (14)) | ((U32)(s0) >> (32 - (14)))) ^ s3; s1 = (((U32)(s1) << (25)) | ((U32)(s1) >> (32 - (25)))) - s2; s3 ^= s1; s2 = (((U32)(s2) << (4)) | ((U32)(s2) >> (32 - (4)))) - s0; } );

    while ( state_cursor < sbox32_end ) {
        U32 *row_end = state_cursor + 256;
        for ( ; state_cursor < row_end; state_cursor++ ) {
            (void)( { t1 = ( s0 ^ ( s0 << 5 ) ); s0 = s1; s1 = s2; s2 = s3; *state_cursor = s3 = ( s3 ^ ( s3 >> 29 ) ) ^ ( t1 ^ ( t1 >> 12 ) ); } );
        }
    }
    (void)( { t2 = ( s0 ^ ( s0 << 5 ) ); s0 = s1; s1 = s2; s2 = s3; *state = s3 = ( s3 ^ ( s3 >> 29 ) ) ^ ( t2 ^ ( t2 >> 12 ) ); } );
}

static __inline__ U32 sbox32_hash_with_state(
    const U8 *state_ch,
    const U8 *key,
    const STRLEN key_len
) {
    U32 *state= (U32 *)state_ch;
    U32 hash = *state;
    switch (key_len) {
        default: return zaphod32_hash_with_state(state_ch, key, key_len);
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
        case 24: hash ^= state[ 1 + ( 256 * ( 24 - 1 ) ) + key[ 24 - 1 ] ];
        case 23: hash ^= state[ 1 + ( 256 * ( 23 - 1 ) ) + key[ 23 - 1 ] ];
        case 22: hash ^= state[ 1 + ( 256 * ( 22 - 1 ) ) + key[ 22 - 1 ] ];
        case 21: hash ^= state[ 1 + ( 256 * ( 21 - 1 ) ) + key[ 21 - 1 ] ];
        case 20: hash ^= state[ 1 + ( 256 * ( 20 - 1 ) ) + key[ 20 - 1 ] ];
        case 19: hash ^= state[ 1 + ( 256 * ( 19 - 1 ) ) + key[ 19 - 1 ] ];
        case 18: hash ^= state[ 1 + ( 256 * ( 18 - 1 ) ) + key[ 18 - 1 ] ];
        case 17: hash ^= state[ 1 + ( 256 * ( 17 - 1 ) ) + key[ 17 - 1 ] ];
        case 16: hash ^= state[ 1 + ( 256 * ( 16 - 1 ) ) + key[ 16 - 1 ] ];
        case 15: hash ^= state[ 1 + ( 256 * ( 15 - 1 ) ) + key[ 15 - 1 ] ];
        case 14: hash ^= state[ 1 + ( 256 * ( 14 - 1 ) ) + key[ 14 - 1 ] ];
        case 13: hash ^= state[ 1 + ( 256 * ( 13 - 1 ) ) + key[ 13 - 1 ] ];
        case 12: hash ^= state[ 1 + ( 256 * ( 12 - 1 ) ) + key[ 12 - 1 ] ];
        case 11: hash ^= state[ 1 + ( 256 * ( 11 - 1 ) ) + key[ 11 - 1 ] ];
        case 10: hash ^= state[ 1 + ( 256 * ( 10 - 1 ) ) + key[ 10 - 1 ] ];
        case 9: hash ^= state[ 1 + ( 256 * ( 9 - 1 ) ) + key[ 9 - 1 ] ];
        case 8: hash ^= state[ 1 + ( 256 * ( 8 - 1 ) ) + key[ 8 - 1 ] ];
        case 7: hash ^= state[ 1 + ( 256 * ( 7 - 1 ) ) + key[ 7 - 1 ] ];
        case 6: hash ^= state[ 1 + ( 256 * ( 6 - 1 ) ) + key[ 6 - 1 ] ];
        case 5: hash ^= state[ 1 + ( 256 * ( 5 - 1 ) ) + key[ 5 - 1 ] ];
        case 4: hash ^= state[ 1 + ( 256 * ( 4 - 1 ) ) + key[ 4 - 1 ] ];
        case 3: hash ^= state[ 1 + ( 256 * ( 3 - 1 ) ) + key[ 3 - 1 ] ];
        case 2: hash ^= state[ 1 + ( 256 * ( 2 - 1 ) ) + key[ 2 - 1 ] ];
        case 1: hash ^= state[ 1 + ( 256 * ( 1 - 1 ) ) + key[ 1 - 1 ] ];
        case 0: break;
    }
    return hash;
}

static __inline__ U32 sbox32_hash96(
    const U8 *seed_ch,
    const U8 *key,
    const STRLEN key_len
) {
    U32 state[(1 + (24 * 256))];
    sbox32_seed_state96(seed_ch,(U8*)state);
    return sbox32_hash_with_state((U8*)state,key,key_len);
}

static __inline__ U32 sbox32_hash128(
    const U8 *seed_ch,
    const U8 *key,
    const STRLEN key_len
) {
    U32 state[(1 + (24 * 256))];
    sbox32_seed_state128(seed_ch,(U8*)state);
    return sbox32_hash_with_state((U8*)state,key,key_len);
}
# 35 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 2 3 4
# 45 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 3 4
#define __PERL_HASH_FUNC "SIPHASH_1_3"
#define __PERL_HASH_WORD_TYPE U64
#define __PERL_HASH_WORD_SIZE sizeof(__PERL_HASH_WORD_TYPE)
#define __PERL_HASH_SEED_BYTES (__PERL_HASH_WORD_SIZE * 2)
#define __PERL_HASH_STATE_BYTES (__PERL_HASH_WORD_SIZE * 4)
#define __PERL_HASH_SEED_STATE(seed,state) S_perl_siphash_seed_state(seed,state)
#define __PERL_HASH_WITH_STATE(state,str,len) S_perl_hash_siphash_1_3_with_state((state),(U8*)(str),(len))
# 77 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl_siphash.h" 1 3 4
# 17 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl_siphash.h" 3 4
#define SIPROUND STMT_START { v0 += v1; v1=ROTL64(v1,13); v1 ^= v0; v0=ROTL64(v0,32); v2 += v3; v3=ROTL64(v3,16); v3 ^= v2; v0 += v3; v3=ROTL64(v3,21); v3 ^= v0; v2 += v1; v1=ROTL64(v1,17); v1 ^= v2; v2=ROTL64(v2,32); } STMT_END







#define SIPHASH_SEED_STATE(key,v0,v1,v2,v3) do { v0 = v2 = U8TO64_LE(key + 0); v1 = v3 = U8TO64_LE(key + 8); v0 ^= UINT64_C(0x736f6d6570736575); v1 ^= UINT64_C(0x646f72616e646f6d); v2 ^= UINT64_C(0x6c7967656e657261); v3 ^= UINT64_C(0x7465646279746573); } while (0)
# 36 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl_siphash.h" 3 4
static __inline__
void S_perl_siphash_seed_state(const unsigned char * const seed_buf, unsigned char * state_buf) {
    U64 *v= (U64*) state_buf;
    do { v[0] = v[2] = ((((U64)(((U8*)((seed_buf + 0)))[(0)]))<<(0))| (((U64)(((U8*)((seed_buf + 0)))[(1)]))<<(8))| (((U64)(((U8*)((seed_buf + 0)))[(2)]))<<(16))| (((U64)(((U8*)((seed_buf + 0)))[(3)]))<<(24))| (((U64)(((U8*)((seed_buf + 0)))[(4)]))<<(32))| (((U64)(((U8*)((seed_buf + 0)))[(5)]))<<(40))| (((U64)(((U8*)((seed_buf + 0)))[(6)]))<<(48))| (((U64)(((U8*)((seed_buf + 0)))[(7)]))<<(56))); v[1] = v[3] = ((((U64)(((U8*)((seed_buf + 8)))[(0)]))<<(0))| (((U64)(((U8*)((seed_buf + 8)))[(1)]))<<(8))| (((U64)(((U8*)((seed_buf + 8)))[(2)]))<<(16))| (((U64)(((U8*)((seed_buf + 8)))[(3)]))<<(24))| (((U64)(((U8*)((seed_buf + 8)))[(4)]))<<(32))| (((U64)(((U8*)((seed_buf + 8)))[(5)]))<<(40))| (((U64)(((U8*)((seed_buf + 8)))[(6)]))<<(48))| (((U64)(((U8*)((seed_buf + 8)))[(7)]))<<(56))); v[0] ^= (0x736f6d6570736575ULL); v[1] ^= (0x646f72616e646f6dULL); v[2] ^= (0x6c7967656e657261ULL); v[3] ^= (0x7465646279746573ULL); } while (0);
}

#define PERL_SIPHASH_FNC(FNC,SIP_ROUNDS,SIP_FINAL_ROUNDS) PERL_STATIC_INLINE U64 FNC ## _with_state_64 (const unsigned char * const state, const unsigned char *in, const STRLEN inlen) { const int left = inlen & 7; const U8 *end = in + inlen - left; U64 b = ( ( U64 )(inlen) ) << 56; U64 m; U64 v0 = U8TO64_LE(state); U64 v1 = U8TO64_LE(state+8); U64 v2 = U8TO64_LE(state+16); U64 v3 = U8TO64_LE(state+24); for ( ; in != end; in += 8 ) { m = U8TO64_LE( in ); v3 ^= m; SIP_ROUNDS; v0 ^= m; } switch( left ) { case 7: b |= ( ( U64 )in[ 6] ) << 48; case 6: b |= ( ( U64 )in[ 5] ) << 40; case 5: b |= ( ( U64 )in[ 4] ) << 32; case 4: b |= ( ( U64 )in[ 3] ) << 24; case 3: b |= ( ( U64 )in[ 2] ) << 16; case 2: b |= ( ( U64 )in[ 1] ) << 8; case 1: b |= ( ( U64 )in[ 0] ); break; case 0: break; } v3 ^= b; SIP_ROUNDS; v0 ^= b; v2 ^= 0xff; SIP_FINAL_ROUNDS b = v0 ^ v1 ^ v2 ^ v3; return b; } PERL_STATIC_INLINE U32 FNC ## _with_state (const unsigned char * const state, const unsigned char *in, const STRLEN inlen) { union { U64 h64; U32 h32[2]; } h; h.h64= FNC ## _with_state_64(state,in,inlen); return h.h32[0] ^ h.h32[1]; } PERL_STATIC_INLINE U32 FNC (const unsigned char * const seed, const unsigned char *in, const STRLEN inlen) { U64 state[4]; SIPHASH_SEED_STATE(seed,state[0],state[1],state[2],state[3]); return FNC ## _with_state((U8*)state,in,inlen); }
# 115 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl_siphash.h" 3 4
static __inline__ U64 S_perl_hash_siphash_1_3_with_state_64 (const unsigned char * const state, const unsigned char *in, const STRLEN inlen) { const int left = inlen & 7; const U8 *end = in + inlen - left; U64 b = ( ( U64 )(inlen) ) << 56; U64 m; U64 v0 = ((((U64)(((U8*)((state)))[(0)]))<<(0))| (((U64)(((U8*)((state)))[(1)]))<<(8))| (((U64)(((U8*)((state)))[(2)]))<<(16))| (((U64)(((U8*)((state)))[(3)]))<<(24))| (((U64)(((U8*)((state)))[(4)]))<<(32))| (((U64)(((U8*)((state)))[(5)]))<<(40))| (((U64)(((U8*)((state)))[(6)]))<<(48))| (((U64)(((U8*)((state)))[(7)]))<<(56))); U64 v1 = ((((U64)(((U8*)((state+8)))[(0)]))<<(0))| (((U64)(((U8*)((state+8)))[(1)]))<<(8))| (((U64)(((U8*)((state+8)))[(2)]))<<(16))| (((U64)(((U8*)((state+8)))[(3)]))<<(24))| (((U64)(((U8*)((state+8)))[(4)]))<<(32))| (((U64)(((U8*)((state+8)))[(5)]))<<(40))| (((U64)(((U8*)((state+8)))[(6)]))<<(48))| (((U64)(((U8*)((state+8)))[(7)]))<<(56))); U64 v2 = ((((U64)(((U8*)((state+16)))[(0)]))<<(0))| (((U64)(((U8*)((state+16)))[(1)]))<<(8))| (((U64)(((U8*)((state+16)))[(2)]))<<(16))| (((U64)(((U8*)((state+16)))[(3)]))<<(24))| (((U64)(((U8*)((state+16)))[(4)]))<<(32))| (((U64)(((U8*)((state+16)))[(5)]))<<(40))| (((U64)(((U8*)((state+16)))[(6)]))<<(48))| (((U64)(((U8*)((state+16)))[(7)]))<<(56))); U64 v3 = ((((U64)(((U8*)((state+24)))[(0)]))<<(0))| (((U64)(((U8*)((state+24)))[(1)]))<<(8))| (((U64)(((U8*)((state+24)))[(2)]))<<(16))| (((U64)(((U8*)((state+24)))[(3)]))<<(24))| (((U64)(((U8*)((state+24)))[(4)]))<<(32))| (((U64)(((U8*)((state+24)))[(5)]))<<(40))| (((U64)(((U8*)((state+24)))[(6)]))<<(48))| (((U64)(((U8*)((state+24)))[(7)]))<<(56))); for ( ; in != end; in += 8 ) { m = ((((U64)(((U8*)((in)))[(0)]))<<(0))| (((U64)(((U8*)((in)))[(1)]))<<(8))| (((U64)(((U8*)((in)))[(2)]))<<(16))| (((U64)(((U8*)((in)))[(3)]))<<(24))| (((U64)(((U8*)((in)))[(4)]))<<(32))| (((U64)(((U8*)((in)))[(5)]))<<(40))| (((U64)(((U8*)((in)))[(6)]))<<(48))| (((U64)(((U8*)((in)))[(7)]))<<(56))); v3 ^= m; (void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );; v0 ^= m; } switch( left ) { case 7: b |= ( ( U64 )in[ 6] ) << 48; case 6: b |= ( ( U64 )in[ 5] ) << 40; case 5: b |= ( ( U64 )in[ 4] ) << 32; case 4: b |= ( ( U64 )in[ 3] ) << 24; case 3: b |= ( ( U64 )in[ 2] ) << 16; case 2: b |= ( ( U64 )in[ 1] ) << 8; case 1: b |= ( ( U64 )in[ 0] ); break; case 0: break; } v3 ^= b; (void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );; v0 ^= b; v2 ^= 0xff; (void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } ); b = v0 ^ v1 ^ v2 ^ v3; return b; } static __inline__ U32 S_perl_hash_siphash_1_3_with_state (const unsigned char * const state, const unsigned char *in, const STRLEN inlen) { union { U64 h64; U32 h32[2]; } h; h.h64= S_perl_hash_siphash_1_3_with_state_64(state,in,inlen); return h.h32[0] ^ h.h32[1]; } static __inline__ U32 S_perl_hash_siphash_1_3 (const unsigned char * const seed, const unsigned char *in, const STRLEN inlen) { U64 state[4]; do { state[0] = state[2] = ((((U64)(((U8*)((seed + 0)))[(0)]))<<(0))| (((U64)(((U8*)((seed + 0)))[(1)]))<<(8))| (((U64)(((U8*)((seed + 0)))[(2)]))<<(16))| (((U64)(((U8*)((seed + 0)))[(3)]))<<(24))| (((U64)(((U8*)((seed + 0)))[(4)]))<<(32))| (((U64)(((U8*)((seed + 0)))[(5)]))<<(40))| (((U64)(((U8*)((seed + 0)))[(6)]))<<(48))| (((U64)(((U8*)((seed + 0)))[(7)]))<<(56))); state[1] = state[3] = ((((U64)(((U8*)((seed + 8)))[(0)]))<<(0))| (((U64)(((U8*)((seed + 8)))[(1)]))<<(8))| (((U64)(((U8*)((seed + 8)))[(2)]))<<(16))| (((U64)(((U8*)((seed + 8)))[(3)]))<<(24))| (((U64)(((U8*)((seed + 8)))[(4)]))<<(32))| (((U64)(((U8*)((seed + 8)))[(5)]))<<(40))| (((U64)(((U8*)((seed + 8)))[(6)]))<<(48))| (((U64)(((U8*)((seed + 8)))[(7)]))<<(56))); state[0] ^= (0x736f6d6570736575ULL); state[1] ^= (0x646f72616e646f6dULL); state[2] ^= (0x6c7967656e657261ULL); state[3] ^= (0x7465646279746573ULL); } while (0); return S_perl_hash_siphash_1_3_with_state((U8*)state,in,inlen); }





static __inline__ U64 S_perl_hash_siphash_2_4_with_state_64 (const unsigned char * const state, const unsigned char *in, const STRLEN inlen) { const int left = inlen & 7; const U8 *end = in + inlen - left; U64 b = ( ( U64 )(inlen) ) << 56; U64 m; U64 v0 = ((((U64)(((U8*)((state)))[(0)]))<<(0))| (((U64)(((U8*)((state)))[(1)]))<<(8))| (((U64)(((U8*)((state)))[(2)]))<<(16))| (((U64)(((U8*)((state)))[(3)]))<<(24))| (((U64)(((U8*)((state)))[(4)]))<<(32))| (((U64)(((U8*)((state)))[(5)]))<<(40))| (((U64)(((U8*)((state)))[(6)]))<<(48))| (((U64)(((U8*)((state)))[(7)]))<<(56))); U64 v1 = ((((U64)(((U8*)((state+8)))[(0)]))<<(0))| (((U64)(((U8*)((state+8)))[(1)]))<<(8))| (((U64)(((U8*)((state+8)))[(2)]))<<(16))| (((U64)(((U8*)((state+8)))[(3)]))<<(24))| (((U64)(((U8*)((state+8)))[(4)]))<<(32))| (((U64)(((U8*)((state+8)))[(5)]))<<(40))| (((U64)(((U8*)((state+8)))[(6)]))<<(48))| (((U64)(((U8*)((state+8)))[(7)]))<<(56))); U64 v2 = ((((U64)(((U8*)((state+16)))[(0)]))<<(0))| (((U64)(((U8*)((state+16)))[(1)]))<<(8))| (((U64)(((U8*)((state+16)))[(2)]))<<(16))| (((U64)(((U8*)((state+16)))[(3)]))<<(24))| (((U64)(((U8*)((state+16)))[(4)]))<<(32))| (((U64)(((U8*)((state+16)))[(5)]))<<(40))| (((U64)(((U8*)((state+16)))[(6)]))<<(48))| (((U64)(((U8*)((state+16)))[(7)]))<<(56))); U64 v3 = ((((U64)(((U8*)((state+24)))[(0)]))<<(0))| (((U64)(((U8*)((state+24)))[(1)]))<<(8))| (((U64)(((U8*)((state+24)))[(2)]))<<(16))| (((U64)(((U8*)((state+24)))[(3)]))<<(24))| (((U64)(((U8*)((state+24)))[(4)]))<<(32))| (((U64)(((U8*)((state+24)))[(5)]))<<(40))| (((U64)(((U8*)((state+24)))[(6)]))<<(48))| (((U64)(((U8*)((state+24)))[(7)]))<<(56))); for ( ; in != end; in += 8 ) { m = ((((U64)(((U8*)((in)))[(0)]))<<(0))| (((U64)(((U8*)((in)))[(1)]))<<(8))| (((U64)(((U8*)((in)))[(2)]))<<(16))| (((U64)(((U8*)((in)))[(3)]))<<(24))| (((U64)(((U8*)((in)))[(4)]))<<(32))| (((U64)(((U8*)((in)))[(5)]))<<(40))| (((U64)(((U8*)((in)))[(6)]))<<(48))| (((U64)(((U8*)((in)))[(7)]))<<(56))); v3 ^= m; (void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );; v0 ^= m; } switch( left ) { case 7: b |= ( ( U64 )in[ 6] ) << 48; case 6: b |= ( ( U64 )in[ 5] ) << 40; case 5: b |= ( ( U64 )in[ 4] ) << 32; case 4: b |= ( ( U64 )in[ 3] ) << 24; case 3: b |= ( ( U64 )in[ 2] ) << 16; case 2: b |= ( ( U64 )in[ 1] ) << 8; case 1: b |= ( ( U64 )in[ 0] ); break; case 0: break; } v3 ^= b; (void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );; v0 ^= b; v2 ^= 0xff; (void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } );(void)( { v0 += v1; v1=( ( (U64)(v1) << (13) ) | ( (U64)(v1) >> ( 64 - (13) ) ) ); v1 ^= v0; v0=( ( (U64)(v0) << (32) ) | ( (U64)(v0) >> ( 64 - (32) ) ) ); v2 += v3; v3=( ( (U64)(v3) << (16) ) | ( (U64)(v3) >> ( 64 - (16) ) ) ); v3 ^= v2; v0 += v3; v3=( ( (U64)(v3) << (21) ) | ( (U64)(v3) >> ( 64 - (21) ) ) ); v3 ^= v0; v2 += v1; v1=( ( (U64)(v1) << (17) ) | ( (U64)(v1) >> ( 64 - (17) ) ) ); v1 ^= v2; v2=( ( (U64)(v2) << (32) ) | ( (U64)(v2) >> ( 64 - (32) ) ) ); } ); b = v0 ^ v1 ^ v2 ^ v3; return b; } static __inline__ U32 S_perl_hash_siphash_2_4_with_state (const unsigned char * const state, const unsigned char *in, const STRLEN inlen) { union { U64 h64; U32 h32[2]; } h; h.h64= S_perl_hash_siphash_2_4_with_state_64(state,in,inlen); return h.h32[0] ^ h.h32[1]; } static __inline__ U32 S_perl_hash_siphash_2_4 (const unsigned char * const seed, const unsigned char *in, const STRLEN inlen) { U64 state[4]; do { state[0] = state[2] = ((((U64)(((U8*)((seed + 0)))[(0)]))<<(0))| (((U64)(((U8*)((seed + 0)))[(1)]))<<(8))| (((U64)(((U8*)((seed + 0)))[(2)]))<<(16))| (((U64)(((U8*)((seed + 0)))[(3)]))<<(24))| (((U64)(((U8*)((seed + 0)))[(4)]))<<(32))| (((U64)(((U8*)((seed + 0)))[(5)]))<<(40))| (((U64)(((U8*)((seed + 0)))[(6)]))<<(48))| (((U64)(((U8*)((seed + 0)))[(7)]))<<(56))); state[1] = state[3] = ((((U64)(((U8*)((seed + 8)))[(0)]))<<(0))| (((U64)(((U8*)((seed + 8)))[(1)]))<<(8))| (((U64)(((U8*)((seed + 8)))[(2)]))<<(16))| (((U64)(((U8*)((seed + 8)))[(3)]))<<(24))| (((U64)(((U8*)((seed + 8)))[(4)]))<<(32))| (((U64)(((U8*)((seed + 8)))[(5)]))<<(40))| (((U64)(((U8*)((seed + 8)))[(6)]))<<(48))| (((U64)(((U8*)((seed + 8)))[(7)]))<<(56))); state[0] ^= (0x736f6d6570736575ULL); state[1] ^= (0x646f72616e646f6dULL); state[2] ^= (0x6c7967656e657261ULL); state[3] ^= (0x7465646279746573ULL); } while (0); return S_perl_hash_siphash_2_4_with_state((U8*)state,in,inlen); }
# 78 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 2 3 4

#define __PERL_HASH_SEED_roundup(x,y) ( ( ( (x) + ( (y) - 1 ) ) / (y) ) * (y) )
#define _PERL_HASH_SEED_roundup(x) __PERL_HASH_SEED_roundup(x,__PERL_HASH_WORD_SIZE)

#define PL_hash_seed ((U8 *)PL_hash_seed_w)
#define PL_hash_state ((U8 *)PL_hash_state_w)
# 93 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 3 4
#define _PERL_HASH_FUNC "SBOX32_WITH_" __PERL_HASH_FUNC

#define _PERL_HASH_SEED_BYTES ( __PERL_HASH_SEED_BYTES + (int)( 3 * sizeof(U32)) )

#define _PERL_HASH_STATE_BYTES ( __PERL_HASH_STATE_BYTES + ( ( 1 + ( 256 * SBOX32_MAX_LEN ) ) * sizeof(U32) ) )


#define _PERL_HASH_SEED_STATE(seed,state) STMT_START { __PERL_HASH_SEED_STATE(seed,state); sbox32_seed_state96(seed + __PERL_HASH_SEED_BYTES, state + __PERL_HASH_STATE_BYTES); } STMT_END




#define _PERL_HASH_WITH_STATE(state,str,len) (LIKELY(len <= SBOX32_MAX_LEN) ? sbox32_hash_with_state((state + __PERL_HASH_STATE_BYTES),(U8*)(str),(len)) : __PERL_HASH_WITH_STATE((state),(str),(len)))






#define PERL_HASH_WITH_SEED(seed,hash,str,len) (hash) = S_perl_hash_with_seed((const U8 *) seed, (const U8 *) str,len)

#define PERL_HASH_WITH_STATE(state,hash,str,len) (hash) = _PERL_HASH_WITH_STATE((state),(U8*)(str),(len))


#define PERL_HASH_SEED_STATE(seed,state) _PERL_HASH_SEED_STATE(seed,state)
#define PERL_HASH_SEED_BYTES _PERL_HASH_SEED_roundup(_PERL_HASH_SEED_BYTES)
#define PERL_HASH_STATE_BYTES _PERL_HASH_SEED_roundup(_PERL_HASH_STATE_BYTES)
#define PERL_HASH_FUNC _PERL_HASH_FUNC

#define PERL_HASH_SEED_WORDS (PERL_HASH_SEED_BYTES/__PERL_HASH_WORD_SIZE)
#define PERL_HASH_STATE_WORDS (PERL_HASH_STATE_BYTES/__PERL_HASH_WORD_SIZE)






#define PERL_HASH(hash,str,len) PERL_HASH_WITH_STATE(PL_hash_state,hash,(U8*)(str),(len))
# 142 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 3 4
#define PERL_HASH_SEED PL_hash_seed
# 163 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv_func.h" 3 4
static __inline__ U32
S_perl_hash_with_seed(const U8 * seed, const U8 *str, STRLEN len) {
    U64 state[(( ( ( (( (sizeof(U64) * 4) + ( ( 1 + ( 256 * 24 ) ) * sizeof(U32) ) )) + ( (sizeof(U64)) - 1 ) ) / (sizeof(U64)) ) * (sizeof(U64)) )/sizeof(U64))];
    (void)( { S_perl_siphash_seed_state(seed,(U8*)state); sbox32_seed_state96(seed + (sizeof(U64) * 2), (U8*)state + (sizeof(U64) * 4)); } );
    return (__builtin_expect(((len <= 24) ? (_Bool)1 : (_Bool)0),(1)) ? sbox32_hash_with_state(((U8*)state + (sizeof(U64) * 4)),(U8*)(str),(len)) : S_perl_hash_siphash_1_3_with_state((((U8*)state)),(U8*)((str)),((len))));
}
# 660 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/hv.h" 2 3 4
# 4086 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 1 3 4
# 32 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
struct jmpenv {
    struct jmpenv * je_prev;
    sigjmp_buf je_buf;
    int je_ret;
    _Bool je_mustcatch;
    U16 je_old_delaymagic;
    ssize_t je_old_stack_hwm;
};

typedef struct jmpenv JMPENV;
# 51 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define JE_OLD_STACK_HWM_zero NOOP
#define JE_OLD_STACK_HWM_save(je) NOOP
#define JE_OLD_STACK_HWM_restore(je) NOOP
# 66 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define JMPENV_BOOTSTRAP STMT_START { PERL_POISON_EXPR(PoisonNew(&PL_start_env, 1, JMPENV)); PL_top_env = &PL_start_env; PL_start_env.je_prev = NULL; PL_start_env.je_ret = -1; PL_start_env.je_mustcatch = TRUE; PL_start_env.je_old_delaymagic = 0; JE_OLD_STACK_HWM_zero; } STMT_END
# 111 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define dJMPENV JMPENV cur_env

#define JMPENV_PUSH(v) STMT_START { DEBUG_l({ int i = 0; JMPENV *p = PL_top_env; while (p) { i++; p = p->je_prev; } Perl_deb(aTHX_ "JUMPENV_PUSH level=%d at %s:%d\n", i, __FILE__, __LINE__);}) cur_env.je_prev = PL_top_env; JE_OLD_STACK_HWM_save(cur_env); cur_env.je_ret = PerlProc_setjmp(cur_env.je_buf, SCOPE_SAVES_SIGNAL_MASK); JE_OLD_STACK_HWM_restore(cur_env); PL_top_env = &cur_env; cur_env.je_mustcatch = FALSE; cur_env.je_old_delaymagic = PL_delaymagic; (v) = cur_env.je_ret; } STMT_END
# 130 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define JMPENV_POP STMT_START { DEBUG_l({ int i = -1; JMPENV *p = PL_top_env; while (p) { i++; p = p->je_prev; } Perl_deb(aTHX_ "JUMPENV_POP level=%d at %s:%d\n", i, __FILE__, __LINE__);}) assert(PL_top_env == &cur_env); PL_delaymagic = cur_env.je_old_delaymagic; PL_top_env = cur_env.je_prev; } STMT_END
# 142 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define JMPENV_JUMP(v) STMT_START { DEBUG_l({ int i = -1; JMPENV *p = PL_top_env; while (p) { i++; p = p->je_prev; } Perl_deb(aTHX_ "JUMPENV_JUMP(%d) level=%d at %s:%d\n", (int)v, i, __FILE__, __LINE__);}) if (PL_top_env->je_prev) PerlProc_longjmp(PL_top_env->je_buf, (v)); if ((v) == 2) PerlProc_exit(STATUS_EXIT); PerlIO_printf(PerlIO_stderr(), "panic: top_env, v=%d\n", (int)v); PerlProc_exit(1); } STMT_END
# 157 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CATCH_GET (PL_top_env->je_mustcatch)
#define CATCH_SET(v) STMT_START { DEBUG_l( Perl_deb(aTHX_ "JUMPLEVEL set catch %d => %d (for %p) at %s:%d\n", PL_top_env->je_mustcatch, v, (void*)PL_top_env, __FILE__, __LINE__);) PL_top_env->je_mustcatch = (v); } STMT_END
# 172 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
typedef struct refcounted_he COPHH;

#define COPHH_KEY_UTF8 REFCOUNTED_HE_KEY_UTF8
#define COPHH_EXISTS REFCOUNTED_HE_EXISTS
# 193 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_fetch_pvn(cophh,keypv,keylen,hash,flags) Perl_refcounted_he_fetch_pvn(aTHX_ cophh, keypv, keylen, hash, flags)
# 205 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_fetch_pvs(cophh,key,flags) Perl_refcounted_he_fetch_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, flags)
# 217 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_fetch_pv(cophh,key,hash,flags) Perl_refcounted_he_fetch_pv(aTHX_ cophh, key, hash, flags)
# 229 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_fetch_sv(cophh,key,hash,flags) Perl_refcounted_he_fetch_sv(aTHX_ cophh, key, hash, flags)
# 245 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_exists_pvn(cophh,keypv,keylen,hash,flags) cBOOL(Perl_refcounted_he_fetch_pvn(aTHX_ cophh, keypv, keylen, hash, flags | COPHH_EXISTS))
# 257 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_exists_pvs(cophh,key,flags) cBOOL(Perl_refcounted_he_fetch_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, flags | COPHH_EXISTS))
# 269 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_exists_pv(cophh,key,hash,flags) cBOOL(Perl_refcounted_he_fetch_pv(aTHX_ cophh, key, hash, flags | COPHH_EXISTS))
# 281 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_exists_sv(cophh,key,hash,flags) cBOOL(Perl_refcounted_he_fetch_sv(aTHX_ cophh, key, hash, flags | COPHH_EXISTS))
# 294 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_2hv(cophh,flags) Perl_refcounted_he_chain_2hv(aTHX_ cophh, flags)
# 305 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_copy(cophh) Perl_refcounted_he_inc(aTHX_ cophh)
# 316 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_free(cophh) Perl_refcounted_he_free(aTHX_ cophh)
# 326 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_new_empty() ((COPHH *)NULL)
# 351 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_store_pvn(cophh,keypv,keylen,hash,value,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, keypv, keylen, hash, value, flags)
# 363 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_store_pvs(cophh,key,value,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, value, flags)
# 375 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_store_pv(cophh,key,hash,value,flags) Perl_refcounted_he_new_pv(aTHX_ cophh, key, hash, value, flags)
# 387 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_store_sv(cophh,key,hash,value,flags) Perl_refcounted_he_new_sv(aTHX_ cophh, key, hash, value, flags)
# 407 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_delete_pvn(cophh,keypv,keylen,hash,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, keypv, keylen, hash, (SV *)NULL, flags)
# 420 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_delete_pvs(cophh,key,flags) Perl_refcounted_he_new_pvn(aTHX_ cophh, STR_WITH_LEN(key), 0, (SV *)NULL, flags)
# 433 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_delete_pv(cophh,key,hash,flags) Perl_refcounted_he_new_pv(aTHX_ cophh, key, hash, (SV *)NULL, flags)
# 445 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cophh_delete_sv(cophh,key,hash,flags) Perl_refcounted_he_new_sv(aTHX_ cophh, key, hash, (SV *)NULL, flags)


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mydtrace.h" 1 3 4
# 43 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mydtrace.h" 3 4
#define PERL_DTRACE_PROBE_ENTRY(cv) 
#define PERL_DTRACE_PROBE_RETURN(cv) 
#define PERL_DTRACE_PROBE_FILE_LOADING(cv) 
#define PERL_DTRACE_PROBE_FILE_LOADED(cv) 
#define PERL_DTRACE_PROBE_OP(op) 
#define PERL_DTRACE_PROBE_PHASE(phase) 
# 449 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 2 3 4

struct cop {
    OP* op_next; OP* op_sibparent; OP* (*op_ppaddr)(PerlInterpreter* my_perl __attribute__((unused))); PADOFFSET op_targ; U16 op_type:9; U16 op_opt:1; U16 op_slabbed:1; U16 op_savefree:1; U16 op_static:1; U16 op_folded:1; U16 op_moresib:1; U16 op_spare:1; U8 op_flags; U8 op_private;


    line_t cop_line;


    PADOFFSET cop_stashoff;

    char * cop_file;




    U32 cop_hints;
    U32 cop_seq;

    STRLEN * cop_warnings;


    COPHH * cop_hints_hash;





    U32 cop_features;
};
# 523 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CopFILE(c) ((c)->cop_file)
#define CopFILEGV(c) (CopFILE(c) ? gv_fetchfile(CopFILE(c)) : NULL)






#define CopFILE_set(c,pv) ((c)->cop_file = savesharedpv(pv))
#define CopFILE_setn(c,pv,l) ((c)->cop_file = savesharedpvn((pv),(l)))


#define CopFILESV(c) (CopFILE(c) ? GvSV(gv_fetchfile(CopFILE(c))) : NULL)

#define CopFILEAV(c) (CopFILE(c) ? GvAV(gv_fetchfile(CopFILE(c))) : NULL)

#define CopFILEAVx(c) (assert_(CopFILE(c)) GvAV(gv_fetchfile(CopFILE(c))))


#define CopSTASH(c) PL_stashpad[(c)->cop_stashoff]
#define CopSTASH_set(c,hv) ((c)->cop_stashoff = (hv) ? alloccopstash(hv) : 0)





#define CopFILE_free(c) (PerlMemShared_free(CopFILE(c)),(CopFILE(c) = NULL))
# 571 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CopSTASHPV(c) (CopSTASH(c) ? HvNAME_get(CopSTASH(c)) : NULL)

#define CopSTASHPV_set(c,pv) CopSTASH_set((c), gv_stashpv(pv,GV_ADD))
#define CopSTASH_eq(c,hv) (CopSTASH(c) == (hv))

#define CopHINTHASH_get(c) ((COPHH*)((c)->cop_hints_hash))
#define CopHINTHASH_set(c,h) ((c)->cop_hints_hash = (h))
# 593 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_fetch_pvn(cop,keypv,keylen,hash,flags) cophh_fetch_pvn(CopHINTHASH_get(cop), keypv, keylen, hash, flags)
# 605 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_fetch_pvs(cop,key,flags) cophh_fetch_pvs(CopHINTHASH_get(cop), key, flags)
# 617 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_fetch_pv(cop,key,hash,flags) cophh_fetch_pv(CopHINTHASH_get(cop), key, hash, flags)
# 629 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_fetch_sv(cop,key,hash,flags) cophh_fetch_sv(CopHINTHASH_get(cop), key, hash, flags)
# 645 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_exists_pvn(cop,keypv,keylen,hash,flags) cophh_exists_pvn(CopHINTHASH_get(cop), keypv, keylen, hash, flags)
# 657 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_exists_pvs(cop,key,flags) cophh_exists_pvs(CopHINTHASH_get(cop), key, flags)
# 669 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_exists_pv(cop,key,hash,flags) cophh_exists_pv(CopHINTHASH_get(cop), key, hash, flags)
# 681 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_exists_sv(cop,key,hash,flags) cophh_exists_sv(CopHINTHASH_get(cop), key, hash, flags)
# 694 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define cop_hints_2hv(cop,flags) cophh_2hv(CopHINTHASH_get(cop), flags)
# 715 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CopLABEL(c) Perl_cop_fetch_label(aTHX_ (c), NULL, NULL)
#define CopLABEL_len(c,len) Perl_cop_fetch_label(aTHX_ (c), len, NULL)
#define CopLABEL_len_flags(c,len,flags) Perl_cop_fetch_label(aTHX_ (c), len, flags)
#define CopLABEL_alloc(pv) ((pv)?savepv(pv):NULL)

#define CopSTASH_ne(c,hv) (!CopSTASH_eq(c,hv))
#define CopLINE(c) ((c)->cop_line)
#define CopLINE_inc(c) (++CopLINE(c))
#define CopLINE_dec(c) (--CopLINE(c))
#define CopLINE_set(c,l) (CopLINE(c) = (l))


#define OutCopFILE(c) CopFILE(c)

#define CopHINTS_get(c) ((c)->cop_hints + 0)
#define CopHINTS_set(c,h) STMT_START { (c)->cop_hints = (h); } STMT_END
# 739 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
struct block_sub {
    OP * retop;
    I32 old_cxsubix;

    PAD *prevcomppad;
    CV * cv;

    I32 olddepth;
    AV *savearray;
};



struct block_format {
    OP * retop;
    I32 old_cxsubix;

    PAD *prevcomppad;
    CV * cv;

    GV * gv;
    GV * dfoutgv;
};



#define CX_CUR() (&cxstack[cxstack_ix])



#define CX_LEAVE_SCOPE(cx) LEAVE_SCOPE(cx->blk_oldsaveix)
# 780 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CX_POP(cx) cxstack_ix--;


#define CX_PUSHSUB_GET_LVALUE_MASK(func) ( (PL_op->op_flags & OPf_WANT) ? OPpENTERSUB_LVAL_MASK : !(PL_op->op_private & OPpENTERSUB_LVAL_MASK) ? 0 : (U8)func(aTHX) )
# 794 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CX_POP_SAVEARRAY(cx) STMT_START { AV *cx_pop_savearray_av = GvAV(PL_defgv); GvAV(PL_defgv) = cx->blk_sub.savearray; cx->blk_sub.savearray = NULL; SvREFCNT_dec(cx_pop_savearray_av); } STMT_END
# 804 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CLEAR_ARGARRAY(ary) STMT_START { AvMAX(ary) += AvARRAY(ary) - AvALLOC(ary); AvARRAY(ary) = AvALLOC(ary); AvFILLp(ary) = -1; } STMT_END
# 813 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
struct block_eval {
    OP * retop;
    I32 old_cxsubix;

    SV * old_namesv;
    OP * old_eval_root;
    SV * cur_text;
    CV * cv;
    JMPENV * cur_top_env;
};







#define CxOLD_IN_EVAL(cx) (((cx)->blk_u16) & 0x3F)
#define CxEVAL_TXT_REFCNTED(cx) (((cx)->blk_u16) & 0x40)
#define CxOLD_OP_TYPE(cx) (((cx)->blk_u16) >> 7)


struct block_loop {
    LOOP * my_op;
    union {
 SV **svp;
 GV *gv;
    } itervar_u;
    SV *itersave;
    union {
 struct {
     AV *ary;
     IV ix;
 } ary;
 struct {
     I32 basesp;
     IV ix;
 } stack;
 struct {
     IV cur;
     IV end;
 } lazyiv;
 struct {
     SV * cur;
     SV * end;
 } lazysv;
    } state_u;

    PAD *oldcomppad;

};

#define CxITERVAR(c) (CxPADLOOP(c) ? (c)->blk_loop.itervar_u.svp : ((c)->cx_type & CXp_FOR_GV) ? &GvSV((c)->blk_loop.itervar_u.gv) : (SV **)&(c)->blk_loop.itervar_u.gv)






#define CxLABEL(c) (0 + CopLABEL((c)->blk_oldcop))
#define CxLABEL_len(c,len) (0 + CopLABEL_len((c)->blk_oldcop, len))
#define CxLABEL_len_flags(c,len,flags) (0 + CopLABEL_len_flags((c)->blk_oldcop, len, flags))
#define CxHASARGS(c) (((c)->cx_type & CXp_HASARGS) == CXp_HASARGS)
# 888 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CxLVAL(c) (0 + ((c)->blk_u16 & 0xff))




struct block_givwhen {
 OP *leave_op;
        SV *defsv_save;
};




struct block {
    U8 blku_type;
    U8 blku_gimme;
    U16 blku_u16;
    I32 blku_oldsaveix;

    I32 blku_oldsp;
    I32 blku_oldmarksp;
    COP * blku_oldcop;
    PMOP * blku_oldpm;
    ssize_t blku_old_tmpsfloor;
    I32 blku_oldscopesp;

    union {
 struct block_sub blku_sub;
 struct block_format blku_format;
 struct block_eval blku_eval;
 struct block_loop blku_loop;
 struct block_givwhen blku_givwhen;
    } blk_u;
};
#define blk_oldsp cx_u.cx_blk.blku_oldsp
#define blk_oldcop cx_u.cx_blk.blku_oldcop
#define blk_oldmarksp cx_u.cx_blk.blku_oldmarksp
#define blk_oldscopesp cx_u.cx_blk.blku_oldscopesp
#define blk_oldpm cx_u.cx_blk.blku_oldpm
#define blk_gimme cx_u.cx_blk.blku_gimme
#define blk_u16 cx_u.cx_blk.blku_u16
#define blk_oldsaveix cx_u.cx_blk.blku_oldsaveix
#define blk_old_tmpsfloor cx_u.cx_blk.blku_old_tmpsfloor
#define blk_sub cx_u.cx_blk.blk_u.blku_sub
#define blk_format cx_u.cx_blk.blk_u.blku_format
#define blk_eval cx_u.cx_blk.blk_u.blku_eval
#define blk_loop cx_u.cx_blk.blk_u.blku_loop
#define blk_givwhen cx_u.cx_blk.blk_u.blku_givwhen

#define CX_DEBUG(cx,action) DEBUG_l( Perl_deb(aTHX_ "CX %ld %s %s (scope %ld,%ld) (save %ld,%ld) at %s:%d\n", (long)cxstack_ix, action, PL_block_type[CxTYPE(cx)], (long)PL_scopestack_ix, (long)(cx->blk_oldscopesp), (long)PL_savestack_ix, (long)(cx->blk_oldsaveix), __FILE__, __LINE__));
# 952 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
struct subst {
    U8 sbu_type;
    U8 sbu_rflags;
    U16 sbu_rxtainted;
    I32 sbu_oldsaveix;

    ssize_t sbu_iters;
    ssize_t sbu_maxiters;
    char * sbu_orig;
    SV * sbu_dstr;
    SV * sbu_targ;
    char * sbu_s;
    char * sbu_m;
    char * sbu_strend;
    void * sbu_rxres;
    REGEXP * sbu_rx;
};
# 1016 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CxONCE(cx) ((cx)->cx_type & CXp_ONCE)

struct context {
    union {
 struct block cx_blk;
 struct subst cx_subst;
    } cx_u;
};
#define cx_type cx_u.cx_subst.sbu_type



#define CXTYPEMASK 0xf
#define CXt_NULL 0
#define CXt_WHEN 1
#define CXt_BLOCK 2




#define CXt_GIVEN 3



#define CXt_LOOP_ARY 4
#define CXt_LOOP_LAZYSV 5
#define CXt_LOOP_LAZYIV 6
#define CXt_LOOP_LIST 7
#define CXt_LOOP_PLAIN 8

#define CXt_SUB 9
#define CXt_FORMAT 10
#define CXt_EVAL 11
#define CXt_SUBST 12



#define CXp_MULTICALL 0x10

#define CXp_HASARGS 0x20
#define CXp_SUB_RE 0x40
#define CXp_SUB_RE_FAKE 0x80


#define CXp_REAL 0x20
#define CXp_EVALBLOCK 0x40
#define CXp_TRY 0x80




#define CXp_FOR_DEF 0x10

#define CXp_FOR_LVREF 0x20
#define CXp_FOR_GV 0x40
#define CXp_FOR_PAD 0x80

#define CxPADLOOP(c) ((c)->cx_type & CXp_FOR_PAD)


#define CXp_ONCE 0x10

#define CxTYPE(c) ((c)->cx_type & CXTYPEMASK)
#define CxTYPE_is_LOOP(c) ( CxTYPE(cx) >= CXt_LOOP_ARY && CxTYPE(cx) <= CXt_LOOP_PLAIN)

#define CxMULTICALL(c) ((c)->cx_type & CXp_MULTICALL)
#define CxREALEVAL(c) (((c)->cx_type & (CXTYPEMASK|CXp_REAL)) == (CXt_EVAL|CXp_REAL))

#define CxEVALBLOCK(c) (((c)->cx_type & (CXTYPEMASK|CXp_EVALBLOCK)) == (CXt_EVAL|CXp_EVALBLOCK))

#define CxTRY(c) (((c)->cx_type & (CXTYPEMASK|CXp_TRY)) == (CXt_EVAL|CXp_TRY))

#define CxFOREACH(c) ( CxTYPE(cx) >= CXt_LOOP_ARY && CxTYPE(cx) <= CXt_LOOP_LIST)



#define CXp_TRYBLOCK CXp_EVALBLOCK
#define CxTRYBLOCK(c) CxEVALBLOCK(c)

#define CXINC (cxstack_ix < cxstack_max ? ++cxstack_ix : (cxstack_ix = cxinc()))

#define G_SCALAR 2
#define G_ARRAY 3
#define G_VOID 1
#define G_WANT 3


#define G_DISCARD 0x4


#define G_EVAL 0x8
#define G_NOARGS 0x10
#define G_KEEPERR 0x20
#define G_NODEBUG 0x40
#define G_METHOD 0x80
#define G_FAKINGEVAL 0x100

#define G_UNDEF_FILL 0x200


#define G_WRITING_TO_STDERR 0x400

#define G_RE_REPARSING 0x800
#define G_METHOD_NAMED 0x1000
#define G_RETHROW 0x2000


#define EVAL_NULL 0
#define EVAL_INEVAL 1
#define EVAL_WARNONLY 2
#define EVAL_KEEPERR 4
#define EVAL_INREQUIRE 8
#define EVAL_RE_REPARSING 0x10
# 1137 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define PERLSI_UNKNOWN -1
#define PERLSI_UNDEF 0
#define PERLSI_MAIN 1
#define PERLSI_MAGIC 2
#define PERLSI_SORT 3
#define PERLSI_SIGNAL 4
#define PERLSI_OVERLOAD 5
#define PERLSI_DESTROY 6
#define PERLSI_WARNHOOK 7
#define PERLSI_DIEHOOK 8
#define PERLSI_REQUIRE 9
#define PERLSI_MULTICALL 10
#define PERLSI_REGCOMP 11

struct stackinfo {
    AV * si_stack;
    PERL_CONTEXT * si_cxstack;
    struct stackinfo * si_prev;
    struct stackinfo * si_next;
    I32 si_cxix;
    I32 si_cxmax;
    I32 si_cxsubix;
    I32 si_type;
    I32 si_markoff;
# 1169 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
};







typedef struct stackinfo PERL_SI;

#define cxstack (PL_curstackinfo->si_cxstack)
#define cxstack_ix (PL_curstackinfo->si_cxix)
#define cxstack_max (PL_curstackinfo->si_cxmax)





#define SET_MARK_OFFSET NOOP





#define PUSHSTACK_INIT_HWM(si) NOOP


#define PUSHSTACKi(type) STMT_START { PERL_SI *next = PL_curstackinfo->si_next; DEBUG_l({ int i = 0; PERL_SI *p = PL_curstackinfo; while (p) { i++; p = p->si_prev; } Perl_deb(aTHX_ "push STACKINFO %d at %s:%d\n", i, __FILE__, __LINE__);}) if (!next) { next = new_stackinfo(32, 2048/sizeof(PERL_CONTEXT) - 1); next->si_prev = PL_curstackinfo; PL_curstackinfo->si_next = next; } next->si_type = type; next->si_cxix = -1; next->si_cxsubix = -1; PUSHSTACK_INIT_HWM(next); AvFILLp(next->si_stack) = 0; SWITCHSTACK(PL_curstack,next->si_stack); PL_curstackinfo = next; SET_MARK_OFFSET; } STMT_END
# 1219 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define PUSHSTACK PUSHSTACKi(PERLSI_UNKNOWN)



#define POPSTACK STMT_START { dSP; PERL_SI * const prev = PL_curstackinfo->si_prev; DEBUG_l({ int i = -1; PERL_SI *p = PL_curstackinfo; while (p) { i++; p = p->si_prev; } Perl_deb(aTHX_ "pop  STACKINFO %d at %s:%d\n", i, __FILE__, __LINE__);}) if (!prev) { Perl_croak_popstack(); } SWITCHSTACK(PL_curstack,prev->si_stack); PL_curstackinfo = prev; } STMT_END
# 1240 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define POPSTACK_TO(s) STMT_START { while (PL_curstack != s) { dounwind(-1); POPSTACK; } } STMT_END
# 1260 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define IN_PERL_COMPILETIME cBOOL(PL_curcop == &PL_compiling)
#define IN_PERL_RUNTIME cBOOL(PL_curcop != &PL_compiling)
# 1283 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define dMULTICALL OP *multicall_cop; bool multicall_oldcatch



#define PUSH_MULTICALL(the_cv) PUSH_MULTICALL_FLAGS(the_cv, 0)





#define PUSH_MULTICALL_FLAGS(the_cv,flags) STMT_START { PERL_CONTEXT *cx; CV * const _nOnclAshIngNamE_ = the_cv; CV * const cv = _nOnclAshIngNamE_; PADLIST * const padlist = CvPADLIST(cv); multicall_oldcatch = CATCH_GET; CATCH_SET(TRUE); PUSHSTACKi(PERLSI_MULTICALL); cx = cx_pushblock((CXt_SUB|CXp_MULTICALL|flags), (U8)gimme, PL_stack_sp, PL_savestack_ix); cx_pushsub(cx, cv, NULL, 0); SAVEOP(); if (!(flags & CXp_SUB_RE_FAKE)) CvDEPTH(cv)++; if (CvDEPTH(cv) >= 2) Perl_pad_push(aTHX_ padlist, CvDEPTH(cv)); PAD_SET_CUR_NOSAVE(padlist, CvDEPTH(cv)); multicall_cop = CvSTART(cv); } STMT_END
# 1314 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define MULTICALL STMT_START { PL_op = multicall_cop; CALLRUNOPS(aTHX); } STMT_END





#define POP_MULTICALL STMT_START { PERL_CONTEXT *cx; cx = CX_CUR(); CX_LEAVE_SCOPE(cx); cx_popsub_common(cx); gimme = cx->blk_gimme; PERL_UNUSED_VAR(gimme); cx_popblock(cx); CX_POP(cx); POPSTACK; CATCH_SET(multicall_oldcatch); SPAGAIN; } STMT_END
# 1338 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/cop.h" 3 4
#define CHANGE_MULTICALL_FLAGS(the_cv,flags) STMT_START { CV * const _nOnclAshIngNamE_ = the_cv; CV * const cv = _nOnclAshIngNamE_; PADLIST * const padlist = CvPADLIST(cv); PERL_CONTEXT *cx = CX_CUR(); assert(CxMULTICALL(cx)); cx_popsub_common(cx); cx->cx_type = (CXt_SUB|CXp_MULTICALL|flags); cx_pushsub(cx, cv, NULL, 0); if (!(flags & CXp_SUB_RE_FAKE)) CvDEPTH(cv)++; if (CvDEPTH(cv) >= 2) Perl_pad_push(aTHX_ padlist, CvDEPTH(cv)); PAD_SET_CUR_NOSAVE(padlist, CvDEPTH(cv)); multicall_cop = CvSTART(cv); } STMT_END
# 4087 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/av.h" 1 3 4
# 11 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/av.h" 3 4
struct xpvav {
    HV* xmg_stash;
    union _xmgu xmg_u;
    ssize_t xav_fill;
    ssize_t xav_max;
    SV** xav_alloc;
};
# 64 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/av.h" 3 4
#define Nullav Null(AV*)


#define AvARRAY(av) ((av)->sv_u.svu_array)
#define AvALLOC(av) ((XPVAV*) SvANY(av))->xav_alloc
#define AvMAX(av) ((XPVAV*) SvANY(av))->xav_max
#define AvFILLp(av) ((XPVAV*) SvANY(av))->xav_fill
#define AvARYLEN(av) (*Perl_av_arylen_p(aTHX_ MUTABLE_AV(av)))

#define AvREAL(av) (SvFLAGS(av) & SVpav_REAL)
#define AvREAL_on(av) (SvFLAGS(av) |= SVpav_REAL)
#define AvREAL_off(av) (SvFLAGS(av) &= ~SVpav_REAL)
#define AvREAL_only(av) (AvREIFY_off(av), SvFLAGS(av) |= SVpav_REAL)
#define AvREIFY(av) (SvFLAGS(av) & SVpav_REIFY)
#define AvREIFY_on(av) (SvFLAGS(av) |= SVpav_REIFY)
#define AvREIFY_off(av) (SvFLAGS(av) &= ~SVpav_REIFY)
#define AvREIFY_only(av) (AvREAL_off(av), SvFLAGS(av) |= SVpav_REIFY)


#define AvREALISH(av) (SvFLAGS(av) & (SVpav_REAL|SVpav_REIFY))

#define AvFILL(av) ((SvRMAGICAL((const SV *) (av))) ? mg_size(MUTABLE_SV(av)) : AvFILLp(av))

#define av_top_index(av) AvFILL(av)
#define av_tindex(av) av_top_index(av)




#define av_top_index_skip_len_mg(av) (__ASSERT_(SvTYPE(av) == SVt_PVAV) AvFILLp(av))

#define av_tindex_skip_len_mg(av) av_top_index_skip_len_mg(av)

#define NEGATIVE_INDICES_VAR "NEGATIVE_INDICES"
# 109 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/av.h" 3 4
#define newAV() MUTABLE_AV(newSV_type(SVt_PVAV))
# 4088 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg.h" 1 3 4
# 11 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg.h" 3 4
struct mgvtbl {
    int (*svt_get) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_set) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    U32 (*svt_len) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_clear) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_free) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg);
    int (*svt_copy) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC* mg,
                                        SV *nsv, const char *name, I32 namlen);
    int (*svt_dup) (PerlInterpreter* my_perl __attribute__((unused)), MAGIC *mg, CLONE_PARAMS *param);
    int (*svt_local)(PerlInterpreter* my_perl __attribute__((unused)), SV *nsv, MAGIC *mg);
};

struct magic {
    MAGIC* mg_moremagic;
    MGVTBL* mg_virtual;
    U16 mg_private;
    char mg_type;
    U8 mg_flags;
    ssize_t mg_len;
    SV* mg_obj;
    char* mg_ptr;
};

#define MGf_TAINTEDDIR 1
#define MGf_MINMATCH 1
#define MGf_REQUIRE_GV 1
#define MGf_REFCOUNTED 2
#define MGf_GSKIP 4
#define MGf_COPY 8
#define MGf_DUP 0x10
#define MGf_LOCAL 0x20
#define MGf_BYTES 0x40
#define MGf_PERSIST 0x80

#define MgTAINTEDDIR(mg) (mg->mg_flags & MGf_TAINTEDDIR)
#define MgTAINTEDDIR_on(mg) (mg->mg_flags |= MGf_TAINTEDDIR)
#define MgTAINTEDDIR_off(mg) (mg->mg_flags &= ~MGf_TAINTEDDIR)


#define MgSV(mg) (((int)((mg)->mg_len) == HEf_SVKEY) ? MUTABLE_SV((mg)->mg_ptr) : NULL)







#define MgPV(mg,lp) ((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ? SvPV(MUTABLE_SV((mg)->mg_ptr),lp) : (mg)->mg_ptr)


#define MgPV_const(mg,lp) ((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ? SvPV_const(MUTABLE_SV((mg)->mg_ptr),lp) : (const char*)(mg)->mg_ptr)


#define MgPV_nolen_const(mg) (((((int)(mg)->mg_len)) == HEf_SVKEY) ? SvPV_nolen_const(MUTABLE_SV((mg)->mg_ptr)) : (const char*)(mg)->mg_ptr)



#define SvTIED_mg(sv,how) (SvRMAGICAL(sv) ? mg_find((sv),(how)) : NULL)
#define SvTIED_obj(sv,mg) ((mg)->mg_obj ? (mg)->mg_obj : sv_2mortal(newRV(sv)))
# 85 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg.h" 3 4
#define whichsig(pv) whichsig_pv(pv)
# 4089 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 1 3 4
# 15 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 3 4
#define SAVEt_ALLOC 0
#define SAVEt_CLEARPADRANGE 1
#define SAVEt_CLEARSV 2
#define SAVEt_REGCONTEXT 3



#define SAVEt_TMPSFLOOR 4
#define SAVEt_BOOL 5
#define SAVEt_COMPILE_WARNINGS 6
#define SAVEt_COMPPAD 7
#define SAVEt_FREECOPHH 8
#define SAVEt_FREEOP 9
#define SAVEt_FREEPV 10
#define SAVEt_FREESV 11
#define SAVEt_I16 12
#define SAVEt_I32_SMALL 13
#define SAVEt_I8 14
#define SAVEt_INT_SMALL 15
#define SAVEt_MORTALIZESV 16
#define SAVEt_NSTAB 17
#define SAVEt_OP 18
#define SAVEt_PARSER 19
#define SAVEt_STACK_POS 20
#define SAVEt_READONLY_OFF 21
#define SAVEt_FREEPADNAME 22
#define SAVEt_STRLEN_SMALL 23



#define SAVEt_AV 24
#define SAVEt_DESTRUCTOR 25
#define SAVEt_DESTRUCTOR_X 26
#define SAVEt_GENERIC_PVREF 27
#define SAVEt_GENERIC_SVREF 28
#define SAVEt_GP 29
#define SAVEt_GVSV 30
#define SAVEt_HINTS 31
#define SAVEt_HPTR 32
#define SAVEt_HV 33
#define SAVEt_I32 34
#define SAVEt_INT 35
#define SAVEt_ITEM 36
#define SAVEt_IV 37
#define SAVEt_LONG 38
#define SAVEt_PPTR 39
#define SAVEt_SAVESWITCHSTACK 40
#define SAVEt_SHARED_PVREF 41
#define SAVEt_SPTR 42
#define SAVEt_STRLEN 43
#define SAVEt_SV 44
#define SAVEt_SVREF 45
#define SAVEt_VPTR 46
#define SAVEt_ADELETE 47
#define SAVEt_APTR 48



#define SAVEt_HELEM 49
#define SAVEt_PADSV_AND_MORTALIZE 50
#define SAVEt_SET_SVFLAGS 51
#define SAVEt_GVSLOT 52
#define SAVEt_AELEM 53
#define SAVEt_DELETE 54
#define SAVEt_HINTS_HH 55


#define SAVEf_SETMAGIC 1
#define SAVEf_KEEPOLDELEM 2

#define SAVE_TIGHT_SHIFT 6
#define SAVE_MASK 0x3F

#define save_aelem(av,idx,sptr) save_aelem_flags(av,idx,sptr,SAVEf_SETMAGIC)
#define save_helem(hv,key,sptr) save_helem_flags(hv,key,sptr,SAVEf_SETMAGIC)


#define SCOPE_SAVES_SIGNAL_MASK 0




#define SS_MAXPUSH 4

#define SSCHECK(need) if (UNLIKELY(PL_savestack_ix + (I32)(need) > PL_savestack_max)) savestack_grow()
#define SSGROW(need) if (UNLIKELY(PL_savestack_ix + (I32)(need) > PL_savestack_max)) savestack_grow_cnt(need)
#define SSPUSHINT(i) (PL_savestack[PL_savestack_ix++].any_i32 = (I32)(i))
#define SSPUSHLONG(i) (PL_savestack[PL_savestack_ix++].any_long = (long)(i))
#define SSPUSHBOOL(p) (PL_savestack[PL_savestack_ix++].any_bool = (p))
#define SSPUSHIV(i) (PL_savestack[PL_savestack_ix++].any_iv = (IV)(i))
#define SSPUSHUV(u) (PL_savestack[PL_savestack_ix++].any_uv = (UV)(u))
#define SSPUSHPTR(p) (PL_savestack[PL_savestack_ix++].any_ptr = (void*)(p))
#define SSPUSHDPTR(p) (PL_savestack[PL_savestack_ix++].any_dptr = (p))
#define SSPUSHDXPTR(p) (PL_savestack[PL_savestack_ix++].any_dxptr = (p))
# 124 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 3 4
#define dSS_ADD I32 ix = PL_savestack_ix; ANY *ssp = &PL_savestack[ix]



#define SS_ADD_END(need) assert((need) <= SS_MAXPUSH); ix += (need); PL_savestack_ix = ix; assert(ix <= PL_savestack_max + SS_MAXPUSH); if (UNLIKELY(ix > PL_savestack_max)) savestack_grow(); assert(PL_savestack_ix <= PL_savestack_max);







#define SS_ADD_INT(i) ((ssp++)->any_i32 = (I32)(i))
#define SS_ADD_LONG(i) ((ssp++)->any_long = (long)(i))
#define SS_ADD_BOOL(p) ((ssp++)->any_bool = (p))
#define SS_ADD_IV(i) ((ssp++)->any_iv = (IV)(i))
#define SS_ADD_UV(u) ((ssp++)->any_uv = (UV)(u))
#define SS_ADD_PTR(p) ((ssp++)->any_ptr = (void*)(p))
#define SS_ADD_DPTR(p) ((ssp++)->any_dptr = (p))
#define SS_ADD_DXPTR(p) ((ssp++)->any_dxptr = (p))

#define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
#define SSPOPLONG (PL_savestack[--PL_savestack_ix].any_long)
#define SSPOPBOOL (PL_savestack[--PL_savestack_ix].any_bool)
#define SSPOPIV (PL_savestack[--PL_savestack_ix].any_iv)
#define SSPOPUV (PL_savestack[--PL_savestack_ix].any_uv)
#define SSPOPPTR (PL_savestack[--PL_savestack_ix].any_ptr)
#define SSPOPDPTR (PL_savestack[--PL_savestack_ix].any_dptr)
#define SSPOPDXPTR (PL_savestack[--PL_savestack_ix].any_dxptr)
# 185 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 3 4
#define SAVETMPS Perl_savetmps(aTHX)

#define FREETMPS if (PL_tmps_ix > PL_tmps_floor) free_tmps()
# 218 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 3 4
#define ENTER push_scope()
#define LEAVE pop_scope()
#define ENTER_with_name(name) ENTER
#define LEAVE_with_name(name) LEAVE

#define LEAVE_SCOPE(old) STMT_START { if (PL_savestack_ix > old) leave_scope(old); } STMT_END



#define SAVEI8(i) save_I8((I8*)&(i))
#define SAVEI16(i) save_I16((I16*)&(i))
#define SAVEI32(i) save_I32((I32*)&(i))
#define SAVEINT(i) save_int((int*)&(i))
#define SAVEIV(i) save_iv((IV*)&(i))
#define SAVELONG(l) save_long((long*)&(l))
#define SAVEBOOL(b) save_bool(&(b))
#define SAVESPTR(s) save_sptr((SV**)&(s))
#define SAVEPPTR(s) save_pptr((char**)&(s))
#define SAVEVPTR(s) save_vptr((void*)&(s))
#define SAVEPADSVANDMORTALIZE(s) save_padsv_and_mortalize(s)
#define SAVEFREESV(s) save_freesv(MUTABLE_SV(s))
#define SAVEFREEPADNAME(s) save_pushptr((void *)(s), SAVEt_FREEPADNAME)
#define SAVEMORTALIZESV(s) save_mortalizesv(MUTABLE_SV(s))
#define SAVEFREEOP(o) save_freeop((OP*)(o))
#define SAVEFREEPV(p) save_freepv((char*)(p))
#define SAVECLEARSV(sv) save_clearsv((SV**)&(sv))
#define SAVEGENERICSV(s) save_generic_svref((SV**)&(s))
#define SAVEGENERICPV(s) save_generic_pvref((char**)&(s))
#define SAVESHAREDPV(s) save_shared_pvref((char**)&(s))
#define SAVESETSVFLAGS(sv,mask,val) save_set_svflags(sv,mask,val)
#define SAVEFREECOPHH(h) save_pushptr((void *)(h), SAVEt_FREECOPHH)
#define SAVEDELETE(h,k,l) save_delete(MUTABLE_HV(h), (char*)(k), (I32)(l))

#define SAVEHDELETE(h,s) save_hdelete(MUTABLE_HV(h), (s))

#define SAVEADELETE(a,k) save_adelete(MUTABLE_AV(a), (SSize_t)(k))

#define SAVEDESTRUCTOR(f,p) save_destructor((DESTRUCTORFUNC_NOCONTEXT_t)(f), (void*)(p))


#define SAVEDESTRUCTOR_X(f,p) save_destructor_x((DESTRUCTORFUNC_t)(f), (void*)(p))


#define SAVESTACK_POS() STMT_START { dSS_ADD; SS_ADD_INT(PL_stack_sp - PL_stack_base); SS_ADD_UV(SAVEt_STACK_POS); SS_ADD_END(2); } STMT_END







#define SAVEOP() save_op()

#define SAVEHINTS() save_hints()

#define SAVECOMPPAD() save_pushptr(MUTABLE_SV(PL_comppad), SAVEt_COMPPAD)

#define SAVESWITCHSTACK(f,t) STMT_START { save_pushptrptr(MUTABLE_SV(f), MUTABLE_SV(t), SAVEt_SAVESWITCHSTACK); SWITCHSTACK((f),(t)); PL_curstackinfo->si_stack = (t); } STMT_END
# 287 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 3 4
#define SAVECOMPILEWARNINGS() save_pushptr(PL_compiling.cop_warnings, SAVEt_COMPILE_WARNINGS)

#define SAVEPARSER(p) save_pushptr((p), SAVEt_PARSER)


#define SAVECOPSTASH_FREE(c) SAVEIV((c)->cop_stashoff)
#define SAVECOPFILE(c) SAVEPPTR(CopFILE(c))
#define SAVECOPFILE_FREE(c) SAVESHAREDPV(CopFILE(c))







#define SAVECOPLINE(c) SAVEI32(CopLINE(c))
# 315 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/scope.h" 3 4
#define SSNEW(size) Perl_save_alloc(aTHX_ (size), 0)
#define SSNEWt(n,t) SSNEW((n)*sizeof(t))
#define SSNEWa(size,align) Perl_save_alloc(aTHX_ (size), (I32)(align - ((size_t)((caddr_t)&PL_savestack[PL_savestack_ix]) % align)) % align)

#define SSNEWat(n,t,align) SSNEWa((n)*sizeof(t), align)

#define SSPTR(off,type) ((type) ((char*)PL_savestack + off))
#define SSPTRt(off,type) ((type*) ((char*)PL_savestack + off))

#define save_freesv(op) save_pushptr((void *)(op), SAVEt_FREESV)
#define save_mortalizesv(op) save_pushptr((void *)(op), SAVEt_MORTALIZESV)

#define save_freeop(op) STMT_START { OP * const _o = (OP *)(op); assert(!_o->op_savefree); _o->op_savefree = 1; save_pushptr((void *)(_o), SAVEt_FREEOP); } STMT_END






#define save_freepv(pv) save_pushptr((void *)(pv), SAVEt_FREEPV)
#define save_op() save_pushptr((void *)(PL_op), SAVEt_OP)
# 4090 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/warnings.h" 1 3 4







#define Perl_Warn_Off_(x) ((x) / 8)
#define Perl_Warn_Bit_(x) (1 << ((x) % 8))
#define PerlWarnIsSet_(a,x) ((a)[Perl_Warn_Off_(x)] & Perl_Warn_Bit_(x))


#define G_WARN_OFF 0
#define G_WARN_ON 1
#define G_WARN_ALL_ON 2
#define G_WARN_ALL_OFF 4
#define G_WARN_ONCE 8
#define G_WARN_ALL_MASK (G_WARN_ALL_ON|G_WARN_ALL_OFF)

#define pWARN_STD NULL
#define pWARN_ALL (STRLEN *) &PL_WARN_ALL
#define pWARN_NONE (STRLEN *) &PL_WARN_NONE

#define specialWARN(x) ((x) == pWARN_STD || (x) == pWARN_ALL || (x) == pWARN_NONE)



#define PERL_WARNHOOK_FATAL (&PL_sv_placeholder)



#define WARN_ALL 0
#define WARN_CLOSURE 1
#define WARN_DEPRECATED 2
#define WARN_EXITING 3
#define WARN_GLOB 4
#define WARN_IO 5
#define WARN_CLOSED 6
#define WARN_EXEC 7
#define WARN_LAYER 8
#define WARN_NEWLINE 9
#define WARN_PIPE 10
#define WARN_UNOPENED 11
#define WARN_MISC 12
#define WARN_NUMERIC 13
#define WARN_ONCE 14
#define WARN_OVERFLOW 15
#define WARN_PACK 16
#define WARN_PORTABLE 17
#define WARN_RECURSION 18
#define WARN_REDEFINE 19
#define WARN_REGEXP 20
#define WARN_SEVERE 21
#define WARN_DEBUGGING 22
#define WARN_INPLACE 23
#define WARN_INTERNAL 24
#define WARN_MALLOC 25
#define WARN_SIGNAL 26
#define WARN_SUBSTR 27
#define WARN_SYNTAX 28
#define WARN_AMBIGUOUS 29
#define WARN_BAREWORD 30
#define WARN_DIGIT 31
#define WARN_PARENTHESIS 32
#define WARN_PRECEDENCE 33
#define WARN_PRINTF 34
#define WARN_PROTOTYPE 35
#define WARN_QW 36
#define WARN_RESERVED 37
#define WARN_SEMICOLON 38
#define WARN_TAINT 39
#define WARN_THREADS 40
#define WARN_UNINITIALIZED 41
#define WARN_UNPACK 42
#define WARN_UNTIE 43
#define WARN_UTF8 44
#define WARN_VOID 45



#define WARN_IMPRECISION 46
#define WARN_ILLEGALPROTO 47



#define WARN_NON_UNICODE 48
#define WARN_NONCHAR 49
#define WARN_SURROGATE 50



#define WARN_EXPERIMENTAL 51
#define WARN_EXPERIMENTAL__LEXICAL_SUBS 52
#define WARN_EXPERIMENTAL__REGEX_SETS 53
#define WARN_EXPERIMENTAL__SMARTMATCH 54



#define WARN_EXPERIMENTAL__POSTDEREF 55
#define WARN_EXPERIMENTAL__SIGNATURES 56
#define WARN_SYSCALLS 57



#define WARN_EXPERIMENTAL__BITWISE 58
#define WARN_EXPERIMENTAL__CONST_ATTR 59
#define WARN_EXPERIMENTAL__RE_STRICT 60
#define WARN_EXPERIMENTAL__REFALIASING 61
#define WARN_EXPERIMENTAL__WIN32_PERLIO 62
#define WARN_LOCALE 63
#define WARN_MISSING 64
#define WARN_REDUNDANT 65



#define WARN_EXPERIMENTAL__DECLARED_REFS 66



#define WARN_EXPERIMENTAL__ALPHA_ASSERTIONS 67
#define WARN_EXPERIMENTAL__SCRIPT_RUN 68
#define WARN_SHADOW 69



#define WARN_EXPERIMENTAL__PRIVATE_USE 70
#define WARN_EXPERIMENTAL__UNIPROP_WILDCARDS 71
#define WARN_EXPERIMENTAL__VLB 72



#define WARN_EXPERIMENTAL__ISA 73



#define WARN_EXPERIMENTAL__TRY 74
#define WARNsize 19
#define WARN_ALLstring "\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125"
#define WARN_NONEstring "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"

#define isLEXWARN_on cBOOL(PL_curcop && PL_curcop->cop_warnings != pWARN_STD)

#define isLEXWARN_off cBOOL(!PL_curcop || PL_curcop->cop_warnings == pWARN_STD)

#define isWARN_ONCE (PL_dowarn & (G_WARN_ON|G_WARN_ONCE))
#define isWARN_on(c,x) (PerlWarnIsSet_((U8 *)(c + 1), 2*(x)))
#define isWARNf_on(c,x) (PerlWarnIsSet_((U8 *)(c + 1), 2*(x)+1))

#define DUP_WARNINGS(p) Perl_dup_warnings(aTHX_ p)

#define free_and_set_cop_warnings(cmp,w) STMT_START { if (!specialWARN((cmp)->cop_warnings)) PerlMemShared_free((cmp)->cop_warnings); (cmp)->cop_warnings = w; } STMT_END
# 202 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/warnings.h" 3 4
#define ckWARN(w) Perl_ckwarn(aTHX_ packWARN(w))




#define ckWARN2(w1,w2) Perl_ckwarn(aTHX_ packWARN2(w1,w2))
#define ckWARN3(w1,w2,w3) Perl_ckwarn(aTHX_ packWARN3(w1,w2,w3))
#define ckWARN4(w1,w2,w3,w4) Perl_ckwarn(aTHX_ packWARN4(w1,w2,w3,w4))

#define ckWARN_d(w) Perl_ckwarn_d(aTHX_ packWARN(w))
#define ckWARN2_d(w1,w2) Perl_ckwarn_d(aTHX_ packWARN2(w1,w2))
#define ckWARN3_d(w1,w2,w3) Perl_ckwarn_d(aTHX_ packWARN3(w1,w2,w3))
#define ckWARN4_d(w1,w2,w3,w4) Perl_ckwarn_d(aTHX_ packWARN4(w1,w2,w3,w4))

#define WARNshift 8

#define packWARN(a) (a )




#define packWARN2(a,b) ((a) | ((b)<<8) )
#define packWARN3(a,b,c) ((a) | ((b)<<8) | ((c)<<16) )
#define packWARN4(a,b,c,d) ((a) | ((b)<<8) | ((c)<<16) | ((d) <<24))

#define unpackWARN1(x) ((x) & 0xFF)
#define unpackWARN2(x) (((x) >>8) & 0xFF)
#define unpackWARN3(x) (((x) >>16) & 0xFF)
#define unpackWARN4(x) (((x) >>24) & 0xFF)

#define ckDEAD(x) (PL_curcop && !specialWARN(PL_curcop->cop_warnings) && (isWARNf_on(PL_curcop->cop_warnings, unpackWARN1(x)) || (unpackWARN2(x) && (isWARNf_on(PL_curcop->cop_warnings, unpackWARN2(x)) || (unpackWARN3(x) && (isWARNf_on(PL_curcop->cop_warnings, unpackWARN3(x)) || (unpackWARN4(x) && isWARNf_on(PL_curcop->cop_warnings, unpackWARN4(x)))))))))
# 4091 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4



#define my_stat() my_stat_flags(SV_GMAGIC)
#define my_lstat() my_lstat_flags(SV_GMAGIC)


#undef _XPV_HEAD
#undef _XPVMG_HEAD
#undef _XPVCV_COMMON

# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/parser.h" 1 3 4
# 12 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/parser.h" 3 4
#define YYEMPTY (-2)

typedef struct {
    YYSTYPE val;
    short state;
    I32 savestack_ix;
    CV *compcv;



} yy_stack_frame;



typedef struct yy_lexshared {
    struct yy_lexshared *ls_prev;
    SV *ls_linestr;
    char *ls_bufptr;
    char *re_eval_start;
    SV *re_eval_str;
} LEXSHARED;

typedef struct yy_parser {



    struct yy_parser *old_parser;
    YYSTYPE yylval;
    int yychar;


    int yyerrstatus;

    yy_stack_frame *stack;
    yy_stack_frame *stack_max1;
    yy_stack_frame *ps;
    int yylen;



    I32 lex_formbrack;
    I32 lex_brackets;
    I32 lex_casemods;
    char *lex_brackstack;
    char *lex_casestack;
    U8 lex_defer;
    U8 lex_dojoin;

    U8 expect;
    _Bool preambled;
    _Bool sub_no_recover;
    U8 sub_error_count;
    OP *lex_inpat;
    OP *lex_op;
    SV *lex_repl;
    U16 lex_inwhat;
    U16 last_lop_op;
    I32 lex_starts;
    SV *lex_stuff;
    I32 multi_start;
    I32 multi_end;
    UV multi_open;
    UV multi_close;
    _Bool lex_re_reparsing;
    U8 lex_super_state;
    U16 lex_sub_inwhat;
    I32 lex_allbrackets;
    OP *lex_sub_op;
    SV *lex_sub_repl;
    LEXSHARED *lex_shared;
    SV *linestr;
    char *bufptr;


    char *oldbufptr;
    char *oldoldbufptr;
    char *bufend;
    char *linestart;
    char *last_uni;
    char *last_lop;




    line_t copline;
    U16 in_my;
    U8 lex_state;
    U8 error_count;
    HV *in_my_stash;
    PerlIO *rsfp;
    AV *rsfp_filters;

    YYSTYPE nextval[5];
    I32 nexttype[5];
    U8 nexttoke;
    U8 form_lex_state;
    U8 lex_fakeeof;
    U8 lex_flags;
    COP *saved_curcop;
    char tokenbuf[256];
    line_t herelines;
    line_t preambling;


    UV sig_elems;
    UV sig_optelems;
    char sig_slurpy;
    _Bool sig_seen;

    _Bool recheck_utf8_validity;

    U16 in_pod:1;
    U16 filtered:1;
    U16 saw_infix_sigil:1;
    U16 parsed_sub:1;
} yy_parser;


#define LEX_STUFF_UTF8 0x00000001
#define LEX_KEEP_PREVIOUS 0x00000002
# 145 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/parser.h" 3 4
#define PARSE_OPTIONAL 0x00000001


enum {
    LEX_FAKEEOF_NEVER,
    LEX_FAKEEOF_CLOSING,
    LEX_FAKEEOF_NONEXPR,
    LEX_FAKEEOF_LOWLOGIC,
    LEX_FAKEEOF_COMMA,
    LEX_FAKEEOF_ASSIGN,
    LEX_FAKEEOF_IFELSE,
    LEX_FAKEEOF_RANGE,
    LEX_FAKEEOF_LOGIC,
    LEX_FAKEEOF_BITWISE,
    LEX_FAKEEOF_COMPARE,
    LEX_FAKEEOF_MAX
};
# 4103 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4

typedef struct magic_state MGS;
# 4126 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
struct ptr_tbl_ent {
    struct ptr_tbl_ent* next;
    const void* oldval;
    void* newval;
};

struct ptr_tbl {
    struct ptr_tbl_ent** tbl_ary;
    UV tbl_max;
    UV tbl_items;
    struct ptr_tbl_arena *tbl_arena;
    struct ptr_tbl_ent *tbl_arena_next;
    struct ptr_tbl_ent *tbl_arena_end;
};
# 4213 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define vtohl(x) ((x)&0xFFFFFFFF)
#define vtohs(x) ((x)&0xFFFF)
#define htovl(x) vtohl(x)
#define htovs(x) vtohs(x)
# 4239 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define I32_MAX_P1 (2.0 * (1 + (((U32)I32_MAX) >> 1)))
#define U32_MAX_P1 (4.0 * (1 + ((U32_MAX) >> 2)))




#define U32_MAX_P1_HALF (2.0 * (1 + ((U32_MAX) >> 2)))

#define UV_MAX_P1 (4.0 * (1 + ((UV_MAX) >> 2)))
#define IV_MAX_P1 (2.0 * (1 + (((UV)IV_MAX) >> 1)))
#define UV_MAX_P1_HALF (2.0 * (1 + ((UV_MAX) >> 2)))
# 4271 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define I_32(what) (cast_i32((NV)(what)))
#define U_32(what) (cast_ulong((NV)(what)))
#define I_V(what) (cast_iv((NV)(what)))
#define U_V(what) (cast_uv((NV)(what)))
# 4290 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define U_S(what) ((U16)U_32(what))
#define U_I(what) ((unsigned int)U_32(what))
#define U_L(what) U_32(what)
# 4315 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Perl_signbit signbit




#define NV_WITHIN_IV(nv) (I_V(nv) >= IV_MIN && I_V(nv) <= IV_MAX)
#define NV_WITHIN_UV(nv) ((nv)>=0.0 && U_V(nv) >= UV_MIN && U_V(nv) <= UV_MAX)



#define CLUMP_2UV(iv) ((iv) < 0 ? 0 : (UV)(iv))
#define CLUMP_2IV(uv) ((uv) > (UV)IV_MAX ? IV_MAX : (IV)(uv))


#define MAXSYSFD 2




uid_t getuid (void);
uid_t geteuid (void);
gid_t getgid (void);
gid_t getegid (void);




#define Perl_debug_log PerlIO_stderr()



#define Perl_error_log (PL_stderrgv && isGV(PL_stderrgv) && GvIOp(PL_stderrgv) && IoOFP(GvIOp(PL_stderrgv)) ? IoOFP(GvIOp(PL_stderrgv)) : PerlIO_stderr())
# 4355 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define DEBUG_p_FLAG 0x00000001
#define DEBUG_s_FLAG 0x00000002
#define DEBUG_l_FLAG 0x00000004
#define DEBUG_t_FLAG 0x00000008
#define DEBUG_o_FLAG 0x00000010
#define DEBUG_c_FLAG 0x00000020
#define DEBUG_P_FLAG 0x00000040
#define DEBUG_m_FLAG 0x00000080
#define DEBUG_f_FLAG 0x00000100
#define DEBUG_r_FLAG 0x00000200
#define DEBUG_x_FLAG 0x00000400
#define DEBUG_u_FLAG 0x00000800

#define DEBUG_U_FLAG 0x00001000

#define DEBUG_X_FLAG 0x00004000
#define DEBUG_D_FLAG 0x00008000
#define DEBUG_S_FLAG 0x00010000
#define DEBUG_T_FLAG 0x00020000
#define DEBUG_R_FLAG 0x00040000
#define DEBUG_J_FLAG 0x00080000
#define DEBUG_v_FLAG 0x00100000
#define DEBUG_C_FLAG 0x00200000
#define DEBUG_A_FLAG 0x00400000
#define DEBUG_q_FLAG 0x00800000
#define DEBUG_M_FLAG 0x01000000
#define DEBUG_B_FLAG 0x02000000
#define DEBUG_L_FLAG 0x04000000
#define DEBUG_i_FLAG 0x08000000
#define DEBUG_y_FLAG 0x10000000
#define DEBUG_MASK 0x1FFFEFFF

#define DEBUG_DB_RECURSE_FLAG 0x40000000
#define DEBUG_TOP_FLAG 0x80000000


#define DEBUG_BOTH_FLAGS_TEST_(flag1,flag2) UNLIKELY((PL_debug & ((flag1)|(flag2))) == ((flag1)|(flag2)))



#define DEBUG_p_TEST_ UNLIKELY(PL_debug & DEBUG_p_FLAG)
#define DEBUG_s_TEST_ UNLIKELY(PL_debug & DEBUG_s_FLAG)
#define DEBUG_l_TEST_ UNLIKELY(PL_debug & DEBUG_l_FLAG)
#define DEBUG_t_TEST_ UNLIKELY(PL_debug & DEBUG_t_FLAG)
#define DEBUG_o_TEST_ UNLIKELY(PL_debug & DEBUG_o_FLAG)
#define DEBUG_c_TEST_ UNLIKELY(PL_debug & DEBUG_c_FLAG)
#define DEBUG_P_TEST_ UNLIKELY(PL_debug & DEBUG_P_FLAG)
#define DEBUG_m_TEST_ UNLIKELY(PL_debug & DEBUG_m_FLAG)
#define DEBUG_f_TEST_ UNLIKELY(PL_debug & DEBUG_f_FLAG)
#define DEBUG_r_TEST_ UNLIKELY(PL_debug & DEBUG_r_FLAG)
#define DEBUG_x_TEST_ UNLIKELY(PL_debug & DEBUG_x_FLAG)
#define DEBUG_u_TEST_ UNLIKELY(PL_debug & DEBUG_u_FLAG)
#define DEBUG_U_TEST_ UNLIKELY(PL_debug & DEBUG_U_FLAG)
#define DEBUG_X_TEST_ UNLIKELY(PL_debug & DEBUG_X_FLAG)
#define DEBUG_D_TEST_ UNLIKELY(PL_debug & DEBUG_D_FLAG)
#define DEBUG_S_TEST_ UNLIKELY(PL_debug & DEBUG_S_FLAG)
#define DEBUG_T_TEST_ UNLIKELY(PL_debug & DEBUG_T_FLAG)
#define DEBUG_R_TEST_ UNLIKELY(PL_debug & DEBUG_R_FLAG)
#define DEBUG_J_TEST_ UNLIKELY(PL_debug & DEBUG_J_FLAG)
#define DEBUG_v_TEST_ UNLIKELY(PL_debug & DEBUG_v_FLAG)
#define DEBUG_C_TEST_ UNLIKELY(PL_debug & DEBUG_C_FLAG)
#define DEBUG_A_TEST_ UNLIKELY(PL_debug & DEBUG_A_FLAG)
#define DEBUG_q_TEST_ UNLIKELY(PL_debug & DEBUG_q_FLAG)
#define DEBUG_M_TEST_ UNLIKELY(PL_debug & DEBUG_M_FLAG)
#define DEBUG_B_TEST_ UNLIKELY(PL_debug & DEBUG_B_FLAG)
#define DEBUG_L_TEST_ UNLIKELY(PL_debug & DEBUG_L_FLAG)
#define DEBUG_i_TEST_ UNLIKELY(PL_debug & DEBUG_i_FLAG)
#define DEBUG_y_TEST_ UNLIKELY(PL_debug & DEBUG_y_FLAG)
#define DEBUG_Xv_TEST_ DEBUG_BOTH_FLAGS_TEST_(DEBUG_X_FLAG, DEBUG_v_FLAG)
#define DEBUG_Uv_TEST_ DEBUG_BOTH_FLAGS_TEST_(DEBUG_U_FLAG, DEBUG_v_FLAG)
#define DEBUG_Pv_TEST_ DEBUG_BOTH_FLAGS_TEST_(DEBUG_P_FLAG, DEBUG_v_FLAG)
#define DEBUG_Lv_TEST_ DEBUG_BOTH_FLAGS_TEST_(DEBUG_L_FLAG, DEBUG_v_FLAG)
#define DEBUG_yv_TEST_ DEBUG_BOTH_FLAGS_TEST_(DEBUG_y_FLAG, DEBUG_v_FLAG)
# 4561 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define DEBUG_p_TEST (0)
#define DEBUG_s_TEST (0)
#define DEBUG_l_TEST (0)
#define DEBUG_t_TEST (0)
#define DEBUG_o_TEST (0)
#define DEBUG_c_TEST (0)
#define DEBUG_P_TEST (0)
#define DEBUG_m_TEST (0)
#define DEBUG_f_TEST (0)
#define DEBUG_r_TEST (0)
#define DEBUG_x_TEST (0)
#define DEBUG_u_TEST (0)
#define DEBUG_U_TEST (0)
#define DEBUG_X_TEST (0)
#define DEBUG_D_TEST (0)
#define DEBUG_S_TEST (0)
#define DEBUG_T_TEST (0)
#define DEBUG_R_TEST (0)
#define DEBUG_J_TEST (0)
#define DEBUG_v_TEST (0)
#define DEBUG_C_TEST (0)
#define DEBUG_A_TEST (0)
#define DEBUG_q_TEST (0)
#define DEBUG_M_TEST (0)
#define DEBUG_B_TEST (0)
#define DEBUG_L_TEST (0)
#define DEBUG_i_TEST (0)
#define DEBUG_y_TEST (0)
#define DEBUG_Xv_TEST (0)
#define DEBUG_Uv_TEST (0)
#define DEBUG_Pv_TEST (0)
#define DEBUG_Lv_TEST (0)
#define DEBUG_yv_TEST (0)

#define PERL_DEB(a) 
#define PERL_DEB2(a,b) b
#define PERL_DEBUG(a) 
#define DEBUG_p(a) 
#define DEBUG_s(a) 
#define DEBUG_l(a) 
#define DEBUG_t(a) 
#define DEBUG_o(a) 
#define DEBUG_c(a) 
#define DEBUG_P(a) 
#define DEBUG_m(a) 
#define DEBUG_f(a) 
#define DEBUG_r(a) 
#define DEBUG_x(a) 
#define DEBUG_u(a) 
#define DEBUG_U(a) 
#define DEBUG_X(a) 
#define DEBUG_D(a) 
#define DEBUG_S(a) 
#define DEBUG_T(a) 
#define DEBUG_R(a) 
#define DEBUG_v(a) 
#define DEBUG_C(a) 
#define DEBUG_A(a) 
#define DEBUG_q(a) 
#define DEBUG_M(a) 
#define DEBUG_B(a) 
#define DEBUG_L(a) 
#define DEBUG_i(a) 
#define DEBUG_y(a) 
#define DEBUG_Xv(a) 
#define DEBUG_Uv(a) 
#define DEBUG_Pv(a) 
#define DEBUG_Lv(a) 
#define DEBUG_yv(a) 



#define DEBUG_SCOPE(where) DEBUG_l( Perl_deb(aTHX_ "%s scope %ld (savestack=%ld) at %s:%d\n", where, (long)PL_scopestack_ix, (long)PL_savestack_ix, __FILE__, __LINE__));
# 4642 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Perl_assert(what) PERL_DEB2( ((what) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" __FILE__ "\", line %d", STRINGIFY(what), __LINE__), (void) 0)), ((void)0))
# 4656 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define assert_(what) 


struct ufuncs {
    I32 (*uf_val)(PerlInterpreter* my_perl __attribute__((unused)), IV, SV*);
    I32 (*uf_set)(PerlInterpreter* my_perl __attribute__((unused)), IV, SV*);
    IV uf_index;
};
# 4684 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_MG_UFUNC(name,ix,sv) I32 name(pTHX_ IV ix, SV *sv)
# 4696 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
char *crypt (const char*, const char*);




char *getlogin (void);
# 4712 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define UNLINK PerlLIO_unlink
# 4740 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
typedef struct sigaction Sigsave_t;




#define SCAN_DEF 0
#define SCAN_TR 1
#define SCAN_REPL 2







#define RUNOPS_DEFAULT Perl_runops_standard



extern void PerlIO_teardown(void);

#define PERLIO_INIT MUTEX_INIT(&PL_perlio_mutex)
#define PERLIO_TERM STMT_START { PerlIO_teardown(); MUTEX_DESTROY(&PL_perlio_mutex); } STMT_END
# 4794 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define MALLOC_INIT 
#define MALLOC_TERM 




struct perl_memory_debug_header;
struct perl_memory_debug_header {
  PerlInterpreter* interpreter;



  struct perl_memory_debug_header *prev;
  struct perl_memory_debug_header *next;



};
# 4830 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_MEMORY_DEBUG_HEADER_SIZE 0
# 4849 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define INIT_TRACK_MEMPOOL(header,interp) 




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 1 3 4
# 25 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 3 4
#define _MALLOC_MALLOC_H_ 

# 1 "/usr/local/Cellar/gcc/11.2.0_3/lib/gcc/11/gcc/x86_64-apple-darwin20/11/include/stddef.h" 1 3 4
# 28 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 1 3 4
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 3 4
#define _MACH_MACH_TYPES_H_ 





# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_info.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_info.h" 3 4
#define _MACH_HOST_INFO_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 1 3 4
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define _MACH_MESSAGE_H_ 




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kern_return.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kern_return.h" 3 4
#define _MACH_KERN_RETURN_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/kern_return.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/kern_return.h" 3 4
#define _MACH_MACHINE_KERN_RETURN_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/kern_return.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/kern_return.h" 3 4
#define _MACH_I386_KERN_RETURN_H_ 


typedef int kern_return_t;
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/kern_return.h" 2 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kern_return.h" 2 3 4

#define KERN_SUCCESS 0

#define KERN_INVALID_ADDRESS 1



#define KERN_PROTECTION_FAILURE 2




#define KERN_NO_SPACE 3





#define KERN_INVALID_ARGUMENT 4




#define KERN_FAILURE 5



#define KERN_RESOURCE_SHORTAGE 6




#define KERN_NOT_RECEIVER 7




#define KERN_NO_ACCESS 8



#define KERN_MEMORY_FAILURE 9





#define KERN_MEMORY_ERROR 10







#define KERN_ALREADY_IN_SET 11



#define KERN_NOT_IN_SET 12



#define KERN_NAME_EXISTS 13



#define KERN_ABORTED 14




#define KERN_INVALID_NAME 15



#define KERN_INVALID_TASK 16



#define KERN_INVALID_RIGHT 17



#define KERN_INVALID_VALUE 18



#define KERN_UREFS_OVERFLOW 19



#define KERN_INVALID_CAPABILITY 20



#define KERN_RIGHT_EXISTS 21




#define KERN_INVALID_HOST 22



#define KERN_MEMORY_PRESENT 23





#define KERN_MEMORY_DATA_MOVED 24
# 198 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kern_return.h" 3 4
#define KERN_MEMORY_RESTART_COPY 25







#define KERN_INVALID_PROCESSOR_SET 26




#define KERN_POLICY_LIMIT 27




#define KERN_INVALID_POLICY 28




#define KERN_INVALID_OBJECT 29




#define KERN_ALREADY_WAITING 30




#define KERN_DEFAULT_SET 31




#define KERN_EXCEPTION_PROTECTED 32





#define KERN_INVALID_LEDGER 33



#define KERN_INVALID_MEMORY_CONTROL 34



#define KERN_INVALID_SECURITY 35




#define KERN_NOT_DEPRESSED 36




#define KERN_TERMINATED 37



#define KERN_LOCK_SET_DESTROYED 38



#define KERN_LOCK_UNSTABLE 39




#define KERN_LOCK_OWNED 40



#define KERN_LOCK_OWNED_SELF 41



#define KERN_SEMAPHORE_DESTROYED 42



#define KERN_RPC_SERVER_TERMINATED 43




#define KERN_RPC_TERMINATE_ORPHAN 44



#define KERN_RPC_CONTINUE_ORPHAN 45



#define KERN_NOT_SUPPORTED 46



#define KERN_NODE_DOWN 47



#define KERN_NOT_WAITING 48


#define KERN_OPERATION_TIMED_OUT 49



#define KERN_CODESIGN_ERROR 50




#define KERN_POLICY_STATIC 51



#define KERN_INSUFFICIENT_BUFFER_SIZE 52



#define KERN_DENIED 53



#define KERN_MISSING_KC 54



#define KERN_INVALID_KC 55



#define KERN_RETURN_MAX 0x100
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 2 3 4
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_timeout_t;






#define MACH_MSG_TIMEOUT_NONE ((mach_msg_timeout_t) 0)
# 132 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define MACH_MSGH_BITS_ZERO 0x00000000

#define MACH_MSGH_BITS_REMOTE_MASK 0x0000001f
#define MACH_MSGH_BITS_LOCAL_MASK 0x00001f00
#define MACH_MSGH_BITS_VOUCHER_MASK 0x001f0000

#define MACH_MSGH_BITS_PORTS_MASK (MACH_MSGH_BITS_REMOTE_MASK | MACH_MSGH_BITS_LOCAL_MASK | MACH_MSGH_BITS_VOUCHER_MASK)




#define MACH_MSGH_BITS_COMPLEX 0x80000000U

#define MACH_MSGH_BITS_USER 0x801f1f1fU

#define MACH_MSGH_BITS_RAISEIMP 0x20000000U
#define MACH_MSGH_BITS_DENAP MACH_MSGH_BITS_RAISEIMP

#define MACH_MSGH_BITS_IMPHOLDASRT 0x10000000U
#define MACH_MSGH_BITS_DENAPHOLDASRT MACH_MSGH_BITS_IMPHOLDASRT

#define MACH_MSGH_BITS_CIRCULAR 0x10000000U

#define MACH_MSGH_BITS_USED 0xb01f1f1fU


#define MACH_MSGH_BITS(remote,local) ((remote) | ((local) << 8))

#define MACH_MSGH_BITS_SET_PORTS(remote,local,voucher) (((remote) & MACH_MSGH_BITS_REMOTE_MASK) | (((local) << 8) & MACH_MSGH_BITS_LOCAL_MASK) | (((voucher) << 16) & MACH_MSGH_BITS_VOUCHER_MASK))



#define MACH_MSGH_BITS_SET(remote,local,voucher,other) (MACH_MSGH_BITS_SET_PORTS((remote), (local), (voucher)) | ((other) &~ MACH_MSGH_BITS_PORTS_MASK))




#define MACH_MSGH_BITS_REMOTE(bits) ((bits) & MACH_MSGH_BITS_REMOTE_MASK)

#define MACH_MSGH_BITS_LOCAL(bits) (((bits) & MACH_MSGH_BITS_LOCAL_MASK) >> 8)

#define MACH_MSGH_BITS_VOUCHER(bits) (((bits) & MACH_MSGH_BITS_VOUCHER_MASK) >> 16)

#define MACH_MSGH_BITS_PORTS(bits) ((bits) & MACH_MSGH_BITS_PORTS_MASK)

#define MACH_MSGH_BITS_OTHER(bits) ((bits) &~ MACH_MSGH_BITS_PORTS_MASK)



#define MACH_MSGH_BITS_HAS_REMOTE(bits) (MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO)

#define MACH_MSGH_BITS_HAS_LOCAL(bits) (MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO)

#define MACH_MSGH_BITS_HAS_VOUCHER(bits) (MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO)

#define MACH_MSGH_BITS_IS_COMPLEX(bits) (((bits) & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO)



#define MACH_MSGH_BITS_RAISED_IMPORTANCE(bits) (((bits) & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO)

#define MACH_MSGH_BITS_HOLDS_IMPORTANCE_ASSERTION(bits) (((bits) & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO)
# 221 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_bits_t;
typedef natural_t mach_msg_size_t;
typedef integer_t mach_msg_id_t;

#define MACH_MSG_SIZE_NULL (mach_msg_size_t *) 0

typedef unsigned int mach_msg_priority_t;

#define MACH_MSG_PRIORITY_UNSPECIFIED (mach_msg_priority_t) 0


typedef unsigned int mach_msg_type_name_t;

#define MACH_MSG_TYPE_MOVE_RECEIVE 16
#define MACH_MSG_TYPE_MOVE_SEND 17
#define MACH_MSG_TYPE_MOVE_SEND_ONCE 18
#define MACH_MSG_TYPE_COPY_SEND 19
#define MACH_MSG_TYPE_MAKE_SEND 20
#define MACH_MSG_TYPE_MAKE_SEND_ONCE 21
#define MACH_MSG_TYPE_COPY_RECEIVE 22
#define MACH_MSG_TYPE_DISPOSE_RECEIVE 24
#define MACH_MSG_TYPE_DISPOSE_SEND 25
#define MACH_MSG_TYPE_DISPOSE_SEND_ONCE 26

typedef unsigned int mach_msg_copy_options_t;

#define MACH_MSG_PHYSICAL_COPY 0
#define MACH_MSG_VIRTUAL_COPY 1
#define MACH_MSG_ALLOCATE 2
#define MACH_MSG_OVERWRITE 3




#define MACH_MSG_GUARD_FLAGS_NONE 0x0000
#define MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE 0x0001
#define MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND 0x0002
#define MACH_MSG_GUARD_FLAGS_MASK 0x0003
typedef unsigned int mach_msg_guard_flags_t;
# 273 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_descriptor_type_t;

#define MACH_MSG_PORT_DESCRIPTOR 0
#define MACH_MSG_OOL_DESCRIPTOR 1
#define MACH_MSG_OOL_PORTS_DESCRIPTOR 2
#define MACH_MSG_OOL_VOLATILE_DESCRIPTOR 3
#define MACH_MSG_GUARDED_PORT_DESCRIPTOR 4

#pragma pack(push, 4)

typedef struct{
 natural_t pad1;
 mach_msg_size_t pad2;
 unsigned int pad3 : 24;
 mach_msg_descriptor_type_t type : 8;
} mach_msg_type_descriptor_t;

typedef struct{
 mach_port_t name;

 mach_msg_size_t pad1;
 unsigned int pad2 : 16;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;
} mach_msg_port_descriptor_t;

typedef struct{
 uint32_t address;
 mach_msg_size_t size;
 boolean_t deallocate: 8;
 mach_msg_copy_options_t copy: 8;
 unsigned int pad1: 8;
 mach_msg_descriptor_type_t type: 8;
} mach_msg_ool_descriptor32_t;

typedef struct{
 uint64_t address;
 boolean_t deallocate: 8;
 mach_msg_copy_options_t copy: 8;
 unsigned int pad1: 8;
 mach_msg_descriptor_type_t type: 8;
 mach_msg_size_t size;
} mach_msg_ool_descriptor64_t;

typedef struct{
 void* address;



 boolean_t deallocate: 8;
 mach_msg_copy_options_t copy: 8;
 unsigned int pad1: 8;
 mach_msg_descriptor_type_t type: 8;

 mach_msg_size_t size;

} mach_msg_ool_descriptor_t;

typedef struct{
 uint32_t address;
 mach_msg_size_t count;
 boolean_t deallocate: 8;
 mach_msg_copy_options_t copy: 8;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;
} mach_msg_ool_ports_descriptor32_t;

typedef struct{
 uint64_t address;
 boolean_t deallocate: 8;
 mach_msg_copy_options_t copy: 8;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;
 mach_msg_size_t count;
} mach_msg_ool_ports_descriptor64_t;

typedef struct{
 void* address;



 boolean_t deallocate: 8;
 mach_msg_copy_options_t copy: 8;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;

 mach_msg_size_t count;

} mach_msg_ool_ports_descriptor_t;

typedef struct{
 uint32_t context;
 mach_port_name_t name;
 mach_msg_guard_flags_t flags : 16;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;
} mach_msg_guarded_port_descriptor32_t;

typedef struct{
 uint64_t context;
 mach_msg_guard_flags_t flags : 16;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;
 mach_port_name_t name;
} mach_msg_guarded_port_descriptor64_t;

typedef struct{
 mach_port_context_t context;



 mach_msg_guard_flags_t flags : 16;
 mach_msg_type_name_t disposition : 8;
 mach_msg_descriptor_type_t type : 8;

 mach_port_name_t name;

} mach_msg_guarded_port_descriptor_t;






typedef union{
 mach_msg_port_descriptor_t port;
 mach_msg_ool_descriptor_t out_of_line;
 mach_msg_ool_ports_descriptor_t ool_ports;
 mach_msg_type_descriptor_t type;
 mach_msg_guarded_port_descriptor_t guarded_port;
} mach_msg_descriptor_t;

typedef struct{
 mach_msg_size_t msgh_descriptor_count;
} mach_msg_body_t;

#define MACH_MSG_BODY_NULL (mach_msg_body_t *) 0
#define MACH_MSG_DESCRIPTOR_NULL (mach_msg_descriptor_t *) 0

typedef struct{
 mach_msg_bits_t msgh_bits;
 mach_msg_size_t msgh_size;
 mach_port_t msgh_remote_port;
 mach_port_t msgh_local_port;
 mach_port_name_t msgh_voucher_port;
 mach_msg_id_t msgh_id;
} mach_msg_header_t;

#define msgh_reserved msgh_voucher_port
#define MACH_MSG_NULL (mach_msg_header_t *) 0

typedef struct{
 mach_msg_header_t header;
 mach_msg_body_t body;
} mach_msg_base_t;

typedef unsigned int mach_msg_trailer_type_t;

#define MACH_MSG_TRAILER_FORMAT_0 0

typedef unsigned int mach_msg_trailer_size_t;
typedef char *mach_msg_trailer_info_t;

typedef struct{
 mach_msg_trailer_type_t msgh_trailer_type;
 mach_msg_trailer_size_t msgh_trailer_size;
} mach_msg_trailer_t;
# 450 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef struct{
 mach_msg_trailer_type_t msgh_trailer_type;
 mach_msg_trailer_size_t msgh_trailer_size;
 mach_port_seqno_t msgh_seqno;
} mach_msg_seqno_trailer_t;

typedef struct{
 unsigned int val[2];
} security_token_t;

typedef struct{
 mach_msg_trailer_type_t msgh_trailer_type;
 mach_msg_trailer_size_t msgh_trailer_size;
 mach_port_seqno_t msgh_seqno;
 security_token_t msgh_sender;
} mach_msg_security_trailer_t;
# 476 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef struct{
 unsigned int val[8];
} audit_token_t;

typedef struct{
 mach_msg_trailer_type_t msgh_trailer_type;
 mach_msg_trailer_size_t msgh_trailer_size;
 mach_port_seqno_t msgh_seqno;
 security_token_t msgh_sender;
 audit_token_t msgh_audit;
} mach_msg_audit_trailer_t;

typedef struct{
 mach_msg_trailer_type_t msgh_trailer_type;
 mach_msg_trailer_size_t msgh_trailer_size;
 mach_port_seqno_t msgh_seqno;
 security_token_t msgh_sender;
 audit_token_t msgh_audit;
 mach_port_context_t msgh_context;
} mach_msg_context_trailer_t;



typedef struct{
 mach_port_name_t sender;
} msg_labels_t;

typedef int mach_msg_filter_id;
#define MACH_MSG_FILTER_POLICY_ALLOW (mach_msg_filter_id)0






typedef struct{
 mach_msg_trailer_type_t msgh_trailer_type;
 mach_msg_trailer_size_t msgh_trailer_size;
 mach_port_seqno_t msgh_seqno;
 security_token_t msgh_sender;
 audit_token_t msgh_audit;
 mach_port_context_t msgh_context;
 mach_msg_filter_id msgh_ad;
 msg_labels_t msgh_labels;
} mach_msg_mac_trailer_t;


#define MACH_MSG_TRAILER_MINIMUM_SIZE sizeof(mach_msg_trailer_t)
# 535 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
#define MAX_TRAILER_SIZE ((mach_msg_size_t)sizeof(mach_msg_max_trailer_t))
# 545 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;




#define MACH_MSG_TRAILER_FORMAT_0_SIZE sizeof(mach_msg_format_0_trailer_t)

#define KERNEL_SECURITY_TOKEN_VALUE { {0, 1} }
extern const security_token_t KERNEL_SECURITY_TOKEN;

#define KERNEL_AUDIT_TOKEN_VALUE { {0, 0, 0, 0, 0, 0, 0, 0} }
extern const audit_token_t KERNEL_AUDIT_TOKEN;

typedef integer_t mach_msg_options_t;

typedef struct{
 mach_msg_header_t header;
} mach_msg_empty_send_t;

typedef struct{
 mach_msg_header_t header;
 mach_msg_trailer_t trailer;
} mach_msg_empty_rcv_t;

typedef union{
 mach_msg_empty_send_t send;
 mach_msg_empty_rcv_t rcv;
} mach_msg_empty_t;

#pragma pack(pop)


#define round_msg(x) (((mach_msg_size_t)(x) + sizeof (natural_t) - 1) & ~(sizeof (natural_t) - 1))






#define MACH_MSG_SIZE_MAX ((mach_msg_size_t) ~0)
# 595 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define MACH_MSG_SIZE_RELIABLE ((mach_msg_size_t) 256 * 1024)





#define MACH_MSGH_KIND_NORMAL 0x00000000
#define MACH_MSGH_KIND_NOTIFICATION 0x00000001
#define msgh_kind msgh_seqno
#define mach_msg_kind_t mach_port_seqno_t

typedef natural_t mach_msg_type_size_t;
typedef natural_t mach_msg_type_number_t;
# 618 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define MACH_MSG_TYPE_PORT_NONE 0

#define MACH_MSG_TYPE_PORT_NAME 15
#define MACH_MSG_TYPE_PORT_RECEIVE MACH_MSG_TYPE_MOVE_RECEIVE
#define MACH_MSG_TYPE_PORT_SEND MACH_MSG_TYPE_MOVE_SEND
#define MACH_MSG_TYPE_PORT_SEND_ONCE MACH_MSG_TYPE_MOVE_SEND_ONCE

#define MACH_MSG_TYPE_LAST 22






#define MACH_MSG_TYPE_POLYMORPHIC ((mach_msg_type_name_t) -1)





#define MACH_MSG_TYPE_PORT_ANY(x) (((x) >= MACH_MSG_TYPE_MOVE_RECEIVE) && ((x) <= MACH_MSG_TYPE_MAKE_SEND_ONCE))



#define MACH_MSG_TYPE_PORT_ANY_SEND(x) (((x) >= MACH_MSG_TYPE_MOVE_SEND) && ((x) <= MACH_MSG_TYPE_MAKE_SEND_ONCE))



#define MACH_MSG_TYPE_PORT_ANY_RIGHT(x) (((x) >= MACH_MSG_TYPE_MOVE_RECEIVE) && ((x) <= MACH_MSG_TYPE_MOVE_SEND_ONCE))



typedef integer_t mach_msg_option_t;

#define MACH_MSG_OPTION_NONE 0x00000000

#define MACH_SEND_MSG 0x00000001
#define MACH_RCV_MSG 0x00000002

#define MACH_RCV_LARGE 0x00000004
#define MACH_RCV_LARGE_IDENTITY 0x00000008

#define MACH_SEND_TIMEOUT 0x00000010
#define MACH_SEND_OVERRIDE 0x00000020
#define MACH_SEND_INTERRUPT 0x00000040
#define MACH_SEND_NOTIFY 0x00000080
#define MACH_SEND_ALWAYS 0x00010000
#define MACH_SEND_TRAILER 0x00020000
#define MACH_SEND_NOIMPORTANCE 0x00040000
#define MACH_SEND_NODENAP MACH_SEND_NOIMPORTANCE
#define MACH_SEND_IMPORTANCE 0x00080000
#define MACH_SEND_SYNC_OVERRIDE 0x00100000
#define MACH_SEND_PROPAGATE_QOS 0x00200000
#define MACH_SEND_SYNC_USE_THRPRI MACH_SEND_PROPAGATE_QOS
#define MACH_SEND_KERNEL 0x00400000
#define MACH_SEND_SYNC_BOOTSTRAP_CHECKIN 0x00800000

#define MACH_RCV_TIMEOUT 0x00000100
#define MACH_RCV_NOTIFY 0x00000000
#define MACH_RCV_INTERRUPT 0x00000400
#define MACH_RCV_VOUCHER 0x00000800
#define MACH_RCV_OVERWRITE 0x00000000
#define MACH_RCV_GUARDED_DESC 0x00001000
#define MACH_RCV_SYNC_WAIT 0x00004000
#define MACH_RCV_SYNC_PEEK 0x00008000

#define MACH_MSG_STRICT_REPLY 0x00000200
# 698 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define MACH_RCV_TRAILER_NULL 0
#define MACH_RCV_TRAILER_SEQNO 1
#define MACH_RCV_TRAILER_SENDER 2
#define MACH_RCV_TRAILER_AUDIT 3
#define MACH_RCV_TRAILER_CTX 4
#define MACH_RCV_TRAILER_AV 7
#define MACH_RCV_TRAILER_LABELS 8

#define MACH_RCV_TRAILER_TYPE(x) (((x) & 0xf) << 28)
#define MACH_RCV_TRAILER_ELEMENTS(x) (((x) & 0xf) << 24)
#define MACH_RCV_TRAILER_MASK ((0xf << 24))

#define GET_RCV_ELEMENTS(y) (((y) >> 24) & 0xf)
# 722 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define REQUESTED_TRAILER_SIZE_NATIVE(y) ((mach_msg_trailer_size_t) ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) ? sizeof(mach_msg_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) ? sizeof(mach_msg_seqno_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) ? sizeof(mach_msg_security_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AUDIT) ? sizeof(mach_msg_audit_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_CTX) ? sizeof(mach_msg_context_trailer_t) : ((GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AV) ? sizeof(mach_msg_mac_trailer_t) : sizeof(mach_msg_max_trailer_t))))))))
# 739 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
#define REQUESTED_TRAILER_SIZE(y) REQUESTED_TRAILER_SIZE_NATIVE(y)
# 752 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4
typedef kern_return_t mach_msg_return_t;

#define MACH_MSG_SUCCESS 0x00000000


#define MACH_MSG_MASK 0x00003e00

#define MACH_MSG_IPC_SPACE 0x00002000

#define MACH_MSG_VM_SPACE 0x00001000

#define MACH_MSG_IPC_KERNEL 0x00000800

#define MACH_MSG_VM_KERNEL 0x00000400


#define MACH_SEND_IN_PROGRESS 0x10000001

#define MACH_SEND_INVALID_DATA 0x10000002

#define MACH_SEND_INVALID_DEST 0x10000003

#define MACH_SEND_TIMED_OUT 0x10000004

#define MACH_SEND_INVALID_VOUCHER 0x10000005

#define MACH_SEND_INTERRUPTED 0x10000007

#define MACH_SEND_MSG_TOO_SMALL 0x10000008

#define MACH_SEND_INVALID_REPLY 0x10000009

#define MACH_SEND_INVALID_RIGHT 0x1000000a

#define MACH_SEND_INVALID_NOTIFY 0x1000000b

#define MACH_SEND_INVALID_MEMORY 0x1000000c

#define MACH_SEND_NO_BUFFER 0x1000000d

#define MACH_SEND_TOO_LARGE 0x1000000e

#define MACH_SEND_INVALID_TYPE 0x1000000f

#define MACH_SEND_INVALID_HEADER 0x10000010

#define MACH_SEND_INVALID_TRAILER 0x10000011

#define MACH_SEND_INVALID_CONTEXT 0x10000012

#define MACH_SEND_INVALID_RT_OOL_SIZE 0x10000015

#define MACH_SEND_NO_GRANT_DEST 0x10000016

#define MACH_SEND_MSG_FILTERED 0x10000017


#define MACH_RCV_IN_PROGRESS 0x10004001

#define MACH_RCV_INVALID_NAME 0x10004002

#define MACH_RCV_TIMED_OUT 0x10004003

#define MACH_RCV_TOO_LARGE 0x10004004

#define MACH_RCV_INTERRUPTED 0x10004005

#define MACH_RCV_PORT_CHANGED 0x10004006

#define MACH_RCV_INVALID_NOTIFY 0x10004007

#define MACH_RCV_INVALID_DATA 0x10004008

#define MACH_RCV_PORT_DIED 0x10004009

#define MACH_RCV_IN_SET 0x1000400a

#define MACH_RCV_HEADER_ERROR 0x1000400b

#define MACH_RCV_BODY_ERROR 0x1000400c

#define MACH_RCV_INVALID_TYPE 0x1000400d

#define MACH_RCV_SCATTER_SMALL 0x1000400e

#define MACH_RCV_INVALID_TRAILER 0x1000400f

#define MACH_RCV_IN_PROGRESS_TIMED 0x10004011

#define MACH_RCV_INVALID_REPLY 0x10004012





# 864 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4

extern mach_msg_return_t mach_msg_overwrite(
 mach_msg_header_t *msg,
 mach_msg_option_t option,
 mach_msg_size_t send_size,
 mach_msg_size_t rcv_size,
 mach_port_name_t rcv_name,
 mach_msg_timeout_t timeout,
 mach_port_name_t notify,
 mach_msg_header_t *rcv_msg,
 mach_msg_size_t rcv_limit);
# 885 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/message.h" 3 4

extern mach_msg_return_t mach_msg(
 mach_msg_header_t *msg,
 mach_msg_option_t option,
 mach_msg_size_t send_size,
 mach_msg_size_t rcv_size,
 mach_port_name_t rcv_name,
 mach_msg_timeout_t timeout,
 mach_port_name_t notify);








extern kern_return_t mach_voucher_deallocate(
 mach_port_name_t voucher);



# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_info.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
#define _MACH_VM_STATISTICS_H_ 
# 88 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
struct vm_statistics {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 natural_t zero_fill_count;
 natural_t reactivations;
 natural_t pageins;
 natural_t pageouts;
 natural_t faults;
 natural_t cow_faults;
 natural_t lookups;
 natural_t hits;


 natural_t purgeable_count;
 natural_t purges;
# 113 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
 natural_t speculative_count;
};


typedef struct vm_statistics *vm_statistics_t;
typedef struct vm_statistics vm_statistics_data_t;
# 136 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
struct vm_statistics64 {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 uint64_t zero_fill_count;
 uint64_t reactivations;
 uint64_t pageins;
 uint64_t pageouts;
 uint64_t faults;
 uint64_t cow_faults;
 uint64_t lookups;
 uint64_t hits;
 uint64_t purges;
 natural_t purgeable_count;






 natural_t speculative_count;


 uint64_t decompressions;
 uint64_t compressions;
 uint64_t swapins;
 uint64_t swapouts;
 natural_t compressor_page_count;
 natural_t throttled_count;
 natural_t external_page_count;
 natural_t internal_page_count;
 uint64_t total_uncompressed_pages_in_compressor;
} __attribute__((aligned(8)));

typedef struct vm_statistics64 *vm_statistics64_t;
typedef struct vm_statistics64 vm_statistics64_data_t;

kern_return_t vm_stats(void *info, unsigned int *count);







#define VM_STATISTICS_TRUNCATE_TO_32_BIT(value) ((uint32_t)(((value) > UINT32_MAX ) ? UINT32_MAX : (value)))
# 194 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
struct vm_extmod_statistics {
 int64_t task_for_pid_count;
 int64_t task_for_pid_caller_count;
 int64_t thread_creation_count;
 int64_t thread_creation_caller_count;
 int64_t thread_set_state_count;
 int64_t thread_set_state_caller_count;
} __attribute__((aligned(8)));

typedef struct vm_extmod_statistics *vm_extmod_statistics_t;
typedef struct vm_extmod_statistics vm_extmod_statistics_data_t;

typedef struct vm_purgeable_stat {
 uint64_t count;
 uint64_t size;
}vm_purgeable_stat_t;

struct vm_purgeable_info {
 vm_purgeable_stat_t fifo_data[8];
 vm_purgeable_stat_t obsolete_data;
 vm_purgeable_stat_t lifo_data[8];
};

typedef struct vm_purgeable_info *vm_purgeable_info_t;



#define VM_PAGE_QUERY_PAGE_PRESENT 0x1
#define VM_PAGE_QUERY_PAGE_FICTITIOUS 0x2
#define VM_PAGE_QUERY_PAGE_REF 0x4
#define VM_PAGE_QUERY_PAGE_DIRTY 0x8
#define VM_PAGE_QUERY_PAGE_PAGED_OUT 0x10
#define VM_PAGE_QUERY_PAGE_COPIED 0x20
#define VM_PAGE_QUERY_PAGE_SPECULATIVE 0x40
#define VM_PAGE_QUERY_PAGE_EXTERNAL 0x80
#define VM_PAGE_QUERY_PAGE_CS_VALIDATED 0x100
#define VM_PAGE_QUERY_PAGE_CS_TAINTED 0x200
#define VM_PAGE_QUERY_PAGE_CS_NX 0x400
#define VM_PAGE_QUERY_PAGE_REUSABLE 0x800
# 267 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
#define VM_FLAGS_FIXED 0x0000
#define VM_FLAGS_ANYWHERE 0x0001
#define VM_FLAGS_PURGABLE 0x0002
#define VM_FLAGS_4GB_CHUNK 0x0004
#define VM_FLAGS_RANDOM_ADDR 0x0008
#define VM_FLAGS_NO_CACHE 0x0010
#define VM_FLAGS_RESILIENT_CODESIGN 0x0020
#define VM_FLAGS_RESILIENT_MEDIA 0x0040
#define VM_FLAGS_PERMANENT 0x0080
#define VM_FLAGS_OVERWRITE 0x4000





#define VM_FLAGS_SUPERPAGE_MASK 0x70000
#define VM_FLAGS_RETURN_DATA_ADDR 0x100000
#define VM_FLAGS_RETURN_4K_DATA_ADDR 0x800000
#define VM_FLAGS_ALIAS_MASK 0xFF000000
#define VM_GET_FLAGS_ALIAS(flags,alias) (alias) = ((flags) & VM_FLAGS_ALIAS_MASK) >> 24

#define VM_SET_FLAGS_ALIAS(flags,alias) (flags) = (((flags) & ~VM_FLAGS_ALIAS_MASK) | (((alias) & ~VM_FLAGS_ALIAS_MASK) << 24))




#define VM_FLAGS_USER_ALLOCATE (VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE | VM_FLAGS_PURGABLE | VM_FLAGS_4GB_CHUNK | VM_FLAGS_RANDOM_ADDR | VM_FLAGS_NO_CACHE | VM_FLAGS_PERMANENT | VM_FLAGS_OVERWRITE | VM_FLAGS_SUPERPAGE_MASK | VM_FLAGS_ALIAS_MASK)
# 303 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_statistics.h" 3 4
#define VM_FLAGS_USER_MAP (VM_FLAGS_USER_ALLOCATE | VM_FLAGS_RETURN_4K_DATA_ADDR | VM_FLAGS_RETURN_DATA_ADDR)


#define VM_FLAGS_USER_REMAP (VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE | VM_FLAGS_RANDOM_ADDR | VM_FLAGS_OVERWRITE| VM_FLAGS_RETURN_DATA_ADDR | VM_FLAGS_RESILIENT_CODESIGN | VM_FLAGS_RESILIENT_MEDIA)







#define VM_FLAGS_SUPERPAGE_SHIFT 16
#define SUPERPAGE_NONE 0
#define SUPERPAGE_SIZE_ANY 1
#define VM_FLAGS_SUPERPAGE_NONE (SUPERPAGE_NONE << VM_FLAGS_SUPERPAGE_SHIFT)
#define VM_FLAGS_SUPERPAGE_SIZE_ANY (SUPERPAGE_SIZE_ANY << VM_FLAGS_SUPERPAGE_SHIFT)
#define SUPERPAGE_SIZE_2MB 2
#define VM_FLAGS_SUPERPAGE_SIZE_2MB (SUPERPAGE_SIZE_2MB<<VM_FLAGS_SUPERPAGE_SHIFT)




#define GUARD_TYPE_VIRT_MEMORY 0x5


enum virtual_memory_guard_exception_codes {
 kGUARD_EXC_DEALLOC_GAP = 1u << 0
};



#define __VM_LEDGER_ACCOUNTING_POSTMARK 2019032600


#define VM_LEDGER_TAG_NONE 0x00000000
#define VM_LEDGER_TAG_DEFAULT 0x00000001
#define VM_LEDGER_TAG_NETWORK 0x00000002
#define VM_LEDGER_TAG_MEDIA 0x00000003
#define VM_LEDGER_TAG_GRAPHICS 0x00000004
#define VM_LEDGER_TAG_NEURAL 0x00000005
#define VM_LEDGER_TAG_MAX 0x00000005

#define VM_LEDGER_FLAG_NO_FOOTPRINT 0x00000001
#define VM_LEDGER_FLAGS (VM_LEDGER_FLAG_NO_FOOTPRINT)


#define VM_MEMORY_MALLOC 1
#define VM_MEMORY_MALLOC_SMALL 2
#define VM_MEMORY_MALLOC_LARGE 3
#define VM_MEMORY_MALLOC_HUGE 4
#define VM_MEMORY_SBRK 5
#define VM_MEMORY_REALLOC 6
#define VM_MEMORY_MALLOC_TINY 7
#define VM_MEMORY_MALLOC_LARGE_REUSABLE 8
#define VM_MEMORY_MALLOC_LARGE_REUSED 9

#define VM_MEMORY_ANALYSIS_TOOL 10

#define VM_MEMORY_MALLOC_NANO 11
#define VM_MEMORY_MALLOC_MEDIUM 12
#define VM_MEMORY_MALLOC_PGUARD 13

#define VM_MEMORY_MACH_MSG 20
#define VM_MEMORY_IOKIT 21
#define VM_MEMORY_STACK 30
#define VM_MEMORY_GUARD 31
#define VM_MEMORY_SHARED_PMAP 32

#define VM_MEMORY_DYLIB 33
#define VM_MEMORY_OBJC_DISPATCHERS 34


#define VM_MEMORY_UNSHARED_PMAP 35




#define VM_MEMORY_APPKIT 40
#define VM_MEMORY_FOUNDATION 41
#define VM_MEMORY_COREGRAPHICS 42
#define VM_MEMORY_CORESERVICES 43
#define VM_MEMORY_CARBON VM_MEMORY_CORESERVICES
#define VM_MEMORY_JAVA 44
#define VM_MEMORY_COREDATA 45
#define VM_MEMORY_COREDATA_OBJECTIDS 46
#define VM_MEMORY_ATS 50
#define VM_MEMORY_LAYERKIT 51
#define VM_MEMORY_CGIMAGE 52
#define VM_MEMORY_TCMALLOC 53


#define VM_MEMORY_COREGRAPHICS_DATA 54


#define VM_MEMORY_COREGRAPHICS_SHARED 55


#define VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS 56


#define VM_MEMORY_COREGRAPHICS_BACKINGSTORES 57


#define VM_MEMORY_COREGRAPHICS_XALLOC 58


#define VM_MEMORY_COREGRAPHICS_MISC VM_MEMORY_COREGRAPHICS


#define VM_MEMORY_DYLD 60

#define VM_MEMORY_DYLD_MALLOC 61


#define VM_MEMORY_SQLITE 62


#define VM_MEMORY_JAVASCRIPT_CORE 63
#define VM_MEMORY_WEBASSEMBLY VM_MEMORY_JAVASCRIPT_CORE

#define VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR 64
#define VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE 65


#define VM_MEMORY_GLSL 66


#define VM_MEMORY_OPENCL 67


#define VM_MEMORY_COREIMAGE 68


#define VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS 69


#define VM_MEMORY_IMAGEIO 70


#define VM_MEMORY_COREPROFILE 71


#define VM_MEMORY_ASSETSD 72


#define VM_MEMORY_OS_ALLOC_ONCE 73


#define VM_MEMORY_LIBDISPATCH 74


#define VM_MEMORY_ACCELERATE 75


#define VM_MEMORY_COREUI 76


#define VM_MEMORY_COREUIFILE 77


#define VM_MEMORY_GENEALOGY 78


#define VM_MEMORY_RAWCAMERA 79


#define VM_MEMORY_CORPSEINFO 80


#define VM_MEMORY_ASL 81


#define VM_MEMORY_SWIFT_RUNTIME 82


#define VM_MEMORY_SWIFT_METADATA 83


#define VM_MEMORY_DHMM 84



#define VM_MEMORY_SCENEKIT 86


#define VM_MEMORY_SKYWALK 87

#define VM_MEMORY_IOSURFACE 88

#define VM_MEMORY_LIBNETWORK 89

#define VM_MEMORY_AUDIO 90

#define VM_MEMORY_VIDEOBITSTREAM 91


#define VM_MEMORY_CM_XPC 92

#define VM_MEMORY_CM_RPC 93

#define VM_MEMORY_CM_MEMORYPOOL 94

#define VM_MEMORY_CM_READCACHE 95

#define VM_MEMORY_CM_CRABS 96


#define VM_MEMORY_QUICKLOOK_THUMBNAILS 97


#define VM_MEMORY_ACCOUNTS 98


#define VM_MEMORY_SANITIZER 99


#define VM_MEMORY_IOACCELERATOR 100


#define VM_MEMORY_CM_REGWARP 101


#define VM_MEMORY_EAR_DECODER 102


#define VM_MEMORY_COREUI_CACHED_IMAGE_DATA 103


#define VM_MEMORY_ROSETTA 230
#define VM_MEMORY_ROSETTA_THREAD_CONTEXT 231
#define VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP 232
#define VM_MEMORY_ROSETTA_RETURN_STACK 233
#define VM_MEMORY_ROSETTA_EXECUTABLE_HEAP 234
#define VM_MEMORY_ROSETTA_USER_LDT 235
#define VM_MEMORY_ROSETTA_ARENA 236
#define VM_MEMORY_ROSETTA_10 239


#define VM_MEMORY_APPLICATION_SPECIFIC_1 240
#define VM_MEMORY_APPLICATION_SPECIFIC_16 255

#define VM_MAKE_TAG(tag) ((tag) << 24)
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_info.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine.h" 1 3 4
# 62 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine.h" 3 4
#define _MACH_MACHINE_H_ 







typedef integer_t cpu_type_t;
typedef integer_t cpu_subtype_t;
typedef integer_t cpu_threadtype_t;

#define CPU_STATE_MAX 4

#define CPU_STATE_USER 0
#define CPU_STATE_SYSTEM 1
#define CPU_STATE_IDLE 2
#define CPU_STATE_NICE 3






#define CPU_ARCH_MASK 0xff000000
#define CPU_ARCH_ABI64 0x01000000
#define CPU_ARCH_ABI64_32 0x02000000





#define CPU_TYPE_ANY ((cpu_type_t) -1)

#define CPU_TYPE_VAX ((cpu_type_t) 1)




#define CPU_TYPE_MC680x0 ((cpu_type_t) 6)
#define CPU_TYPE_X86 ((cpu_type_t) 7)
#define CPU_TYPE_I386 CPU_TYPE_X86
#define CPU_TYPE_X86_64 (CPU_TYPE_X86 | CPU_ARCH_ABI64)



#define CPU_TYPE_MC98000 ((cpu_type_t) 10)
#define CPU_TYPE_HPPA ((cpu_type_t) 11)
#define CPU_TYPE_ARM ((cpu_type_t) 12)
#define CPU_TYPE_ARM64 (CPU_TYPE_ARM | CPU_ARCH_ABI64)
#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)
#define CPU_TYPE_MC88000 ((cpu_type_t) 13)
#define CPU_TYPE_SPARC ((cpu_type_t) 14)
#define CPU_TYPE_I860 ((cpu_type_t) 15)


#define CPU_TYPE_POWERPC ((cpu_type_t) 18)
#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)
# 134 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MASK 0xff000000
#define CPU_SUBTYPE_LIB64 0x80000000
#define CPU_SUBTYPE_PTRAUTH_ABI 0x80000000






#define CPU_SUBTYPE_ANY ((cpu_subtype_t) -1)
# 156 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MULTIPLE ((cpu_subtype_t) -1)
#define CPU_SUBTYPE_LITTLE_ENDIAN ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_BIG_ENDIAN ((cpu_subtype_t) 1)





#define CPU_THREADTYPE_NONE ((cpu_threadtype_t) 0)






#define CPU_SUBTYPE_VAX_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_VAX780 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_VAX785 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_VAX750 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_VAX730 ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_UVAXI ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_UVAXII ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_VAX8200 ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_VAX8500 ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_VAX8600 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_VAX8650 ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_VAX8800 ((cpu_subtype_t) 11)
#define CPU_SUBTYPE_UVAXIII ((cpu_subtype_t) 12)
# 202 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine.h" 3 4
#define CPU_SUBTYPE_MC680x0_ALL ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC68030 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC68040 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_MC68030_ONLY ((cpu_subtype_t) 3)





#define CPU_SUBTYPE_INTEL(f,m) ((cpu_subtype_t) (f) + ((m) << 4))

#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8)
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0





#define CPU_SUBTYPE_X86_ALL ((cpu_subtype_t)3)
#define CPU_SUBTYPE_X86_64_ALL ((cpu_subtype_t)3)
#define CPU_SUBTYPE_X86_ARCH1 ((cpu_subtype_t)4)
#define CPU_SUBTYPE_X86_64_H ((cpu_subtype_t)8)


#define CPU_THREADTYPE_INTEL_HTT ((cpu_threadtype_t) 1)





#define CPU_SUBTYPE_MIPS_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MIPS_R2300 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MIPS_R2600 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_MIPS_R2800 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_MIPS_R2000a ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_MIPS_R2000 ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_MIPS_R3000a ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_MIPS_R3000 ((cpu_subtype_t) 7)




#define CPU_SUBTYPE_MC98000_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MC98601 ((cpu_subtype_t) 1)






#define CPU_SUBTYPE_HPPA_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_HPPA_7100 ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_HPPA_7100LC ((cpu_subtype_t) 1)




#define CPU_SUBTYPE_MC88000_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_MC88100 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_MC88110 ((cpu_subtype_t) 2)




#define CPU_SUBTYPE_SPARC_ALL ((cpu_subtype_t) 0)




#define CPU_SUBTYPE_I860_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_I860_860 ((cpu_subtype_t) 1)




#define CPU_SUBTYPE_POWERPC_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_POWERPC_601 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_POWERPC_602 ((cpu_subtype_t) 2)
#define CPU_SUBTYPE_POWERPC_603 ((cpu_subtype_t) 3)
#define CPU_SUBTYPE_POWERPC_603e ((cpu_subtype_t) 4)
#define CPU_SUBTYPE_POWERPC_603ev ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_POWERPC_604 ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_POWERPC_604e ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_POWERPC_620 ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_POWERPC_750 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_POWERPC_7400 ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_POWERPC_7450 ((cpu_subtype_t) 11)
#define CPU_SUBTYPE_POWERPC_970 ((cpu_subtype_t) 100)




#define CPU_SUBTYPE_ARM_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_ARM_V4T ((cpu_subtype_t) 5)
#define CPU_SUBTYPE_ARM_V6 ((cpu_subtype_t) 6)
#define CPU_SUBTYPE_ARM_V5TEJ ((cpu_subtype_t) 7)
#define CPU_SUBTYPE_ARM_XSCALE ((cpu_subtype_t) 8)
#define CPU_SUBTYPE_ARM_V7 ((cpu_subtype_t) 9)
#define CPU_SUBTYPE_ARM_V7F ((cpu_subtype_t) 10)
#define CPU_SUBTYPE_ARM_V7S ((cpu_subtype_t) 11)
#define CPU_SUBTYPE_ARM_V7K ((cpu_subtype_t) 12)
#define CPU_SUBTYPE_ARM_V8 ((cpu_subtype_t) 13)
#define CPU_SUBTYPE_ARM_V6M ((cpu_subtype_t) 14)
#define CPU_SUBTYPE_ARM_V7M ((cpu_subtype_t) 15)
#define CPU_SUBTYPE_ARM_V7EM ((cpu_subtype_t) 16)
#define CPU_SUBTYPE_ARM_V8M ((cpu_subtype_t) 17)




#define CPU_SUBTYPE_ARM64_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_ARM64_V8 ((cpu_subtype_t) 1)
#define CPU_SUBTYPE_ARM64E ((cpu_subtype_t) 2)


#define CPU_SUBTYPE_ARM64_PTR_AUTH_MASK 0x0f000000
#define CPU_SUBTYPE_ARM64_PTR_AUTH_VERSION(x) (((x) & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> 24)




#define CPU_SUBTYPE_ARM64_32_ALL ((cpu_subtype_t) 0)
#define CPU_SUBTYPE_ARM64_32_V8 ((cpu_subtype_t) 1)
# 364 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine.h" 3 4
#define CPUFAMILY_UNKNOWN 0
#define CPUFAMILY_POWERPC_G3 0xcee41549
#define CPUFAMILY_POWERPC_G4 0x77c184ae
#define CPUFAMILY_POWERPC_G5 0xed76d8aa
#define CPUFAMILY_INTEL_6_13 0xaa33392b
#define CPUFAMILY_INTEL_PENRYN 0x78ea4fbc
#define CPUFAMILY_INTEL_NEHALEM 0x6b5a4cd2
#define CPUFAMILY_INTEL_WESTMERE 0x573b5eec
#define CPUFAMILY_INTEL_SANDYBRIDGE 0x5490b78c
#define CPUFAMILY_INTEL_IVYBRIDGE 0x1f65e835
#define CPUFAMILY_INTEL_HASWELL 0x10b282dc
#define CPUFAMILY_INTEL_BROADWELL 0x582ed09c
#define CPUFAMILY_INTEL_SKYLAKE 0x37fc219f
#define CPUFAMILY_INTEL_KABYLAKE 0x0f817246
#define CPUFAMILY_INTEL_ICELAKE 0x38435547
#define CPUFAMILY_INTEL_COMETLAKE 0x1cf8a03e
#define CPUFAMILY_ARM_9 0xe73283ae
#define CPUFAMILY_ARM_11 0x8ff620d8
#define CPUFAMILY_ARM_XSCALE 0x53b005f5
#define CPUFAMILY_ARM_12 0xbd1b0ae9
#define CPUFAMILY_ARM_13 0x0cc90e64
#define CPUFAMILY_ARM_14 0x96077ef1
#define CPUFAMILY_ARM_15 0xa8511bca
#define CPUFAMILY_ARM_SWIFT 0x1e2d6381
#define CPUFAMILY_ARM_CYCLONE 0x37a09642
#define CPUFAMILY_ARM_TYPHOON 0x2c91a47e
#define CPUFAMILY_ARM_TWISTER 0x92fb37c8
#define CPUFAMILY_ARM_HURRICANE 0x67ceee93
#define CPUFAMILY_ARM_MONSOON_MISTRAL 0xe81e7ef6
#define CPUFAMILY_ARM_VORTEX_TEMPEST 0x07d34b9f
#define CPUFAMILY_ARM_LIGHTNING_THUNDER 0x462504d2
#define CPUFAMILY_ARM_FIRESTORM_ICESTORM 0x1b588bb3

#define CPUSUBFAMILY_UNKNOWN 0
#define CPUSUBFAMILY_ARM_HP 1
#define CPUSUBFAMILY_ARM_HG 2
#define CPUSUBFAMILY_ARM_M 3
#define CPUSUBFAMILY_ARM_HS 4
#define CPUSUBFAMILY_ARM_HC_HD 5


#define CPUFAMILY_INTEL_6_23 CPUFAMILY_INTEL_PENRYN
#define CPUFAMILY_INTEL_6_26 CPUFAMILY_INTEL_NEHALEM
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_info.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/time_value.h" 1 3 4
# 58 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/time_value.h" 3 4
#define _MACH_TIME_VALUE_H_ 







struct time_value {
 integer_t seconds;
 integer_t microseconds;
};

typedef struct time_value time_value_t;





#define TIME_MICROS_MAX (1000000)

#define time_value_add_usec(val,micros) { if (((val)->microseconds += (micros)) >= TIME_MICROS_MAX) { (val)->microseconds -= TIME_MICROS_MAX; (val)->seconds++; } }







#define time_value_add(result,addend) { (result)->microseconds += (addend)->microseconds; (result)->seconds += (addend)->seconds; if ((result)->microseconds >= TIME_MICROS_MAX) { (result)->microseconds -= TIME_MICROS_MAX; (result)->seconds++; } }
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_info.h" 2 3 4






typedef integer_t *host_info_t;
typedef integer_t *host_info64_t;

#define HOST_INFO_MAX (1024)
typedef integer_t host_info_data_t[(1024)];

#define KERNEL_VERSION_MAX (512)
typedef char kernel_version_t[(512)];

#define KERNEL_BOOT_INFO_MAX (4096)
typedef char kernel_boot_info_t[(4096)];





typedef integer_t host_flavor_t;
#define HOST_BASIC_INFO 1
#define HOST_SCHED_INFO 3
#define HOST_RESOURCE_SIZES 4
#define HOST_PRIORITY_INFO 5
#define HOST_SEMAPHORE_TRAPS 7
#define HOST_MACH_MSG_TRAP 8
#define HOST_VM_PURGABLE 9
#define HOST_DEBUG_INFO_INTERNAL 10
#define HOST_CAN_HAS_DEBUGGER 11
#define HOST_PREFERRED_USER_ARCH 12


struct host_can_has_debugger_info {
 boolean_t can_has_debugger;
};
typedef struct host_can_has_debugger_info host_can_has_debugger_info_data_t;
typedef struct host_can_has_debugger_info *host_can_has_debugger_info_t;
#define HOST_CAN_HAS_DEBUGGER_COUNT ((mach_msg_type_number_t) (sizeof(host_can_has_debugger_info_data_t)/sizeof(integer_t)))


#pragma pack(push, 4)

struct host_basic_info {
 integer_t max_cpus;
 integer_t avail_cpus;
 natural_t memory_size;
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 cpu_threadtype_t cpu_threadtype;
 integer_t physical_cpu;
 integer_t physical_cpu_max;
 integer_t logical_cpu;
 integer_t logical_cpu_max;
 uint64_t max_mem;
};

#pragma pack(pop)

typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;
#define HOST_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_basic_info_data_t)/sizeof(integer_t)))


struct host_sched_info {
 integer_t min_timeout;
 integer_t min_quantum;
};

typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;
#define HOST_SCHED_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_sched_info_data_t)/sizeof(integer_t)))


struct kernel_resource_sizes {
 natural_t task;
 natural_t thread;
 natural_t port;
 natural_t memory_region;
 natural_t memory_object;
};

typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
typedef struct kernel_resource_sizes *kernel_resource_sizes_t;
#define HOST_RESOURCE_SIZES_COUNT ((mach_msg_type_number_t) (sizeof(kernel_resource_sizes_data_t)/sizeof(integer_t)))


struct host_priority_info {
 integer_t kernel_priority;
 integer_t system_priority;
 integer_t server_priority;
 integer_t user_priority;
 integer_t depress_priority;
 integer_t idle_priority;
 integer_t minimum_priority;
 integer_t maximum_priority;
};

typedef struct host_priority_info host_priority_info_data_t;
typedef struct host_priority_info *host_priority_info_t;
#define HOST_PRIORITY_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_priority_info_data_t)/sizeof(integer_t)))



#define HOST_LOAD_INFO 1
#define HOST_VM_INFO 2
#define HOST_CPU_LOAD_INFO 3


#define HOST_VM_INFO64 4
#define HOST_EXTMOD_INFO64 5
#define HOST_EXPIRED_TASK_INFO 6


struct host_load_info {
 integer_t avenrun[3];
 integer_t mach_factor[3];
};

typedef struct host_load_info host_load_info_data_t;
typedef struct host_load_info *host_load_info_t;
#define HOST_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(host_load_info_data_t)/sizeof(integer_t)))


typedef struct vm_purgeable_info host_purgable_info_data_t;
typedef struct vm_purgeable_info *host_purgable_info_t;
#define HOST_VM_PURGABLE_COUNT ((mach_msg_type_number_t) (sizeof(host_purgable_info_data_t)/sizeof(integer_t)))




#define HOST_VM_INFO64_COUNT ((mach_msg_type_number_t) (sizeof(vm_statistics64_data_t)/sizeof(integer_t)))



#define HOST_VM_INFO64_LATEST_COUNT HOST_VM_INFO64_COUNT
#define HOST_VM_INFO64_REV1_COUNT HOST_VM_INFO64_LATEST_COUNT

#define HOST_VM_INFO64_REV0_COUNT ((mach_msg_type_number_t) (HOST_VM_INFO64_REV1_COUNT - 14))





#define HOST_EXTMOD_INFO64_COUNT ((mach_msg_type_number_t) (sizeof(vm_extmod_statistics_data_t)/sizeof(integer_t)))



#define HOST_EXTMOD_INFO64_LATEST_COUNT HOST_EXTMOD_INFO64_COUNT


#define HOST_VM_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_statistics_data_t)/sizeof(integer_t)))



#define HOST_VM_INFO_LATEST_COUNT HOST_VM_INFO_COUNT
#define HOST_VM_INFO_REV2_COUNT HOST_VM_INFO_LATEST_COUNT

#define HOST_VM_INFO_REV1_COUNT ((mach_msg_type_number_t) (HOST_VM_INFO_REV2_COUNT - 1))


#define HOST_VM_INFO_REV0_COUNT ((mach_msg_type_number_t) (HOST_VM_INFO_REV1_COUNT - 2))



struct host_cpu_load_info {
 natural_t cpu_ticks[4];
};

typedef struct host_cpu_load_info host_cpu_load_info_data_t;
typedef struct host_cpu_load_info *host_cpu_load_info_t;
#define HOST_CPU_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof (host_cpu_load_info_data_t) / sizeof (integer_t)))


struct host_preferred_user_arch {
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
};

typedef struct host_preferred_user_arch host_preferred_user_arch_data_t;
typedef struct host_preferred_user_arch *host_preferred_user_arch_t;
#define HOST_PREFERRED_USER_ARCH_COUNT ((mach_msg_type_number_t) (sizeof(host_preferred_user_arch_data_t)/sizeof(integer_t)))
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_notify.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_notify.h" 3 4
#define _MACH_HOST_NOTIFY_H_ 

#define HOST_NOTIFY_CALENDAR_CHANGE 0
#define HOST_NOTIFY_CALENDAR_SET 1
#define HOST_NOTIFY_TYPE_MAX 1

#define HOST_CALENDAR_CHANGED_REPLYID 950
#define HOST_CALENDAR_SET_REPLYID 951
# 82 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_special_ports.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_special_ports.h" 3 4
#define _MACH_HOST_SPECIAL_PORTS_H_ 




#define HOST_SECURITY_PORT 0

#define HOST_MIN_SPECIAL_PORT HOST_SECURITY_PORT




#define HOST_PORT 1
#define HOST_PRIV_PORT 2
#define HOST_IO_MASTER_PORT 3
#define HOST_MAX_SPECIAL_KERNEL_PORT 7

#define HOST_LAST_SPECIAL_KERNEL_PORT HOST_IO_MASTER_PORT




#define HOST_DYNAMIC_PAGER_PORT (1 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_AUDIT_CONTROL_PORT (2 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_USER_NOTIFICATION_PORT (3 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_AUTOMOUNTD_PORT (4 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_LOCKD_PORT (5 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_KTRACE_BACKGROUND_PORT (6 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_SEATBELT_PORT (7 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_KEXTD_PORT (8 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_LAUNCHCTL_PORT (9 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_UNFREED_PORT (10 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_AMFID_PORT (11 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_GSSD_PORT (12 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_TELEMETRY_PORT (13 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_ATM_NOTIFICATION_PORT (14 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_COALITION_PORT (15 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_SYSDIAGNOSE_PORT (16 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_XPC_EXCEPTION_PORT (17 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_CONTAINERD_PORT (18 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_NODE_PORT (19 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_RESOURCE_NOTIFY_PORT (20 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_CLOSURED_PORT (21 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_SYSPOLICYD_PORT (22 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_FILECOORDINATIOND_PORT (23 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_FAIRPLAYD_PORT (24 + HOST_MAX_SPECIAL_KERNEL_PORT)
#define HOST_IOCOMPRESSIONSTATS_PORT (25 + HOST_MAX_SPECIAL_KERNEL_PORT)

#define HOST_MAX_SPECIAL_PORT HOST_IOCOMPRESSIONSTATS_PORT



#define HOST_CHUD_PORT HOST_LAUNCHCTL_PORT




#define HOST_LOCAL_NODE -1
# 131 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/host_special_ports.h" 3 4
#define host_get_host_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_PORT, (port)))


#define host_set_host_port(host,port) (KERN_INVALID_ARGUMENT)

#define host_get_host_priv_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_PRIV_PORT, (port)))


#define host_set_host_priv_port(host,port) (KERN_INVALID_ARGUMENT)

#define host_get_io_master_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_IO_MASTER_PORT, (port)))


#define host_set_io_master_port(host,port) (KERN_INVALID_ARGUMENT)




#define host_get_dynamic_pager_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_DYNAMIC_PAGER_PORT, (port)))


#define host_set_dynamic_pager_port(host,port) (host_set_special_port((host), HOST_DYNAMIC_PAGER_PORT, (port)))


#define host_get_audit_control_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_AUDIT_CONTROL_PORT, (port)))


#define host_set_audit_control_port(host,port) (host_set_special_port((host), HOST_AUDIT_CONTROL_PORT, (port)))


#define host_get_user_notification_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_USER_NOTIFICATION_PORT, (port)))


#define host_set_user_notification_port(host,port) (host_set_special_port((host), HOST_USER_NOTIFICATION_PORT, (port)))


#define host_get_automountd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_AUTOMOUNTD_PORT, (port)))


#define host_set_automountd_port(host,port) (host_set_special_port((host), HOST_AUTOMOUNTD_PORT, (port)))


#define host_get_lockd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_LOCKD_PORT, (port)))


#define host_set_lockd_port(host,port) (host_set_special_port((host), HOST_LOCKD_PORT, (port)))


#define host_get_ktrace_background_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_KTRACE_BACKGROUND_PORT, (port)))


#define host_set_ktrace_background_port(host,port) (host_set_special_port((host), HOST_KTRACE_BACKGROUND_PORT, (port)))


#define host_get_kextd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_KEXTD_PORT, (port)))


#define host_set_kextd_port(host,port) (host_set_special_port((host), HOST_KEXTD_PORT, (port)))


#define host_get_launchctl_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_LAUNCHCTL_PORT, (port)))


#define host_set_launchctl_port(host,port) (host_set_special_port((host), HOST_LAUNCHCTL_PORT, (port)))


#define host_get_chud_port(host,port) host_get_launchctl_port(host, port)
#define host_set_chud_port(host,port) host_set_launchctl_port(host, port)

#define host_get_unfreed_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_UNFREED_PORT, (port)))


#define host_set_unfreed_port(host,port) (host_set_special_port((host), HOST_UNFREED_PORT, (port)))


#define host_get_amfid_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_AMFID_PORT, (port)))


#define host_set_amfid_port(host,port) (host_set_special_port((host), HOST_AMFID_PORT, (port)))


#define host_get_gssd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_GSSD_PORT, (port)))


#define host_set_gssd_port(host,port) (host_set_special_port((host), HOST_GSSD_PORT, (port)))


#define host_get_telemetry_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_TELEMETRY_PORT, (port)))


#define host_set_telemetry_port(host,port) (host_set_special_port((host), HOST_TELEMETRY_PORT, (port)))


#define host_get_atm_notification_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_ATM_NOTIFICATION_PORT, (port)))


#define host_set_atm_notification_port(host,port) (host_set_special_port((host), HOST_ATM_NOTIFICATION_PORT, (port)))


#define host_get_coalition_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_COALITION_PORT, (port)))


#define host_set_coalition_port(host,port) (host_set_special_port((host), HOST_COALITION_PORT, (port)))


#define host_get_sysdiagnose_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_SYSDIAGNOSE_PORT, (port)))


#define host_set_sysdiagnose_port(host,port) (host_set_special_port((host), HOST_SYSDIAGNOSE_PORT, (port)))


#define host_get_container_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_CONTAINERD_PORT, (port)))


#define host_set_container_port(host,port) (host_set_special_port((host), HOST_CONTAINERD_PORT, (port)))


#define host_get_node_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_NODE_PORT, (port)))


#define host_set_node_port(host,port) (host_set_special_port((host), HOST_NODE_PORT, (port)))


#define host_get_closured_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_CLOSURED_PORT, (port)))


#define host_set_closured_port(host,port) (host_set_special_port((host), HOST_CLOSURED_PORT, (port)))


#define host_get_syspolicyd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_SYSPOLICYD_PORT, (port)))


#define host_set_syspolicyd_port(host,port) (host_set_special_port((host), HOST_SYSPOLICYD_PORT, (port)))


#define host_get_filecoordinationd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_FILECOORDINATIOND_PORT, (port)))


#define host_set_filecoordinationd_port(host,port) (host_set_special_port((host), HOST_FILECOORDINATIOND_PORT, (port)))


#define host_get_fairplayd_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_FAIRPLAYD_PORT, (port)))


#define host_set_fairplayd_port(host,port) (host_set_special_port((host), HOST_FAIRPLAYD_PORT, (port)))


#define host_get_iocompressionstats_port(host,port) (host_get_special_port((host), HOST_LOCAL_NODE, HOST_IOCOMPRESSIONSTATS_PORT, (port)))


#define host_set_iocompressionstats_port(host,port) (host_set_special_port((host), HOST_IOCOMPRESSIONSTATS_PORT, (port)))
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 3 4
#define _MACH_MEMORY_OBJECT_TYPES_H_ 
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_prot.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_prot.h" 3 4
#define _MACH_VM_PROT_H_ 







typedef int vm_prot_t;





#define VM_PROT_NONE ((vm_prot_t) 0x00)

#define VM_PROT_READ ((vm_prot_t) 0x01)
#define VM_PROT_WRITE ((vm_prot_t) 0x02)
#define VM_PROT_EXECUTE ((vm_prot_t) 0x04)





#define VM_PROT_DEFAULT (VM_PROT_READ|VM_PROT_WRITE)





#define VM_PROT_ALL (VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE)
# 106 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_NO_CHANGE ((vm_prot_t) 0x08)
# 116 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_COPY ((vm_prot_t) 0x10)
# 130 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_WANTS_COPY ((vm_prot_t) 0x10)







#define VM_PROT_IS_MASK ((vm_prot_t) 0x40)
# 149 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_prot.h" 3 4
#define VM_PROT_STRIP_READ ((vm_prot_t) 0x80)
#define VM_PROT_EXECUTE_ONLY (VM_PROT_EXECUTE|VM_PROT_STRIP_READ)
# 76 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_sync.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_sync.h" 3 4
#define _MACH_VM_SYNC_H_ 

typedef unsigned vm_sync_t;





#define VM_SYNC_ASYNCHRONOUS ((vm_sync_t) 0x01)
#define VM_SYNC_SYNCHRONOUS ((vm_sync_t) 0x02)
#define VM_SYNC_INVALIDATE ((vm_sync_t) 0x04)
#define VM_SYNC_KILLPAGES ((vm_sync_t) 0x08)
#define VM_SYNC_DEACTIVATE ((vm_sync_t) 0x10)
#define VM_SYNC_CONTIGUOUS ((vm_sync_t) 0x20)
#define VM_SYNC_REUSABLEPAGES ((vm_sync_t) 0x40)
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_types.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_types.h" 3 4
#define _MACH_VM_TYPES_H_ 






typedef vm_offset_t pointer_t;
typedef vm_offset_t vm_address_t;







typedef uint64_t addr64_t;
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_types.h" 3 4
typedef uint32_t reg64_t;






typedef uint32_t ppnum_t;
#define PPNUM_MAX UINT32_MAX



typedef mach_port_t vm_map_t, vm_map_read_t, vm_map_inspect_t;


#define VM_MAP_NULL ((vm_map_t) 0)
#define VM_MAP_INSPECT_NULL ((vm_map_inspect_t) 0)
#define VM_MAP_READ_NULL ((vm_map_read_t) 0)





typedef uint64_t vm_object_offset_t;
typedef uint64_t vm_object_size_t;




typedef mach_port_t upl_t;
typedef mach_port_t vm_named_entry_t;


#define UPL_NULL ((upl_t) 0)
#define VM_NAMED_ENTRY_NULL ((vm_named_entry_t) 0)
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 2 3 4





#define VM_64_BIT_DATA_OBJECTS 

typedef unsigned long long memory_object_offset_t;
typedef unsigned long long memory_object_size_t;
typedef natural_t memory_object_cluster_size_t;
typedef natural_t * memory_object_fault_info_t;

typedef unsigned long long vm_object_id_t;







typedef mach_port_t memory_object_t;





typedef mach_port_t memory_object_control_t;


typedef memory_object_t *memory_object_array_t;




typedef mach_port_t memory_object_name_t;



typedef mach_port_t memory_object_default_t;



#define MEMORY_OBJECT_NULL ((memory_object_t) 0)
#define MEMORY_OBJECT_CONTROL_NULL ((memory_object_control_t) 0)
#define MEMORY_OBJECT_NAME_NULL ((memory_object_name_t) 0)
#define MEMORY_OBJECT_DEFAULT_NULL ((memory_object_default_t) 0)


typedef int memory_object_copy_strategy_t;

#define MEMORY_OBJECT_COPY_NONE 0

#define MEMORY_OBJECT_COPY_CALL 1

#define MEMORY_OBJECT_COPY_DELAY 2



#define MEMORY_OBJECT_COPY_TEMPORARY 3




#define MEMORY_OBJECT_COPY_SYMMETRIC 4
# 152 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 3 4
#define MEMORY_OBJECT_COPY_INVALID 5
# 162 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 3 4
typedef int memory_object_return_t;


#define MEMORY_OBJECT_RETURN_NONE 0

#define MEMORY_OBJECT_RETURN_DIRTY 1

#define MEMORY_OBJECT_RETURN_ALL 2

#define MEMORY_OBJECT_RETURN_ANYTHING 3






#define MEMORY_OBJECT_DATA_FLUSH 0x1
#define MEMORY_OBJECT_DATA_NO_CHANGE 0x2
#define MEMORY_OBJECT_DATA_PURGE 0x4
#define MEMORY_OBJECT_COPY_SYNC 0x8
#define MEMORY_OBJECT_DATA_SYNC 0x10
#define MEMORY_OBJECT_IO_SYNC 0x20
#define MEMORY_OBJECT_DATA_FLUSH_ALL 0x40





#define MEMORY_OBJECT_INFO_MAX (1024)
typedef int *memory_object_info_t;
typedef int memory_object_flavor_t;
typedef int memory_object_info_data_t[(1024)];


#define MEMORY_OBJECT_PERFORMANCE_INFO 11
#define MEMORY_OBJECT_ATTRIBUTE_INFO 14
#define MEMORY_OBJECT_BEHAVIOR_INFO 15


struct memory_object_perf_info {
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache;
};

struct memory_object_attr_info {
 memory_object_copy_strategy_t copy_strategy;
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache_object;
 boolean_t temporary;
};

struct memory_object_behave_info {
 memory_object_copy_strategy_t copy_strategy;
 boolean_t temporary;
 boolean_t invalidate;
 boolean_t silent_overwrite;
 boolean_t advisory_pageout;
};


typedef struct memory_object_behave_info *memory_object_behave_info_t;
typedef struct memory_object_behave_info memory_object_behave_info_data_t;

typedef struct memory_object_perf_info *memory_object_perf_info_t;
typedef struct memory_object_perf_info memory_object_perf_info_data_t;

typedef struct memory_object_attr_info *memory_object_attr_info_t;
typedef struct memory_object_attr_info memory_object_attr_info_data_t;

#define MEMORY_OBJECT_BEHAVE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_behave_info_data_t)/sizeof(int)))

#define MEMORY_OBJECT_PERF_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_perf_info_data_t)/sizeof(int)))

#define MEMORY_OBJECT_ATTR_INFO_COUNT ((mach_msg_type_number_t) (sizeof(memory_object_attr_info_data_t)/sizeof(int)))


#define invalid_memory_object_flavor(f) (f != MEMORY_OBJECT_ATTRIBUTE_INFO && f != MEMORY_OBJECT_PERFORMANCE_INFO && f != OLD_MEMORY_OBJECT_BEHAVIOR_INFO && f != MEMORY_OBJECT_BEHAVIOR_INFO && f != OLD_MEMORY_OBJECT_ATTRIBUTE_INFO)
# 249 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 3 4
#define MEMORY_OBJECT_TERMINATE_IDLE 0x1
#define MEMORY_OBJECT_RESPECT_CACHE 0x2
#define MEMORY_OBJECT_RELEASE_NO_OP 0x4




#define MAP_MEM_NOOP 0
#define MAP_MEM_COPYBACK 1
#define MAP_MEM_IO 2
#define MAP_MEM_WTHRU 3
#define MAP_MEM_WCOMB 4

#define MAP_MEM_INNERWBACK 5
#define MAP_MEM_POSTED 6
#define MAP_MEM_RT 7
#define MAP_MEM_POSTED_REORDERED 8
#define MAP_MEM_POSTED_COMBINED_REORDERED 9

#define GET_MAP_MEM(flags) ((((unsigned int)(flags)) >> 24) & 0xFF)


#define SET_MAP_MEM(caching,flags) ((flags) = ((((unsigned int)(caching)) << 24) & 0xFF000000) | ((flags) & 0xFFFFFF));




#define MAP_MEM_LEDGER_TAGGED 0x002000
#define MAP_MEM_PURGABLE_KERNEL_ONLY 0x004000
#define MAP_MEM_GRAB_SECLUDED 0x008000
#define MAP_MEM_ONLY 0x010000
#define MAP_MEM_NAMED_CREATE 0x020000
#define MAP_MEM_PURGABLE 0x040000
#define MAP_MEM_NAMED_REUSE 0x080000
#define MAP_MEM_USE_DATA_ADDR 0x100000
#define MAP_MEM_VM_COPY 0x200000
#define MAP_MEM_VM_SHARE 0x400000
#define MAP_MEM_4K_DATA_ADDR 0x800000

#define MAP_MEM_FLAGS_MASK 0x00FFFF00
#define MAP_MEM_FLAGS_USER ( MAP_MEM_PURGABLE_KERNEL_ONLY | MAP_MEM_GRAB_SECLUDED | MAP_MEM_ONLY | MAP_MEM_NAMED_CREATE | MAP_MEM_PURGABLE | MAP_MEM_NAMED_REUSE | MAP_MEM_USE_DATA_ADDR | MAP_MEM_VM_COPY | MAP_MEM_VM_SHARE | MAP_MEM_LEDGER_TAGGED | MAP_MEM_4K_DATA_ADDR)
# 301 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/memory_object_types.h" 3 4
#define MAP_MEM_FLAGS_ALL ( MAP_MEM_FLAGS_USER)
# 86 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/exception_types.h" 1 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/exception_types.h" 3 4
#define _MACH_EXCEPTION_TYPES_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/exception.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/exception.h" 3 4
#define _MACH_MACHINE_EXCEPTION_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/exception.h" 1 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/exception.h" 3 4
#define _MACH_I386_EXCEPTION_H_ 





#define EXC_TYPES_COUNT 14





#define EXCEPTION_CODE_MAX 2





#define EXC_I386_INVOP 1





#define EXC_I386_DIV 1
#define EXC_I386_INTO 2
#define EXC_I386_NOEXT 3
#define EXC_I386_EXTOVR 4
#define EXC_I386_EXTERR 5
#define EXC_I386_EMERR 6
#define EXC_I386_BOUND 7
#define EXC_I386_SSEEXTERR 8
# 106 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/exception.h" 3 4
#define EXC_I386_SGL 1
#define EXC_I386_BPT 2

#define EXC_I386_DIVERR 0
#define EXC_I386_SGLSTP 1
#define EXC_I386_NMIFLT 2
#define EXC_I386_BPTFLT 3
#define EXC_I386_INTOFLT 4
#define EXC_I386_BOUNDFLT 5
#define EXC_I386_INVOPFLT 6
#define EXC_I386_NOEXTFLT 7
#define EXC_I386_DBLFLT 8
#define EXC_I386_EXTOVRFLT 9
#define EXC_I386_INVTSSFLT 10
#define EXC_I386_SEGNPFLT 11
#define EXC_I386_STKFLT 12
#define EXC_I386_GPFLT 13
#define EXC_I386_PGFLT 14
#define EXC_I386_EXTERRFLT 16
#define EXC_I386_ALIGNFLT 17
#define EXC_I386_ENDPERR 33
#define EXC_I386_ENOEXTFLT 32





#define EXC_MASK_MACHINE 0
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/exception.h" 2 3 4
# 63 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/exception_types.h" 2 3 4





#define EXC_BAD_ACCESS 1



#define EXC_BAD_INSTRUCTION 2


#define EXC_ARITHMETIC 3


#define EXC_EMULATION 4



#define EXC_SOFTWARE 5




#define EXC_BREAKPOINT 6


#define EXC_SYSCALL 7

#define EXC_MACH_SYSCALL 8

#define EXC_RPC_ALERT 9

#define EXC_CRASH 10

#define EXC_RESOURCE 11


#define EXC_GUARD 12

#define EXC_CORPSE_NOTIFY 13

#define EXC_CORPSE_VARIANT_BIT 0x100






#define EXCEPTION_DEFAULT 1



#define EXCEPTION_STATE 2




#define EXCEPTION_STATE_IDENTITY 3




#define MACH_EXCEPTION_ERRORS 0x40000000


#define MACH_EXCEPTION_CODES 0x80000000


#define MACH_EXCEPTION_MASK (MACH_EXCEPTION_CODES | MACH_EXCEPTION_ERRORS)





#define EXC_MASK_BAD_ACCESS (1 << EXC_BAD_ACCESS)
#define EXC_MASK_BAD_INSTRUCTION (1 << EXC_BAD_INSTRUCTION)
#define EXC_MASK_ARITHMETIC (1 << EXC_ARITHMETIC)
#define EXC_MASK_EMULATION (1 << EXC_EMULATION)
#define EXC_MASK_SOFTWARE (1 << EXC_SOFTWARE)
#define EXC_MASK_BREAKPOINT (1 << EXC_BREAKPOINT)
#define EXC_MASK_SYSCALL (1 << EXC_SYSCALL)
#define EXC_MASK_MACH_SYSCALL (1 << EXC_MACH_SYSCALL)
#define EXC_MASK_RPC_ALERT (1 << EXC_RPC_ALERT)
#define EXC_MASK_CRASH (1 << EXC_CRASH)
#define EXC_MASK_RESOURCE (1 << EXC_RESOURCE)
#define EXC_MASK_GUARD (1 << EXC_GUARD)
#define EXC_MASK_CORPSE_NOTIFY (1 << EXC_CORPSE_NOTIFY)

#define EXC_MASK_ALL (EXC_MASK_BAD_ACCESS | EXC_MASK_BAD_INSTRUCTION | EXC_MASK_ARITHMETIC | EXC_MASK_EMULATION | EXC_MASK_SOFTWARE | EXC_MASK_BREAKPOINT | EXC_MASK_SYSCALL | EXC_MASK_MACH_SYSCALL | EXC_MASK_RPC_ALERT | EXC_MASK_RESOURCE | EXC_MASK_GUARD | EXC_MASK_MACHINE)
# 166 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/exception_types.h" 3 4
#define FIRST_EXCEPTION 1







#define EXC_SOFT_SIGNAL 0x10003

#define EXC_MACF_MIN 0x20000
#define EXC_MACF_MAX 0x2FFFF




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_status.h" 1 3 4
# 69 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_status.h" 3 4
#define _MACH_THREAD_STATUS_H_ 






# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/thread_status.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/thread_status.h" 3 4
#define _MACH_MACHINE_THREAD_STATUS_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 3 4
#define _MACH_I386_THREAD_STATUS_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/fp_reg.h" 1 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/fp_reg.h" 3 4
#define _I386_FP_SAVE_H_ 




#define FPC_IE 0x0001

#define FPC_IM FPC_IE
#define FPC_DE 0x0002

#define FPC_DM FPC_DE
#define FPC_ZE 0x0004
#define FPC_ZM FPC_ZE
#define FPC_OE 0x0008
#define FPC_OM FPC_OE
#define FPC_UE 0x0010
#define FPC_PE 0x0020
#define FPC_PC 0x0300
#define FPC_PC_24 0x0000
#define FPC_PC_53 0x0200
#define FPC_PC_64 0x0300
#define FPC_RC 0x0c00
#define FPC_RC_RN 0x0000
#define FPC_RC_RD 0x0400
#define FPC_RC_RU 0x0800
#define FPC_RC_CHOP 0x0c00
#define FPC_IC 0x1000
#define FPC_IC_PROJ 0x0000
#define FPC_IC_AFF 0x1000




#define FPS_IE 0x0001
#define FPS_DE 0x0002
#define FPS_ZE 0x0004
#define FPS_OE 0x0008
#define FPS_UE 0x0010
#define FPS_PE 0x0020
#define FPS_SF 0x0040
#define FPS_ES 0x0080
#define FPS_C0 0x0100
#define FPS_C1 0x0200
#define FPS_C2 0x0400
#define FPS_TOS 0x3800
#define FPS_TOS_SHIFT 11
#define FPS_C3 0x4000
#define FPS_BUSY 0x8000




#define FP_NO 0
#define FP_SOFT 1
#define FP_287 2
#define FP_387 3
#define FP_FXSR 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_state.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_state.h" 3 4
#define _MACH_I386_THREAD_STATE_H_ 


#define I386_THREAD_STATE_MAX (614)


#define THREAD_STATE_MAX I386_THREAD_STATE_MAX
# 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/eflags.h" 1 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/i386/eflags.h" 3 4
#define _I386_EFLAGS_H_ 






#define EFL_CF 0x00000001
#define EFL_PF 0x00000004
#define EFL_AF 0x00000010
#define EFL_ZF 0x00000040
#define EFL_SF 0x00000080
#define EFL_TF 0x00000100
#define EFL_IF 0x00000200
#define EFL_DF 0x00000400
#define EFL_OF 0x00000800
#define EFL_IOPL 0x00003000
#define EFL_IOPL_KERNEL 0x00000000
#define EFL_IOPL_USER 0x00003000
#define EFL_NT 0x00004000
#define EFL_RF 0x00010000
#define EFL_VM 0x00020000
#define EFL_AC 0x00040000
#define EFL_VIF 0x00080000
#define EFL_VIP 0x00100000
#define EFL_ID 0x00200000


#define EFL_CLR 0xfff88028
#define EFL_SET 0x00000002

#define EFL_USER_SET (EFL_IF)
#define EFL_USER_CLEAR (EFL_IOPL|EFL_NT|EFL_RF)
# 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 2 3 4
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 3 4
#define i386_THREAD_STATE 1
#define i386_FLOAT_STATE 2
#define i386_EXCEPTION_STATE 3





#define x86_THREAD_STATE32 1
#define x86_FLOAT_STATE32 2
#define x86_EXCEPTION_STATE32 3
#define x86_THREAD_STATE64 4
#define x86_FLOAT_STATE64 5
#define x86_EXCEPTION_STATE64 6
#define x86_THREAD_STATE 7
#define x86_FLOAT_STATE 8
#define x86_EXCEPTION_STATE 9
#define x86_DEBUG_STATE32 10
#define x86_DEBUG_STATE64 11
#define x86_DEBUG_STATE 12
#define THREAD_STATE_NONE 13


#define x86_AVX_STATE32 16
#define x86_AVX_STATE64 (x86_AVX_STATE32 + 1)
#define x86_AVX_STATE (x86_AVX_STATE32 + 2)
#define x86_AVX512_STATE32 19
#define x86_AVX512_STATE64 (x86_AVX512_STATE32 + 1)
#define x86_AVX512_STATE (x86_AVX512_STATE32 + 2)
#define x86_PAGEIN_STATE 22
#define x86_THREAD_FULL_STATE64 23
#define x86_INSTRUCTION_STATE 24
#define x86_LAST_BRANCH_STATE 25





#define THREAD_MACHINE_STATE_MAX THREAD_STATE_MAX







#define VALID_THREAD_STATE_FLAVOR(x) ((x == x86_THREAD_STATE32) || (x == x86_FLOAT_STATE32) || (x == x86_EXCEPTION_STATE32) || (x == x86_DEBUG_STATE32) || (x == x86_THREAD_STATE64) || (x == x86_THREAD_FULL_STATE64) || (x == x86_FLOAT_STATE64) || (x == x86_EXCEPTION_STATE64) || (x == x86_DEBUG_STATE64) || (x == x86_THREAD_STATE) || (x == x86_FLOAT_STATE) || (x == x86_EXCEPTION_STATE) || (x == x86_DEBUG_STATE) || (x == x86_AVX_STATE32) || (x == x86_AVX_STATE64) || (x == x86_AVX_STATE) || (x == x86_AVX512_STATE32) || (x == x86_AVX512_STATE64) || (x == x86_AVX512_STATE) || (x == x86_PAGEIN_STATE) || (x == x86_INSTRUCTION_STATE) || (x == x86_LAST_BRANCH_STATE) || (x == THREAD_STATE_NONE))
# 164 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/thread_status.h" 3 4
struct x86_state_hdr {
 uint32_t flavor;
 uint32_t count;
};
typedef struct x86_state_hdr x86_state_hdr_t;





#define USER_CODE_SELECTOR 0x0017
#define USER_DATA_SELECTOR 0x001f
#define KERN_CODE_SELECTOR 0x0008
#define KERN_DATA_SELECTOR 0x0010




typedef struct __darwin_i386_thread_state i386_thread_state_t;
#define i386_THREAD_STATE_COUNT ((mach_msg_type_number_t) ( sizeof (i386_thread_state_t) / sizeof (int) ))


typedef struct __darwin_i386_thread_state x86_thread_state32_t;
#define x86_THREAD_STATE32_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_state32_t) / sizeof (int) ))





typedef struct __darwin_i386_float_state i386_float_state_t;
#define i386_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(i386_float_state_t)/sizeof(unsigned int)))


typedef struct __darwin_i386_float_state x86_float_state32_t;
#define x86_FLOAT_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(x86_float_state32_t)/sizeof(unsigned int)))


typedef struct __darwin_i386_avx_state x86_avx_state32_t;
#define x86_AVX_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(x86_avx_state32_t)/sizeof(unsigned int)))


typedef struct __darwin_i386_avx512_state x86_avx512_state32_t;
#define x86_AVX512_STATE32_COUNT ((mach_msg_type_number_t) (sizeof(x86_avx512_state32_t)/sizeof(unsigned int)))





typedef struct __darwin_i386_exception_state i386_exception_state_t;
#define i386_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) ( sizeof (i386_exception_state_t) / sizeof (int) ))


typedef struct __darwin_i386_exception_state x86_exception_state32_t;
#define x86_EXCEPTION_STATE32_COUNT ((mach_msg_type_number_t) ( sizeof (x86_exception_state32_t) / sizeof (int) ))


#define I386_EXCEPTION_STATE_COUNT i386_EXCEPTION_STATE_COUNT

typedef struct __darwin_x86_debug_state32 x86_debug_state32_t;
#define x86_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) ( sizeof (x86_debug_state32_t) / sizeof (int) ))


#define X86_DEBUG_STATE32_COUNT x86_DEBUG_STATE32_COUNT

typedef struct __darwin_x86_thread_state64 x86_thread_state64_t;
#define x86_THREAD_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_state64_t) / sizeof (int) ))


typedef struct __darwin_x86_thread_full_state64 x86_thread_full_state64_t;
#define x86_THREAD_FULL_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_full_state64_t) / sizeof (int) ))


typedef struct __darwin_x86_float_state64 x86_float_state64_t;
#define x86_FLOAT_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(x86_float_state64_t)/sizeof(unsigned int)))


typedef struct __darwin_x86_avx_state64 x86_avx_state64_t;
#define x86_AVX_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(x86_avx_state64_t)/sizeof(unsigned int)))


typedef struct __darwin_x86_avx512_state64 x86_avx512_state64_t;
#define x86_AVX512_STATE64_COUNT ((mach_msg_type_number_t) (sizeof(x86_avx512_state64_t)/sizeof(unsigned int)))


typedef struct __darwin_x86_exception_state64 x86_exception_state64_t;
#define x86_EXCEPTION_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_exception_state64_t) / sizeof (int) ))


#define X86_EXCEPTION_STATE64_COUNT x86_EXCEPTION_STATE64_COUNT

typedef struct __darwin_x86_debug_state64 x86_debug_state64_t;
#define x86_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) ( sizeof (x86_debug_state64_t) / sizeof (int) ))


#define X86_DEBUG_STATE64_COUNT x86_DEBUG_STATE64_COUNT

typedef struct __x86_pagein_state x86_pagein_state_t;
#define x86_PAGEIN_STATE_COUNT ((mach_msg_type_number_t)(sizeof(x86_pagein_state_t) / sizeof(int)))


#define X86_PAGEIN_STATE_COUNT x86_PAGEIN_STATE_COUNT

typedef struct __x86_instruction_state x86_instruction_state_t;
#define x86_INSTRUCTION_STATE_COUNT ((mach_msg_type_number_t)(sizeof(x86_instruction_state_t) / sizeof(int)))


#define X86_INSTRUCTION_STATE_COUNT x86_INSTRUCTION_STATE_COUNT

typedef struct __last_branch_state last_branch_state_t;
#define x86_LAST_BRANCH_STATE_COUNT ((mach_msg_type_number_t)(sizeof(last_branch_state_t) / sizeof(int)))


#define X86_LAST_BRANCH_STATE_COUNT x86_LAST_BRANCH_STATE_COUNT





struct x86_thread_state {
 x86_state_hdr_t tsh;
 union {
  x86_thread_state32_t ts32;
  x86_thread_state64_t ts64;
 } uts;
};

struct x86_float_state {
 x86_state_hdr_t fsh;
 union {
  x86_float_state32_t fs32;
  x86_float_state64_t fs64;
 } ufs;
};

struct x86_exception_state {
 x86_state_hdr_t esh;
 union {
  x86_exception_state32_t es32;
  x86_exception_state64_t es64;
 } ues;
};

struct x86_debug_state {
 x86_state_hdr_t dsh;
 union {
  x86_debug_state32_t ds32;
  x86_debug_state64_t ds64;
 } uds;
};

struct x86_avx_state {
 x86_state_hdr_t ash;
 union {
  x86_avx_state32_t as32;
  x86_avx_state64_t as64;
 } ufs;
};

struct x86_avx512_state {
 x86_state_hdr_t ash;
 union {
  x86_avx512_state32_t as32;
  x86_avx512_state64_t as64;
 } ufs;
};

typedef struct x86_thread_state x86_thread_state_t;
#define x86_THREAD_STATE_COUNT ((mach_msg_type_number_t) ( sizeof (x86_thread_state_t) / sizeof (int) ))


typedef struct x86_float_state x86_float_state_t;
#define x86_FLOAT_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_float_state_t)/sizeof(unsigned int)))


typedef struct x86_exception_state x86_exception_state_t;
#define x86_EXCEPTION_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_exception_state_t)/sizeof(unsigned int)))


typedef struct x86_debug_state x86_debug_state_t;
#define x86_DEBUG_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_debug_state_t)/sizeof(unsigned int)))


typedef struct x86_avx_state x86_avx_state_t;
#define x86_AVX_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_avx_state_t)/sizeof(unsigned int)))


typedef struct x86_avx512_state x86_avx512_state_t;
#define x86_AVX512_STATE_COUNT ((mach_msg_type_number_t) (sizeof(x86_avx512_state_t)/sizeof(unsigned int)))






#define MACHINE_THREAD_STATE x86_THREAD_STATE
#define MACHINE_THREAD_STATE_COUNT x86_THREAD_STATE_COUNT
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/thread_status.h" 2 3 4
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_status.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/thread_state.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/thread_state.h" 3 4
#define _MACH_MACHINE_THREAD_STATE_H_ 
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_status.h" 2 3 4





typedef natural_t *thread_state_t;


typedef natural_t thread_state_data_t[(614)];

#define THREAD_STATE_FLAVOR_LIST 0
#define THREAD_STATE_FLAVOR_LIST_NEW 128
#define THREAD_STATE_FLAVOR_LIST_10_9 129
#define THREAD_STATE_FLAVOR_LIST_10_13 130
#define THREAD_STATE_FLAVOR_LIST_10_15 131

typedef int thread_state_flavor_t;
typedef thread_state_flavor_t *thread_state_flavor_array_t;

#define THREAD_CONVERT_THREAD_STATE_TO_SELF 1
#define THREAD_CONVERT_THREAD_STATE_FROM_SELF 2
# 183 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/exception_types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach_debug/ipc_info.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach_debug/ipc_info.h" 3 4
#define _MACH_DEBUG_IPC_INFO_H_ 
# 78 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach_debug/ipc_info.h" 3 4
typedef struct ipc_info_space {
 natural_t iis_genno_mask;
 natural_t iis_table_size;
 natural_t iis_table_next;
 natural_t iis_tree_size;
 natural_t iis_tree_small;
 natural_t iis_tree_hash;
} ipc_info_space_t;

typedef struct ipc_info_space_basic {
 natural_t iisb_genno_mask;
 natural_t iisb_table_size;
 natural_t iisb_table_next;
 natural_t iisb_table_inuse;
 natural_t iisb_reserved[2];
} ipc_info_space_basic_t;

typedef struct ipc_info_name {
 mach_port_name_t iin_name;
              integer_t iin_collision;
 mach_port_type_t iin_type;
 mach_port_urefs_t iin_urefs;
 natural_t iin_object;
 natural_t iin_next;
 natural_t iin_hash;
} ipc_info_name_t;

typedef ipc_info_name_t *ipc_info_name_array_t;


typedef struct ipc_info_tree_name {
 ipc_info_name_t iitn_name;
 mach_port_name_t iitn_lchild;
 mach_port_name_t iitn_rchild;
} ipc_info_tree_name_t;

typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;

typedef struct ipc_info_port {
 natural_t iip_port_object;
 natural_t iip_receiver_object;
} ipc_info_port_t;

typedef ipc_info_port_t *exception_handler_info_array_t;
# 185 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/exception_types.h" 2 3 4




typedef int exception_type_t;
typedef integer_t exception_data_type_t;
typedef int64_t mach_exception_data_type_t;
typedef int exception_behavior_t;
typedef exception_data_type_t *exception_data_t;
typedef mach_exception_data_type_t *mach_exception_data_t;
typedef unsigned int exception_mask_t;
typedef exception_mask_t *exception_mask_array_t;
typedef exception_behavior_t *exception_behavior_array_t;
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef mach_port_t *exception_port_array_t;
typedef ipc_info_port_t *exception_port_info_array_t;
typedef mach_exception_data_type_t mach_exception_code_t;
typedef mach_exception_data_type_t mach_exception_subcode_t;
# 88 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 3 4
#define _MACH_VOUCHER_TYPES_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/std_types.h" 1 3 4
# 64 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/std_types.h" 3 4
#define _MACH_STD_TYPES_H_ 
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 2 3 4
# 53 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 3 4
typedef mach_port_t mach_voucher_t;
#define MACH_VOUCHER_NULL ((mach_voucher_t) 0)

typedef mach_port_name_t mach_voucher_name_t;
#define MACH_VOUCHER_NAME_NULL ((mach_voucher_name_t) 0)

typedef mach_voucher_name_t *mach_voucher_name_array_t;
#define MACH_VOUCHER_NAME_ARRAY_NULL ((mach_voucher_name_array_t) 0)





typedef mach_voucher_t ipc_voucher_t;
#define IPC_VOUCHER_NULL ((ipc_voucher_t) 0)






typedef uint32_t mach_voucher_selector_t;
#define MACH_VOUCHER_SELECTOR_CURRENT ((mach_voucher_selector_t)0)
#define MACH_VOUCHER_SELECTOR_EFFECTIVE ((mach_voucher_selector_t)1)







typedef uint32_t mach_voucher_attr_key_t;
typedef mach_voucher_attr_key_t *mach_voucher_attr_key_array_t;

#define MACH_VOUCHER_ATTR_KEY_ALL ((mach_voucher_attr_key_t)~0)
#define MACH_VOUCHER_ATTR_KEY_NONE ((mach_voucher_attr_key_t)0)


#define MACH_VOUCHER_ATTR_KEY_ATM ((mach_voucher_attr_key_t)1)
#define MACH_VOUCHER_ATTR_KEY_IMPORTANCE ((mach_voucher_attr_key_t)2)
#define MACH_VOUCHER_ATTR_KEY_BANK ((mach_voucher_attr_key_t)3)
#define MACH_VOUCHER_ATTR_KEY_PTHPRIORITY ((mach_voucher_attr_key_t)4)

#define MACH_VOUCHER_ATTR_KEY_USER_DATA ((mach_voucher_attr_key_t)7)
#define MACH_VOUCHER_ATTR_KEY_BITS MACH_VOUCHER_ATTR_KEY_USER_DATA
#define MACH_VOUCHER_ATTR_KEY_TEST ((mach_voucher_attr_key_t)8)

#define MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN MACH_VOUCHER_ATTR_KEY_TEST
# 109 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint8_t *mach_voucher_attr_content_t;
typedef uint32_t mach_voucher_attr_content_size_t;





typedef uint32_t mach_voucher_attr_command_t;
# 126 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint32_t mach_voucher_attr_recipe_command_t;
typedef mach_voucher_attr_recipe_command_t *mach_voucher_attr_recipe_command_array_t;

#define MACH_VOUCHER_ATTR_NOOP ((mach_voucher_attr_recipe_command_t)0)
#define MACH_VOUCHER_ATTR_COPY ((mach_voucher_attr_recipe_command_t)1)
#define MACH_VOUCHER_ATTR_REMOVE ((mach_voucher_attr_recipe_command_t)2)
#define MACH_VOUCHER_ATTR_SET_VALUE_HANDLE ((mach_voucher_attr_recipe_command_t)3)
#define MACH_VOUCHER_ATTR_AUTO_REDEEM ((mach_voucher_attr_recipe_command_t)4)
#define MACH_VOUCHER_ATTR_SEND_PREPROCESS ((mach_voucher_attr_recipe_command_t)5)


#define MACH_VOUCHER_ATTR_REDEEM ((mach_voucher_attr_recipe_command_t)10)


#define MACH_VOUCHER_ATTR_IMPORTANCE_SELF ((mach_voucher_attr_recipe_command_t)200)


#define MACH_VOUCHER_ATTR_USER_DATA_STORE ((mach_voucher_attr_recipe_command_t)211)
#define MACH_VOUCHER_ATTR_BITS_STORE MACH_VOUCHER_ATTR_USER_DATA_STORE


#define MACH_VOUCHER_ATTR_TEST_STORE MACH_VOUCHER_ATTR_USER_DATA_STORE






#pragma pack(push, 1)

typedef struct mach_voucher_attr_recipe_data {
 mach_voucher_attr_key_t key;
 mach_voucher_attr_recipe_command_t command;
 mach_voucher_name_t previous_voucher;
 mach_voucher_attr_content_size_t content_size;
 uint8_t content[];
} mach_voucher_attr_recipe_data_t;
typedef mach_voucher_attr_recipe_data_t *mach_voucher_attr_recipe_t;
typedef mach_msg_type_number_t mach_voucher_attr_recipe_size_t;


typedef uint8_t *mach_voucher_attr_raw_recipe_t;
typedef mach_voucher_attr_raw_recipe_t mach_voucher_attr_raw_recipe_array_t;
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_size_t;
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_array_size_t;

#define MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE 5120
#define MACH_VOUCHER_TRAP_STACK_LIMIT 256

#pragma pack(pop)
# 187 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_voucher_types.h" 3 4
typedef mach_port_t mach_voucher_attr_manager_t;
#define MACH_VOUCHER_ATTR_MANAGER_NULL ((mach_voucher_attr_manager_t) 0)







typedef mach_port_t mach_voucher_attr_control_t;
#define MACH_VOUCHER_ATTR_CONTROL_NULL ((mach_voucher_attr_control_t) 0)






typedef mach_port_t ipc_voucher_attr_manager_t;
typedef mach_port_t ipc_voucher_attr_control_t;
#define IPC_VOUCHER_ATTR_MANAGER_NULL ((ipc_voucher_attr_manager_t) 0)
#define IPC_VOUCHER_ATTR_CONTROL_NULL ((ipc_voucher_attr_control_t) 0)







typedef uint64_t mach_voucher_attr_value_handle_t;
typedef mach_voucher_attr_value_handle_t *mach_voucher_attr_value_handle_array_t;

typedef mach_msg_type_number_t mach_voucher_attr_value_handle_array_size_t;
#define MACH_VOUCHER_ATTR_VALUE_MAX_NESTED ((mach_voucher_attr_value_handle_array_size_t)4)

typedef uint32_t mach_voucher_attr_value_reference_t;
typedef uint32_t mach_voucher_attr_value_flags_t;
#define MACH_VOUCHER_ATTR_VALUE_FLAGS_NONE ((mach_voucher_attr_value_flags_t)0)
#define MACH_VOUCHER_ATTR_VALUE_FLAGS_PERSIST ((mach_voucher_attr_value_flags_t)1)


typedef uint32_t mach_voucher_attr_control_flags_t;
#define MACH_VOUCHER_ATTR_CONTROL_FLAGS_NONE ((mach_voucher_attr_control_flags_t)0)







#define MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL 1
#define MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL 2
typedef uint32_t mach_voucher_attr_importance_refs;




#define MACH_ACTIVITY_ID_COUNT_MAX 16
# 90 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/processor_info.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/processor_info.h" 3 4
#define _MACH_PROCESSOR_INFO_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/processor_info.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/processor_info.h" 3 4
#define _MACH_MACHINE_PROCESSOR_INFO_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/processor_info.h" 1 3 4
# 35 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/processor_info.h" 3 4
#define _MACH_I386_PROCESSOR_INFO_H_ 
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/processor_info.h" 2 3 4
# 73 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/processor_info.h" 2 3 4




typedef integer_t *processor_info_t;
typedef integer_t *processor_info_array_t;

#define PROCESSOR_INFO_MAX (1024)
typedef integer_t processor_info_data_t[(1024)];


typedef integer_t *processor_set_info_t;

#define PROCESSOR_SET_INFO_MAX (1024)
typedef integer_t processor_set_info_data_t[(1024)];




typedef int processor_flavor_t;
#define PROCESSOR_BASIC_INFO 1
#define PROCESSOR_CPU_LOAD_INFO 2
#define PROCESSOR_PM_REGS_INFO 0x10000001
#define PROCESSOR_TEMPERATURE 0x10000002

struct processor_basic_info {
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 boolean_t running;
 int slot_num;
 boolean_t is_master;
};

typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;
#define PROCESSOR_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_basic_info_data_t)/sizeof(natural_t)))


struct processor_cpu_load_info {
 unsigned int cpu_ticks[4];
};

typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
#define PROCESSOR_CPU_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_cpu_load_info_data_t)/sizeof(natural_t)))





#define LOAD_SCALE 1000

typedef int processor_set_flavor_t;
#define PROCESSOR_SET_BASIC_INFO 5

struct processor_set_basic_info {
 int processor_count;
 int default_policy;
};

typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;
#define PROCESSOR_SET_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_set_basic_info_data_t)/sizeof(natural_t)))


#define PROCESSOR_SET_LOAD_INFO 4

struct processor_set_load_info {
 int task_count;
 int thread_count;
 integer_t load_average;
 integer_t mach_factor;
};

typedef struct processor_set_load_info processor_set_load_info_data_t;
typedef struct processor_set_load_info *processor_set_load_info_t;
#define PROCESSOR_SET_LOAD_INFO_COUNT ((mach_msg_type_number_t) (sizeof(processor_set_load_info_data_t)/sizeof(natural_t)))
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_info.h" 1 3 4
# 66 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_info.h" 3 4
#define _MACH_TASK_INFO_H_ 




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/policy.h" 1 3 4
# 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/policy.h" 3 4
#define _MACH_POLICY_H_ 
# 79 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/policy.h" 3 4
typedef int policy_t;
typedef integer_t *policy_info_t;
typedef integer_t *policy_base_t;
typedef integer_t *policy_limit_t;






#define POLICY_NULL 0
#define POLICY_TIMESHARE 1
#define POLICY_RR 2
#define POLICY_FIFO 4

#define __NEW_SCHEDULING_FRAMEWORK__ 




#define POLICYCLASS_FIXEDPRI (POLICY_RR | POLICY_FIFO)




#define invalid_policy(policy) ((policy) != POLICY_TIMESHARE && (policy) != POLICY_RR && (policy) != POLICY_FIFO)
# 113 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/policy.h" 3 4
struct policy_timeshare_base {
 integer_t base_priority;
};
struct policy_timeshare_limit {
 integer_t max_priority;
};
struct policy_timeshare_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t cur_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_timeshare_base *policy_timeshare_base_t;
typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
typedef struct policy_timeshare_info *policy_timeshare_info_t;

typedef struct policy_timeshare_base policy_timeshare_base_data_t;
typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
typedef struct policy_timeshare_info policy_timeshare_info_data_t;


#define POLICY_TIMESHARE_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_base)/sizeof(integer_t)))

#define POLICY_TIMESHARE_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_limit)/sizeof(integer_t)))

#define POLICY_TIMESHARE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_timeshare_info)/sizeof(integer_t)))






struct policy_rr_base {
 integer_t base_priority;
 integer_t quantum;
};
struct policy_rr_limit {
 integer_t max_priority;
};
struct policy_rr_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t quantum;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_rr_base *policy_rr_base_t;
typedef struct policy_rr_limit *policy_rr_limit_t;
typedef struct policy_rr_info *policy_rr_info_t;

typedef struct policy_rr_base policy_rr_base_data_t;
typedef struct policy_rr_limit policy_rr_limit_data_t;
typedef struct policy_rr_info policy_rr_info_data_t;

#define POLICY_RR_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_base)/sizeof(integer_t)))

#define POLICY_RR_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_limit)/sizeof(integer_t)))

#define POLICY_RR_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_rr_info)/sizeof(integer_t)))






struct policy_fifo_base {
 integer_t base_priority;
};
struct policy_fifo_limit {
 integer_t max_priority;
};
struct policy_fifo_info {
 integer_t max_priority;
 integer_t base_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_fifo_base *policy_fifo_base_t;
typedef struct policy_fifo_limit *policy_fifo_limit_t;
typedef struct policy_fifo_info *policy_fifo_info_t;

typedef struct policy_fifo_base policy_fifo_base_data_t;
typedef struct policy_fifo_limit policy_fifo_limit_data_t;
typedef struct policy_fifo_info policy_fifo_info_data_t;

#define POLICY_FIFO_BASE_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_base)/sizeof(integer_t)))

#define POLICY_FIFO_LIMIT_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_limit)/sizeof(integer_t)))

#define POLICY_FIFO_INFO_COUNT ((mach_msg_type_number_t) (sizeof(struct policy_fifo_info)/sizeof(integer_t)))






struct policy_bases {
 policy_timeshare_base_data_t ts;
 policy_rr_base_data_t rr;
 policy_fifo_base_data_t fifo;
};

struct policy_limits {
 policy_timeshare_limit_data_t ts;
 policy_rr_limit_data_t rr;
 policy_fifo_limit_data_t fifo;
};

struct policy_infos {
 policy_timeshare_info_data_t ts;
 policy_rr_info_data_t rr;
 policy_fifo_info_data_t fifo;
};

typedef struct policy_bases policy_base_data_t;
typedef struct policy_limits policy_limit_data_t;
typedef struct policy_infos policy_info_data_t;
# 72 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_info.h" 2 3 4
# 80 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_info.h" 3 4
typedef natural_t task_flavor_t;
typedef integer_t *task_info_t;


#define TASK_INFO_MAX (1024)
typedef integer_t task_info_data_t[(1024)];





#pragma pack(push, 4)


#define TASK_BASIC_INFO_32 4
#define TASK_BASIC2_INFO_32 6

struct task_basic_info_32 {
 integer_t suspend_count;
 natural_t virtual_size;
 natural_t resident_size;
 time_value_t user_time;

 time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_32 task_basic_info_32_data_t;
typedef struct task_basic_info_32 *task_basic_info_32_t;
#define TASK_BASIC_INFO_32_COUNT (sizeof(task_basic_info_32_data_t) / sizeof(natural_t))



struct task_basic_info_64 {
 integer_t suspend_count;




 mach_vm_size_t virtual_size;
 mach_vm_size_t resident_size;

 time_value_t user_time;

 time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_64 task_basic_info_64_data_t;
typedef struct task_basic_info_64 *task_basic_info_64_t;
# 147 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_info.h" 3 4
#define TASK_BASIC_INFO_64 5
#define TASK_BASIC_INFO_64_COUNT (sizeof(task_basic_info_64_data_t) / sizeof(natural_t))






struct task_basic_info {
 integer_t suspend_count;
 vm_size_t virtual_size;
 vm_size_t resident_size;
 time_value_t user_time;

 time_value_t system_time;

 policy_t policy;
};

typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
#define TASK_BASIC_INFO_COUNT (sizeof(task_basic_info_data_t) / sizeof(natural_t))




#define TASK_BASIC_INFO TASK_BASIC_INFO_64




#define TASK_EVENTS_INFO 2

struct task_events_info {
 integer_t faults;
 integer_t pageins;
 integer_t cow_faults;
 integer_t messages_sent;
 integer_t messages_received;
 integer_t syscalls_mach;
 integer_t syscalls_unix;
 integer_t csw;
};
typedef struct task_events_info task_events_info_data_t;
typedef struct task_events_info *task_events_info_t;
#define TASK_EVENTS_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_events_info_data_t) / sizeof(natural_t)))


#define TASK_THREAD_TIMES_INFO 3


struct task_thread_times_info {
 time_value_t user_time;

 time_value_t system_time;

};

typedef struct task_thread_times_info task_thread_times_info_data_t;
typedef struct task_thread_times_info *task_thread_times_info_t;
#define TASK_THREAD_TIMES_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_thread_times_info_data_t) / sizeof(natural_t)))


#define TASK_ABSOLUTETIME_INFO 1

struct task_absolutetime_info {
 uint64_t total_user;
 uint64_t total_system;
 uint64_t threads_user;
 uint64_t threads_system;
};

typedef struct task_absolutetime_info task_absolutetime_info_data_t;
typedef struct task_absolutetime_info *task_absolutetime_info_t;
#define TASK_ABSOLUTETIME_INFO_COUNT ((mach_msg_type_number_t) (sizeof (task_absolutetime_info_data_t) / sizeof (natural_t)))


#define TASK_KERNELMEMORY_INFO 7

struct task_kernelmemory_info {
 uint64_t total_palloc;
 uint64_t total_pfree;
 uint64_t total_salloc;
 uint64_t total_sfree;
};

typedef struct task_kernelmemory_info task_kernelmemory_info_data_t;
typedef struct task_kernelmemory_info *task_kernelmemory_info_t;
#define TASK_KERNELMEMORY_INFO_COUNT ((mach_msg_type_number_t) (sizeof (task_kernelmemory_info_data_t) / sizeof (natural_t)))


#define TASK_SECURITY_TOKEN 13
#define TASK_SECURITY_TOKEN_COUNT ((mach_msg_type_number_t) (sizeof(security_token_t) / sizeof(natural_t)))


#define TASK_AUDIT_TOKEN 15
#define TASK_AUDIT_TOKEN_COUNT (sizeof(audit_token_t) / sizeof(natural_t))



#define TASK_AFFINITY_TAG_INFO 16

struct task_affinity_tag_info {
 integer_t set_count;
 integer_t min;
 integer_t max;
 integer_t task_count;
};
typedef struct task_affinity_tag_info task_affinity_tag_info_data_t;
typedef struct task_affinity_tag_info *task_affinity_tag_info_t;
#define TASK_AFFINITY_TAG_INFO_COUNT (sizeof(task_affinity_tag_info_data_t) / sizeof(natural_t))


#define TASK_DYLD_INFO 17

struct task_dyld_info {
 mach_vm_address_t all_image_info_addr;
 mach_vm_size_t all_image_info_size;
 integer_t all_image_info_format;
};
typedef struct task_dyld_info task_dyld_info_data_t;
typedef struct task_dyld_info *task_dyld_info_t;
#define TASK_DYLD_INFO_COUNT (sizeof(task_dyld_info_data_t) / sizeof(natural_t))

#define TASK_DYLD_ALL_IMAGE_INFO_32 0
#define TASK_DYLD_ALL_IMAGE_INFO_64 1
# 296 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_info.h" 3 4
#define TASK_EXTMOD_INFO 19

struct task_extmod_info {
 unsigned char task_uuid[16];
 vm_extmod_statistics_data_t extmod_statistics;
};
typedef struct task_extmod_info task_extmod_info_data_t;
typedef struct task_extmod_info *task_extmod_info_t;
#define TASK_EXTMOD_INFO_COUNT (sizeof(task_extmod_info_data_t) / sizeof(natural_t))



#define MACH_TASK_BASIC_INFO 20
struct mach_task_basic_info {
 mach_vm_size_t virtual_size;
 mach_vm_size_t resident_size;
 mach_vm_size_t resident_size_max;
 time_value_t user_time;

 time_value_t system_time;

 policy_t policy;
 integer_t suspend_count;
};
typedef struct mach_task_basic_info mach_task_basic_info_data_t;
typedef struct mach_task_basic_info *mach_task_basic_info_t;
#define MACH_TASK_BASIC_INFO_COUNT (sizeof(mach_task_basic_info_data_t) / sizeof(natural_t))



#define TASK_POWER_INFO 21

struct task_power_info {
 uint64_t total_user;
 uint64_t total_system;
 uint64_t task_interrupt_wakeups;
 uint64_t task_platform_idle_wakeups;
 uint64_t task_timer_wakeups_bin_1;
 uint64_t task_timer_wakeups_bin_2;
};

typedef struct task_power_info task_power_info_data_t;
typedef struct task_power_info *task_power_info_t;
#define TASK_POWER_INFO_COUNT ((mach_msg_type_number_t) (sizeof (task_power_info_data_t) / sizeof (natural_t)))




#define TASK_VM_INFO 22
#define TASK_VM_INFO_PURGEABLE 23
struct task_vm_info {
 mach_vm_size_t virtual_size;
 integer_t region_count;
 integer_t page_size;
 mach_vm_size_t resident_size;
 mach_vm_size_t resident_size_peak;

 mach_vm_size_t device;
 mach_vm_size_t device_peak;
 mach_vm_size_t internal;
 mach_vm_size_t internal_peak;
 mach_vm_size_t external;
 mach_vm_size_t external_peak;
 mach_vm_size_t reusable;
 mach_vm_size_t reusable_peak;
 mach_vm_size_t purgeable_volatile_pmap;
 mach_vm_size_t purgeable_volatile_resident;
 mach_vm_size_t purgeable_volatile_virtual;
 mach_vm_size_t compressed;
 mach_vm_size_t compressed_peak;
 mach_vm_size_t compressed_lifetime;


 mach_vm_size_t phys_footprint;


 mach_vm_address_t min_address;
 mach_vm_address_t max_address;


 int64_t ledger_phys_footprint_peak;
 int64_t ledger_purgeable_nonvolatile;
 int64_t ledger_purgeable_novolatile_compressed;
 int64_t ledger_purgeable_volatile;
 int64_t ledger_purgeable_volatile_compressed;
 int64_t ledger_tag_network_nonvolatile;
 int64_t ledger_tag_network_nonvolatile_compressed;
 int64_t ledger_tag_network_volatile;
 int64_t ledger_tag_network_volatile_compressed;
 int64_t ledger_tag_media_footprint;
 int64_t ledger_tag_media_footprint_compressed;
 int64_t ledger_tag_media_nofootprint;
 int64_t ledger_tag_media_nofootprint_compressed;
 int64_t ledger_tag_graphics_footprint;
 int64_t ledger_tag_graphics_footprint_compressed;
 int64_t ledger_tag_graphics_nofootprint;
 int64_t ledger_tag_graphics_nofootprint_compressed;
 int64_t ledger_tag_neural_footprint;
 int64_t ledger_tag_neural_footprint_compressed;
 int64_t ledger_tag_neural_nofootprint;
 int64_t ledger_tag_neural_nofootprint_compressed;


 uint64_t limit_bytes_remaining;


 integer_t decompressions;
};
typedef struct task_vm_info task_vm_info_data_t;
typedef struct task_vm_info *task_vm_info_t;
#define TASK_VM_INFO_COUNT ((mach_msg_type_number_t) (sizeof (task_vm_info_data_t) / sizeof (natural_t)))

#define TASK_VM_INFO_REV5_COUNT TASK_VM_INFO_COUNT
#define TASK_VM_INFO_REV4_COUNT ((mach_msg_type_number_t) (TASK_VM_INFO_REV5_COUNT - 1))

#define TASK_VM_INFO_REV3_COUNT ((mach_msg_type_number_t) (TASK_VM_INFO_REV4_COUNT - 2))

#define TASK_VM_INFO_REV2_COUNT ((mach_msg_type_number_t) (TASK_VM_INFO_REV3_COUNT - 42))

#define TASK_VM_INFO_REV1_COUNT ((mach_msg_type_number_t) (TASK_VM_INFO_REV2_COUNT - 4))

#define TASK_VM_INFO_REV0_COUNT ((mach_msg_type_number_t) (TASK_VM_INFO_REV1_COUNT - 2))


typedef struct vm_purgeable_info task_purgable_info_t;


#define TASK_TRACE_MEMORY_INFO 24
struct task_trace_memory_info {
 uint64_t user_memory_address;
 uint64_t buffer_size;
 uint64_t mailbox_array_size;
};
typedef struct task_trace_memory_info task_trace_memory_info_data_t;
typedef struct task_trace_memory_info * task_trace_memory_info_t;
#define TASK_TRACE_MEMORY_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_trace_memory_info_data_t) / sizeof(natural_t)))


#define TASK_WAIT_STATE_INFO 25
struct task_wait_state_info {
 uint64_t total_wait_state_time;
 uint64_t total_wait_sfi_state_time;
 uint32_t _reserved[4];
};
typedef struct task_wait_state_info task_wait_state_info_data_t;
typedef struct task_wait_state_info * task_wait_state_info_t;
#define TASK_WAIT_STATE_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_wait_state_info_data_t) / sizeof(natural_t)))


#define TASK_POWER_INFO_V2 26

typedef struct {
 uint64_t task_gpu_utilisation;
 uint64_t task_gpu_stat_reserved0;
 uint64_t task_gpu_stat_reserved1;
 uint64_t task_gpu_stat_reserved2;
} gpu_energy_data;

typedef gpu_energy_data *gpu_energy_data_t;
struct task_power_info_v2 {
 task_power_info_data_t cpu_energy;
 gpu_energy_data gpu_energy;



 uint64_t task_ptime;
 uint64_t task_pset_switches;
};

typedef struct task_power_info_v2 task_power_info_v2_data_t;
typedef struct task_power_info_v2 *task_power_info_v2_t;
#define TASK_POWER_INFO_V2_COUNT_OLD ((mach_msg_type_number_t) (sizeof (task_power_info_v2_data_t) - sizeof(uint64_t)*2) / sizeof (natural_t))

#define TASK_POWER_INFO_V2_COUNT ((mach_msg_type_number_t) (sizeof (task_power_info_v2_data_t) / sizeof (natural_t)))


#define TASK_VM_INFO_PURGEABLE_ACCOUNT 27


#define TASK_FLAGS_INFO 28
struct task_flags_info {
 uint32_t flags;
};
typedef struct task_flags_info task_flags_info_data_t;
typedef struct task_flags_info * task_flags_info_t;
#define TASK_FLAGS_INFO_COUNT ((mach_msg_type_number_t) (sizeof(task_flags_info_data_t) / sizeof (natural_t)))


#define TF_LP64 0x00000001
#define TF_64B_DATA 0x00000002

#define TASK_DEBUG_INFO_INTERNAL 29






typedef uint32_t task_exc_guard_behavior_t;


#define TASK_EXC_GUARD_VM_DELIVER 0x01
#define TASK_EXC_GUARD_VM_ONCE 0x02
#define TASK_EXC_GUARD_VM_CORPSE 0x04
#define TASK_EXC_GUARD_VM_FATAL 0x08
#define TASK_EXC_GUARD_VM_ALL 0x0f

#define TASK_EXC_GUARD_MP_DELIVER 0x10
#define TASK_EXC_GUARD_MP_ONCE 0x20
#define TASK_EXC_GUARD_MP_CORPSE 0x40
#define TASK_EXC_GUARD_MP_FATAL 0x80
#define TASK_EXC_GUARD_MP_ALL 0xf0

#define TASK_EXC_GUARD_ALL 0xff






#define TASK_SCHED_TIMESHARE_INFO 10
#define TASK_SCHED_RR_INFO 11
#define TASK_SCHED_FIFO_INFO 12

#define TASK_SCHED_INFO 14

#pragma pack(pop)
# 92 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_inspect.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_inspect.h" 3 4
#define MACH_TASK_INSPECT_H 






typedef natural_t task_inspect_flavor_t;

enum task_inspect_flavor {
 TASK_INSPECT_BASIC_COUNTS = 1,
};

struct task_inspect_basic_counts {
 uint64_t instructions;
 uint64_t cycles;
};
#define TASK_INSPECT_BASIC_COUNTS_COUNT (sizeof(struct task_inspect_basic_counts) / sizeof(natural_t))

typedef struct task_inspect_basic_counts task_inspect_basic_counts_data_t;
typedef struct task_inspect_basic_counts *task_inspect_basic_counts_t;

typedef integer_t *task_inspect_info_t;
# 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_policy.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_policy.h" 3 4
#define _MACH_TASK_POLICY_H_ 

# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 1 3 4
# 33 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_policy.h" 2 3 4
# 51 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_policy.h" 3 4
typedef natural_t task_policy_flavor_t;
typedef integer_t *task_policy_t;
# 104 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_policy.h" 3 4
#define TASK_CATEGORY_POLICY 1

#define TASK_SUPPRESSION_POLICY 3
#define TASK_POLICY_STATE 4
#define TASK_BASE_QOS_POLICY 8
#define TASK_OVERRIDE_QOS_POLICY 9
#define TASK_BASE_LATENCY_QOS_POLICY 10
#define TASK_BASE_THROUGHPUT_QOS_POLICY 11

typedef enum task_role {
 TASK_RENICED = -1,
 TASK_UNSPECIFIED = 0,
 TASK_FOREGROUND_APPLICATION = 1,
 TASK_BACKGROUND_APPLICATION = 2,
 TASK_CONTROL_APPLICATION = 3,
 TASK_GRAPHICS_SERVER = 4,
 TASK_THROTTLE_APPLICATION = 5,
 TASK_NONUI_APPLICATION = 6,
 TASK_DEFAULT_APPLICATION = 7,
 TASK_DARWINBG_APPLICATION = 8,
} task_role_t;

struct task_category_policy {
 task_role_t role;
};

typedef struct task_category_policy task_category_policy_data_t;
typedef struct task_category_policy *task_category_policy_t;

#define TASK_CATEGORY_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (task_category_policy_data_t) / sizeof (integer_t)))



enum task_latency_qos {
 LATENCY_QOS_TIER_UNSPECIFIED = 0x0,
 LATENCY_QOS_TIER_0 = ((0xFF << 16) | 1),
 LATENCY_QOS_TIER_1 = ((0xFF << 16) | 2),
 LATENCY_QOS_TIER_2 = ((0xFF << 16) | 3),
 LATENCY_QOS_TIER_3 = ((0xFF << 16) | 4),
 LATENCY_QOS_TIER_4 = ((0xFF << 16) | 5),
 LATENCY_QOS_TIER_5 = ((0xFF << 16) | 6)
};
typedef integer_t task_latency_qos_t;
enum task_throughput_qos {
 THROUGHPUT_QOS_TIER_UNSPECIFIED = 0x0,
 THROUGHPUT_QOS_TIER_0 = ((0xFE << 16) | 1),
 THROUGHPUT_QOS_TIER_1 = ((0xFE << 16) | 2),
 THROUGHPUT_QOS_TIER_2 = ((0xFE << 16) | 3),
 THROUGHPUT_QOS_TIER_3 = ((0xFE << 16) | 4),
 THROUGHPUT_QOS_TIER_4 = ((0xFE << 16) | 5),
 THROUGHPUT_QOS_TIER_5 = ((0xFE << 16) | 6),
};

#define LATENCY_QOS_LAUNCH_DEFAULT_TIER LATENCY_QOS_TIER_3
#define THROUGHPUT_QOS_LAUNCH_DEFAULT_TIER THROUGHPUT_QOS_TIER_3

typedef integer_t task_throughput_qos_t;

struct task_qos_policy {
 task_latency_qos_t task_latency_qos_tier;
 task_throughput_qos_t task_throughput_qos_tier;
};

typedef struct task_qos_policy *task_qos_policy_t;
#define TASK_QOS_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (struct task_qos_policy) / sizeof (integer_t)))



#define PROC_FLAG_DARWINBG 0x8000
#define PROC_FLAG_EXT_DARWINBG 0x10000
#define PROC_FLAG_IOS_APPLEDAEMON 0x20000
#define PROC_FLAG_IOS_IMPPROMOTION 0x80000
#define PROC_FLAG_ADAPTIVE 0x100000
#define PROC_FLAG_ADAPTIVE_IMPORTANT 0x200000
#define PROC_FLAG_IMPORTANCE_DONOR 0x400000
#define PROC_FLAG_SUPPRESSED 0x800000
#define PROC_FLAG_APPLICATION 0x1000000
#define PROC_FLAG_IOS_APPLICATION PROC_FLAG_APPLICATION
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_special_ports.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/task_special_ports.h" 3 4
#define _MACH_TASK_SPECIAL_PORTS_H_ 

typedef int task_special_port_t;

#define TASK_KERNEL_PORT 1

#define TASK_HOST_PORT 2

#define TASK_NAME_PORT 3

#define TASK_BOOTSTRAP_PORT 4

#define TASK_INSPECT_PORT 5

#define TASK_READ_PORT 6





#define TASK_SEATBELT_PORT 7



#define TASK_ACCESS_PORT 9

#define TASK_DEBUG_CONTROL_PORT 10

#define TASK_RESOURCE_NOTIFY_PORT 11

#define TASK_MAX_SPECIAL_PORT TASK_RESOURCE_NOTIFY_PORT





#define task_get_kernel_port(task,port) (task_get_special_port((task), TASK_KERNEL_PORT, (port)))


#define task_set_kernel_port(task,port) (task_set_special_port((task), TASK_KERNEL_PORT, (port)))


#define task_get_host_port(task,port) (task_get_special_port((task), TASK_HOST_PORT, (port)))


#define task_set_host_port(task,port) (task_set_special_port((task), TASK_HOST_PORT, (port)))


#define task_get_bootstrap_port(task,port) (task_get_special_port((task), TASK_BOOTSTRAP_PORT, (port)))


#define task_get_debug_control_port(task,port) (task_get_special_port((task), TASK_DEBUG_CONTROL_PORT, (port)))


#define task_set_bootstrap_port(task,port) (task_set_special_port((task), TASK_BOOTSTRAP_PORT, (port)))


#define task_get_task_access_port(task,port) (task_get_special_port((task), TASK_ACCESS_PORT, (port)))


#define task_set_task_access_port(task,port) (task_set_special_port((task), TASK_ACCESS_PORT, (port)))


#define task_set_task_debug_control_port(task,port) (task_set_special_port((task), TASK_DEBUG_CONTROL_PORT, (port)))
# 95 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_info.h" 1 3 4
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_info.h" 3 4
#define _MACH_THREAD_INFO_H_ 
# 81 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_info.h" 3 4
typedef natural_t thread_flavor_t;
typedef integer_t *thread_info_t;

#define THREAD_INFO_MAX (32)
typedef integer_t thread_info_data_t[(32)];




#define THREAD_BASIC_INFO 3

struct thread_basic_info {
 time_value_t user_time;
 time_value_t system_time;
 integer_t cpu_usage;
 policy_t policy;
 integer_t run_state;
 integer_t flags;
 integer_t suspend_count;
 integer_t sleep_time;

};

typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;
#define THREAD_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(thread_basic_info_data_t) / sizeof(natural_t)))


#define THREAD_IDENTIFIER_INFO 4

struct thread_identifier_info {
 uint64_t thread_id;
 uint64_t thread_handle;
 uint64_t dispatch_qaddr;
};

typedef struct thread_identifier_info thread_identifier_info_data_t;
typedef struct thread_identifier_info *thread_identifier_info_t;
#define THREAD_IDENTIFIER_INFO_COUNT ((mach_msg_type_number_t) (sizeof(thread_identifier_info_data_t) / sizeof(natural_t)))






#define TH_USAGE_SCALE 1000





#define TH_STATE_RUNNING 1
#define TH_STATE_STOPPED 2
#define TH_STATE_WAITING 3
#define TH_STATE_UNINTERRUPTIBLE 4

#define TH_STATE_HALTED 5





#define TH_FLAGS_SWAPPED 0x1
#define TH_FLAGS_IDLE 0x2
#define TH_FLAGS_GLOBAL_FORCED_IDLE 0x4




#define THREAD_EXTENDED_INFO 5
#define MAXTHREADNAMESIZE 64
struct thread_extended_info {
 uint64_t pth_user_time;
 uint64_t pth_system_time;
 int32_t pth_cpu_usage;
 int32_t pth_policy;
 int32_t pth_run_state;
 int32_t pth_flags;
 int32_t pth_sleep_time;
 int32_t pth_curpri;
 int32_t pth_priority;
 int32_t pth_maxpriority;
 char pth_name[64];
};
typedef struct thread_extended_info thread_extended_info_data_t;
typedef struct thread_extended_info * thread_extended_info_t;
#define THREAD_EXTENDED_INFO_COUNT ((mach_msg_type_number_t) (sizeof(thread_extended_info_data_t) / sizeof (natural_t)))


#define THREAD_DEBUG_INFO_INTERNAL 6


#define IO_NUM_PRIORITIES 4

#define UPDATE_IO_STATS(info,size) { info.count++; info.size += size; }





#define UPDATE_IO_STATS_ATOMIC(info,io_size) { OSIncrementAtomic64((SInt64 *)&(info.count)); OSAddAtomic64(io_size, (SInt64 *)&(info.size)); }





struct io_stat_entry {
 uint64_t count;
 uint64_t size;
};

struct io_stat_info {
 struct io_stat_entry disk_reads;
 struct io_stat_entry io_priority[4];
 struct io_stat_entry paging;
 struct io_stat_entry metadata;
 struct io_stat_entry total_io;
};

typedef struct io_stat_info *io_stat_info_t;






#define THREAD_SCHED_TIMESHARE_INFO 10
#define THREAD_SCHED_RR_INFO 11
#define THREAD_SCHED_FIFO_INFO 12
# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
#define _MACH_THREAD_POLICY_H_ 
# 51 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
typedef natural_t thread_policy_flavor_t;
typedef integer_t *thread_policy_t;
# 84 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
#define THREAD_STANDARD_POLICY 1

struct thread_standard_policy {
 natural_t no_data;
};

typedef struct thread_standard_policy thread_standard_policy_data_t;
typedef struct thread_standard_policy *thread_standard_policy_t;

#define THREAD_STANDARD_POLICY_COUNT 0
# 107 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
#define THREAD_EXTENDED_POLICY 1

struct thread_extended_policy {
 boolean_t timeshare;
};

typedef struct thread_extended_policy thread_extended_policy_data_t;
typedef struct thread_extended_policy *thread_extended_policy_t;

#define THREAD_EXTENDED_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_extended_policy_data_t) / sizeof (integer_t)))
# 146 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
#define THREAD_TIME_CONSTRAINT_POLICY 2

struct thread_time_constraint_policy {
 uint32_t period;
 uint32_t computation;
 uint32_t constraint;
 boolean_t preemptible;
};

typedef struct thread_time_constraint_policy
        thread_time_constraint_policy_data_t;
typedef struct thread_time_constraint_policy
        *thread_time_constraint_policy_t;

#define THREAD_TIME_CONSTRAINT_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_time_constraint_policy_data_t) / sizeof (integer_t)))
# 174 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
#define THREAD_PRECEDENCE_POLICY 3

struct thread_precedence_policy {
 integer_t importance;
};

typedef struct thread_precedence_policy thread_precedence_policy_data_t;
typedef struct thread_precedence_policy *thread_precedence_policy_t;

#define THREAD_PRECEDENCE_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_precedence_policy_data_t) / sizeof (integer_t)))
# 204 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_policy.h" 3 4
#define THREAD_AFFINITY_POLICY 4

struct thread_affinity_policy {
 integer_t affinity_tag;
};

#define THREAD_AFFINITY_TAG_NULL 0

typedef struct thread_affinity_policy thread_affinity_policy_data_t;
typedef struct thread_affinity_policy *thread_affinity_policy_t;

#define THREAD_AFFINITY_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_affinity_policy_data_t) / sizeof (integer_t)))






#define THREAD_BACKGROUND_POLICY 5

struct thread_background_policy {
 integer_t priority;
};

#define THREAD_BACKGROUND_POLICY_DARWIN_BG 0x1000

typedef struct thread_background_policy thread_background_policy_data_t;
typedef struct thread_background_policy *thread_background_policy_t;

#define THREAD_BACKGROUND_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_background_policy_data_t) / sizeof (integer_t)))



#define THREAD_LATENCY_QOS_POLICY 7
typedef integer_t thread_latency_qos_t;

struct thread_latency_qos_policy {
 thread_latency_qos_t thread_latency_qos_tier;
};

typedef struct thread_latency_qos_policy thread_latency_qos_policy_data_t;
typedef struct thread_latency_qos_policy *thread_latency_qos_policy_t;

#define THREAD_LATENCY_QOS_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_latency_qos_policy_data_t) / sizeof (integer_t)))


#define THREAD_THROUGHPUT_QOS_POLICY 8
typedef integer_t thread_throughput_qos_t;

struct thread_throughput_qos_policy {
 thread_throughput_qos_t thread_throughput_qos_tier;
};

typedef struct thread_throughput_qos_policy thread_throughput_qos_policy_data_t;
typedef struct thread_throughput_qos_policy *thread_throughput_qos_policy_t;

#define THREAD_THROUGHPUT_QOS_POLICY_COUNT ((mach_msg_type_number_t) (sizeof (thread_throughput_qos_policy_data_t) / sizeof (integer_t)))
# 97 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_special_ports.h" 1 3 4
# 68 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/thread_special_ports.h" 3 4
#define _MACH_THREAD_SPECIAL_PORTS_H_ 

#define THREAD_KERNEL_PORT 1

#define THREAD_INSPECT_PORT 2

#define THREAD_READ_PORT 3

#define THREAD_MAX_SPECIAL_PORT THREAD_READ_PORT




#define thread_get_kernel_port(thread,port) (thread_get_special_port((thread), THREAD_KERNEL_PORT, (port)))


#define thread_set_kernel_port(thread,port) (thread_set_special_port((thread), THREAD_KERNEL_PORT, (port)))
# 98 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/clock_types.h" 1 3 4
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/clock_types.h" 3 4
#define _MACH_CLOCK_TYPES_H_ 







typedef int alarm_type_t;
typedef int sleep_type_t;
typedef int clock_id_t;
typedef int clock_flavor_t;
typedef int *clock_attr_t;
typedef int clock_res_t;




struct mach_timespec {
 unsigned int tv_sec;
 clock_res_t tv_nsec;
};
typedef struct mach_timespec mach_timespec_t;




#define SYSTEM_CLOCK 0
#define CALENDAR_CLOCK 1

#define REALTIME_CLOCK 0




#define CLOCK_GET_TIME_RES 1

#define CLOCK_ALARM_CURRES 3
#define CLOCK_ALARM_MINRES 4
#define CLOCK_ALARM_MAXRES 5

#define NSEC_PER_USEC 1000ull
#define USEC_PER_SEC 1000000ull
#define NSEC_PER_SEC 1000000000ull
#define NSEC_PER_MSEC 1000000ull

#define BAD_MACH_TIMESPEC(t) ((t)->tv_nsec < 0 || (t)->tv_nsec >= (long)NSEC_PER_SEC)



#define CMP_MACH_TIMESPEC(t1,t2) ((t1)->tv_sec > (t2)->tv_sec ? (long) +NSEC_PER_SEC : ((t1)->tv_sec < (t2)->tv_sec ? (long) -NSEC_PER_SEC : (t1)->tv_nsec - (t2)->tv_nsec))





#define ADD_MACH_TIMESPEC(t1,t2) do { if (((t1)->tv_nsec += (t2)->tv_nsec) >= (long) NSEC_PER_SEC) { (t1)->tv_nsec -= (long) NSEC_PER_SEC; (t1)->tv_sec += 1; } (t1)->tv_sec += (t2)->tv_sec; } while (0)
# 109 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/clock_types.h" 3 4
#define SUB_MACH_TIMESPEC(t1,t2) do { if (((t1)->tv_nsec -= (t2)->tv_nsec) < 0) { (t1)->tv_nsec += (long) NSEC_PER_SEC; (t1)->tv_sec -= 1; } (t1)->tv_sec -= (t2)->tv_sec; } while (0)
# 121 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/clock_types.h" 3 4
#define ALRMTYPE 0xff
#define TIME_ABSOLUTE 0x00
#define TIME_RELATIVE 0x01

#define BAD_ALRMTYPE(t) (((t) &~ TIME_RELATIVE) != 0)
# 101 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_attributes.h" 1 3 4
# 71 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_attributes.h" 3 4
#define _MACH_VM_ATTRIBUTES_H_ 




typedef unsigned int vm_machine_attribute_t;

#define MATTR_CACHE 1
#define MATTR_MIGRATE 2
#define MATTR_REPLICATE 4




typedef int vm_machine_attribute_val_t;

#define MATTR_VAL_OFF 0
#define MATTR_VAL_ON 1
#define MATTR_VAL_GET 2

#define MATTR_VAL_CACHE_FLUSH 6
#define MATTR_VAL_DCACHE_FLUSH 7
#define MATTR_VAL_ICACHE_FLUSH 8
#define MATTR_VAL_CACHE_SYNC 9
#define MATTR_VAL_CACHE_SYNC 9

#define MATTR_VAL_GET_INFO 10
# 102 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_inherit.h" 1 3 4
# 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_inherit.h" 3 4
#define _MACH_VM_INHERIT_H_ 







typedef unsigned int vm_inherit_t;





#define VM_INHERIT_SHARE ((vm_inherit_t) 0)
#define VM_INHERIT_COPY ((vm_inherit_t) 1)
#define VM_INHERIT_NONE ((vm_inherit_t) 2)
#define VM_INHERIT_DONATE_COPY ((vm_inherit_t) 3)

#define VM_INHERIT_DEFAULT VM_INHERIT_COPY
#define VM_INHERIT_LAST_VALID VM_INHERIT_NONE
# 103 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_purgable.h" 1 3 4
# 45 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_purgable.h" 3 4
#define _MACH_VM_PURGABLE_H_ 







typedef int vm_purgable_t;




#define VM_PURGABLE_SET_STATE ((vm_purgable_t) 0)
#define VM_PURGABLE_GET_STATE ((vm_purgable_t) 1)
#define VM_PURGABLE_PURGE_ALL ((vm_purgable_t) 2)
#define VM_PURGABLE_SET_STATE_FROM_KERNEL ((vm_purgable_t) 3)
# 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_purgable.h" 3 4
#define VM_PURGABLE_NO_AGING_SHIFT 16
#define VM_PURGABLE_NO_AGING_MASK (0x1 << VM_PURGABLE_NO_AGING_SHIFT)
#define VM_PURGABLE_NO_AGING (0x1 << VM_PURGABLE_NO_AGING_SHIFT)

#define VM_PURGABLE_DEBUG_SHIFT 12
#define VM_PURGABLE_DEBUG_MASK (0x3 << VM_PURGABLE_DEBUG_SHIFT)
#define VM_PURGABLE_DEBUG_EMPTY (0x1 << VM_PURGABLE_DEBUG_SHIFT)
#define VM_PURGABLE_DEBUG_FAULT (0x2 << VM_PURGABLE_DEBUG_SHIFT)






#define VM_VOLATILE_GROUP_SHIFT 8
#define VM_VOLATILE_GROUP_MASK (7 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_DEFAULT VM_VOLATILE_GROUP_0

#define VM_VOLATILE_GROUP_0 (0 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_1 (1 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_2 (2 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_3 (3 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_4 (4 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_5 (5 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_6 (6 << VM_VOLATILE_GROUP_SHIFT)
#define VM_VOLATILE_GROUP_7 (7 << VM_VOLATILE_GROUP_SHIFT)







#define VM_PURGABLE_BEHAVIOR_SHIFT 6
#define VM_PURGABLE_BEHAVIOR_MASK (1 << VM_PURGABLE_BEHAVIOR_SHIFT)
#define VM_PURGABLE_BEHAVIOR_FIFO (0 << VM_PURGABLE_BEHAVIOR_SHIFT)
#define VM_PURGABLE_BEHAVIOR_LIFO (1 << VM_PURGABLE_BEHAVIOR_SHIFT)







#define VM_PURGABLE_ORDERING_SHIFT 5
#define VM_PURGABLE_ORDERING_MASK (1 << VM_PURGABLE_ORDERING_SHIFT)
#define VM_PURGABLE_ORDERING_OBSOLETE (1 << VM_PURGABLE_ORDERING_SHIFT)
#define VM_PURGABLE_ORDERING_NORMAL (0 << VM_PURGABLE_ORDERING_SHIFT)





#define VM_VOLATILE_ORDER_SHIFT 4
#define VM_VOLATILE_ORDER_MASK (1 << VM_VOLATILE_ORDER_SHIFT)
#define VM_VOLATILE_MAKE_FIRST_IN_GROUP (1 << VM_VOLATILE_ORDER_SHIFT)
#define VM_VOLATILE_MAKE_LAST_IN_GROUP (0 << VM_VOLATILE_ORDER_SHIFT)




#define VM_PURGABLE_STATE_MIN 0
#define VM_PURGABLE_STATE_MAX 3
#define VM_PURGABLE_STATE_MASK 3

#define VM_PURGABLE_NONVOLATILE 0
#define VM_PURGABLE_VOLATILE 1
#define VM_PURGABLE_EMPTY 2
#define VM_PURGABLE_DENY 3

#define VM_PURGABLE_ALL_MASKS (VM_PURGABLE_STATE_MASK | VM_VOLATILE_ORDER_MASK | VM_PURGABLE_ORDERING_MASK | VM_PURGABLE_BEHAVIOR_MASK | VM_VOLATILE_GROUP_MASK | VM_PURGABLE_DEBUG_MASK | VM_PURGABLE_NO_AGING_MASK)
# 104 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_behavior.h" 1 3 4
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_behavior.h" 3 4
#define _MACH_VM_BEHAVIOR_H_ 







typedef int vm_behavior_t;
# 61 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_behavior.h" 3 4
#define VM_BEHAVIOR_DEFAULT ((vm_behavior_t) 0)
#define VM_BEHAVIOR_RANDOM ((vm_behavior_t) 1)
#define VM_BEHAVIOR_SEQUENTIAL ((vm_behavior_t) 2)
#define VM_BEHAVIOR_RSEQNTL ((vm_behavior_t) 3)





#define VM_BEHAVIOR_WILLNEED ((vm_behavior_t) 4)
#define VM_BEHAVIOR_DONTNEED ((vm_behavior_t) 5)
#define VM_BEHAVIOR_FREE ((vm_behavior_t) 6)
#define VM_BEHAVIOR_ZERO_WIRED_PAGES ((vm_behavior_t) 7)
#define VM_BEHAVIOR_REUSABLE ((vm_behavior_t) 8)
#define VM_BEHAVIOR_REUSE ((vm_behavior_t) 9)
#define VM_BEHAVIOR_CAN_REUSE ((vm_behavior_t) 10)
#define VM_BEHAVIOR_PAGEOUT ((vm_behavior_t) 11)
# 105 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4




# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_region.h" 1 3 4
# 39 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_region.h" 3 4
#define _MACH_VM_REGION_H_ 







# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/vm_param.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/vm_param.h" 3 4
#define _MACH_MACHINE_VM_PARAM_H_ 


# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_param.h" 1 3 4
# 91 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_param.h" 3 4
#define _MACH_I386_VM_PARAM_H_ 



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_page_size.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_page_size.h" 3 4
#define _VM_PAGE_SIZE_H_ 











extern vm_size_t vm_page_size;
extern vm_size_t vm_page_mask;
extern int vm_page_shift;




#define trunc_page(x) ((x) & (~(vm_page_size - 1)))
#define round_page(x) trunc_page((x) + (vm_page_size - 1))




#define mach_vm_trunc_page(x) ((mach_vm_offset_t)(x) & ~((signed)vm_page_mask))
#define mach_vm_round_page(x) (((mach_vm_offset_t)(x) + vm_page_mask) & ~((signed)vm_page_mask))


extern vm_size_t vm_kernel_page_size ;
extern vm_size_t vm_kernel_page_mask ;
extern int vm_kernel_page_shift ;

#define trunc_page_kernel(x) ((x) & (~vm_kernel_page_mask))
#define round_page_kernel(x) trunc_page_kernel((x) + vm_kernel_page_mask)


# 96 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/i386/vm_param.h" 2 3 4


#define BYTE_SIZE 8

#define I386_PGBYTES 4096
#define I386_PGSHIFT 12







#define PAGE_SHIFT vm_page_shift
#define PAGE_SIZE vm_page_size
#define PAGE_MASK vm_page_mask


#define PAGE_MAX_SHIFT 14
#define PAGE_MAX_SIZE (1 << PAGE_MAX_SHIFT)
#define PAGE_MAX_MASK (PAGE_MAX_SIZE-1)

#define PAGE_MIN_SHIFT 12
#define PAGE_MIN_SIZE (1 << PAGE_MIN_SHIFT)
#define PAGE_MIN_MASK (PAGE_MIN_SIZE-1)


#define VM_MIN_ADDRESS64 ((user_addr_t) 0x0000000000000000ULL)



#define VM_USRSTACK64 ((user_addr_t) 0x00007FFEEFC00000ULL)




#define VM_DYLD64 ((user_addr_t) 0x00007FFF5FC00000ULL)
#define VM_LIB64_SHR_DATA ((user_addr_t) 0x00007FFF60000000ULL)
#define VM_LIB64_SHR_TEXT ((user_addr_t) 0x00007FFF80000000ULL)




#define VM_MAX_PAGE_ADDRESS ((user_addr_t) 0x00007FFFFFE00000ULL)



#define VM_MAX_USER_PAGE_ADDRESS ((user_addr_t)0x00007FFFFFFFF000ULL)



#define MACH_VM_MIN_ADDRESS ((mach_vm_offset_t) 0)
#define MACH_VM_MAX_ADDRESS ((mach_vm_offset_t) VM_MAX_PAGE_ADDRESS)


#define VM_MIN_ADDRESS ((vm_offset_t) 0)
#define VM_USRSTACK32 ((vm_offset_t) 0xC0000000)
#define VM_MAX_ADDRESS ((vm_offset_t) 0xFFE00000)
# 34 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/machine/vm_param.h" 2 3 4
# 48 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_region.h" 2 3 4





#pragma pack(push, 4)




typedef uint32_t vm32_object_id_t;







#define VM_REGION_INFO_MAX (1024)
typedef int *vm_region_info_t;
typedef int *vm_region_info_64_t;
typedef int *vm_region_recurse_info_t;
typedef int *vm_region_recurse_info_64_t;
typedef int vm_region_flavor_t;
typedef int vm_region_info_data_t[(1024)];

#define VM_REGION_BASIC_INFO_64 9
struct vm_region_basic_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 memory_object_offset_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};
typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;

#define VM_REGION_BASIC_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof(vm_region_basic_info_data_64_t)/sizeof(int)))







#define VM_REGION_BASIC_INFO 10






struct vm_region_basic_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 uint32_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};

typedef struct vm_region_basic_info *vm_region_basic_info_t;
typedef struct vm_region_basic_info vm_region_basic_info_data_t;

#define VM_REGION_BASIC_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_basic_info_data_t)/sizeof(int)))


#define SM_COW 1
#define SM_PRIVATE 2
#define SM_EMPTY 3
#define SM_SHARED 4
#define SM_TRUESHARED 5
#define SM_PRIVATE_ALIASED 6
#define SM_SHARED_ALIASED 7
#define SM_LARGE_PAGE 8
# 140 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_region.h" 3 4
#define VM_REGION_EXTENDED_INFO 13
struct vm_region_extended_info {
 vm_prot_t protection;
 unsigned int user_tag;
 unsigned int pages_resident;
 unsigned int pages_shared_now_private;
 unsigned int pages_swapped_out;
 unsigned int pages_dirtied;
 unsigned int ref_count;
 unsigned short shadow_depth;
 unsigned char external_pager;
 unsigned char share_mode;
 unsigned int pages_reusable;
};
typedef struct vm_region_extended_info *vm_region_extended_info_t;
typedef struct vm_region_extended_info vm_region_extended_info_data_t;
#define VM_REGION_EXTENDED_INFO_COUNT ((mach_msg_type_number_t) (sizeof (vm_region_extended_info_data_t) / sizeof (natural_t)))






#define VM_REGION_TOP_INFO 12

struct vm_region_top_info {
 unsigned int obj_id;
 unsigned int ref_count;
 unsigned int private_pages_resident;
 unsigned int shared_pages_resident;
 unsigned char share_mode;
};

typedef struct vm_region_top_info *vm_region_top_info_t;
typedef struct vm_region_top_info vm_region_top_info_data_t;

#define VM_REGION_TOP_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_top_info_data_t) / sizeof(natural_t)))
# 202 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_region.h" 3 4
struct vm_region_submap_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 uint32_t offset;
 unsigned int user_tag;
 unsigned int pages_resident;
 unsigned int pages_shared_now_private;
 unsigned int pages_swapped_out;
 unsigned int pages_dirtied;
 unsigned int ref_count;
 unsigned short shadow_depth;
 unsigned char external_pager;
 unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm32_object_id_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_info *vm_region_submap_info_t;
typedef struct vm_region_submap_info vm_region_submap_info_data_t;

#define VM_REGION_SUBMAP_INFO_COUNT ((mach_msg_type_number_t) (sizeof(vm_region_submap_info_data_t) / sizeof(natural_t)))



struct vm_region_submap_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
 unsigned int user_tag;
 unsigned int pages_resident;
 unsigned int pages_shared_now_private;
 unsigned int pages_swapped_out;
 unsigned int pages_dirtied;
 unsigned int ref_count;
 unsigned short shadow_depth;
 unsigned char external_pager;
 unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm32_object_id_t object_id;
 unsigned short user_wired_count;
 unsigned int pages_reusable;
 vm_object_id_t object_id_full;
};

typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;

#define VM_REGION_SUBMAP_INFO_V2_SIZE (sizeof (vm_region_submap_info_data_64_t))

#define VM_REGION_SUBMAP_INFO_V1_SIZE (VM_REGION_SUBMAP_INFO_V2_SIZE - sizeof (vm_object_id_t) )


#define VM_REGION_SUBMAP_INFO_V0_SIZE (VM_REGION_SUBMAP_INFO_V1_SIZE - sizeof (unsigned int) )



#define VM_REGION_SUBMAP_INFO_V2_COUNT_64 ((mach_msg_type_number_t) (VM_REGION_SUBMAP_INFO_V2_SIZE / sizeof (natural_t)))


#define VM_REGION_SUBMAP_INFO_V1_COUNT_64 ((mach_msg_type_number_t) (VM_REGION_SUBMAP_INFO_V1_SIZE / sizeof (natural_t)))


#define VM_REGION_SUBMAP_INFO_V0_COUNT_64 ((mach_msg_type_number_t) (VM_REGION_SUBMAP_INFO_V0_SIZE / sizeof (natural_t)))




#define VM_REGION_SUBMAP_INFO_COUNT_64 VM_REGION_SUBMAP_INFO_V2_COUNT_64

struct vm_region_submap_short_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
 unsigned int user_tag;
 unsigned int ref_count;
 unsigned short shadow_depth;
 unsigned char external_pager;
 unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm32_object_id_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;
typedef struct vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;

#define VM_REGION_SUBMAP_SHORT_INFO_COUNT_64 ((mach_msg_type_number_t) (sizeof (vm_region_submap_short_info_data_64_t) / sizeof (natural_t)))



struct mach_vm_read_entry {
 mach_vm_address_t address;
 mach_vm_size_t size;
};

struct vm_read_entry {
 vm_address_t address;
 vm_size_t size;
};
# 317 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/vm_region.h" 3 4
#define VM_MAP_ENTRY_MAX (256)

typedef struct mach_vm_read_entry mach_vm_read_entry_t[(256)];
typedef struct vm_read_entry vm_read_entry_t[(256)];




#pragma pack(pop)


#define VM_PAGE_INFO_MAX 
typedef int *vm_page_info_t;
typedef int vm_page_info_data_t[];
typedef int vm_page_info_flavor_t;

#define VM_PAGE_INFO_BASIC 1
struct vm_page_info_basic {
 int disposition;
 int ref_count;
 vm_object_id_t object_id;
 memory_object_offset_t offset;
 int depth;
 int __pad;
};
typedef struct vm_page_info_basic *vm_page_info_basic_t;
typedef struct vm_page_info_basic vm_page_info_basic_data_t;

#define VM_PAGE_INFO_BASIC_COUNT ((mach_msg_type_number_t) (sizeof(vm_page_info_basic_data_t)/sizeof(int)))
# 110 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kmod.h" 1 3 4
# 36 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kmod.h" 3 4
#define _MACH_KMOD_H_ 














#define KMOD_MAX_NAME 64

#define KMOD_RETURN_SUCCESS KERN_SUCCESS
#define KMOD_RETURN_FAILURE KERN_FAILURE

typedef int kmod_t;

struct kmod_info;
typedef kern_return_t kmod_start_func_t(struct kmod_info * ki, void * data);
typedef kern_return_t kmod_stop_func_t(struct kmod_info * ki, void * data);
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kmod.h" 3 4
#pragma pack(push, 4)


typedef struct kmod_reference {
 struct kmod_reference * next;
 struct kmod_info * info;
} kmod_reference_t;
# 87 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kmod.h" 3 4
typedef struct kmod_info {
 struct kmod_info * next;
 int32_t info_version;
 uint32_t id;
 char name[64];
 char version[64];
 int32_t reference_count;
 kmod_reference_t * reference_list;
 vm_address_t address;
 vm_size_t size;
 vm_size_t hdr_size;
 kmod_start_func_t * start;
 kmod_stop_func_t * stop;
} kmod_info_t;



typedef struct kmod_info_32_v1 {
 uint32_t next_addr;
 int32_t info_version;
 uint32_t id;
 uint8_t name[64];
 uint8_t version[64];
 int32_t reference_count;
 uint32_t reference_list_addr;
 uint32_t address;
 uint32_t size;
 uint32_t hdr_size;
 uint32_t start_addr;
 uint32_t stop_addr;
} kmod_info_32_v1_t;



typedef struct kmod_info_64_v1 {
 uint64_t next_addr;
 int32_t info_version;
 uint32_t id;
 uint8_t name[64];
 uint8_t version[64];
 int32_t reference_count;
 uint64_t reference_list_addr;
 uint64_t address;
 uint64_t size;
 uint64_t hdr_size;
 uint64_t start_addr;
 uint64_t stop_addr;
} kmod_info_64_v1_t;

#pragma pack(pop)







#define KMOD_INFO_NAME kmod_info
#define KMOD_INFO_VERSION 1

#define KMOD_DECL(name,version) static kmod_start_func_t name ## _module_start; static kmod_stop_func_t name ## _module_stop; kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1U, { #name }, { version }, -1, 0, 0, 0, 0, name ## _module_start, name ## _module_stop };







#define KMOD_EXPLICIT_DECL(name,version,start,stop) kmod_info_t KMOD_INFO_NAME = { 0, KMOD_INFO_VERSION, -1U, { #name }, { version }, -1, 0, 0, 0, 0, start, stop };
# 174 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/kmod.h" 3 4
typedef void * kmod_args_t;
typedef int kmod_control_flavor_t;
typedef kmod_info_t * kmod_info_array_t;


# 111 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/dyld_kernel.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/dyld_kernel.h" 3 4
#define _MACH_DYLIB_INFO_H_ 
# 43 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/dyld_kernel.h" 3 4
struct dyld_kernel_image_info {
 uuid_t uuid;
 fsobj_id_t fsobjid;
 fsid_t fsid;
 uint64_t load_addr;
};

struct dyld_kernel_process_info {
 struct dyld_kernel_image_info cache_image_info;
 uint64_t timestamp;
 uint32_t imageCount;
 uint32_t initialImageCount;
 uint8_t dyldState;
 boolean_t no_cache;
 boolean_t private_cache;
};



typedef struct dyld_kernel_image_info dyld_kernel_image_info_t;
typedef struct dyld_kernel_process_info dyld_kernel_process_info_t;
typedef dyld_kernel_image_info_t *dyld_kernel_image_info_array_t;
# 112 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 2 3 4






typedef mach_port_t task_t;
typedef mach_port_t task_name_t;
typedef mach_port_t task_policy_set_t;
typedef mach_port_t task_policy_get_t;
typedef mach_port_t task_inspect_t;
typedef mach_port_t task_read_t;
typedef mach_port_t task_suspension_token_t;
typedef mach_port_t thread_t;
typedef mach_port_t thread_act_t;
typedef mach_port_t thread_inspect_t;
typedef mach_port_t thread_read_t;
typedef mach_port_t ipc_space_t;
typedef mach_port_t ipc_space_read_t;
typedef mach_port_t ipc_space_inspect_t;
typedef mach_port_t coalition_t;
typedef mach_port_t host_t;
typedef mach_port_t host_priv_t;
typedef mach_port_t host_security_t;
typedef mach_port_t processor_t;
typedef mach_port_t processor_set_t;
typedef mach_port_t processor_set_control_t;
typedef mach_port_t semaphore_t;
typedef mach_port_t lock_set_t;
typedef mach_port_t ledger_t;
typedef mach_port_t alarm_t;
typedef mach_port_t clock_serv_t;
typedef mach_port_t clock_ctrl_t;
typedef mach_port_t arcade_register_t;
typedef mach_port_t ipc_eventlink_t;
typedef mach_port_t eventlink_port_pair_t[2];
typedef mach_port_t suid_cred_t;
typedef mach_port_t task_id_token_t;







typedef processor_set_t processor_set_name_t;




typedef mach_port_t clock_reply_t;
typedef mach_port_t bootstrap_t;
typedef mach_port_t mem_entry_name_port_t;
typedef mach_port_t exception_handler_t;
typedef exception_handler_t *exception_handler_array_t;
typedef mach_port_t vm_task_entry_t;
typedef mach_port_t io_master_t;
typedef mach_port_t UNDServerRef;
typedef mach_port_t mach_eventlink_t;

typedef ipc_info_port_t exception_handler_info_t;
# 181 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/mach/mach_types.h" 3 4
typedef task_t *task_array_t;
typedef thread_t *thread_array_t;
typedef processor_set_t *processor_set_array_t;
typedef processor_set_t *processor_set_name_array_t;
typedef processor_t *processor_array_t;
typedef thread_act_t *thread_act_array_t;
typedef ledger_t *ledger_array_t;







typedef task_t task_port_t;
typedef task_array_t task_port_array_t;
typedef thread_t thread_port_t;
typedef thread_array_t thread_port_array_t;
typedef ipc_space_t ipc_space_port_t;
typedef host_t host_name_t;
typedef host_t host_name_port_t;
typedef processor_set_t processor_set_port_t;
typedef processor_set_t processor_set_name_port_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef processor_set_t processor_set_control_port_t;
typedef processor_t processor_port_t;
typedef processor_array_t processor_port_array_t;
typedef thread_act_t thread_act_port_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef semaphore_t semaphore_port_t;
typedef lock_set_t lock_set_port_t;
typedef ledger_t ledger_port_t;
typedef ledger_array_t ledger_port_array_t;
typedef alarm_t alarm_port_t;
typedef clock_serv_t clock_serv_port_t;
typedef clock_ctrl_t clock_ctrl_port_t;
typedef exception_handler_t exception_port_t;
typedef exception_handler_array_t exception_port_arrary_t;
typedef char vfs_path_t[4096];
typedef char nspace_path_t[1024];
typedef char suid_cred_path_t[1024];
typedef uint32_t suid_cred_uid_t;

#define TASK_NULL ((task_t) 0)
#define TASK_NAME_NULL ((task_name_t) 0)
#define TASK_INSPECT_NULL ((task_inspect_t) 0)
#define TASK_READ_NULL ((task_read_t) 0)
#define THREAD_NULL ((thread_t) 0)
#define THREAD_INSPECT_NULL ((thread_inspect_t) 0)
#define THREAD_READ_NULL ((thread_read_t) 0)
#define TID_NULL ((uint64_t) 0)
#define THR_ACT_NULL ((thread_act_t) 0)
#define IPC_SPACE_NULL ((ipc_space_t) 0)
#define IPC_SPACE_READ_NULL ((ipc_space_read_t) 0)
#define IPC_SPACE_INSPECT_NULL ((ipc_space_inspect_t) 0)
#define COALITION_NULL ((coalition_t) 0)
#define HOST_NULL ((host_t) 0)
#define HOST_PRIV_NULL ((host_priv_t) 0)
#define HOST_SECURITY_NULL ((host_security_t) 0)
#define PROCESSOR_SET_NULL ((processor_set_t) 0)
#define PROCESSOR_NULL ((processor_t) 0)
#define SEMAPHORE_NULL ((semaphore_t) 0)
#define LOCK_SET_NULL ((lock_set_t) 0)
#define LEDGER_NULL ((ledger_t) 0)
#define ALARM_NULL ((alarm_t) 0)
#define CLOCK_NULL ((clock_t) 0)
#define UND_SERVER_NULL ((UNDServerRef) 0)
#define ARCADE_REG_NULL ((arcade_register_t) 0)
#define MACH_EVENTLINK_NULL ((mach_eventlink_t) 0)
#define IPC_EVENTLINK_NULL ((ipc_eventlink_t) 0)
#define SUID_CRED_NULL ((suid_cred_t) 0)
#define TASK_ID_TOKEN_NULL ((task_id_token_t) 0)





typedef unsigned int mach_task_flavor_t;
#define TASK_FLAVOR_CONTROL 0
#define TASK_FLAVOR_READ 1
#define TASK_FLAVOR_INSPECT 2
#define TASK_FLAVOR_NAME 3


typedef unsigned int mach_thread_flavor_t;
#define THREAD_FLAVOR_CONTROL 0
#define THREAD_FLAVOR_READ 1
#define THREAD_FLAVOR_INSPECT 2


typedef natural_t ledger_item_t;
#define LEDGER_ITEM_INFINITY ((ledger_item_t) (~0))

typedef int64_t ledger_amount_t;
#define LEDGER_LIMIT_INFINITY ((ledger_amount_t)((1ULL << 63) - 1))

typedef mach_vm_offset_t *emulation_vector_t;
typedef char *user_subsystem_t;

typedef char *labelstr_t;
# 29 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 2 3 4
# 56 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 3 4
#define MALLOC_ZONE_FN_PTR(fn) fn
#define MALLOC_INTROSPECT_FN_PTR(fn) fn
#define MALLOC_INTROSPECT_TBL_PTR(ptr) ptr





typedef struct _malloc_zone_t {


    void *reserved1;
    void *reserved2;
    size_t (* size)(struct _malloc_zone_t *zone, const void *ptr);
    void *(* malloc)(struct _malloc_zone_t *zone, size_t size);
    void *(* calloc)(struct _malloc_zone_t *zone, size_t num_items, size_t size);
    void *(* valloc)(struct _malloc_zone_t *zone, size_t size);
    void (* free)(struct _malloc_zone_t *zone, void *ptr);
    void *(* realloc)(struct _malloc_zone_t *zone, void *ptr, size_t size);
    void (* destroy)(struct _malloc_zone_t *zone);
    const char *zone_name;


    unsigned (* batch_malloc)(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested);
    void (* batch_free)(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed);

    struct malloc_introspection_t * introspect;
    unsigned version;


    void *(* memalign)(struct _malloc_zone_t *zone, size_t alignment, size_t size);


    void (* free_definite_size)(struct _malloc_zone_t *zone, void *ptr, size_t size);


    size_t (* pressure_relief)(struct _malloc_zone_t *zone, size_t goal);






    boolean_t (* claimed_address)(struct _malloc_zone_t *zone, void *ptr);
} malloc_zone_t;



extern malloc_zone_t *malloc_default_zone(void);


extern malloc_zone_t *malloc_create_zone(vm_size_t start_size, unsigned flags);


extern void malloc_destroy_zone(malloc_zone_t *zone);




extern void *malloc_zone_malloc(malloc_zone_t *zone, size_t size) __attribute__((alloc_size(2)));


extern void *malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size) __attribute__((alloc_size(2,3)));


extern void *malloc_zone_valloc(malloc_zone_t *zone, size_t size) __attribute__((alloc_size(2)));


extern void malloc_zone_free(malloc_zone_t *zone, void *ptr);


extern void *malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size) __attribute__((alloc_size(3)));


extern malloc_zone_t *malloc_zone_from_ptr(const void *ptr);



extern size_t malloc_size(const void *ptr);


extern size_t malloc_good_size(size_t size);


extern void *malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size) __attribute__((alloc_size(3))) ;
# 149 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 3 4
extern unsigned malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned num_requested);


extern void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned num);




extern malloc_zone_t *malloc_default_purgeable_zone(void) ;


extern void malloc_make_purgeable(void *ptr) ;


extern int malloc_make_nonpurgeable(void *ptr) ;






extern void malloc_zone_register(malloc_zone_t *zone);





extern void malloc_zone_unregister(malloc_zone_t *zone);



extern void malloc_set_zone_name(malloc_zone_t *zone, const char *name);


extern const char *malloc_get_zone_name(malloc_zone_t *zone);


size_t malloc_zone_pressure_relief(malloc_zone_t *zone, size_t goal) ;







typedef struct {
    vm_address_t address;
    vm_size_t size;
} vm_range_t;

typedef struct malloc_statistics_t {
    unsigned blocks_in_use;
    size_t size_in_use;
    size_t max_size_in_use;
    size_t size_allocated;
} malloc_statistics_t;

typedef kern_return_t memory_reader_t(task_t remote_task, vm_address_t remote_address, vm_size_t size, void **local_memory);



#define MALLOC_PTR_IN_USE_RANGE_TYPE 1
#define MALLOC_PTR_REGION_RANGE_TYPE 2
#define MALLOC_ADMIN_REGION_RANGE_TYPE 4
#define MALLOC_ZONE_SPECIFIC_FLAGS 0xff00

typedef void vm_range_recorder_t(task_t, void *, unsigned type, vm_range_t *, unsigned);



typedef void print_task_printer_t(const char *fmt, ...) __attribute__((__format__ (__printf__, 1, 2)));

typedef struct malloc_introspection_t {
 kern_return_t (* enumerator)(task_t task, void *, unsigned type_mask, vm_address_t zone_address, memory_reader_t reader, vm_range_recorder_t recorder);
 size_t (* good_size)(malloc_zone_t *zone, size_t size);
 boolean_t (* check)(malloc_zone_t *zone);
 void (* print)(malloc_zone_t *zone, boolean_t verbose);
 void (* log)(malloc_zone_t *zone, void *address);
 void (* force_lock)(malloc_zone_t *zone);
 void (* force_unlock)(malloc_zone_t *zone);
 void (* statistics)(malloc_zone_t *zone, malloc_statistics_t *stats);
 boolean_t (* zone_locked)(malloc_zone_t *zone);


 boolean_t (* enable_discharge_checking)(malloc_zone_t *zone);
 void (* disable_discharge_checking)(malloc_zone_t *zone);
 void (* discharge)(malloc_zone_t *zone, void *memory);



    void *enumerate_unavailable_without_blocks;

 void (* reinit_lock)(malloc_zone_t *zone);
 void (* print_task)(task_t task, unsigned level, vm_address_t zone_address, memory_reader_t reader, print_task_printer_t printer);
 void (* task_statistics)(task_t task, vm_address_t zone_address, memory_reader_t reader, malloc_statistics_t *stats);
} malloc_introspection_t;



#define MALLOC_VERBOSE_PRINT_LEVEL 2

extern void malloc_printf(const char *format, ...);







extern kern_return_t malloc_get_all_zones(task_t task, memory_reader_t reader, vm_address_t **addresses, unsigned *count);





extern void malloc_zone_print_ptr_info(void *ptr);


extern boolean_t malloc_zone_check(malloc_zone_t *zone);


extern void malloc_zone_print(malloc_zone_t *zone, boolean_t verbose);


extern void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats);


extern void malloc_zone_log(malloc_zone_t *zone, void *address);





struct mstats {
    size_t bytes_total;
    size_t chunks_used;
    size_t bytes_used;
    size_t chunks_free;
    size_t bytes_free;
};

extern struct mstats mstats(void);

extern boolean_t malloc_zone_enable_discharge_checking(malloc_zone_t *zone) ;


extern void malloc_zone_disable_discharge_checking(malloc_zone_t *zone) ;


extern void malloc_zone_discharge(malloc_zone_t *zone, void *memory) ;
# 309 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/malloc/malloc.h" 3 4
extern void malloc_zone_enumerate_discharged_pointers(malloc_zone_t *zone, void *) ;



# 4855 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 4865 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Perl_safesysmalloc_size(where) malloc_size(where)







#define Perl_malloc_good_size(how_much) malloc_good_size(how_much)







typedef int (*runops_proc_t)(PerlInterpreter* my_perl __attribute__((unused)));
typedef void (*share_proc_t) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
typedef int (*thrhook_proc_t) (PerlInterpreter* my_perl __attribute__((unused)));
typedef OP* (*PPADDR_t[]) (PerlInterpreter* my_perl __attribute__((unused)));
typedef _Bool (*destroyable_proc_t) (PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
typedef void (*despatch_signals_proc_t) (PerlInterpreter* my_perl __attribute__((unused)));






extern char **environ;


#define PERL_PATCHLEVEL_H_IMPLICIT 
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/patchlevel.h" 1 3 4
# 40 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/patchlevel.h" 3 4
#define PERL_REVISION 5
#define PERL_VERSION 34
#define PERL_SUBVERSION 0
# 61 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/patchlevel.h" 3 4
#define PERL_API_REVISION 5
#define PERL_API_VERSION 34
#define PERL_API_SUBVERSION 0






#define __PATCHLEVEL_H_INCLUDED__ 
# 4898 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
#undef PERL_PATCHLEVEL_H_IMPLICIT

#define PERL_VERSION_STRING STRINGIFY(PERL_REVISION) "." STRINGIFY(PERL_VERSION) "." STRINGIFY(PERL_SUBVERSION)



#define PERL_API_VERSION_STRING STRINGIFY(PERL_API_REVISION) "." STRINGIFY(PERL_API_VERSION) "." STRINGIFY(PERL_API_SUBVERSION)






extern const char PL_warn_uninit[]
  ;
extern const char PL_warn_uninit_sv[]
  ;
extern const char PL_warn_nosemi[]
  ;
extern const char PL_warn_reserved[]
  ;
extern const char PL_warn_nl[]
  ;
extern const char PL_no_wrongref[]
  ;


extern const char PL_no_symref[] __attribute__((deprecated))
  ;
extern const char PL_no_symref_sv[]
  ;

extern const char PL_no_usym[]
  ;
extern const char PL_no_aelem[]
  ;
extern const char PL_no_helem_sv[]
  ;
extern const char PL_no_modify[]
  ;
extern const char PL_no_mem[sizeof("Out of memory!\n")]
  ;
extern const char PL_no_security[]
  ;
extern const char PL_no_sock_func[]
  ;
extern const char PL_no_dir_func[]
  ;
extern const char PL_no_func[]
  ;
extern const char PL_no_myglob[]
  ;
extern const char PL_no_localize_ref[]
  ;
extern const char PL_memory_wrap[]
  ;
extern const char PL_extended_cp_format[]
 
                                                       ;
extern const char PL_Yes[]
  ;
extern const char PL_No[]
  ;
extern const char PL_Zero[]
  ;
# 4979 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const char PL_hexdigit[]
  ;

extern const STRLEN PL_WARN_ALL
  ;
extern const STRLEN PL_WARN_NONE
  ;



extern const char PL_sh_path[]
  ;



extern const char PL_cshname[]
  ;
#define PL_cshlen (sizeof(CSH "") - 1)






extern const U8 PL_revision
  ;
extern const U8 PL_version
  ;
extern const U8 PL_subversion
  ;

extern const char PL_uuemap[65]
  ;




extern const char PL_isa_DOES[]
  ;
# 5037 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const char PL_uudmap[256];
extern const char PL_bitcount[256];
extern const char* const PL_sig_name[];
extern const int PL_sig_num[];
# 5250 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const unsigned char PL_fold[];
extern const unsigned char PL_fold_latin1[];
extern const unsigned char PL_mod_latin1_uc[];
extern const unsigned char PL_latin1_lc[];
extern unsigned char PL_fold_locale[];
# 5278 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const char* PL_block_type[];
# 5386 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const char PL_bincompat_options[];



#define PERL_SET_PHASE(new_phase) PERL_DTRACE_PROBE_PHASE(new_phase); PL_phase = new_phase;






enum perl_phase {
    PERL_PHASE_CONSTRUCT = 0,
    PERL_PHASE_START = 1,
    PERL_PHASE_CHECK = 2,
    PERL_PHASE_INIT = 3,
    PERL_PHASE_RUN = 4,
    PERL_PHASE_END = 5,
    PERL_PHASE_DESTRUCT = 6
};
# 5418 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const char *const PL_phase_names[];






#define PL_dirty cBOOL(PL_phase == PERL_PHASE_DESTRUCT)

#define PL_amagic_generation PL_na
#define PL_encoding ((SV *)NULL)


#define PL_hints PL_compiling.cop_hints
#define PL_maxo MAXO


# 5451 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LEX_NOTPARSING 11

typedef enum {
    XOPERATOR,
    XTERM,
    XREF,
    XSTATE,
    XBLOCK,
    XATTRBLOCK,
    XATTRTERM,
    XTERMBLOCK,
    XBLOCKTERM,
    XPOSTDEREF,
    XTERMORDORDOR

} expectation;

#define KEY_sigvar 0xFFFF
# 5482 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define HINT_INTEGER 0x00000001
#define HINT_STRICT_REFS 0x00000002
#define HINT_LOCALE 0x00000004
#define HINT_BYTES 0x00000008
#define HINT_LOCALE_PARTIAL 0x00000010

#define HINT_EXPLICIT_STRICT_REFS 0x00000020
#define HINT_EXPLICIT_STRICT_SUBS 0x00000040
#define HINT_EXPLICIT_STRICT_VARS 0x00000080

#define HINT_BLOCK_SCOPE 0x00000100
#define HINT_STRICT_SUBS 0x00000200
#define HINT_STRICT_VARS 0x00000400
#define HINT_UNI_8_BIT 0x00000800


#define HINT_NEW_INTEGER 0x00001000
#define HINT_NEW_FLOAT 0x00002000
#define HINT_NEW_BINARY 0x00004000
#define HINT_NEW_STRING 0x00008000
#define HINT_NEW_RE 0x00010000
#define HINT_LOCALIZE_HH 0x00020000
#define HINT_LEXICAL_IO_IN 0x00040000
#define HINT_LEXICAL_IO_OUT 0x00080000

#define HINT_RE_TAINT 0x00100000
#define HINT_RE_EVAL 0x00200000

#define HINT_FILETEST_ACCESS 0x00400000
#define HINT_UTF8 0x00800000

#define HINT_NO_AMAGIC 0x01000000

#define HINT_RE_FLAGS 0x02000000

#define HINT_FEATURE_MASK 0x3c000000
# 5526 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define HINT_SORT_STABLE 0x00000100
#define HINT_SORT_UNSTABLE 0x00000200

#define HINT_ALL_STRICT HINT_STRICT_REFS | HINT_STRICT_SUBS | HINT_STRICT_VARS






#define HINTS_DEFAULT 0




#define SAWAMPERSAND_LEFT 1
#define SAWAMPERSAND_MIDDLE 2
#define SAWAMPERSAND_RIGHT 4


#define PL_sawampersand (SAWAMPERSAND_LEFT|SAWAMPERSAND_MIDDLE|SAWAMPERSAND_RIGHT)




#define DBVARMG_SINGLE 0
#define DBVARMG_TRACE 1
#define DBVARMG_SIGNAL 2
#define DBVARMG_COUNT 3

#define PL_DBsingle_iv (PL_DBcontrol[DBVARMG_SINGLE])
#define PL_DBtrace_iv (PL_DBcontrol[DBVARMG_TRACE])
#define PL_DBsignal_iv (PL_DBcontrol[DBVARMG_SIGNAL])


#define RsSNARF(sv) (! SvOK(sv))
#define RsSIMPLE(sv) (SvOK(sv) && (! SvPOK(sv) || SvCUR(sv)))
#define RsPARA(sv) (SvPOK(sv) && ! SvCUR(sv))
#define RsRECORD(sv) (SvROK(sv) && (SvIV(SvRV(sv)) > 0))





struct perl_debug_pad {
  SV pad[3];
};

#define PERL_DEBUG_PAD(i) &(PL_debug_pad.pad[i])
#define PERL_DEBUG_PAD_ZERO(i) (SvPVX(PERL_DEBUG_PAD(i))[0] = 0, (((XPV*) SvANY(PERL_DEBUG_PAD(i)))->xpv_cur = 0), PERL_DEBUG_PAD(i))




typedef void (*peep_t)(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
typedef regexp* (*regcomp_t) (PerlInterpreter* my_perl __attribute__((unused)), char* exp, char* xend, PMOP* pm);
typedef I32 (*regexec_t) (PerlInterpreter* my_perl __attribute__((unused)), regexp* prog, char* stringarg,
          char* strend, char* strbeg, I32 minend,
          SV* screamer, void* data, U32 flags);
typedef char* (*re_intuit_start_t) (PerlInterpreter* my_perl __attribute__((unused)), regexp *prog, SV *sv,
      char *strpos, char *strend,
      U32 flags,
      re_scream_pos_data *d);
typedef SV* (*re_intuit_string_t) (PerlInterpreter* my_perl __attribute__((unused)), regexp *prog);
typedef void (*regfree_t) (PerlInterpreter* my_perl __attribute__((unused)), struct regexp* r);
typedef regexp* (*regdupe_t) (PerlInterpreter* my_perl __attribute__((unused)), const regexp* r, CLONE_PARAMS *param);
typedef I32 (*re_fold_t)(const char *, char const *, I32);

typedef void (*DESTRUCTORFUNC_NOCONTEXT_t) (void*);
typedef void (*DESTRUCTORFUNC_t) (PerlInterpreter* my_perl __attribute__((unused)), void*);
typedef void (*SVFUNC_t) (PerlInterpreter* my_perl __attribute__((unused)), SV* const);
typedef I32 (*SVCOMPARE_t) (PerlInterpreter* my_perl __attribute__((unused)), SV* const, SV* const);
typedef void (*XSINIT_t) (PerlInterpreter* my_perl __attribute__((unused)));
typedef void (*ATEXIT_t) (PerlInterpreter* my_perl __attribute__((unused)), void*);
typedef void (*XSUBADDR_t) (PerlInterpreter* my_perl __attribute__((unused)), CV *);

typedef OP* (*Perl_ppaddr_t)(PerlInterpreter* my_perl __attribute__((unused)));
typedef OP* (*Perl_check_t) (PerlInterpreter* my_perl __attribute__((unused)), OP*);
typedef void(*Perl_ophook_t)(PerlInterpreter* my_perl __attribute__((unused)), OP*);
typedef int (*Perl_keyword_plugin_t)(PerlInterpreter* my_perl __attribute__((unused)), char*, STRLEN, OP**);
typedef void(*Perl_cpeep_t)(PerlInterpreter* my_perl __attribute__((unused)), OP *, OP *);

typedef void(*globhook_t)(PerlInterpreter* my_perl __attribute__((unused)));

#define KEYWORD_PLUGIN_DECLINE 0
#define KEYWORD_PLUGIN_STMT 1
#define KEYWORD_PLUGIN_EXPR 2


typedef struct exitlistentry {
    void (*fn) (PerlInterpreter* my_perl __attribute__((unused)), void*);
    void *ptr;
} PerlExitListEntry;
# 5645 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERLVAR(prefix,var,type) type prefix ##var;


#define PERLVARA(prefix,var,n,type) type prefix ##var[n];


#define PERLVARI(prefix,var,type,init) type prefix ##var;


#define PERLVARIC(prefix,var,type,init) type prefix ##var;

struct interpreter {
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 1 3 4
# 31 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
SV ** Istack_sp;
OP * Iop;
SV ** Icurpad;

SV ** Istack_base;
SV ** Istack_max;

ANY * Isavestack;

I32 Isavestack_ix;
I32 Isavestack_max;

I32 * Iscopestack;
I32 Iscopestack_ix;
I32 Iscopestack_max;

SV ** Itmps_stack;
ssize_t Itmps_ix;
ssize_t Itmps_floor;
ssize_t Itmps_max;

I32 * Imarkstack;

I32 * Imarkstack_ptr;
I32 * Imarkstack_max;

U32 Isub_generation;



U8 Ihash_rand_bits_enabled;

UV Ihash_rand_bits;

HV * Istrtab;


UNOP_AUX_item * Imultideref_pc;


PMOP * Icurpm;
PMOP * Icurpm_under;

_Bool Itainting;
_Bool Itainted;
# 90 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
U16 Idelaymagic;
# 107 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
U8 Idowarn;




#define PERL___I 1

I8 Iutf8cache;
#undef PERL___I
# 129 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
U8 Ilocalizing;
U8 Iin_eval;
GV * Idefgv;
# 146 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
HV * Idefstash;
HV * Icurstash;
# 162 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
COP * Icurcop;
AV * Icurstack;
PERL_SI * Icurstackinfo;
AV * Imainstack;



IV Isv_count;

SV * Isv_root;
SV * Isv_arenaroot;


PMOP* Ireg_curpm;





regmatch_slab * Iregmatch_slab;
regmatch_state * Iregmatch_state;

PAD * Icomppad;
# 210 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
SV Isv_yes;
SV Isv_undef;
SV Isv_no;
SV Isv_zero;






PADNAME Ipadname_undef;
PADNAME Ipadname_const;
# 233 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
SV * ISv;

yy_parser * Iparser;

HV * Istashcache;
# 251 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
STRLEN Ina;



struct stat Istatcache;
GV * Istatgv;
SV * Istatname;
# 288 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
SV * Irs;
GV * Ilast_in_gv;
GV * Iofsgv;
GV * Idefoutgv;
const char * Ichopset;
SV * Iformtarget;
SV * Ibodytarget;
SV * Itoptarget;


OP * Irestartop;
JMPENV * Irestartjmpenv;

JMPENV * Itop_env;
JMPENV Istart_env;
SV * Ierrors;


HE* Ihv_fetch_ent_mh;

OP* Ilastgotoprobe;


OP * Isortcop;
HV * Isortstash;
GV * Ifirstgv;
GV * Isecondgv;


char * Iefloatbuf;
STRLEN Iefloatsize;

U16 Idumpindent;
# 364 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
U8 Iexit_flags;

_Bool Iutf8locale;
_Bool Iin_utf8_CTYPE_locale;
_Bool Iin_utf8_COLLATE_locale;
_Bool Iin_utf8_turkic_locale;



char Ilocale_utf8ness[256];


    SV * Iwarn_locale;


char * Icolors[6];
# 407 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
peep_t Ipeepp;
# 435 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
peep_t Irpeepp;
# 453 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
Perl_ophook_t Iopfreehook;

char ** Iwatchaddr;
char * Iwatchok;

U32 Iperldb;

U32 Isignals;

int Ireentrant_retint;


int Iorigargc;
char ** Iorigargv;
GV * Ienvgv;
GV * Iincgv;
GV * Ihintgv;
char * Iorigfilename;
const char * Ixsubfilename;
SV * Idiehook;
SV * Iwarnhook;


SV * Ipatchlevel;
const char * const * Ilocalpatches;
const char * Isplitstr;

_Bool Iminus_c;
_Bool Iminus_n;
_Bool Iminus_p;
_Bool Iminus_l;
_Bool Iminus_a;
_Bool Iminus_F;
_Bool Idoswitches;
_Bool Iminus_E;

char * Iinplace;
SV * Ie_script;

time_t Ibasetime;

I32 Imaxsysfd;

I32 Istatusvalue;



I32 Istatusvalue_posix;


int Isig_pending;
int * Ipsig_pend;


GV * Istdingv;
GV * Istderrgv;
GV * Iargvgv;
GV * Iargvoutgv;
AV * Iargvout_stack;


GV * Ireplgv;


GV * Ierrgv;


GV * IDBgv;
GV * IDBline;
# 558 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
GV * IDBsub;
SV * IDBsingle;
SV * IDBtrace;
SV * IDBsignal;
AV * Idbargs;

IV IDBcontrol[3];


HV * Idebstash;
HV * Iglobalstash;
SV * Icurstname;
AV * Ibeginav;
AV * Iendav;
AV * Iunitcheckav;
AV * Icheckav;
AV * Iinitav;


AV * Ifdpid;


char * Iop_mask;


CV * Imain_cv;
OP * Imain_root;
OP * Imain_start;
OP * Ieval_root;
OP * Ieval_start;


COP * Icurcopdb;

int Ifilemode;
int Ilastfd;
char * Ioldname;




AV * Ipreambleav;
SV * Imess_sv;
SV * Iors_sv;


int Iforkprocess;


I32 Igensym;
_Bool Icv_has_eval;
_Bool Itaint_warn;
U16 Ilaststype;

int Ilaststatval;

I32 Imodcount;



I32 Iexitlistlen;
PerlExitListEntry * Iexitlist;
# 639 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
HV * Imodglobal;


U32 * Iprofiledata;

COP Icompiling;

CV * Icompcv;
PADNAMELIST * Icomppad_name;
PADOFFSET Icomppad_name_fill;
PADOFFSET Icomppad_name_floor;







CV * IDBcv;
int Igeneration;


U32 Iunicode;

_Bool Iin_clean_objs;
_Bool Iin_clean_all;
_Bool Inomemok;
_Bool Isavebegin;


uid_t Idelaymagic_uid;
uid_t Idelaymagic_euid;
gid_t Idelaymagic_gid;
gid_t Idelaymagic_egid;
U32 Ian;


U32 Ibreakable_sub_gen;





#define PERL_COP_SEQMAX 0

U32 Icop_seqmax;
#undef PERL_COP_SEQMAX

U32 Ievalseq;
U32 Iorigalen;
char ** Iorigenviron;



char * Iosname;

Sighandler_t Isighandlerp;


Sighandler1_t Isighandler1p;
Sighandler3_t Isighandler3p;

void* Ibody_roots[(SVt_LAST)];

volatile U32 Idebug;

U32 Ipadlist_generation;

runops_proc_t Irunops;

SV * Isubname;

I32 Isubline;
PADOFFSET Imin_intro_pending;

PADOFFSET Imax_intro_pending;
PADOFFSET Ipadix;

PADOFFSET Iconstpadix;

PADOFFSET Ipadix_floor;
# 732 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
char * Icollation_name;
size_t Icollxfrm_base;
size_t Icollxfrm_mult;
U32 Icollation_ix;
U8 Istrxfrm_NUL_replacement;
_Bool Istrxfrm_is_behaved;

U8 Istrxfrm_max_cp;
_Bool Icollation_standard;



char * Ilanginfo_buf;
size_t Ilanginfo_bufsize;
char * Isetlocale_buf;
size_t Isetlocale_bufsize;
# 756 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
enum perl_phase Iphase;

_Bool Iin_load_module;

_Bool Iunsafe;
_Bool Icolorset;
# 791 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
signed char Iperl_destruct_level;

_Bool Ipad_reset_pending;

_Bool Isrand_called;



_Bool Inumeric_underlying;

_Bool Inumeric_underlying_is_standard;

int Inumeric_standard;

char * Inumeric_name;
SV * Inumeric_radix_sv;



locale_t Iunderlying_numeric_obj;






SV ** Ipsig_ptr;



SV ** Ipsig_name;
# 835 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
PTR_TBL_t * Iptr_table;
AV * Ibeginav_save;

void * Ibody_arenas;



SV ** Iregex_pad;

AV * Iregex_padav;




HV ** Istashpad;
PADOFFSET Istashpadmax;
PADOFFSET Istashpadix;



REENTR * Ireentrant_buffer;


HV * Icustom_op_names;
HV * Icustom_op_descs;


PerlIOl * Iperlio;
PerlIO_list_t * Iknown_layers;
PerlIO_list_t * Idef_layerlist;


AV * Icheckav_save;
AV * Iunitcheckav_save;


long Iclocktick;


share_proc_t Isharehook;
share_proc_t Ilockhook;


# 877 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
#pragma GCC diagnostic push
# 877 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4

# 877 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 877 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4





#define PERL_UNLOCK_HOOK Perl_sv_nounlocking

share_proc_t Iunlockhook;


# 886 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
#pragma GCC diagnostic pop
# 886 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4


thrhook_proc_t Ithreadhook;


destroyable_proc_t Idestroyhook;


despatch_signals_proc_t Isignalhook;


HV * Iisarev;





HV * Iregistered_mros;


AV * Iblockhooks;

HV * Icustom_ops;

XPV * IXpv;



const char * * Iscopestack_name;

struct perl_debug_pad Idebug_pad;


globhook_t Iglobhook;






#define PERL_LAST_5_18_0_INTERP_MEMBER Iglobhook



void ** Imy_cxt_list;
int Imy_cxt_size;







struct perl_memory_debug_header Imemory_debug_header;
# 952 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
SV* Isv_consts[35];
# 963 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/intrpvar.h" 3 4
perl_drand48_t Irandom_state;

STRLEN Idump_re_max_len;







perl_drand48_t Iinternal_random_state;

char ITR_SPECIAL_HANDLING_UTF8[13];

SV * IAboveLatin1;
SV * IAssigned_invlist;
SV * IGCB_invlist;
SV * IHasMultiCharFold;
SV * IInMultiCharFold;
SV * ILatin1;
SV * ILB_invlist;
SV * ISB_invlist;
SV * ISCX_invlist;
SV * IUpperLatin1;


SV * Iin_some_fold;



SV * Iutf8_foldclosures;

SV * Iutf8_idcont;
SV * Iutf8_idstart;
SV * Iutf8_perl_idcont;
SV * Iutf8_perl_idstart;
SV * Iutf8_xidcont;
SV * Iutf8_xidstart;
SV * IWB_invlist;
SV * IXPosix_ptrs[(15 + 1)];
SV * IPosix_ptrs[(15 + 1)];
SV * Iutf8_toupper;
SV * Iutf8_totitle;
SV * Iutf8_tolower;
SV * Iutf8_tofold;
SV * Iutf8_tosimplefold;
SV * Iutf8_charname_begin;
SV * Iutf8_charname_continue;
SV * Iutf8_mark;
SV * IInBitmap;
SV * ICCC_non0_non230;
SV * IPrivate_Use;


mbstate_t Imbrlen_ps;


mbstate_t Imbrtowc_ps;


mbstate_t Iwcrtomb_ps;
# 5658 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
};

extern const U16 PL_interp_size
  ;

#define PERL_INTERPRETER_SIZE_UPTO_MEMBER(member) STRUCT_OFFSET(struct interpreter, member) + sizeof(((struct interpreter*)0)->member)






extern const U16 PL_interp_size_5_18_0
  ;



#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC



struct tempsym;

# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 1 3 4
# 70 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define pthread_mutexattr_default NULL
#define pthread_condattr_default NULL





#define PTHREAD_CREATE(t,a,s,d) pthread_create(t,&(a),s,d)



#define PTHREAD_ATTR_SETDETACHSTATE(a,s) pthread_attr_setdetachstate(a,s)
# 165 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define YIELD SCHED_YIELD
# 192 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define MUTEX_INIT(m) STMT_START { int _eC_; if ((_eC_ = pthread_mutex_init((m), pthread_mutexattr_default))) Perl_croak_nocontext("panic: MUTEX_INIT (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 205 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define perl_pthread_mutex_lock(m) pthread_mutex_lock(m)
#define perl_pthread_mutex_unlock(m) pthread_mutex_unlock(m)


#define MUTEX_LOCK(m) STMT_START { int _eC_; if ((_eC_ = perl_pthread_mutex_lock((m)))) Perl_croak_nocontext("panic: MUTEX_LOCK (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define MUTEX_UNLOCK(m) STMT_START { int _eC_; if ((_eC_ = perl_pthread_mutex_unlock((m)))) Perl_croak_nocontext("panic: MUTEX_UNLOCK (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define MUTEX_DESTROY(m) STMT_START { int _eC_; if ((_eC_ = pthread_mutex_destroy((m)))) Perl_croak_nocontext("panic: MUTEX_DESTROY (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 235 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define COND_INIT(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_init((c), pthread_condattr_default))) Perl_croak_nocontext("panic: COND_INIT (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_SIGNAL(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_signal((c)))) Perl_croak_nocontext("panic: COND_SIGNAL (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_BROADCAST(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_broadcast((c)))) Perl_croak_nocontext("panic: COND_BROADCAST (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_WAIT(c,m) STMT_START { int _eC_; if ((_eC_ = pthread_cond_wait((c), (m)))) Perl_croak_nocontext("panic: COND_WAIT (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END







#define COND_DESTROY(c) STMT_START { int _eC_; if ((_eC_ = pthread_cond_destroy((c)))) Perl_croak_nocontext("panic: COND_DESTROY (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 289 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define PERL_READ_LOCK(mutex) STMT_START { MUTEX_LOCK(&(mutex)->lock); (mutex)->readers_count++; MUTEX_UNLOCK(&(mutex)->lock); } STMT_END






#define PERL_READ_UNLOCK(mutex) STMT_START { MUTEX_LOCK(&(mutex)->lock); (mutex)->readers_count--; if ((mutex)->readers_count <= 0) { assert((mutex)->readers_count == 0); COND_SIGNAL(&(mutex)->wakeup); (mutex)->readers_count = 0; } MUTEX_UNLOCK(&(mutex)->lock); } STMT_END
# 308 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define PERL_WRITE_LOCK(mutex) STMT_START { MUTEX_LOCK(&(mutex)->lock); do { if ((mutex)->readers_count <= 0) { assert((mutex)->readers_count == 0); (mutex)->readers_count = 0; break; } COND_WAIT(&(mutex)->wakeup, &(mutex)->lock); } while (1); } STMT_END
# 324 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define PERL_WRITE_UNLOCK(mutex) STMT_START { COND_SIGNAL(&(mutex)->wakeup); MUTEX_UNLOCK(&(mutex)->lock); } STMT_END





#define PERL_RW_MUTEX_INIT(mutex) STMT_START { MUTEX_INIT(&(mutex)->lock); COND_INIT(&(mutex)->wakeup); (mutex)->readers_count = 0; } STMT_END






#define PERL_RW_MUTEX_DESTROY(mutex) STMT_START { COND_DESTROY(&(mutex)->wakeup); MUTEX_DESTROY(&(mutex)->lock); } STMT_END
# 347 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define DETACH(t) STMT_START { int _eC_; if ((_eC_ = pthread_detach((t)->self))) { MUTEX_UNLOCK(&(t)->mutex); Perl_croak_nocontext("panic: DETACH (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } } STMT_END
# 359 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define JOIN(t,avp) STMT_START { int _eC_; if ((_eC_ = pthread_join((t)->self, (void**)(avp)))) Perl_croak_nocontext("panic: pthread_join (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 379 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define PTHREAD_GETSPECIFIC(key) pthread_getspecific(key)



#define PERL_GET_CONTEXT PTHREAD_GETSPECIFIC(PL_thr_key)



#define PERL_SET_CONTEXT(t) STMT_START { int _eC_; if ((_eC_ = pthread_setspecific(PL_thr_key, (void *)(t)))) Perl_croak_nocontext("panic: pthread_setspecific (%d) [%s:%d]", _eC_, __FILE__, __LINE__); } STMT_END
# 403 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define ALLOC_THREAD_KEY STMT_START { if (pthread_key_create(&PL_thr_key, 0)) { PERL_UNUSED_RESULT(write(2, STR_WITH_LEN("panic: pthread_key_create failed\n"))); exit(1); } } STMT_END
# 413 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define FREE_THREAD_KEY STMT_START { pthread_key_delete(PL_thr_key); } STMT_END







#define PTHREAD_ATFORK(prepare,parent,child) pthread_atfork(prepare,parent,child)
# 430 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define THREAD_RET_TYPE void *


#define LOCK_DOLLARZERO_MUTEX MUTEX_LOCK(&PL_dollarzero_mutex)
#define UNLOCK_DOLLARZERO_MUTEX MUTEX_UNLOCK(&PL_dollarzero_mutex)
# 493 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/thread.h" 3 4
#define THR PERL_GET_THX



#define SET_THR(t) PERL_SET_THX(t)



#define dTHR dNOOP



#define INIT_THREADS NOOP
# 5685 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 1 3 4
# 11 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define PP(s) OP * Perl_ ##s(pTHX)
# 53 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#undef SP
#define SP sp
#define MARK mark
# 66 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define TARG targ

#define PUSHMARK(p) STMT_START { I32 * mark_stack_entry; if (UNLIKELY((mark_stack_entry = ++PL_markstack_ptr) == PL_markstack_max)) mark_stack_entry = markstack_grow(); *mark_stack_entry = (I32)((p) - PL_stack_base); DEBUG_s(DEBUG_v(PerlIO_printf(Perl_debug_log, "MARK push %p %" IVdf "\n", PL_markstack_ptr, (IV)*mark_stack_entry))); } STMT_END
# 80 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define TOPMARK Perl_TOPMARK(aTHX)
#define POPMARK Perl_POPMARK(aTHX)

#define INCMARK STMT_START { DEBUG_s(DEBUG_v(PerlIO_printf(Perl_debug_log, "MARK inc  %p %" IVdf "\n", (PL_markstack_ptr+1), (IV)*(PL_markstack_ptr+1)))); PL_markstack_ptr++; } STMT_END







#define dSP SV **sp = PL_stack_sp
#define djSP dSP
#define dMARK SV **mark = PL_stack_base + POPMARK
#define dORIGMARK const I32 origmark = (I32)(mark - PL_stack_base)
#define ORIGMARK (PL_stack_base + origmark)

#define SPAGAIN sp = PL_stack_sp
#define MSPAGAIN STMT_START { sp = PL_stack_sp; mark = ORIGMARK; } STMT_END

#define GETTARGETSTACKED targ = (PL_op->op_flags & OPf_STACKED ? POPs : PAD_SV(PL_op->op_targ))
#define dTARGETSTACKED SV * GETTARGETSTACKED

#define GETTARGET targ = PAD_SV(PL_op->op_targ)







#define dTARGET SV * GETTARGET

#define GETATARGET targ = (PL_op->op_flags & OPf_STACKED ? sp[-1] : PAD_SV(PL_op->op_targ))
#define dATARGET SV * GETATARGET

#define dTARG SV *targ

#define NORMAL PL_op->op_next
#define DIE return Perl_die
# 157 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define PUTBACK PL_stack_sp = sp
#define RETURN return (PUTBACK, NORMAL)
#define RETURNOP(o) return (PUTBACK, o)
#define RETURNX(x) return (x, PUTBACK, NORMAL)

#define POPs (*sp--)
#define POPp POPpx
#define POPpx (SvPVx_nolen(POPs))
#define POPpconstx (SvPVx_nolen_const(POPs))
#define POPpbytex (SvPVbytex_nolen(POPs))
#define POPn (SvNVx(POPs))
#define POPi ((IV)SvIVx(POPs))
#define POPu ((UV)SvUVx(POPs))
#define POPl ((long)SvIVx(POPs))
#define POPul ((unsigned long)SvIVx(POPs))

#define TOPs (*sp)
#define TOPm1s (*(sp-1))
#define TOPp1s (*(sp+1))
#define TOPp TOPpx
#define TOPpx (SvPV_nolen(TOPs))
#define TOPn (SvNV(TOPs))
#define TOPi ((IV)SvIV(TOPs))
#define TOPu ((UV)SvUV(TOPs))
#define TOPl ((long)SvIV(TOPs))
#define TOPul ((unsigned long)SvUV(TOPs))
# 326 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define EXTEND_HWM_SET(p,n) NOOP
# 336 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define _EXTEND_SAFE_N(n) (sizeof(n) > sizeof(SSize_t) && ((SSize_t)(n) != (n)) ? -1 : (n))
# 371 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define _EXTEND_NEEDS_GROW(p,n) ((n) < 0 || PL_stack_max - (p) < (n))
# 382 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define EXTEND_SKIP(p,n) STMT_START { EXTEND_HWM_SET(p, n); assert(!_EXTEND_NEEDS_GROW(p,n)); } STMT_END





#define EXTEND(p,n) STMT_START { EXTEND_HWM_SET(p, n); if (UNLIKELY(_EXTEND_NEEDS_GROW(p,n))) { sp = stack_grow(sp,p,_EXTEND_SAFE_N(n)); PERL_UNUSED_VAR(sp); } } STMT_END






#define MEXTEND(p,n) STMT_START { EXTEND_HWM_SET(p, n); if (UNLIKELY(_EXTEND_NEEDS_GROW(p,n))) { const SSize_t markoff = mark - PL_stack_base; sp = stack_grow(sp,p,_EXTEND_SAFE_N(n)); mark = PL_stack_base + markoff; PERL_UNUSED_VAR(sp); } } STMT_END
# 408 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define TARGi(i,do_taint) STMT_START { IV TARGi_iv = i; if (LIKELY( ((SvFLAGS(TARG) & (SVTYPEMASK|SVf_THINKFIRST|SVf_IVisUV)) == SVt_IV) & (do_taint ? !TAINT_get : 1))) { assert(!(SvFLAGS(TARG) & (SVf_OOK|SVf_UTF8|(SVf_OK & ~(SVf_IOK|SVp_IOK))))); SvFLAGS(TARG) |= (SVf_IOK|SVp_IOK); TARG->sv_u.svu_iv = TARGi_iv; } else sv_setiv_mg(targ, TARGi_iv); } STMT_END
# 430 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define TARGu(u,do_taint) STMT_START { UV TARGu_uv = u; if (LIKELY( ((SvFLAGS(TARG) & (SVTYPEMASK|SVf_THINKFIRST|SVf_IVisUV)) == SVt_IV) & (do_taint ? !TAINT_get : 1) & (TARGu_uv <= (UV)IV_MAX))) { assert(!(SvFLAGS(TARG) & (SVf_OOK|SVf_UTF8|(SVf_OK & ~(SVf_IOK|SVp_IOK))))); SvFLAGS(TARG) |= (SVf_IOK|SVp_IOK); TARG->sv_u.svu_iv = TARGu_uv; } else sv_setuv_mg(targ, TARGu_uv); } STMT_END
# 453 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define TARGn(n,do_taint) STMT_START { NV TARGn_nv = n; if (LIKELY( ((SvFLAGS(TARG) & (SVTYPEMASK|SVf_THINKFIRST)) == SVt_NV) & (do_taint ? !TAINT_get : 1))) { assert(!(SvFLAGS(TARG) & (SVf_OOK|SVf_UTF8|(SVf_OK & ~(SVf_NOK|SVp_NOK))))); SvFLAGS(TARG) |= (SVf_NOK|SVp_NOK); SvNV_set(TARG, TARGn_nv); } else sv_setnv_mg(targ, TARGn_nv); } STMT_END
# 472 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define PUSHs(s) (*++sp = (s))
#define PUSHTARG STMT_START { SvSETMAGIC(TARG); PUSHs(TARG); } STMT_END
#define PUSHp(p,l) STMT_START { sv_setpvn(TARG, (p), (l)); PUSHTARG; } STMT_END
#define PUSHn(n) STMT_START { TARGn(n,1); PUSHs(TARG); } STMT_END
#define PUSHi(i) STMT_START { TARGi(i,1); PUSHs(TARG); } STMT_END
#define PUSHu(u) STMT_START { TARGu(u,1); PUSHs(TARG); } STMT_END

#define XPUSHs(s) STMT_START { EXTEND(sp,1); *++sp = (s); } STMT_END
#define XPUSHTARG STMT_START { SvSETMAGIC(TARG); XPUSHs(TARG); } STMT_END
#define XPUSHp(p,l) STMT_START { sv_setpvn(TARG, (p), (l)); XPUSHTARG; } STMT_END
#define XPUSHn(n) STMT_START { TARGn(n,1); XPUSHs(TARG); } STMT_END
#define XPUSHi(i) STMT_START { TARGi(i,1); XPUSHs(TARG); } STMT_END
#define XPUSHu(u) STMT_START { TARGu(u,1); XPUSHs(TARG); } STMT_END
#define XPUSHundef STMT_START { SvOK_off(TARG); XPUSHs(TARG); } STMT_END

#define mPUSHs(s) PUSHs(sv_2mortal(s))
#define PUSHmortal PUSHs(sv_newmortal())
#define mPUSHp(p,l) PUSHs(newSVpvn_flags((p), (l), SVs_TEMP))
#define mPUSHn(n) sv_setnv(PUSHmortal, (NV)(n))
#define mPUSHi(i) sv_setiv(PUSHmortal, (IV)(i))
#define mPUSHu(u) sv_setuv(PUSHmortal, (UV)(u))

#define mXPUSHs(s) XPUSHs(sv_2mortal(s))
#define XPUSHmortal XPUSHs(sv_newmortal())
#define mXPUSHp(p,l) STMT_START { EXTEND(sp,1); mPUSHp((p), (l)); } STMT_END
#define mXPUSHn(n) STMT_START { EXTEND(sp,1); mPUSHn(n); } STMT_END
#define mXPUSHi(i) STMT_START { EXTEND(sp,1); mPUSHi(i); } STMT_END
#define mXPUSHu(u) STMT_START { EXTEND(sp,1); mPUSHu(u); } STMT_END

#define SETs(s) (*sp = s)
#define SETTARG STMT_START { SvSETMAGIC(TARG); SETs(TARG); } STMT_END
#define SETp(p,l) STMT_START { sv_setpvn(TARG, (p), (l)); SETTARG; } STMT_END
#define SETn(n) STMT_START { TARGn(n,1); SETs(TARG); } STMT_END
#define SETi(i) STMT_START { TARGi(i,1); SETs(TARG); } STMT_END
#define SETu(u) STMT_START { TARGu(u,1); SETs(TARG); } STMT_END

#define dTOPss SV *sv = TOPs
#define dPOPss SV *sv = POPs
#define dTOPnv NV value = TOPn
#define dPOPnv NV value = POPn
#define dPOPnv_nomg NV value = (sp--, SvNV_nomg(TOPp1s))
#define dTOPiv IV value = TOPi
#define dPOPiv IV value = POPi
#define dTOPuv UV value = TOPu
#define dPOPuv UV value = POPu

#define dPOPXssrl(X) SV *right = POPs; SV *left = CAT2(X,s)
#define dPOPXnnrl(X) NV right = POPn; NV left = CAT2(X,n)
#define dPOPXiirl(X) IV right = POPi; IV left = CAT2(X,i)

#define USE_LEFT(sv) (SvOK(sv) || !(PL_op->op_flags & OPf_STACKED))

#define dPOPXiirl_ul_nomg(X) IV right = (sp--, SvIV_nomg(TOPp1s)); SV *leftsv = CAT2(X,s); IV left = USE_LEFT(leftsv) ? SvIV_nomg(leftsv) : 0




#define dPOPPOPssrl dPOPXssrl(POP)
#define dPOPPOPnnrl dPOPXnnrl(POP)
#define dPOPPOPiirl dPOPXiirl(POP)

#define dPOPTOPssrl dPOPXssrl(TOP)
#define dPOPTOPnnrl dPOPXnnrl(TOP)
#define dPOPTOPnnrl_nomg NV right = SvNV_nomg(TOPs); NV left = (sp--, SvNV_nomg(TOPs))

#define dPOPTOPiirl dPOPXiirl(TOP)
#define dPOPTOPiirl_ul_nomg dPOPXiirl_ul_nomg(TOP)
#define dPOPTOPiirl_nomg IV right = SvIV_nomg(TOPs); IV left = (sp--, SvIV_nomg(TOPs))


#define RETPUSHYES RETURNX(PUSHs(&PL_sv_yes))
#define RETPUSHNO RETURNX(PUSHs(&PL_sv_no))
#define RETPUSHUNDEF RETURNX(PUSHs(&PL_sv_undef))

#define RETSETYES RETURNX(SETs(&PL_sv_yes))
#define RETSETNO RETURNX(SETs(&PL_sv_no))
#define RETSETUNDEF RETURNX(SETs(&PL_sv_undef))
#define RETSETTARG STMT_START { SETTARG; RETURN; } STMT_END

#define ARGTARG PL_op->op_targ

#define MAXARG (PL_op->op_private & OPpARG4_MASK)

#define SWITCHSTACK(f,t) STMT_START { AvFILLp(f) = sp - PL_stack_base; PL_stack_base = AvARRAY(t); PL_stack_max = PL_stack_base + AvMAX(t); sp = PL_stack_sp = PL_stack_base + AvFILLp(t); PL_curstack = t; } STMT_END
# 564 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define EXTEND_MORTAL(n) STMT_START { SSize_t eMiX = PL_tmps_ix + (n); if (UNLIKELY(eMiX >= PL_tmps_max)) (void)Perl_tmps_grow_p(aTHX_ eMiX); } STMT_END






#define AMGf_noright 1
#define AMGf_noleft 2
#define AMGf_assign 4
#define AMGf_unary 8
#define AMGf_numeric 0x10

#define AMGf_want_list 0x40
#define AMGf_numarg 0x80




#define tryAMAGICun_MG(method,flags) STMT_START { if ( UNLIKELY((SvFLAGS(TOPs) & (SVf_ROK|SVs_GMG))) && Perl_try_amagic_un(aTHX_ method, flags)) return NORMAL; } STMT_END




#define tryAMAGICbin_MG(method,flags) STMT_START { if ( UNLIKELY(((SvFLAGS(TOPm1s)|SvFLAGS(TOPs)) & (SVf_ROK|SVs_GMG))) && Perl_try_amagic_bin(aTHX_ method, flags)) return NORMAL; } STMT_END





#define AMG_CALLunary(sv,meth) amagic_call(sv,&PL_sv_undef, meth, AMGf_noright | AMGf_unary)



#define AMG_CALLun(sv,meth) AMG_CALLunary(sv, CAT2(meth,_amg))

#define tryAMAGICunTARGETlist(meth,jump) STMT_START { dSP; SV *tmpsv; SV *arg= *sp; U8 gimme = GIMME_V; if (UNLIKELY(SvAMAGIC(arg) && (tmpsv = amagic_call(arg, &PL_sv_undef, meth, AMGf_want_list | AMGf_noright |AMGf_unary)))) { SPAGAIN; if (gimme == G_VOID) { NOOP; } else if (gimme == G_ARRAY) { SSize_t i; SSize_t len; assert(SvTYPE(tmpsv) == SVt_PVAV); len = av_count((AV *)tmpsv); (void)POPs; EXTEND(sp, len); for (i = 0; i < len; ++i) PUSHs(av_shift((AV *)tmpsv)); } else { dATARGET; sv_setsv(TARG, tmpsv); if (PL_op->op_flags & OPf_STACKED) sp--; SETTARG; } PUTBACK; if (jump) { OP *jump_o = NORMAL->op_next; while (jump_o->op_type == OP_NULL) jump_o = jump_o->op_next; assert(jump_o->op_type == OP_ENTERSUB); (void)POPMARK; return jump_o->op_next; } return NORMAL; } } STMT_END
# 647 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/pp.h" 3 4
#define tryAMAGICunDEREF(meth) STMT_START { sv = amagic_deref_call(*sp, CAT2(meth,_amg)); SPAGAIN; } STMT_END







#define opASSIGN (PL_op->op_flags & OPf_STACKED)






#define LVRET ((PL_op->op_private & OPpMAYBE_LVSUB) && is_lvalue_sub())

#define SvCANEXISTDELETE(sv) (!SvRMAGICAL(sv) || !(mg = mg_find((const SV *) sv, PERL_MAGIC_tied)) || ( (stash = SvSTASH(SvRV(SvTIED_obj(MUTABLE_SV(sv), mg)))) && gv_fetchmethod_autoload(stash, "EXISTS", TRUE) && gv_fetchmethod_autoload(stash, "DELETE", TRUE) ) )
# 5686 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4

#undef PERL_CKDEF
#undef PERL_PPDEF
#define PERL_CKDEF(s) PERL_CALLCONV OP *s (pTHX_ OP *o);
#define PERL_PPDEF(s) PERL_CALLCONV OP *s (pTHX);
# 5705 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 1 3 4
# 19 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4


 UV ASCII_TO_NEED(const UV enc, const UV ch)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_ASCII_TO_NEED 



static __inline__ I32 * Perl_CvDEPTH(const CV * const sv);
#define PERL_ARGS_ASSERT_CVDEPTH assert(sv)



static __inline__ GV * Perl_CvGV(PerlInterpreter* my_perl __attribute__((unused)), CV *sv);
#define PERL_ARGS_ASSERT_CVGV assert(sv)


 int Perl_Gv_AMupdate(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, _Bool destructing);
#define PERL_ARGS_ASSERT_GV_AMUPDATE assert(stash)


 UV NATIVE_TO_NEED(const UV enc, const UV ch)
   __attribute__((deprecated))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_NATIVE_TO_NEED 



static __inline__ I32 Perl_POPMARK(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_POPMARK 

 const char * Perl_PerlIO_context_layers(PerlInterpreter* my_perl __attribute__((unused)), const char *mode);
#define PERL_ARGS_ASSERT_PERLIO_CONTEXT_LAYERS 
 int Perl_PerlLIO_dup2_cloexec(PerlInterpreter* my_perl __attribute__((unused)), int oldfd, int newfd);
#define PERL_ARGS_ASSERT_PERLLIO_DUP2_CLOEXEC 
 int Perl_PerlLIO_dup_cloexec(PerlInterpreter* my_perl __attribute__((unused)), int oldfd)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLLIO_DUP_CLOEXEC 

 int Perl_PerlLIO_open3_cloexec(PerlInterpreter* my_perl __attribute__((unused)), const char *file, int flag, int perm)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLLIO_OPEN3_CLOEXEC assert(file)


 int Perl_PerlLIO_open_cloexec(PerlInterpreter* my_perl __attribute__((unused)), const char *file, int flag)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLLIO_OPEN_CLOEXEC assert(file)



#define PERL_ARGS_ASSERT_PERL_CUSTOM_OP_XOP 
 const char* Perl_setlocale(const int category, const char* locale);
#define PERL_ARGS_ASSERT_PERL_SETLOCALE 

static __inline__ struct regexp * Perl_ReANY(const REGEXP * const re);
#define PERL_ARGS_ASSERT_REANY assert(re)


 void* Perl_Slab_Alloc(PerlInterpreter* my_perl __attribute__((unused)), size_t sz)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SLAB_ALLOC 

 void Perl_Slab_Free(PerlInterpreter* my_perl __attribute__((unused)), void *op);
#define PERL_ARGS_ASSERT_SLAB_FREE assert(op)


static __inline__ void Perl_SvAMAGIC_off(SV *sv);
#define PERL_ARGS_ASSERT_SVAMAGIC_OFF assert(sv)



static __inline__ void Perl_SvAMAGIC_on(SV *sv);
#define PERL_ARGS_ASSERT_SVAMAGIC_ON assert(sv)



static __inline__ void Perl_SvREFCNT_dec(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SVREFCNT_DEC 


static __inline__ void Perl_SvREFCNT_dec_NN(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SVREFCNT_DEC_NN assert(sv)



static __inline__ SV * Perl_SvREFCNT_inc(SV *sv);
#define PERL_ARGS_ASSERT_SVREFCNT_INC 


static __inline__ SV * Perl_SvREFCNT_inc_NN(SV *sv);
#define PERL_ARGS_ASSERT_SVREFCNT_INC_NN assert(sv)



static __inline__ void Perl_SvREFCNT_inc_void(SV *sv);
#define PERL_ARGS_ASSERT_SVREFCNT_INC_VOID 


static __inline__ _Bool Perl_SvTRUE(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SVTRUE 


static __inline__ _Bool Perl_SvTRUE_NN(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SVTRUE_NN assert(sv)



static __inline__ _Bool Perl_SvTRUE_common(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, const _Bool sv_2bool_is_fallback);
#define PERL_ARGS_ASSERT_SVTRUE_COMMON assert(sv)



static __inline__ _Bool Perl_SvTRUE_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SVTRUE_NOMG 


static __inline__ I32 Perl_TOPMARK(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_TOPMARK 

 char * Perl__byte_dump_string(PerlInterpreter* my_perl __attribute__((unused)), const U8 * const start, const STRLEN len, const _Bool format);
#define PERL_ARGS_ASSERT__BYTE_DUMP_STRING assert(start)

 void Perl__force_out_malformed_utf8_message(PerlInterpreter* my_perl __attribute__((unused)), const U8 *const p, const U8 * const e, const U32 flags, const _Bool die_here);
#define PERL_ARGS_ASSERT__FORCE_OUT_MALFORMED_UTF8_MESSAGE assert(p); assert(e)

 size_t Perl__inverse_folds(PerlInterpreter* my_perl __attribute__((unused)), const UV cp, U32 * first_folds_to, const U32 ** remaining_folds_to)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__INVERSE_FOLDS assert(first_folds_to); assert(remaining_folds_to)


 _Bool Perl__is_in_locale_category(PerlInterpreter* my_perl __attribute__((unused)), const _Bool compiling, const int category);
#define PERL_ARGS_ASSERT__IS_IN_LOCALE_CATEGORY 
 _Bool Perl__is_uni_FOO(PerlInterpreter* my_perl __attribute__((unused)), const U8 classnum, const UV c)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__IS_UNI_FOO 

 _Bool Perl__is_uni_perl_idcont(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__IS_UNI_PERL_IDCONT 

 _Bool Perl__is_uni_perl_idstart(PerlInterpreter* my_perl __attribute__((unused)), UV c)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__IS_UNI_PERL_IDSTART 

 _Bool Perl__is_utf8_FOO(PerlInterpreter* my_perl __attribute__((unused)), const U8 classnum, const U8 *p, const U8 * const e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__IS_UTF8_FOO assert(p); assert(e)


 _Bool Perl__is_utf8_perl_idcont(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, const U8 * const e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDCONT assert(p); assert(e)


 _Bool Perl__is_utf8_perl_idstart(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, const U8 * const e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT__IS_UTF8_PERL_IDSTART assert(p); assert(e)


 UV Perl__to_uni_fold_flags(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp, U8 flags);
#define PERL_ARGS_ASSERT__TO_UNI_FOLD_FLAGS assert(p); assert(lenp)

 UV Perl__to_utf8_fold_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, const U8 *e, U8* ustrp, STRLEN *lenp, U8 flags);
#define PERL_ARGS_ASSERT__TO_UTF8_FOLD_FLAGS assert(p); assert(ustrp)

 UV Perl__to_utf8_lower_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, const U8* e, U8* ustrp, STRLEN *lenp, _Bool flags);
#define PERL_ARGS_ASSERT__TO_UTF8_LOWER_FLAGS assert(p); assert(ustrp)

 UV Perl__to_utf8_title_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, const U8* e, U8* ustrp, STRLEN *lenp, _Bool flags);
#define PERL_ARGS_ASSERT__TO_UTF8_TITLE_FLAGS assert(p); assert(ustrp)

 UV Perl__to_utf8_upper_flags(PerlInterpreter* my_perl __attribute__((unused)), const U8 *p, const U8 *e, U8* ustrp, STRLEN *lenp, _Bool flags);
#define PERL_ARGS_ASSERT__TO_UTF8_UPPER_FLAGS assert(p); assert(ustrp)

 UV Perl__utf8n_to_uvchr_msgs_helper(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags, U32 * errors, AV ** msgs);
#define PERL_ARGS_ASSERT__UTF8N_TO_UVCHR_MSGS_HELPER assert(s)

 void Perl__warn_problematic_locale(void);
#define PERL_ARGS_ASSERT__WARN_PROBLEMATIC_LOCALE 
 void Perl_abort_execution(PerlInterpreter* my_perl __attribute__((unused)), const char * const msg, const char * const name)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_ABORT_EXECUTION assert(msg); assert(name)


 LOGOP* Perl_alloc_LOGOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP *first, OP *other);
#define PERL_ARGS_ASSERT_ALLOC_LOGOP 
 PADOFFSET Perl_allocmy(PerlInterpreter* my_perl __attribute__((unused)), const char *const name, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_ALLOCMY assert(name)

 SV* Perl_amagic_call(PerlInterpreter* my_perl __attribute__((unused)), SV* left, SV* right, int method, int dir);
#define PERL_ARGS_ASSERT_AMAGIC_CALL assert(left); assert(right)

 SV * Perl_amagic_deref_call(PerlInterpreter* my_perl __attribute__((unused)), SV *ref, int method);
#define PERL_ARGS_ASSERT_AMAGIC_DEREF_CALL assert(ref)

 _Bool Perl_amagic_is_enabled(PerlInterpreter* my_perl __attribute__((unused)), int method);
#define PERL_ARGS_ASSERT_AMAGIC_IS_ENABLED 

static __inline__ void Perl_append_utf8_from_native_byte(const U8 byte, U8** dest);
#define PERL_ARGS_ASSERT_APPEND_UTF8_FROM_NATIVE_BYTE assert(dest)


 I32 Perl_apply(PerlInterpreter* my_perl __attribute__((unused)), I32 type, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_APPLY assert(mark); assert(sp)

 void Perl_apply_attrs_string(PerlInterpreter* my_perl __attribute__((unused)), const char *stashpv, CV *cv, const char *attrstr, STRLEN len);
#define PERL_ARGS_ASSERT_APPLY_ATTRS_STRING assert(stashpv); assert(cv); assert(attrstr)

 void Perl_atfork_lock(void);
#define PERL_ARGS_ASSERT_ATFORK_LOCK 
 void Perl_atfork_unlock(void);
#define PERL_ARGS_ASSERT_ATFORK_UNLOCK 
 SV** Perl_av_arylen_p(PerlInterpreter* my_perl __attribute__((unused)), AV *av);
#define PERL_ARGS_ASSERT_AV_ARYLEN_P assert(av)

 void Perl_av_clear(PerlInterpreter* my_perl __attribute__((unused)), AV *av);
#define PERL_ARGS_ASSERT_AV_CLEAR assert(av)


static __inline__ size_t Perl_av_count(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_AV_COUNT assert(av)



 void Perl_av_create_and_push(PerlInterpreter* my_perl __attribute__((unused)), AV **const avp, SV *const val);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_PUSH assert(avp); assert(val)

 SV** Perl_av_create_and_unshift_one(PerlInterpreter* my_perl __attribute__((unused)), AV **const avp, SV *const val);
#define PERL_ARGS_ASSERT_AV_CREATE_AND_UNSHIFT_ONE assert(avp); assert(val)

 SV* Perl_av_delete(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, I32 flags);
#define PERL_ARGS_ASSERT_AV_DELETE assert(av)

 _Bool Perl_av_exists(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_AV_EXISTS assert(av)


 void Perl_av_extend(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key);
#define PERL_ARGS_ASSERT_AV_EXTEND assert(av)

 void Perl_av_extend_guts(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, ssize_t *maxp, SV ***allocp, SV ***arrayp);
#define PERL_ARGS_ASSERT_AV_EXTEND_GUTS assert(maxp); assert(allocp); assert(arrayp)

 SV** Perl_av_fetch(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, I32 lval)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_AV_FETCH assert(av)


 void Perl_av_fill(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t fill);
#define PERL_ARGS_ASSERT_AV_FILL assert(av)

 IV* Perl_av_iter_p(PerlInterpreter* my_perl __attribute__((unused)), AV *av);
#define PERL_ARGS_ASSERT_AV_ITER_P assert(av)

 ssize_t Perl_av_len(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_AV_LEN assert(av)


 AV* Perl_av_make(PerlInterpreter* my_perl __attribute__((unused)), ssize_t size, SV **strp)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_AV_MAKE assert(strp)


 SV* Perl_av_nonelem(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t ix);
#define PERL_ARGS_ASSERT_AV_NONELEM assert(av)

 SV* Perl_av_pop(PerlInterpreter* my_perl __attribute__((unused)), AV *av);
#define PERL_ARGS_ASSERT_AV_POP assert(av)

 void Perl_av_push(PerlInterpreter* my_perl __attribute__((unused)), AV *av, SV *val);
#define PERL_ARGS_ASSERT_AV_PUSH assert(av); assert(val)

 void Perl_av_reify(PerlInterpreter* my_perl __attribute__((unused)), AV *av);
#define PERL_ARGS_ASSERT_AV_REIFY assert(av)

 SV* Perl_av_shift(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_AV_SHIFT assert(av)


 SV** Perl_av_store(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key, SV *val);
#define PERL_ARGS_ASSERT_AV_STORE assert(av)



#define PERL_ARGS_ASSERT_AV_TINDEX 



#define PERL_ARGS_ASSERT_AV_TOP_INDEX 

 void Perl_av_undef(PerlInterpreter* my_perl __attribute__((unused)), AV *av);
#define PERL_ARGS_ASSERT_AV_UNDEF assert(av)

 void Perl_av_unshift(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t num);
#define PERL_ARGS_ASSERT_AV_UNSHIFT assert(av)

 OP* Perl_bind_match(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP *left, OP *right)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_BIND_MATCH assert(left); assert(right)


 OP* Perl_block_end(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* seq)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_BLOCK_END 

 U8 Perl_block_gimme(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_BLOCK_GIMME 

 int Perl_block_start(PerlInterpreter* my_perl __attribute__((unused)), int full)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_BLOCK_START 

 void Perl_blockhook_register(PerlInterpreter* my_perl __attribute__((unused)), BHK *hk);
#define PERL_ARGS_ASSERT_BLOCKHOOK_REGISTER assert(hk)

 void Perl_boot_core_PerlIO(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_BOOT_CORE_PERLIO 
 void Perl_boot_core_UNIVERSAL(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_BOOT_CORE_UNIVERSAL 
 void Perl_boot_core_mro(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_BOOT_CORE_MRO 
 int Perl_bytes_cmp_utf8(PerlInterpreter* my_perl __attribute__((unused)), const U8 *b, STRLEN blen, const U8 *u, STRLEN ulen);
#define PERL_ARGS_ASSERT_BYTES_CMP_UTF8 assert(b); assert(u)

 U8* Perl_bytes_from_utf8(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *lenp, _Bool *is_utf8p);
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8 assert(s); assert(lenp); assert(is_utf8p)

 U8* Perl_bytes_from_utf8_loc(const U8 *s, STRLEN *lenp, _Bool *is_utf8p, const U8 ** first_unconverted);
#define PERL_ARGS_ASSERT_BYTES_FROM_UTF8_LOC assert(s); assert(lenp); assert(is_utf8p)

 U8* Perl_bytes_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *lenp);
#define PERL_ARGS_ASSERT_BYTES_TO_UTF8 assert(s); assert(lenp)

 I32 Perl_call_argv(PerlInterpreter* my_perl __attribute__((unused)), const char* sub_name, I32 flags, char** argv);
#define PERL_ARGS_ASSERT_CALL_ARGV assert(sub_name); assert(argv)

 void Perl_call_atexit(PerlInterpreter* my_perl __attribute__((unused)), ATEXIT_t fn, void *ptr);
#define PERL_ARGS_ASSERT_CALL_ATEXIT 
 void Perl_call_list(PerlInterpreter* my_perl __attribute__((unused)), I32 oldscope, AV *paramList);
#define PERL_ARGS_ASSERT_CALL_LIST assert(paramList)

 I32 Perl_call_method(PerlInterpreter* my_perl __attribute__((unused)), const char* methname, I32 flags);
#define PERL_ARGS_ASSERT_CALL_METHOD assert(methname)

 I32 Perl_call_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* sub_name, I32 flags);
#define PERL_ARGS_ASSERT_CALL_PV assert(sub_name)

 I32 Perl_call_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, volatile I32 flags);
#define PERL_ARGS_ASSERT_CALL_SV assert(sv)

 const PERL_CONTEXT * Perl_caller_cx(PerlInterpreter* my_perl __attribute__((unused)), I32 level, const PERL_CONTEXT **dbcxp);
#define PERL_ARGS_ASSERT_CALLER_CX 
 void * Perl_calloc(size_t elements, size_t size)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CALLOC 

 _Bool Perl_cando(PerlInterpreter* my_perl __attribute__((unused)), mode_t mode, _Bool effective, const struct stat* statbufp)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CANDO assert(statbufp)


 I32 Perl_cast_i32(NV f)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CAST_I32 

 IV Perl_cast_iv(NV f)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CAST_IV 

 U32 Perl_cast_ulong(NV f)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CAST_ULONG 

 UV Perl_cast_uv(NV f)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CAST_UV 

 _Bool Perl_check_utf8_print(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const STRLEN len);
#define PERL_ARGS_ASSERT_CHECK_UTF8_PRINT assert(s)

 OP * Perl_ck_anoncode(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_ANONCODE assert(o)


 OP * Perl_ck_backtick(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_BACKTICK assert(o)


 OP * Perl_ck_bitop(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_BITOP assert(o)


 OP * Perl_ck_cmp(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_CMP assert(o)


 OP * Perl_ck_concat(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_CONCAT assert(o)


 OP * Perl_ck_defined(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_DEFINED assert(o)


 OP * Perl_ck_delete(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_DELETE assert(o)


 OP * Perl_ck_each(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_EACH assert(o)


 OP* Perl_ck_entersub_args_core(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_CORE assert(entersubop); assert(namegv); assert(protosv)

 OP* Perl_ck_entersub_args_list(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_LIST assert(entersubop)

 OP* Perl_ck_entersub_args_proto(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO assert(entersubop); assert(namegv); assert(protosv)

 OP* Perl_ck_entersub_args_proto_or_list(PerlInterpreter* my_perl __attribute__((unused)), OP *entersubop, GV *namegv, SV *protosv);
#define PERL_ARGS_ASSERT_CK_ENTERSUB_ARGS_PROTO_OR_LIST assert(entersubop); assert(namegv); assert(protosv)

 OP * Perl_ck_eof(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_EOF assert(o)


 OP * Perl_ck_eval(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_EVAL assert(o)


 OP * Perl_ck_exec(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_EXEC assert(o)


 OP * Perl_ck_exists(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_EXISTS assert(o)


 OP * Perl_ck_ftst(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_FTST assert(o)


 OP * Perl_ck_fun(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_FUN assert(o)


 OP * Perl_ck_glob(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_GLOB assert(o)


 OP * Perl_ck_grep(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_GREP assert(o)


 OP * Perl_ck_index(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_INDEX assert(o)


 OP * Perl_ck_isa(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_ISA assert(o)


 OP * Perl_ck_join(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_JOIN assert(o)


 OP * Perl_ck_length(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_LENGTH assert(o)


 OP * Perl_ck_lfun(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_LFUN assert(o)


 OP * Perl_ck_listiob(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_LISTIOB assert(o)


 OP * Perl_ck_match(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_MATCH assert(o)


 OP * Perl_ck_method(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_METHOD assert(o)


 OP * Perl_ck_null(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_NULL assert(o)


 OP * Perl_ck_open(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_OPEN assert(o)


 OP * Perl_ck_prototype(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_PROTOTYPE assert(o)


 OP * Perl_ck_readline(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_READLINE assert(o)


 OP * Perl_ck_refassign(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_REFASSIGN assert(o)


 OP * Perl_ck_repeat(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_REPEAT assert(o)


 OP * Perl_ck_require(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_REQUIRE assert(o)


 OP * Perl_ck_return(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_RETURN assert(o)


 OP * Perl_ck_rfun(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_RFUN assert(o)


 OP * Perl_ck_rvconst(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_RVCONST assert(o)


 OP * Perl_ck_sassign(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SASSIGN assert(o)


 OP * Perl_ck_select(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SELECT assert(o)


 OP * Perl_ck_shift(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SHIFT assert(o)


 OP * Perl_ck_smartmatch(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SMARTMATCH assert(o)


 OP * Perl_ck_sort(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SORT assert(o)


 OP * Perl_ck_spair(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SPAIR assert(o)


 OP * Perl_ck_split(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SPLIT assert(o)


 OP * Perl_ck_stringify(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_STRINGIFY assert(o)


 OP * Perl_ck_subr(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SUBR assert(o)


 OP * Perl_ck_substr(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SUBSTR assert(o)


 OP * Perl_ck_svconst(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_SVCONST assert(o)


 OP * Perl_ck_tell(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_TELL assert(o)


 OP * Perl_ck_trunc(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_TRUNC assert(o)


 OP * Perl_ck_trycatch(PerlInterpreter* my_perl __attribute__((unused)), OP *o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CK_TRYCATCH assert(o)


 void Perl_ck_warner(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_CK_WARNER assert(pat)


 void Perl_ck_warner_d(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_CK_WARNER_D assert(pat)


 _Bool Perl_ckwarn(PerlInterpreter* my_perl __attribute__((unused)), U32 w)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_CKWARN 

 _Bool Perl_ckwarn_d(PerlInterpreter* my_perl __attribute__((unused)), U32 w)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_CKWARN_D 

 void Perl_clear_defarray(PerlInterpreter* my_perl __attribute__((unused)), AV* av, _Bool abandon);
#define PERL_ARGS_ASSERT_CLEAR_DEFARRAY assert(av)

 const COP* Perl_closest_cop(PerlInterpreter* my_perl __attribute__((unused)), const COP *cop, const OP *o, const OP *curop, _Bool opnext);
#define PERL_ARGS_ASSERT_CLOSEST_COP assert(cop)

 OP* Perl_cmpchain_extend(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP* ch, OP* right)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CMPCHAIN_EXTEND assert(ch)


 OP* Perl_cmpchain_finish(PerlInterpreter* my_perl __attribute__((unused)), OP* ch)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CMPCHAIN_FINISH assert(ch)


 OP* Perl_cmpchain_start(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP* left, OP* right)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CMPCHAIN_START 

 const char * Perl_cntrl_to_mnemonic(const U8 c)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CNTRL_TO_MNEMONIC 

 const char * Perl_cop_fetch_label(PerlInterpreter* my_perl __attribute__((unused)), COP *const cop, STRLEN *len, U32 *flags);
#define PERL_ARGS_ASSERT_COP_FETCH_LABEL assert(cop)

 void Perl_cop_store_label(PerlInterpreter* my_perl __attribute__((unused)), COP *const cop, const char *label, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_COP_STORE_LABEL assert(cop); assert(label)

 SV * Perl_core_prototype(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, const char *name, const int code, int * const opnum);
#define PERL_ARGS_ASSERT_CORE_PROTOTYPE assert(name)

 OP * Perl_coresub_op(PerlInterpreter* my_perl __attribute__((unused)), SV *const coreargssv, const int code, const int opnum);
#define PERL_ARGS_ASSERT_CORESUB_OP assert(coreargssv)

 void Perl_create_eval_scope(PerlInterpreter* my_perl __attribute__((unused)), OP *retop, U32 flags);
#define PERL_ARGS_ASSERT_CREATE_EVAL_SCOPE 
 void Perl_croak(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_CROAK 

 void Perl_croak_caller(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_CROAK_CALLER 

 void Perl_croak_memory_wrap(void)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_CROAK_MEMORY_WRAP 

 void Perl_croak_no_mem(void)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_CROAK_NO_MEM 

 void Perl_croak_no_modify(void)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_CROAK_NO_MODIFY 

 void Perl_croak_popstack(void)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_CROAK_POPSTACK 

 void Perl_croak_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *baseex)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_CROAK_SV assert(baseex)


 void Perl_croak_xs_usage(const CV *const cv, const char *const params)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)


 void Perl_csighandler1(int sig);
#define PERL_ARGS_ASSERT_CSIGHANDLER1 
 void Perl_csighandler3(int sig, Siginfo_t *info, void *uap);
#define PERL_ARGS_ASSERT_CSIGHANDLER3 
 regexp_engine const * Perl_current_re_engine(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_CURRENT_RE_ENGINE 

 const char * Perl_custom_op_desc(PerlInterpreter* my_perl __attribute__((unused)), const OP *o)
   __attribute__((deprecated))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CUSTOM_OP_DESC assert(o)



 XOPRETANY Perl_custom_op_get_field(PerlInterpreter* my_perl __attribute__((unused)), const OP *o, const xop_flags_enum field)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CUSTOM_OP_GET_FIELD assert(o)



 const char * Perl_custom_op_name(PerlInterpreter* my_perl __attribute__((unused)), const OP *o)
   __attribute__((deprecated))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CUSTOM_OP_NAME assert(o)



 void Perl_custom_op_register(PerlInterpreter* my_perl __attribute__((unused)), Perl_ppaddr_t ppaddr, const XOP *xop);
#define PERL_ARGS_ASSERT_CUSTOM_OP_REGISTER assert(ppaddr); assert(xop)

 void Perl_cv_ckproto_len_flags(PerlInterpreter* my_perl __attribute__((unused)), const CV* cv, const GV* gv, const char* p, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_CV_CKPROTO_LEN_FLAGS assert(cv)

 CV* Perl_cv_clone(PerlInterpreter* my_perl __attribute__((unused)), CV* proto);
#define PERL_ARGS_ASSERT_CV_CLONE assert(proto)

 CV* Perl_cv_clone_into(PerlInterpreter* my_perl __attribute__((unused)), CV* proto, CV *target);
#define PERL_ARGS_ASSERT_CV_CLONE_INTO assert(proto); assert(target)

 SV* Perl_cv_const_sv(const CV *const cv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CV_CONST_SV 

 SV* Perl_cv_const_sv_or_av(const CV *const cv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CV_CONST_SV_OR_AV 

 void Perl_cv_forget_slab(PerlInterpreter* my_perl __attribute__((unused)), CV *cv);
#define PERL_ARGS_ASSERT_CV_FORGET_SLAB 
 void Perl_cv_get_call_checker(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, Perl_call_checker *ckfun_p, SV **ckobj_p);
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER assert(cv); assert(ckfun_p); assert(ckobj_p)

 void Perl_cv_get_call_checker_flags(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, U32 gflags, Perl_call_checker *ckfun_p, SV **ckobj_p, U32 *ckflags_p);
#define PERL_ARGS_ASSERT_CV_GET_CALL_CHECKER_FLAGS assert(cv); assert(ckfun_p); assert(ckobj_p); assert(ckflags_p)

 SV * Perl_cv_name(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, SV *sv, U32 flags);
#define PERL_ARGS_ASSERT_CV_NAME assert(cv)

 void Perl_cv_set_call_checker(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, Perl_call_checker ckfun, SV *ckobj);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER assert(cv); assert(ckfun); assert(ckobj)

 void Perl_cv_set_call_checker_flags(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, Perl_call_checker ckfun, SV *ckobj, U32 ckflags);
#define PERL_ARGS_ASSERT_CV_SET_CALL_CHECKER_FLAGS assert(cv); assert(ckfun); assert(ckobj)

 void Perl_cv_undef(PerlInterpreter* my_perl __attribute__((unused)), CV* cv);
#define PERL_ARGS_ASSERT_CV_UNDEF assert(cv)

 void Perl_cv_undef_flags(PerlInterpreter* my_perl __attribute__((unused)), CV* cv, U32 flags);
#define PERL_ARGS_ASSERT_CV_UNDEF_FLAGS assert(cv)

 GV * Perl_cvgv_from_hek(PerlInterpreter* my_perl __attribute__((unused)), CV* cv);
#define PERL_ARGS_ASSERT_CVGV_FROM_HEK assert(cv)

 void Perl_cvgv_set(PerlInterpreter* my_perl __attribute__((unused)), CV* cv, GV* gv);
#define PERL_ARGS_ASSERT_CVGV_SET assert(cv)

 void Perl_cvstash_set(PerlInterpreter* my_perl __attribute__((unused)), CV* cv, HV* stash);
#define PERL_ARGS_ASSERT_CVSTASH_SET assert(cv)

 void Perl_cx_dump(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT* cx);
#define PERL_ARGS_ASSERT_CX_DUMP assert(cx)

 I32 Perl_cxinc(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CXINC 

 void Perl_deb(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_DEB assert(pat)


 void Perl_deb_stack_all(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DEB_STACK_ALL 
 I32 Perl_debop(PerlInterpreter* my_perl __attribute__((unused)), const OP* o);
#define PERL_ARGS_ASSERT_DEBOP assert(o)

 void Perl_debprofdump(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DEBPROFDUMP 
 I32 Perl_debstack(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DEBSTACK 
 I32 Perl_debstackptrs(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DEBSTACKPTRS 
 SV * Perl_defelem_target(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC *mg)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DEFELEM_TARGET assert(sv)


 void Perl_delete_eval_scope(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DELETE_EVAL_SCOPE 
 char* Perl_delimcpy(char* to, const char* to_end, const char* from, const char* from_end, const int delim, I32* retlen);
#define PERL_ARGS_ASSERT_DELIMCPY assert(to); assert(to_end); assert(from); assert(from_end); assert(retlen)

 char* Perl_delimcpy_no_escape(char* to, const char* to_end, const char* from, const char* from_end, const int delim, I32* retlen);
#define PERL_ARGS_ASSERT_DELIMCPY_NO_ESCAPE assert(to); assert(to_end); assert(from); assert(from_end); assert(retlen)

 void Perl_despatch_signals(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DESPATCH_SIGNALS 
 OP* Perl_die(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_DIE 

 OP* Perl_die_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *baseex)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_DIE_SV assert(baseex)


 void Perl_die_unwind(PerlInterpreter* my_perl __attribute__((unused)), SV* msv)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_DIE_UNWIND assert(msv)



 _Bool Perl_do_aexec(PerlInterpreter* my_perl __attribute__((unused)), SV* really, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_AEXEC assert(mark); assert(sp)


 _Bool Perl_do_aexec5(PerlInterpreter* my_perl __attribute__((unused)), SV* really, SV** mark, SV** sp, int fd, int do_report);
#define PERL_ARGS_ASSERT_DO_AEXEC5 assert(mark); assert(sp)


 int Perl_do_binmode(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *fp, int iotype, int mode)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_DO_BINMODE assert(fp)



 _Bool Perl_do_close(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, _Bool not_implicit);
#define PERL_ARGS_ASSERT_DO_CLOSE 
 void Perl_do_dump_pad(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, PADLIST *padlist, int full);
#define PERL_ARGS_ASSERT_DO_DUMP_PAD assert(file)

 _Bool Perl_do_eof(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_DO_EOF assert(gv)

 void Perl_do_gv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char *name, GV *sv);
#define PERL_ARGS_ASSERT_DO_GV_DUMP assert(file); assert(name)

 void Perl_do_gvgv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char *name, GV *sv);
#define PERL_ARGS_ASSERT_DO_GVGV_DUMP assert(file); assert(name)

 void Perl_do_hv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char *name, HV *sv);
#define PERL_ARGS_ASSERT_DO_HV_DUMP assert(file); assert(name)

 void Perl_do_join(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, SV *delim, SV **mark, SV **sp);
#define PERL_ARGS_ASSERT_DO_JOIN assert(sv); assert(delim); assert(mark); assert(sp)

 void Perl_do_magic_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const MAGIC *mg, I32 nest, I32 maxnest, _Bool dumpops, STRLEN pvlim);
#define PERL_ARGS_ASSERT_DO_MAGIC_DUMP assert(file)

 I32 Perl_do_ncmp(PerlInterpreter* my_perl __attribute__((unused)), SV *const left, SV *const right)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DO_NCMP assert(left); assert(right)


 void Perl_do_op_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const OP *o);
#define PERL_ARGS_ASSERT_DO_OP_DUMP assert(file)


 _Bool Perl_do_open(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, const char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp);
#define PERL_ARGS_ASSERT_DO_OPEN assert(gv); assert(name)


 _Bool Perl_do_open6(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *oname, STRLEN len, PerlIO *supplied_fp, SV **svp, U32 num);
#define PERL_ARGS_ASSERT_DO_OPEN6 assert(gv); assert(oname)


 _Bool Perl_do_open9(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_DO_OPEN9 assert(gv); assert(name); assert(svs)



 _Bool Perl_do_open_raw(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *oname, STRLEN len, int rawmode, int rawperm, struct stat *statbufp);
#define PERL_ARGS_ASSERT_DO_OPEN_RAW assert(gv); assert(oname)

 _Bool Perl_do_openn(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, const char *oname, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
#define PERL_ARGS_ASSERT_DO_OPENN assert(gv); assert(oname)

 void Perl_do_pmop_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const PMOP *pm);
#define PERL_ARGS_ASSERT_DO_PMOP_DUMP assert(file)

 _Bool Perl_do_print(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, PerlIO* fp);
#define PERL_ARGS_ASSERT_DO_PRINT assert(fp)

 OP* Perl_do_readline(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DO_READLINE 

 _Bool Perl_do_seek(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, off_t pos, int whence);
#define PERL_ARGS_ASSERT_DO_SEEK 
 void Perl_do_sprintf(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, ssize_t len, SV** sarg);
#define PERL_ARGS_ASSERT_DO_SPRINTF assert(sv); assert(sarg)

 void Perl_do_sv_dump(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, _Bool dumpops, STRLEN pvlim);
#define PERL_ARGS_ASSERT_DO_SV_DUMP assert(file)

 off_t Perl_do_sysseek(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, off_t pos, int whence);
#define PERL_ARGS_ASSERT_DO_SYSSEEK assert(gv)

 off_t Perl_do_tell(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DO_TELL assert(gv)


 size_t Perl_do_trans(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_DO_TRANS assert(sv)

 I16 Perl_do_uniprop_match(const char * const key, const U16 key_len)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DO_UNIPROP_MATCH assert(key)


 UV Perl_do_vecget(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, STRLEN offset, int size);
#define PERL_ARGS_ASSERT_DO_VECGET assert(sv)

 void Perl_do_vecset(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_DO_VECSET assert(sv)

 void Perl_do_vop(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV* sv, SV* left, SV* right);
#define PERL_ARGS_ASSERT_DO_VOP assert(sv); assert(left); assert(right)

 OP* Perl_dofile(PerlInterpreter* my_perl __attribute__((unused)), OP* term, I32 force_builtin);
#define PERL_ARGS_ASSERT_DOFILE assert(term)

 _Bool Perl_doing_taint(int argc, char** argv, char** env)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DOING_TAINT 

 OP * Perl_doref(PerlInterpreter* my_perl __attribute__((unused)), OP *o, I32 type, _Bool set_op_ref);
#define PERL_ARGS_ASSERT_DOREF assert(o)

 void Perl_dounwind(PerlInterpreter* my_perl __attribute__((unused)), I32 cxix);
#define PERL_ARGS_ASSERT_DOUNWIND 
 U8 Perl_dowantarray(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DOWANTARRAY 

 void Perl_drand48_init_r(perl_drand48_t *random_state, U32 seed);
#define PERL_ARGS_ASSERT_DRAND48_INIT_R assert(random_state)

 double Perl_drand48_r(perl_drand48_t *random_state);
#define PERL_ARGS_ASSERT_DRAND48_R assert(random_state)

 void Perl_dump_all(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DUMP_ALL 
 void Perl_dump_all_perl(PerlInterpreter* my_perl __attribute__((unused)), _Bool justperl);
#define PERL_ARGS_ASSERT_DUMP_ALL_PERL 
 void Perl_dump_eval(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_DUMP_EVAL 
 void Perl_dump_form(PerlInterpreter* my_perl __attribute__((unused)), const GV* gv);
#define PERL_ARGS_ASSERT_DUMP_FORM assert(gv)

 void Perl_dump_indent(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char* pat, ...)
   __attribute__((format(__printf__,4,5)));
#define PERL_ARGS_ASSERT_DUMP_INDENT assert(file); assert(pat)


 void Perl_dump_packsubs(PerlInterpreter* my_perl __attribute__((unused)), const HV* stash);
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS assert(stash)

 void Perl_dump_packsubs_perl(PerlInterpreter* my_perl __attribute__((unused)), const HV* stash, _Bool justperl);
#define PERL_ARGS_ASSERT_DUMP_PACKSUBS_PERL assert(stash)

 void Perl_dump_sub(PerlInterpreter* my_perl __attribute__((unused)), const GV* gv);
#define PERL_ARGS_ASSERT_DUMP_SUB assert(gv)

 void Perl_dump_sub_perl(PerlInterpreter* my_perl __attribute__((unused)), const GV* gv, _Bool justperl);
#define PERL_ARGS_ASSERT_DUMP_SUB_PERL assert(gv)

 void Perl_dump_vindent(PerlInterpreter* my_perl __attribute__((unused)), I32 level, PerlIO *file, const char* pat, va_list *args);
#define PERL_ARGS_ASSERT_DUMP_VINDENT assert(file); assert(pat)

 STRLEN* Perl_dup_warnings(PerlInterpreter* my_perl __attribute__((unused)), STRLEN* warnings);
#define PERL_ARGS_ASSERT_DUP_WARNINGS 
 void Perl_emulate_cop_io(PerlInterpreter* my_perl __attribute__((unused)), const COP *const c, SV *const sv);
#define PERL_ARGS_ASSERT_EMULATE_COP_IO assert(c); assert(sv)

 SV* Perl_eval_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* p, I32 croak_on_error);
#define PERL_ARGS_ASSERT_EVAL_PV assert(p)

 I32 Perl_eval_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, I32 flags);
#define PERL_ARGS_ASSERT_EVAL_SV assert(sv)

 void Perl_fbm_compile(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, U32 flags);
#define PERL_ARGS_ASSERT_FBM_COMPILE assert(sv)

 char* Perl_fbm_instr(PerlInterpreter* my_perl __attribute__((unused)), unsigned char* big, unsigned char* bigend, SV* littlestr, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_FBM_INSTR assert(big); assert(bigend); assert(littlestr)


 SV* Perl_filter_add(PerlInterpreter* my_perl __attribute__((unused)), filter_t funcp, SV* datasv);
#define PERL_ARGS_ASSERT_FILTER_ADD 
 void Perl_filter_del(PerlInterpreter* my_perl __attribute__((unused)), filter_t funcp);
#define PERL_ARGS_ASSERT_FILTER_DEL assert(funcp)

 I32 Perl_filter_read(PerlInterpreter* my_perl __attribute__((unused)), int idx, SV *buf_sv, int maxlen)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_FILTER_READ assert(buf_sv)


 void Perl_finalize_optree(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_FINALIZE_OPTREE assert(o)

 CV * Perl_find_lexical_cv(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET off);
#define PERL_ARGS_ASSERT_FIND_LEXICAL_CV 
 CV* Perl_find_runcv(PerlInterpreter* my_perl __attribute__((unused)), U32 *db_seqp)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_FIND_RUNCV 

 CV* Perl_find_runcv_where(PerlInterpreter* my_perl __attribute__((unused)), U8 cond, IV arg, U32 *db_seqp)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_FIND_RUNCV_WHERE 

 SV* Perl_find_rundefsv(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_FIND_RUNDEFSV 
 PADOFFSET Perl_find_rundefsvoffset(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_FIND_RUNDEFSVOFFSET 

 char* Perl_find_script(PerlInterpreter* my_perl __attribute__((unused)), const char *scriptname, _Bool dosearch, const char *const *const search_ext, I32 flags);
#define PERL_ARGS_ASSERT_FIND_SCRIPT assert(scriptname)


static __inline__ I32 Perl_foldEQ(const char* a, const char* b, I32 len);
#define PERL_ARGS_ASSERT_FOLDEQ assert(a); assert(b)



static __inline__ I32 Perl_foldEQ_latin1(const char* a, const char* b, I32 len);
#define PERL_ARGS_ASSERT_FOLDEQ_LATIN1 assert(a); assert(b)



static __inline__ I32 Perl_foldEQ_locale(const char* a, const char* b, I32 len);
#define PERL_ARGS_ASSERT_FOLDEQ_LOCALE assert(a); assert(b)



#define PERL_ARGS_ASSERT_FOLDEQ_UTF8 
 I32 Perl_foldEQ_utf8_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *s1, char **pe1, UV l1, _Bool u1, const char *s2, char **pe2, UV l2, _Bool u2, U32 flags);
#define PERL_ARGS_ASSERT_FOLDEQ_UTF8_FLAGS assert(s1); assert(s2)

 char* Perl_form(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_FORM assert(pat)


 void Perl_free_tied_hv_pool(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_FREE_TIED_HV_POOL 
 void Perl_free_tmps(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_FREE_TMPS 
 SV* Perl_get_and_check_backslash_N_name(PerlInterpreter* my_perl __attribute__((unused)), const char* s, const char* e, const _Bool is_utf8, const char** error_msg)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GET_AND_CHECK_BACKSLASH_N_NAME assert(s); assert(e); assert(error_msg)


 AV* Perl_get_av(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_AV assert(name)

 void* Perl_get_context(void)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GET_CONTEXT 

 CV* Perl_get_cv(PerlInterpreter* my_perl __attribute__((unused)), const char* name, I32 flags);
#define PERL_ARGS_ASSERT_GET_CV assert(name)

 CV* Perl_get_cvn_flags(PerlInterpreter* my_perl __attribute__((unused)), const char* name, STRLEN len, I32 flags);
#define PERL_ARGS_ASSERT_GET_CVN_FLAGS assert(name)

 void Perl_get_db_sub(PerlInterpreter* my_perl __attribute__((unused)), SV **svp, CV *cv);
#define PERL_ARGS_ASSERT_GET_DB_SUB assert(cv)

 const char * Perl_get_deprecated_property_msg(const size_t warning_offset)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GET_DEPRECATED_PROPERTY_MSG 

 void Perl_get_hash_seed(PerlInterpreter* my_perl __attribute__((unused)), unsigned char * const seed_buffer);
#define PERL_ARGS_ASSERT_GET_HASH_SEED assert(seed_buffer)

 HV* Perl_get_hv(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_HV assert(name)

 const char* Perl_get_no_modify(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_GET_NO_MODIFY 

 char** Perl_get_op_descs(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_GET_OP_DESCS 

 char** Perl_get_op_names(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_GET_OP_NAMES 

 U32* Perl_get_opargs(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_GET_OPARGS 

 PPADDR_t* Perl_get_ppaddr(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_GET_PPADDR 

 SV * Perl_get_prop_definition(PerlInterpreter* my_perl __attribute__((unused)), const int table_index)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GET_PROP_DEFINITION 

 const char * const * Perl_get_prop_values(const int table_index)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GET_PROP_VALUES 

 REGEXP * Perl_get_re_arg(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_GET_RE_ARG 
 SV* Perl_get_sv(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 flags);
#define PERL_ARGS_ASSERT_GET_SV assert(name)

 MGVTBL* Perl_get_vtbl(PerlInterpreter* my_perl __attribute__((unused)), int vtbl_id)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GET_VTBL 

 int Perl_getcwd_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_GETCWD_SV assert(sv)

 void Perl_gp_free(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_GP_FREE 
 GP* Perl_gp_ref(PerlInterpreter* my_perl __attribute__((unused)), GP* gp);
#define PERL_ARGS_ASSERT_GP_REF 
 _Bool Perl_grok_atoUV(const char* pv, UV* valptr, const char** endptr);
#define PERL_ARGS_ASSERT_GROK_ATOUV assert(pv); assert(valptr)

 UV Perl_grok_bin(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_BIN assert(start); assert(len_p); assert(flags)

 UV Perl_grok_bin_oct_hex(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result, const unsigned shift, const U8 lookup_bit, const char prefix);
#define PERL_ARGS_ASSERT_GROK_BIN_OCT_HEX assert(start); assert(len_p); assert(flags)

 UV Perl_grok_hex(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_HEX assert(start); assert(len_p); assert(flags)

 int Perl_grok_infnan(PerlInterpreter* my_perl __attribute__((unused)), const char** sp, const char *send);
#define PERL_ARGS_ASSERT_GROK_INFNAN assert(sp); assert(send)

 int Perl_grok_number(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, UV *valuep);
#define PERL_ARGS_ASSERT_GROK_NUMBER assert(pv)

 int Perl_grok_number_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, UV *valuep, U32 flags);
#define PERL_ARGS_ASSERT_GROK_NUMBER_FLAGS assert(pv)

 _Bool Perl_grok_numeric_radix(PerlInterpreter* my_perl __attribute__((unused)), const char **sp, const char *send)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GROK_NUMERIC_RADIX assert(sp); assert(send)


 UV Perl_grok_oct(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN* len_p, I32* flags, NV *result);
#define PERL_ARGS_ASSERT_GROK_OCT assert(start); assert(len_p); assert(flags)


 GV* Perl_gv_AVadd(PerlInterpreter* my_perl __attribute__((unused)), GV *gv);
#define PERL_ARGS_ASSERT_GV_AVADD 


 GV* Perl_gv_HVadd(PerlInterpreter* my_perl __attribute__((unused)), GV *gv);
#define PERL_ARGS_ASSERT_GV_HVADD 


 GV* Perl_gv_IOadd(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_GV_IOADD 

 GV* Perl_gv_add_by_type(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, svtype type);
#define PERL_ARGS_ASSERT_GV_ADD_BY_TYPE 


#define PERL_ARGS_ASSERT_GV_AUTOLOAD4 

 GV* Perl_gv_autoload_pv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* namepv, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PV assert(namepv)


 GV* Perl_gv_autoload_pvn(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_PVN assert(name)


 GV* Perl_gv_autoload_sv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GV_AUTOLOAD_SV assert(namesv)


 void Perl_gv_check(PerlInterpreter* my_perl __attribute__((unused)), HV* stash);
#define PERL_ARGS_ASSERT_GV_CHECK assert(stash)

 SV* Perl_gv_const_sv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GV_CONST_SV assert(gv)


 void Perl_gv_dump(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_GV_DUMP 

 void Perl_gv_efullname(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_GV_EFULLNAME assert(sv); assert(gv)




 void Perl_gv_efullname3(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv, const char* prefix);
#define PERL_ARGS_ASSERT_GV_EFULLNAME3 assert(sv); assert(gv)


 void Perl_gv_efullname4(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv, const char* prefix, _Bool keepmain);
#define PERL_ARGS_ASSERT_GV_EFULLNAME4 assert(sv); assert(gv)

 GV* Perl_gv_fetchfile(PerlInterpreter* my_perl __attribute__((unused)), const char* name);
#define PERL_ARGS_ASSERT_GV_FETCHFILE assert(name)

 GV* Perl_gv_fetchfile_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *const name, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHFILE_FLAGS assert(name)


#define PERL_ARGS_ASSERT_GV_FETCHMETH 

#define PERL_ARGS_ASSERT_GV_FETCHMETH_AUTOLOAD 
 GV* Perl_gv_fetchmeth_pv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV assert(name)

 GV* Perl_gv_fetchmeth_pv_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PV_AUTOLOAD assert(name)

 GV* Perl_gv_fetchmeth_pvn(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN assert(name)

 GV* Perl_gv_fetchmeth_pvn_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_PVN_AUTOLOAD assert(name)

 GV* Perl_gv_fetchmeth_sv(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV assert(namesv)

 GV* Perl_gv_fetchmeth_sv_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, I32 level, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETH_SV_AUTOLOAD assert(namesv)


 GV* Perl_gv_fetchmethod(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD assert(stash); assert(name)


 GV* Perl_gv_fetchmethod_autoload(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, I32 autoload);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_AUTOLOAD assert(stash); assert(name)

 GV* Perl_gv_fetchmethod_pv_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PV_FLAGS assert(stash); assert(name)

 GV* Perl_gv_fetchmethod_pvn_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, const STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_PVN_FLAGS assert(stash); assert(name)

 GV* Perl_gv_fetchmethod_sv_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, SV* namesv, U32 flags);
#define PERL_ARGS_ASSERT_GV_FETCHMETHOD_SV_FLAGS assert(stash); assert(namesv)

 GV* Perl_gv_fetchpv(PerlInterpreter* my_perl __attribute__((unused)), const char *nambeg, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHPV assert(nambeg)

 GV* Perl_gv_fetchpvn_flags(PerlInterpreter* my_perl __attribute__((unused)), const char* name, STRLEN len, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHPVN_FLAGS assert(name)

 GV* Perl_gv_fetchsv(PerlInterpreter* my_perl __attribute__((unused)), SV *name, I32 flags, const svtype sv_type);
#define PERL_ARGS_ASSERT_GV_FETCHSV assert(name)


 void Perl_gv_fullname(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_GV_FULLNAME assert(sv); assert(gv)




 void Perl_gv_fullname3(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv, const char* prefix);
#define PERL_ARGS_ASSERT_GV_FULLNAME3 assert(sv); assert(gv)


 void Perl_gv_fullname4(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const GV* gv, const char* prefix, _Bool keepmain);
#define PERL_ARGS_ASSERT_GV_FULLNAME4 assert(sv); assert(gv)

 CV* Perl_gv_handler(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, I32 id)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GV_HANDLER 


#define PERL_ARGS_ASSERT_GV_INIT 
 void Perl_gv_init_pv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, HV* stash, const char* name, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_PV assert(gv); assert(name)

 void Perl_gv_init_pvn(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, HV* stash, const char* name, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_PVN assert(gv); assert(name)

 void Perl_gv_init_sv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, HV* stash, SV* namesv, U32 flags);
#define PERL_ARGS_ASSERT_GV_INIT_SV assert(gv); assert(namesv)

 void Perl_gv_name_set(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_GV_NAME_SET assert(gv); assert(name)

 GV * Perl_gv_override(PerlInterpreter* my_perl __attribute__((unused)), const char * const name, const STRLEN len);
#define PERL_ARGS_ASSERT_GV_OVERRIDE assert(name)

 void Perl_gv_setref(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const ssv);
#define PERL_ARGS_ASSERT_GV_SETREF assert(dsv); assert(ssv)

 HV* Perl_gv_stashpv(PerlInterpreter* my_perl __attribute__((unused)), const char* name, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPV assert(name)

 HV* Perl_gv_stashpvn(PerlInterpreter* my_perl __attribute__((unused)), const char* name, U32 namelen, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHPVN assert(name)

 HV* Perl_gv_stashsv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, I32 flags);
#define PERL_ARGS_ASSERT_GV_STASHSV assert(sv)

 void Perl_gv_try_downgrade(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_GV_TRY_DOWNGRADE assert(gv)

 AV** Perl_hv_backreferences_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv);
#define PERL_ARGS_ASSERT_HV_BACKREFERENCES_P assert(hv)

 SV* Perl_hv_bucket_ratio(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_BUCKET_RATIO assert(hv)


 void Perl_hv_clear(PerlInterpreter* my_perl __attribute__((unused)), HV *hv);
#define PERL_ARGS_ASSERT_HV_CLEAR 
 void Perl_hv_clear_placeholders(PerlInterpreter* my_perl __attribute__((unused)), HV *hv);
#define PERL_ARGS_ASSERT_HV_CLEAR_PLACEHOLDERS assert(hv)

 void* Perl_hv_common(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv, const char* key, STRLEN klen, int flags, int action, SV *val, U32 hash);
#define PERL_ARGS_ASSERT_HV_COMMON 
 void* Perl_hv_common_key_len(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen_i32, const int action, SV *val, const U32 hash);
#define PERL_ARGS_ASSERT_HV_COMMON_KEY_LEN assert(key)

 HV * Perl_hv_copy_hints_hv(PerlInterpreter* my_perl __attribute__((unused)), HV *const ohv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_COPY_HINTS_HV 

 void Perl_hv_delayfree_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *entry);
#define PERL_ARGS_ASSERT_HV_DELAYFREE_ENT assert(hv)


 SV* Perl_hv_delete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen, I32 flags);
#define PERL_ARGS_ASSERT_HV_DELETE assert(key)



 SV* Perl_hv_delete_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv, I32 flags, U32 hash);
#define PERL_ARGS_ASSERT_HV_DELETE_ENT assert(keysv)


 HE** Perl_hv_eiter_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_EITER_P assert(hv)


 void Perl_hv_eiter_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *eiter);
#define PERL_ARGS_ASSERT_HV_EITER_SET assert(hv)

 void Perl_hv_ename_add(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_ENAME_ADD assert(hv); assert(name)

 void Perl_hv_ename_delete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_ENAME_DELETE assert(hv); assert(name)


 _Bool Perl_hv_exists(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_EXISTS assert(key)




 _Bool Perl_hv_exists_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv, U32 hash)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_EXISTS_ENT assert(keysv)




 SV** Perl_hv_fetch(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen, I32 lval);
#define PERL_ARGS_ASSERT_HV_FETCH assert(key)



 HE* Perl_hv_fetch_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv, I32 lval, U32 hash);
#define PERL_ARGS_ASSERT_HV_FETCH_ENT assert(keysv)


 STRLEN Perl_hv_fill(PerlInterpreter* my_perl __attribute__((unused)), HV *const hv);
#define PERL_ARGS_ASSERT_HV_FILL assert(hv)

 void Perl_hv_free_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *entry);
#define PERL_ARGS_ASSERT_HV_FREE_ENT assert(hv)

 I32 Perl_hv_iterinit(PerlInterpreter* my_perl __attribute__((unused)), HV *hv);
#define PERL_ARGS_ASSERT_HV_ITERINIT assert(hv)

 char* Perl_hv_iterkey(PerlInterpreter* my_perl __attribute__((unused)), HE* entry, I32* retlen)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_ITERKEY assert(entry); assert(retlen)


 SV* Perl_hv_iterkeysv(PerlInterpreter* my_perl __attribute__((unused)), HE* entry)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_ITERKEYSV assert(entry)



 HE* Perl_hv_iternext(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_ITERNEXT assert(hv)



 HE* Perl_hv_iternext_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, I32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_ITERNEXT_FLAGS assert(hv)


 SV* Perl_hv_iternextsv(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, char **key, I32 *retlen)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_ITERNEXTSV assert(hv); assert(key); assert(retlen)


 SV* Perl_hv_iterval(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, HE *entry)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_ITERVAL assert(hv); assert(entry)


 void Perl_hv_ksplit(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, IV newmax);
#define PERL_ARGS_ASSERT_HV_KSPLIT assert(hv)


 void Perl_hv_magic(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, GV *gv, int how);
#define PERL_ARGS_ASSERT_HV_MAGIC assert(hv)


 void Perl_hv_name_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *name, U32 len, U32 flags);
#define PERL_ARGS_ASSERT_HV_NAME_SET assert(hv)

 I32 Perl_hv_placeholders_get(PerlInterpreter* my_perl __attribute__((unused)), const HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_GET assert(hv)


 ssize_t* Perl_hv_placeholders_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_P assert(hv)


 void Perl_hv_placeholders_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, I32 ph);
#define PERL_ARGS_ASSERT_HV_PLACEHOLDERS_SET assert(hv)

 void Perl_hv_pushkv(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, U32 flags);
#define PERL_ARGS_ASSERT_HV_PUSHKV assert(hv)

 void Perl_hv_rand_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, U32 new_xhv_rand);
#define PERL_ARGS_ASSERT_HV_RAND_SET assert(hv)

 I32* Perl_hv_riter_p(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_RITER_P assert(hv)


 void Perl_hv_riter_set(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, I32 riter);
#define PERL_ARGS_ASSERT_HV_RITER_SET assert(hv)

 SV* Perl_hv_scalar(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HV_SCALAR assert(hv)



 SV** Perl_hv_store(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen, SV *val, U32 hash);
#define PERL_ARGS_ASSERT_HV_STORE 


 HE* Perl_hv_store_ent(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *key, SV *val, U32 hash);
#define PERL_ARGS_ASSERT_HV_STORE_ENT 


 SV** Perl_hv_store_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, const char *key, I32 klen, SV *val, U32 hash, int flags);
#define PERL_ARGS_ASSERT_HV_STORE_FLAGS 


#define PERL_ARGS_ASSERT_HV_UNDEF 
 void Perl_hv_undef_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, U32 flags);
#define PERL_ARGS_ASSERT_HV_UNDEF_FLAGS 



#define PERL_ARGS_ASSERT_IBCMP 




#define PERL_ARGS_ASSERT_IBCMP_LOCALE 


#define PERL_ARGS_ASSERT_IBCMP_UTF8 
 void Perl_init_argv_symbols(PerlInterpreter* my_perl __attribute__((unused)), int argc, char **argv);
#define PERL_ARGS_ASSERT_INIT_ARGV_SYMBOLS assert(argv)

 void Perl_init_constants(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_INIT_CONSTANTS 
 void Perl_init_dbargs(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_INIT_DBARGS 
 void Perl_init_debugger(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_INIT_DEBUGGER 
 int Perl_init_i18nl10n(PerlInterpreter* my_perl __attribute__((unused)), int printwarn);
#define PERL_ARGS_ASSERT_INIT_I18NL10N 

 int Perl_init_i18nl14n(PerlInterpreter* my_perl __attribute__((unused)), int printwarn)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_INIT_I18NL14N 


 void Perl_init_named_cv(PerlInterpreter* my_perl __attribute__((unused)), CV *cv, OP *nameop);
#define PERL_ARGS_ASSERT_INIT_NAMED_CV assert(cv); assert(nameop)

 void Perl_init_stacks(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_INIT_STACKS 
 void Perl_init_tm(PerlInterpreter* my_perl __attribute__((unused)), struct tm *ptm);
#define PERL_ARGS_ASSERT_INIT_TM assert(ptm)

 void Perl_init_uniprops(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_INIT_UNIPROPS 

 char* Perl_instr(const char* big, const char* little)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_INSTR assert(big); assert(little)



 U32 Perl_intro_my(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_INTRO_MY 
 OP* Perl_invert(PerlInterpreter* my_perl __attribute__((unused)), OP* cmd)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_INVERT 

 void Perl_invmap_dump(PerlInterpreter* my_perl __attribute__((unused)), SV* invlist, UV * map);
#define PERL_ARGS_ASSERT_INVMAP_DUMP assert(invlist); assert(map)

 _Bool Perl_io_close(PerlInterpreter* my_perl __attribute__((unused)), IO* io, GV *gv, _Bool not_implicit, _Bool warn_on_fail);
#define PERL_ARGS_ASSERT_IO_CLOSE assert(io)


static __inline__ size_t Perl_isC9_STRICT_UTF8_CHAR(const U8 * const s0, const U8 * const e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_ISC9_STRICT_UTF8_CHAR assert(s0); assert(e)




static __inline__ size_t Perl_isSTRICT_UTF8_CHAR(const U8 * const s0, const U8 * const e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_ISSTRICT_UTF8_CHAR assert(s0); assert(e)




static __inline__ size_t Perl_isUTF8_CHAR(const U8 * const s0, const U8 * const e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_ISUTF8_CHAR assert(s0); assert(e)






#define PERL_ARGS_ASSERT_IS_ASCII_STRING 



#define PERL_ARGS_ASSERT_IS_C9STRICT_UTF8_STRING 


#define PERL_ARGS_ASSERT_IS_C9STRICT_UTF8_STRING_LOC 

static __inline__ _Bool Perl_is_c9strict_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
#define PERL_ARGS_ASSERT_IS_C9STRICT_UTF8_STRING_LOCLEN assert(s)





#define PERL_ARGS_ASSERT_IS_INVARIANT_STRING 

 I32 Perl_is_lvalue_sub(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_IS_LVALUE_SUB 


static __inline__ _Bool Perl_is_safe_syscall(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, const char *what, const char *op_name)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_IS_SAFE_SYSCALL assert(pv); assert(what); assert(op_name)





#define PERL_ARGS_ASSERT_IS_STRICT_UTF8_STRING 


#define PERL_ARGS_ASSERT_IS_STRICT_UTF8_STRING_LOC 

static __inline__ _Bool Perl_is_strict_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
#define PERL_ARGS_ASSERT_IS_STRICT_UTF8_STRING_LOCLEN assert(s)



 STRLEN Perl_is_utf8_char(const U8 *s)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR assert(s)




 STRLEN Perl_is_utf8_char_buf(const U8 *buf, const U8 *buf_end);
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_BUF assert(buf); assert(buf_end)


 STRLEN Perl_is_utf8_char_helper(const U8 * const s, const U8 * e, const U32 flags)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_IS_UTF8_CHAR_HELPER assert(s); assert(e)



#define PERL_ARGS_ASSERT_IS_UTF8_FIXED_WIDTH_BUF_FLAGS 

#define PERL_ARGS_ASSERT_IS_UTF8_FIXED_WIDTH_BUF_LOC_FLAGS 

static __inline__ _Bool Perl_is_utf8_fixed_width_buf_loclen_flags(const U8 * const s, STRLEN len, const U8 **ep, STRLEN *el, const U32 flags);
#define PERL_ARGS_ASSERT_IS_UTF8_FIXED_WIDTH_BUF_LOCLEN_FLAGS assert(s)




#define PERL_ARGS_ASSERT_IS_UTF8_INVARIANT_STRING 


static __inline__ _Bool Perl_is_utf8_invariant_string_loc(const U8* const s, STRLEN len, const U8 ** ep)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_IS_UTF8_INVARIANT_STRING_LOC assert(s)





#define PERL_ARGS_ASSERT_IS_UTF8_STRING 


static __inline__ _Bool Perl_is_utf8_string_flags(const U8 *s, STRLEN len, const U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_FLAGS assert(s)




 _Bool Perl_is_utf8_string_loc(const U8 *s, const STRLEN len, const U8 **ep);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC assert(s); assert(ep)



#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOC_FLAGS 

static __inline__ _Bool Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN assert(s)



static __inline__ _Bool Perl_is_utf8_string_loclen_flags(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el, const U32 flags);
#define PERL_ARGS_ASSERT_IS_UTF8_STRING_LOCLEN_FLAGS assert(s)





#define PERL_ARGS_ASSERT_IS_UTF8_VALID_PARTIAL_CHAR 


static __inline__ _Bool Perl_is_utf8_valid_partial_char_flags(const U8 * const s, const U8 * const e, const U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_IS_UTF8_VALID_PARTIAL_CHAR_FLAGS assert(s); assert(e)



 _Bool Perl_isinfnan(NV nv)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_ISINFNAN 

 _Bool Perl_isinfnansv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_ISINFNANSV assert(sv)

 OP* Perl_jmaybe(PerlInterpreter* my_perl __attribute__((unused)), OP *o);
#define PERL_ARGS_ASSERT_JMAYBE assert(o)

 I32 Perl_keyword(PerlInterpreter* my_perl __attribute__((unused)), const char *name, I32 len, _Bool all_keywords)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_KEYWORD assert(name)


 int Perl_keyword_plugin_standard(PerlInterpreter* my_perl __attribute__((unused)), char* keyword_ptr, STRLEN keyword_len, OP** op_ptr);
#define PERL_ARGS_ASSERT_KEYWORD_PLUGIN_STANDARD assert(keyword_ptr); assert(op_ptr)

 void Perl_leave_adjust_stacks(PerlInterpreter* my_perl __attribute__((unused)), SV **from_sp, SV **to_sp, U8 gimme, int filter);
#define PERL_ARGS_ASSERT_LEAVE_ADJUST_STACKS assert(from_sp); assert(to_sp)

 void Perl_leave_scope(PerlInterpreter* my_perl __attribute__((unused)), I32 base);
#define PERL_ARGS_ASSERT_LEAVE_SCOPE 
 _Bool Perl_lex_bufutf8(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_LEX_BUFUTF8 
 void Perl_lex_discard_to(PerlInterpreter* my_perl __attribute__((unused)), char* ptr);
#define PERL_ARGS_ASSERT_LEX_DISCARD_TO assert(ptr)

 char* Perl_lex_grow_linestr(PerlInterpreter* my_perl __attribute__((unused)), STRLEN len);
#define PERL_ARGS_ASSERT_LEX_GROW_LINESTR 
 _Bool Perl_lex_next_chunk(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_LEX_NEXT_CHUNK 
 I32 Perl_lex_peek_unichar(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_LEX_PEEK_UNICHAR 
 void Perl_lex_read_space(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_LEX_READ_SPACE 
 void Perl_lex_read_to(PerlInterpreter* my_perl __attribute__((unused)), char* ptr);
#define PERL_ARGS_ASSERT_LEX_READ_TO assert(ptr)

 I32 Perl_lex_read_unichar(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_LEX_READ_UNICHAR 
 void Perl_lex_start(PerlInterpreter* my_perl __attribute__((unused)), SV* line, PerlIO *rsfp, U32 flags);
#define PERL_ARGS_ASSERT_LEX_START 
 void Perl_lex_stuff_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_PV assert(pv)

 void Perl_lex_stuff_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char* pv, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_PVN assert(pv)

 void Perl_lex_stuff_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, U32 flags);
#define PERL_ARGS_ASSERT_LEX_STUFF_SV assert(sv)

 void Perl_lex_unstuff(PerlInterpreter* my_perl __attribute__((unused)), char* ptr);
#define PERL_ARGS_ASSERT_LEX_UNSTUFF assert(ptr)

 OP* Perl_list(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_LIST 
 HV* Perl_load_charnames(PerlInterpreter* my_perl __attribute__((unused)), SV * char_name, const char * context, const STRLEN context_len, const char ** error_msg)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_LOAD_CHARNAMES assert(char_name); assert(context); assert(error_msg)


 void Perl_load_module(PerlInterpreter* my_perl __attribute__((unused)), U32 flags, SV* name, SV* ver, ...);
#define PERL_ARGS_ASSERT_LOAD_MODULE assert(name)

 OP* Perl_localize(PerlInterpreter* my_perl __attribute__((unused)), OP *o, I32 lex);
#define PERL_ARGS_ASSERT_LOCALIZE assert(o)

 I32 Perl_looks_like_number(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_LOOKS_LIKE_NUMBER assert(sv)


 int Perl_magic_clear_all_env(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEAR_ALL_ENV assert(sv); assert(mg)

 int Perl_magic_cleararylen_p(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARARYLEN_P assert(sv); assert(mg)

 int Perl_magic_clearenv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARENV assert(sv); assert(mg)

 int Perl_magic_clearhint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINT assert(sv); assert(mg)

 int Perl_magic_clearhints(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARHINTS assert(sv); assert(mg)

 int Perl_magic_clearisa(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARISA assert(mg)

 int Perl_magic_clearpack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARPACK assert(sv); assert(mg)

 int Perl_magic_clearsig(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_CLEARSIG assert(sv); assert(mg)

 int Perl_magic_copycallchecker(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC *mg, SV *nsv, const char *name, I32 namlen);
#define PERL_ARGS_ASSERT_MAGIC_COPYCALLCHECKER assert(sv); assert(mg); assert(nsv)

 void Perl_magic_dump(PerlInterpreter* my_perl __attribute__((unused)), const MAGIC *mg);
#define PERL_ARGS_ASSERT_MAGIC_DUMP 
 int Perl_magic_existspack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_EXISTSPACK assert(sv); assert(mg)

 int Perl_magic_freearylen_p(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREEARYLEN_P assert(sv); assert(mg)

 int Perl_magic_freemglob(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREEMGLOB assert(sv); assert(mg)

 int Perl_magic_freeovrld(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREEOVRLD assert(sv); assert(mg)

 int Perl_magic_freeutf8(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREEUTF8 assert(sv); assert(mg)

 int Perl_magic_get(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GET assert(sv); assert(mg)

 int Perl_magic_getarylen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETARYLEN assert(sv); assert(mg)

 int Perl_magic_getdebugvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETDEBUGVAR assert(sv); assert(mg)

 int Perl_magic_getdefelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETDEFELEM assert(sv); assert(mg)

 int Perl_magic_getnkeys(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETNKEYS assert(sv); assert(mg)

 int Perl_magic_getpack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETPACK assert(sv); assert(mg)

 int Perl_magic_getpos(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETPOS assert(sv); assert(mg)

 int Perl_magic_getsig(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETSIG assert(sv); assert(mg)

 int Perl_magic_getsubstr(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETSUBSTR assert(sv); assert(mg)

 int Perl_magic_gettaint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETTAINT assert(sv); assert(mg)

 int Perl_magic_getuvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETUVAR assert(sv); assert(mg)

 int Perl_magic_getvec(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_GETVEC assert(sv); assert(mg)

 int Perl_magic_killbackrefs(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC *mg);
#define PERL_ARGS_ASSERT_MAGIC_KILLBACKREFS assert(sv); assert(mg)

 SV* Perl_magic_methcall(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, const MAGIC *mg, SV *meth, U32 flags, U32 argc, ...);
#define PERL_ARGS_ASSERT_MAGIC_METHCALL assert(sv); assert(mg); assert(meth)

 int Perl_magic_nextpack(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, MAGIC *mg, SV *key);
#define PERL_ARGS_ASSERT_MAGIC_NEXTPACK assert(sv); assert(mg); assert(key)

 U32 Perl_magic_regdata_cnt(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_REGDATA_CNT assert(sv); assert(mg)

 int Perl_magic_regdatum_get(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_GET assert(sv); assert(mg)

 SV* Perl_magic_scalarpack(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, MAGIC *mg);
#define PERL_ARGS_ASSERT_MAGIC_SCALARPACK assert(hv); assert(mg)

 int Perl_magic_set(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SET assert(sv); assert(mg)

 int Perl_magic_set_all_env(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SET_ALL_ENV assert(sv); assert(mg)

 int Perl_magic_setarylen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETARYLEN assert(sv); assert(mg)

 int Perl_magic_setdbline(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDBLINE assert(sv); assert(mg)

 int Perl_magic_setdebugvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDEBUGVAR assert(sv); assert(mg)

 int Perl_magic_setdefelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETDEFELEM assert(sv); assert(mg)

 int Perl_magic_setenv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETENV assert(sv); assert(mg)

 int Perl_magic_sethint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETHINT assert(sv); assert(mg)

 int Perl_magic_setisa(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETISA assert(sv); assert(mg)

 int Perl_magic_setlvref(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETLVREF assert(sv); assert(mg)

 int Perl_magic_setmglob(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETMGLOB assert(sv); assert(mg)

 int Perl_magic_setnkeys(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETNKEYS assert(sv); assert(mg)

 int Perl_magic_setnonelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETNONELEM assert(sv); assert(mg)

 int Perl_magic_setpack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETPACK assert(sv); assert(mg)

 int Perl_magic_setpos(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETPOS assert(sv); assert(mg)

 int Perl_magic_setregexp(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETREGEXP assert(sv); assert(mg)

 int Perl_magic_setsig(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETSIG assert(mg)

 int Perl_magic_setsubstr(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETSUBSTR assert(sv); assert(mg)

 int Perl_magic_settaint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETTAINT assert(sv); assert(mg)

 int Perl_magic_setutf8(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETUTF8 assert(sv); assert(mg)

 int Perl_magic_setuvar(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETUVAR assert(sv); assert(mg)

 int Perl_magic_setvec(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETVEC assert(sv); assert(mg)

 U32 Perl_magic_sizepack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SIZEPACK assert(sv); assert(mg)

 int Perl_magic_wipepack(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_WIPEPACK assert(sv); assert(mg)

 void * Perl_malloc(size_t nbytes)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MALLOC 

 I32 * Perl_markstack_grow(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_MARKSTACK_GROW 
 SV* Perl_mess(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_MESS assert(pat)


 SV* Perl_mess_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* basemsg, _Bool consume);
#define PERL_ARGS_ASSERT_MESS_SV assert(basemsg)

 void Perl_mfree(void * where);
#define PERL_ARGS_ASSERT_MFREE 
 int Perl_mg_clear(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_MG_CLEAR assert(sv)

 int Perl_mg_copy(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, SV *nsv, const char *key, I32 klen);
#define PERL_ARGS_ASSERT_MG_COPY assert(sv); assert(nsv)

 MAGIC* Perl_mg_find(const SV* sv, int type)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MG_FIND 

 MAGIC* Perl_mg_find_mglob(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MG_FIND_MGLOB assert(sv)


 MAGIC* Perl_mg_findext(const SV* sv, int type, const MGVTBL *vtbl)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MG_FINDEXT 

 int Perl_mg_free(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_MG_FREE assert(sv)

 void Perl_mg_free_type(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, int how);
#define PERL_ARGS_ASSERT_MG_FREE_TYPE assert(sv)

 void Perl_mg_freeext(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, int how, const MGVTBL *vtbl);
#define PERL_ARGS_ASSERT_MG_FREEEXT assert(sv)

 int Perl_mg_get(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_MG_GET assert(sv)

 U32 Perl_mg_length(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_MG_LENGTH assert(sv)


 void Perl_mg_localize(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV* nsv, _Bool setmagic);
#define PERL_ARGS_ASSERT_MG_LOCALIZE assert(sv); assert(nsv)

 void Perl_mg_magical(SV* sv);
#define PERL_ARGS_ASSERT_MG_MAGICAL assert(sv)

 int Perl_mg_set(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_MG_SET assert(sv)

 I32 Perl_mg_size(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_MG_SIZE assert(sv)

 void Perl_mini_mktime(struct tm *ptm);
#define PERL_ARGS_ASSERT_MINI_MKTIME assert(ptm)

 int Perl_mode_from_discipline(PerlInterpreter* my_perl __attribute__((unused)), const char* s, STRLEN len);
#define PERL_ARGS_ASSERT_MODE_FROM_DISCIPLINE 
 void * Perl_more_bodies(PerlInterpreter* my_perl __attribute__((unused)), const svtype sv_type, const size_t body_size, const size_t arena_size);
#define PERL_ARGS_ASSERT_MORE_BODIES 
 const char* Perl_moreswitches(PerlInterpreter* my_perl __attribute__((unused)), const char* s);
#define PERL_ARGS_ASSERT_MORESWITCHES assert(s)


static __inline__ char * Perl_mortal_getenv(const char * str)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MORTAL_GETENV assert(str)



 const struct mro_alg * Perl_mro_get_from_name(PerlInterpreter* my_perl __attribute__((unused)), SV *name);
#define PERL_ARGS_ASSERT_MRO_GET_FROM_NAME assert(name)

 AV* Perl_mro_get_linear_isa(PerlInterpreter* my_perl __attribute__((unused)), HV* stash);
#define PERL_ARGS_ASSERT_MRO_GET_LINEAR_ISA assert(stash)

 SV* Perl_mro_get_private_data(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta *const smeta, const struct mro_alg *const which);
#define PERL_ARGS_ASSERT_MRO_GET_PRIVATE_DATA assert(smeta); assert(which)

 void Perl_mro_isa_changed_in(PerlInterpreter* my_perl __attribute__((unused)), HV* stash);
#define PERL_ARGS_ASSERT_MRO_ISA_CHANGED_IN assert(stash)

 struct mro_meta* Perl_mro_meta_init(PerlInterpreter* my_perl __attribute__((unused)), HV* stash);
#define PERL_ARGS_ASSERT_MRO_META_INIT assert(stash)

 void Perl_mro_method_changed_in(PerlInterpreter* my_perl __attribute__((unused)), HV* stash);
#define PERL_ARGS_ASSERT_MRO_METHOD_CHANGED_IN assert(stash)

 void Perl_mro_package_moved(PerlInterpreter* my_perl __attribute__((unused)), HV * const stash, HV * const oldstash, const GV * const gv, U32 flags);
#define PERL_ARGS_ASSERT_MRO_PACKAGE_MOVED assert(gv)

 void Perl_mro_register(PerlInterpreter* my_perl __attribute__((unused)), const struct mro_alg *mro);
#define PERL_ARGS_ASSERT_MRO_REGISTER assert(mro)

 void Perl_mro_set_mro(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta *const meta, SV *const name);
#define PERL_ARGS_ASSERT_MRO_SET_MRO assert(meta); assert(name)

 SV* Perl_mro_set_private_data(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta *const smeta, const struct mro_alg *const which, SV *const data);
#define PERL_ARGS_ASSERT_MRO_SET_PRIVATE_DATA assert(smeta); assert(which); assert(data)

 SV* Perl_multiconcat_stringify(PerlInterpreter* my_perl __attribute__((unused)), const OP* o);
#define PERL_ARGS_ASSERT_MULTICONCAT_STRINGIFY assert(o)

 SV* Perl_multideref_stringify(PerlInterpreter* my_perl __attribute__((unused)), const OP* o, CV *cv);
#define PERL_ARGS_ASSERT_MULTIDEREF_STRINGIFY assert(o)

 NV Perl_my_atof(PerlInterpreter* my_perl __attribute__((unused)), const char *s);
#define PERL_ARGS_ASSERT_MY_ATOF assert(s)

 char* Perl_my_atof2(PerlInterpreter* my_perl __attribute__((unused)), const char *orig, NV* value);
#define PERL_ARGS_ASSERT_MY_ATOF2 assert(orig); assert(value)

 char* Perl_my_atof3(PerlInterpreter* my_perl __attribute__((unused)), const char *orig, NV* value, const STRLEN len);
#define PERL_ARGS_ASSERT_MY_ATOF3 assert(orig); assert(value)

 OP * Perl_my_attrs(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *attrs);
#define PERL_ARGS_ASSERT_MY_ATTRS assert(o)

 void Perl_my_clearenv(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_MY_CLEARENV 
 int Perl_my_dirfd(DIR* dir);
#define PERL_ARGS_ASSERT_MY_DIRFD 
 void Perl_my_exit(PerlInterpreter* my_perl __attribute__((unused)), U32 status)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_MY_EXIT 

 void Perl_my_failure_exit(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_MY_FAILURE_EXIT 

 I32 Perl_my_fflush_all(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_MY_FFLUSH_ALL 
 pid_t Perl_my_fork(void);
#define PERL_ARGS_ASSERT_MY_FORK 

#define PERL_ARGS_ASSERT_MY_LSTAT 
 I32 Perl_my_lstat_flags(PerlInterpreter* my_perl __attribute__((unused)), const U32 flags);
#define PERL_ARGS_ASSERT_MY_LSTAT_FLAGS 
 int Perl_my_mkostemp_cloexec(char *templte, int flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MY_MKOSTEMP_CLOEXEC assert(templte)


 int Perl_my_mkstemp_cloexec(char *templte)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MY_MKSTEMP_CLOEXEC assert(templte)


 PerlIO* Perl_my_popen_list(PerlInterpreter* my_perl __attribute__((unused)), const char* mode, int n, SV ** args);
#define PERL_ARGS_ASSERT_MY_POPEN_LIST assert(mode); assert(args)

 void Perl_my_setenv(PerlInterpreter* my_perl __attribute__((unused)), const char* nam, const char* val);
#define PERL_ARGS_ASSERT_MY_SETENV 
 int Perl_my_snprintf(char *buffer, const size_t len, const char *format, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_MY_SNPRINTF assert(buffer); assert(format)


 int Perl_my_socketpair(int family, int type, int protocol, int fd[2]);
#define PERL_ARGS_ASSERT_MY_SOCKETPAIR 

#define PERL_ARGS_ASSERT_MY_STAT 
 I32 Perl_my_stat_flags(PerlInterpreter* my_perl __attribute__((unused)), const U32 flags);
#define PERL_ARGS_ASSERT_MY_STAT_FLAGS 
 char* Perl_my_strerror(PerlInterpreter* my_perl __attribute__((unused)), const int errnum);
#define PERL_ARGS_ASSERT_MY_STRERROR 
 char * Perl_my_strftime(PerlInterpreter* my_perl __attribute__((unused)), const char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst)
   __attribute__((format(__strftime__,2,0)));
#define PERL_ARGS_ASSERT_MY_STRFTIME assert(fmt)


 NV Perl_my_strtod(const char * const s, char ** e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MY_STRTOD assert(s)


 void Perl_my_unexec(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_MY_UNEXEC 
 int Perl_my_vsnprintf(char *buffer, const size_t len, const char *format, va_list ap);
#define PERL_ARGS_ASSERT_MY_VSNPRINTF assert(buffer); assert(format)

 OP* Perl_newANONATTRSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP *proto, OP *attrs, OP *block);
#define PERL_ARGS_ASSERT_NEWANONATTRSUB 
 OP* Perl_newANONHASH(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWANONHASH 

 OP* Perl_newANONLIST(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWANONLIST 

 OP* Perl_newANONSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* proto, OP* block);
#define PERL_ARGS_ASSERT_NEWANONSUB 
 OP* Perl_newASSIGNOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* left, I32 optype, OP* right)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWASSIGNOP 


#define PERL_ARGS_ASSERT_NEWATTRSUB 
 CV* Perl_newATTRSUB_x(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP *o, OP *proto, OP *attrs, OP *block, _Bool o_is_gv);
#define PERL_ARGS_ASSERT_NEWATTRSUB_X 

 AV* Perl_newAV(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWAV 


 OP* Perl_newAVREF(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWAVREF assert(o)


 OP* Perl_newBINOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first, OP* last)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWBINOP 

 OP* Perl_newCONDOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* first, OP* trueop, OP* falseop)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWCONDOP assert(first)


 CV* Perl_newCONSTSUB(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, SV* sv);
#define PERL_ARGS_ASSERT_NEWCONSTSUB 
 CV* Perl_newCONSTSUB_flags(PerlInterpreter* my_perl __attribute__((unused)), HV* stash, const char* name, STRLEN len, U32 flags, SV* sv);
#define PERL_ARGS_ASSERT_NEWCONSTSUB_FLAGS 
 OP* Perl_newCVREF(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWCVREF 

 OP* Perl_newDEFSVOP(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWDEFSVOP 

 void Perl_newFORM(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* o, OP* block);
#define PERL_ARGS_ASSERT_NEWFORM 
 OP* Perl_newFOROP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* sv, OP* expr, OP* block, OP* cont)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWFOROP assert(expr)


 OP* Perl_newGIVENOP(PerlInterpreter* my_perl __attribute__((unused)), OP* cond, OP* block, PADOFFSET defsv_off)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWGIVENOP assert(cond); assert(block)


 GP * Perl_newGP(PerlInterpreter* my_perl __attribute__((unused)), GV *const gv);
#define PERL_ARGS_ASSERT_NEWGP assert(gv)

 OP* Perl_newGVOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, GV* gv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWGVOP assert(gv)


 OP* Perl_newGVREF(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWGVREF 


#define PERL_ARGS_ASSERT_NEWGVGEN 
 GV* Perl_newGVgen_flags(PerlInterpreter* my_perl __attribute__((unused)), const char* pack, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWGVGEN_FLAGS assert(pack)



 HV* Perl_newHV(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWHV 


 OP* Perl_newHVREF(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWHVREF assert(o)


 HV* Perl_newHVhv(PerlInterpreter* my_perl __attribute__((unused)), HV *hv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWHVHV 


 IO* Perl_newIO(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWIO 


 OP* Perl_newLISTOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first, OP* last)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWLISTOP 

 OP* Perl_newLOGOP(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, I32 flags, OP *first, OP *other)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWLOGOP assert(first); assert(other)


 OP* Perl_newLOOPEX(PerlInterpreter* my_perl __attribute__((unused)), I32 type, OP* label)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWLOOPEX assert(label)


 OP* Perl_newLOOPOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, I32 debuggable, OP* expr, OP* block)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWLOOPOP 

 OP* Perl_newMETHOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* dynamic_meth)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWMETHOP assert(dynamic_meth)


 OP* Perl_newMETHOP_named(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, SV* const_meth)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWMETHOP_NAMED assert(const_meth)


 CV * Perl_newMYSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
#define PERL_ARGS_ASSERT_NEWMYSUB assert(o)

 OP* Perl_newNULLLIST(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWNULLLIST 

 OP* Perl_newOP(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, I32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWOP 

 PADNAMELIST * Perl_newPADNAMELIST(size_t max)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWPADNAMELIST 

 PADNAME * Perl_newPADNAMEouter(PADNAME *outer)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWPADNAMEOUTER assert(outer)


 PADNAME * Perl_newPADNAMEpvn(const char *s, STRLEN len)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWPADNAMEPVN assert(s)


 OP* Perl_newPMOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWPMOP 

 void Perl_newPROG(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_NEWPROG assert(o)

 OP* Perl_newPVOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, char* pv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWPVOP 

 OP* Perl_newRANGE(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* left, OP* right)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWRANGE assert(left); assert(right)


 SV* Perl_newRV(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWRV assert(sv)


 SV* Perl_newRV_noinc(PerlInterpreter* my_perl __attribute__((unused)), SV *const tmpRef)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWRV_NOINC assert(tmpRef)


 OP* Perl_newSLICEOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* subscript, OP* listop)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSLICEOP 

 OP* Perl_newSTATEOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, char* label, OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSTATEOP 

 CV* Perl_newSTUB(PerlInterpreter* my_perl __attribute__((unused)), GV *gv, _Bool fake);
#define PERL_ARGS_ASSERT_NEWSTUB assert(gv)


 CV* Perl_newSUB(PerlInterpreter* my_perl __attribute__((unused)), I32 floor, OP* o, OP* proto, OP* block);
#define PERL_ARGS_ASSERT_NEWSUB 

 SV* Perl_newSV(PerlInterpreter* my_perl __attribute__((unused)), const STRLEN len)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSV 

 OP* Perl_newSVOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, SV* sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVOP assert(sv)


 OP* Perl_newSVREF(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVREF assert(o)


 SV* Perl_newSV_type(PerlInterpreter* my_perl __attribute__((unused)), const svtype type)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSV_TYPE 

 SV* Perl_newSVavdefelem(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t ix, _Bool extendible)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVAVDEFELEM assert(av)


 SV* Perl_newSVhek(PerlInterpreter* my_perl __attribute__((unused)), const HEK *const hek)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVHEK 

 SV* Perl_newSViv(PerlInterpreter* my_perl __attribute__((unused)), const IV i)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVIV 

 SV* Perl_newSVnv(PerlInterpreter* my_perl __attribute__((unused)), const NV n)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVNV 

 SV* Perl_newSVpv(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, const STRLEN len)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVPV 

 SV* Perl_newSVpv_share(PerlInterpreter* my_perl __attribute__((unused)), const char* s, U32 hash)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVPV_SHARE 

 SV* Perl_newSVpvf(PerlInterpreter* my_perl __attribute__((unused)), const char *const pat, ...)
   __attribute__((warn_unused_result))
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_NEWSVPVF assert(pat)


 SV* Perl_newSVpvn(PerlInterpreter* my_perl __attribute__((unused)), const char *const buffer, const STRLEN len)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVPVN 

 SV* Perl_newSVpvn_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, const STRLEN len, const U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVPVN_FLAGS 

 SV* Perl_newSVpvn_share(PerlInterpreter* my_perl __attribute__((unused)), const char* s, I32 len, U32 hash)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVPVN_SHARE 

 SV* Perl_newSVrv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname);
#define PERL_ARGS_ASSERT_NEWSVRV assert(rv)


 SV* Perl_newSVsv(PerlInterpreter* my_perl __attribute__((unused)), SV *const old)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVSV 


 SV* Perl_newSVsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const old, I32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVSV_FLAGS 



#define PERL_ARGS_ASSERT_NEWSVSV_NOMG 

 SV* Perl_newSVuv(PerlInterpreter* my_perl __attribute__((unused)), const UV u)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWSVUV 

 OP* Perl_newTRYCATCHOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, OP* tryblock, OP *catchvar, OP* catchblock)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWTRYCATCHOP assert(tryblock); assert(catchvar); assert(catchblock)


 OP* Perl_newUNOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWUNOP 

 OP* Perl_newUNOP_AUX(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, OP* first, UNOP_AUX_item *aux)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWUNOP_AUX 

 OP* Perl_newWHENOP(PerlInterpreter* my_perl __attribute__((unused)), OP* cond, OP* block)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWWHENOP assert(block)


 OP* Perl_newWHILEOP(PerlInterpreter* my_perl __attribute__((unused)), I32 flags, I32 debuggable, LOOP* loop, OP* expr, OP* block, OP* cont, I32 has_my)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWWHILEOP 

 CV* Perl_newXS(PerlInterpreter* my_perl __attribute__((unused)), const char *name, XSUBADDR_t subaddr, const char *filename);
#define PERL_ARGS_ASSERT_NEWXS assert(subaddr); assert(filename)

 CV * Perl_newXS_deffile(PerlInterpreter* my_perl __attribute__((unused)), const char *name, XSUBADDR_t subaddr);
#define PERL_ARGS_ASSERT_NEWXS_DEFFILE assert(name); assert(subaddr)

 CV * Perl_newXS_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *name, XSUBADDR_t subaddr, const char *const filename, const char *const proto, U32 flags);
#define PERL_ARGS_ASSERT_NEWXS_FLAGS assert(subaddr); assert(filename)

 CV * Perl_newXS_len_flags(PerlInterpreter* my_perl __attribute__((unused)), const char *name, STRLEN len, XSUBADDR_t subaddr, const char *const filename, const char *const proto, SV **const_svp, U32 flags);
#define PERL_ARGS_ASSERT_NEWXS_LEN_FLAGS assert(subaddr)

 PERL_SI* Perl_new_stackinfo(PerlInterpreter* my_perl __attribute__((unused)), I32 stitems, I32 cxitems)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEW_STACKINFO 

 SV* Perl_new_version(PerlInterpreter* my_perl __attribute__((unused)), SV *ver);
#define PERL_ARGS_ASSERT_NEW_VERSION assert(ver)

 STRLEN * Perl_new_warnings_bitfield(PerlInterpreter* my_perl __attribute__((unused)), STRLEN *buffer, const char *const bits, STRLEN size)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEW_WARNINGS_BITFIELD assert(bits)


 PerlIO* Perl_nextargv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, _Bool nomagicopen);
#define PERL_ARGS_ASSERT_NEXTARGV assert(gv)

 char* Perl_ninstr(const char* big, const char* bigend, const char* little, const char* lend)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_NINSTR assert(big); assert(bigend); assert(little); assert(lend)


 void Perl_no_bareword_filehandle(PerlInterpreter* my_perl __attribute__((unused)), const char *fhname);
#define PERL_ARGS_ASSERT_NO_BAREWORD_FILEHANDLE assert(fhname)

 void Perl_noperl_die(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_NOPERL_DIE assert(pat)


 int Perl_nothreadhook(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_NOTHREADHOOK 
 void Perl_notify_parser_that_changed_to_utf8(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_NOTIFY_PARSER_THAT_CHANGED_TO_UTF8 
 OP* Perl_oopsAV(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_OOPSAV assert(o)


 OP* Perl_oopsHV(PerlInterpreter* my_perl __attribute__((unused)), OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_OOPSHV assert(o)


 OP* Perl_op_append_elem(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, OP* first, OP* last);
#define PERL_ARGS_ASSERT_OP_APPEND_ELEM 
 OP* Perl_op_append_list(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, OP* first, OP* last);
#define PERL_ARGS_ASSERT_OP_APPEND_LIST 
 OPclass Perl_op_class(PerlInterpreter* my_perl __attribute__((unused)), const OP *o);
#define PERL_ARGS_ASSERT_OP_CLASS 
 void Perl_op_clear(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_OP_CLEAR assert(o)

 OP* Perl_op_contextualize(PerlInterpreter* my_perl __attribute__((unused)), OP* o, I32 context);
#define PERL_ARGS_ASSERT_OP_CONTEXTUALIZE assert(o)

 OP* Perl_op_convert_list(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, I32 flags, OP* o)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_OP_CONVERT_LIST 

 void Perl_op_dump(PerlInterpreter* my_perl __attribute__((unused)), const OP *o);
#define PERL_ARGS_ASSERT_OP_DUMP assert(o)

 void Perl_op_free(PerlInterpreter* my_perl __attribute__((unused)), OP* arg);
#define PERL_ARGS_ASSERT_OP_FREE 
 OP* Perl_op_linklist(PerlInterpreter* my_perl __attribute__((unused)), OP *o);
#define PERL_ARGS_ASSERT_OP_LINKLIST assert(o)


#define PERL_ARGS_ASSERT_OP_LVALUE 
 OP* Perl_op_lvalue_flags(PerlInterpreter* my_perl __attribute__((unused)), OP* o, I32 type, U32 flags);
#define PERL_ARGS_ASSERT_OP_LVALUE_FLAGS 
 void Perl_op_null(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_OP_NULL assert(o)

 OP* Perl_op_parent(OP *o);
#define PERL_ARGS_ASSERT_OP_PARENT assert(o)

 OP* Perl_op_prepend_elem(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, OP* first, OP* last);
#define PERL_ARGS_ASSERT_OP_PREPEND_ELEM 
 void Perl_op_refcnt_lock(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_OP_REFCNT_LOCK 
 void Perl_op_refcnt_unlock(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_OP_REFCNT_UNLOCK 
 OP* Perl_op_scope(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_OP_SCOPE 
 OP* Perl_op_sibling_splice(OP *parent, OP *start, int del_count, OP* insert);
#define PERL_ARGS_ASSERT_OP_SIBLING_SPLICE 
 OP* Perl_op_unscope(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_OP_UNSCOPE 
 void Perl_optimize_optree(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_OPTIMIZE_OPTREE assert(o)


 void Perl_pack_cat(PerlInterpreter* my_perl __attribute__((unused)), SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_PACK_CAT assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist); assert(next_in_list)



 void Perl_package(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_PACKAGE assert(o)

 void Perl_package_version(PerlInterpreter* my_perl __attribute__((unused)), OP* v);
#define PERL_ARGS_ASSERT_PACKAGE_VERSION assert(v)

 void Perl_packlist(PerlInterpreter* my_perl __attribute__((unused)), SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist);
#define PERL_ARGS_ASSERT_PACKLIST assert(cat); assert(pat); assert(patend); assert(beglist); assert(endlist)

 PADOFFSET Perl_pad_add_anon(PerlInterpreter* my_perl __attribute__((unused)), CV* func, I32 optype);
#define PERL_ARGS_ASSERT_PAD_ADD_ANON assert(func)

 PADOFFSET Perl_pad_add_name_pv(PerlInterpreter* my_perl __attribute__((unused)), const char *name, const U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PV assert(name)

 PADOFFSET Perl_pad_add_name_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char *namepv, STRLEN namelen, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_PVN assert(namepv)

 PADOFFSET Perl_pad_add_name_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *name, U32 flags, HV *typestash, HV *ourstash);
#define PERL_ARGS_ASSERT_PAD_ADD_NAME_SV assert(name)

 void Perl_pad_add_weakref(PerlInterpreter* my_perl __attribute__((unused)), CV* func);
#define PERL_ARGS_ASSERT_PAD_ADD_WEAKREF assert(func)

 PADOFFSET Perl_pad_alloc(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, U32 tmptype);
#define PERL_ARGS_ASSERT_PAD_ALLOC 
 void Perl_pad_block_start(PerlInterpreter* my_perl __attribute__((unused)), int full);
#define PERL_ARGS_ASSERT_PAD_BLOCK_START 

 HV* Perl_pad_compname_type(PerlInterpreter* my_perl __attribute__((unused)), const PADOFFSET po)
   __attribute__((deprecated))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PAD_COMPNAME_TYPE 


 PADOFFSET Perl_pad_findmy_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* name, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_PV assert(name)

 PADOFFSET Perl_pad_findmy_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char* namepv, STRLEN namelen, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_PVN assert(namepv)

 PADOFFSET Perl_pad_findmy_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* name, U32 flags);
#define PERL_ARGS_ASSERT_PAD_FINDMY_SV assert(name)

 void Perl_pad_fixup_inner_anons(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *padlist, CV *old_cv, CV *new_cv);
#define PERL_ARGS_ASSERT_PAD_FIXUP_INNER_ANONS assert(padlist); assert(old_cv); assert(new_cv)

 void Perl_pad_free(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET po);
#define PERL_ARGS_ASSERT_PAD_FREE 
 OP * Perl_pad_leavemy(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_PAD_LEAVEMY 
 PADLIST* Perl_pad_new(PerlInterpreter* my_perl __attribute__((unused)), int flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PAD_NEW 

 void Perl_pad_push(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *padlist, int depth);
#define PERL_ARGS_ASSERT_PAD_PUSH assert(padlist)

 void Perl_pad_swipe(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET po, _Bool refadjust);
#define PERL_ARGS_ASSERT_PAD_SWIPE 
 void Perl_pad_tidy(PerlInterpreter* my_perl __attribute__((unused)), padtidy_type type);
#define PERL_ARGS_ASSERT_PAD_TIDY 
 PAD ** Perl_padlist_store(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *padlist, I32 key, PAD *val);
#define PERL_ARGS_ASSERT_PADLIST_STORE assert(padlist)

 void Perl_padname_free(PerlInterpreter* my_perl __attribute__((unused)), PADNAME *pn);
#define PERL_ARGS_ASSERT_PADNAME_FREE assert(pn)

 PADNAME * Perl_padnamelist_fetch(PADNAMELIST *pnl, ssize_t key)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PADNAMELIST_FETCH assert(pnl)


 void Perl_padnamelist_free(PerlInterpreter* my_perl __attribute__((unused)), PADNAMELIST *pnl);
#define PERL_ARGS_ASSERT_PADNAMELIST_FREE assert(pnl)

 PADNAME ** Perl_padnamelist_store(PerlInterpreter* my_perl __attribute__((unused)), PADNAMELIST *pnl, ssize_t key, PADNAME *val);
#define PERL_ARGS_ASSERT_PADNAMELIST_STORE assert(pnl)

 OP* Perl_parse_arithexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_ARITHEXPR 
 OP* Perl_parse_barestmt(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_BARESTMT 
 OP* Perl_parse_block(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_BLOCK 
 OP* Perl_parse_fullexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_FULLEXPR 
 OP* Perl_parse_fullstmt(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_FULLSTMT 
 SV* Perl_parse_label(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_LABEL 
 OP* Perl_parse_listexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_LISTEXPR 
 OP* Perl_parse_stmtseq(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_STMTSEQ 
 OP* Perl_parse_subsignature(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_SUBSIGNATURE 
 OP* Perl_parse_termexpr(PerlInterpreter* my_perl __attribute__((unused)), U32 flags);
#define PERL_ARGS_ASSERT_PARSE_TERMEXPR 
 U32 Perl_parse_unicode_opts(PerlInterpreter* my_perl __attribute__((unused)), const char **popt);
#define PERL_ARGS_ASSERT_PARSE_UNICODE_OPTS assert(popt)

 void Perl_parser_free(PerlInterpreter* my_perl __attribute__((unused)), const yy_parser *parser);
#define PERL_ARGS_ASSERT_PARSER_FREE assert(parser)

 void Perl_peep(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_PEEP 
 PerlInterpreter* perl_alloc(void);
#define PERL_ARGS_ASSERT_PERL_ALLOC 
 void perl_construct(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_CONSTRUCT assert(my_perl)

 int perl_destruct(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_DESTRUCT assert(my_perl)

 void perl_free(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_FREE assert(my_perl)

 int perl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env);
#define PERL_ARGS_ASSERT_PERL_PARSE assert(my_perl)

 int perl_run(PerlInterpreter *my_perl);
#define PERL_ARGS_ASSERT_PERL_RUN assert(my_perl)

 void Perl_perly_sighandler(int sig, Siginfo_t *info, void *uap, _Bool safe);
#define PERL_ARGS_ASSERT_PERLY_SIGHANDLER 
 void Perl_pmop_dump(PerlInterpreter* my_perl __attribute__((unused)), PMOP* pm);
#define PERL_ARGS_ASSERT_PMOP_DUMP 
 OP* Perl_pmruntime(PerlInterpreter* my_perl __attribute__((unused)), OP *o, OP *expr, OP *repl, UV flags, I32 floor);
#define PERL_ARGS_ASSERT_PMRUNTIME assert(o); assert(expr)

 void Perl_pop_scope(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_POP_SCOPE 
 void Perl_populate_isa(PerlInterpreter* my_perl __attribute__((unused)), const char *name, STRLEN len, ...);
#define PERL_ARGS_ASSERT_POPULATE_ISA assert(name)

 REGEXP* Perl_pregcomp(PerlInterpreter* my_perl __attribute__((unused)), SV * const pattern, const U32 flags);
#define PERL_ARGS_ASSERT_PREGCOMP assert(pattern)

 I32 Perl_pregexec(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const prog, char* stringarg, char* strend, char* strbeg, ssize_t minend, SV* screamer, U32 nosave);
#define PERL_ARGS_ASSERT_PREGEXEC assert(prog); assert(stringarg); assert(strend); assert(strbeg); assert(screamer)

 void Perl_pregfree(PerlInterpreter* my_perl __attribute__((unused)), REGEXP* r);
#define PERL_ARGS_ASSERT_PREGFREE 
 void Perl_pregfree2(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *rx);
#define PERL_ARGS_ASSERT_PREGFREE2 assert(rx)

 const char* Perl_prescan_version(PerlInterpreter* my_perl __attribute__((unused)), const char *s, _Bool strict, const char** errstr, _Bool *sqv, int *ssaw_decimal, int *swidth, _Bool *salpha);
#define PERL_ARGS_ASSERT_PRESCAN_VERSION assert(s)

 void Perl_ptr_table_clear(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_PTR_TABLE_CLEAR 

 void* Perl_ptr_table_fetch(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl, const void *const sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PTR_TABLE_FETCH assert(tbl)


 void Perl_ptr_table_free(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl);
#define PERL_ARGS_ASSERT_PTR_TABLE_FREE 
 PTR_TBL_t* Perl_ptr_table_new(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PTR_TABLE_NEW 

 void Perl_ptr_table_split(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl);
#define PERL_ARGS_ASSERT_PTR_TABLE_SPLIT assert(tbl)

 void Perl_ptr_table_store(PerlInterpreter* my_perl __attribute__((unused)), PTR_TBL_t *const tbl, const void *const oldsv, void *const newsv);
#define PERL_ARGS_ASSERT_PTR_TABLE_STORE assert(tbl); assert(newsv)

 void Perl_push_scope(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_PUSH_SCOPE 
 char* Perl_pv_display(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
#define PERL_ARGS_ASSERT_PV_DISPLAY assert(dsv); assert(pv)

 char* Perl_pv_escape(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags);
#define PERL_ARGS_ASSERT_PV_ESCAPE assert(str)

 char* Perl_pv_pretty(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags);
#define PERL_ARGS_ASSERT_PV_PRETTY assert(dsv); assert(str)

 char* Perl_pv_uni_display(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
#define PERL_ARGS_ASSERT_PV_UNI_DISPLAY assert(dsv); assert(spv)

 void Perl_qerror(PerlInterpreter* my_perl __attribute__((unused)), SV* err);
#define PERL_ARGS_ASSERT_QERROR assert(err)

 REGEXP* Perl_re_compile(PerlInterpreter* my_perl __attribute__((unused)), SV * const pattern, U32 orig_rx_flags);
#define PERL_ARGS_ASSERT_RE_COMPILE assert(pattern)

 char* Perl_re_intuit_start(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV* sv, const char* const strbeg, char* strpos, char* strend, const U32 flags, re_scream_pos_data *data);
#define PERL_ARGS_ASSERT_RE_INTUIT_START assert(rx); assert(strbeg); assert(strpos); assert(strend)

 SV* Perl_re_intuit_string(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *const r);
#define PERL_ARGS_ASSERT_RE_INTUIT_STRING assert(r)

 REGEXP* Perl_re_op_compile(PerlInterpreter* my_perl __attribute__((unused)), SV ** const patternp, int pat_count, OP *expr, const regexp_engine* eng, REGEXP *old_re, _Bool *is_bare_re, const U32 rx_flags, const U32 pm_flags);
#define PERL_ARGS_ASSERT_RE_OP_COMPILE assert(eng)

 void * Perl_realloc(void * where, size_t nbytes)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_REALLOC 

 void Perl_reentrant_free(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_REENTRANT_FREE 
 void Perl_reentrant_init(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_REENTRANT_INIT 
 void* Perl_reentrant_retry(const char *f, ...);
#define PERL_ARGS_ASSERT_REENTRANT_RETRY assert(f)

 void Perl_reentrant_size(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_REENTRANT_SIZE 
 HV * Perl_refcounted_he_chain_2hv(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *c, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_CHAIN_2HV 
 SV * Perl_refcounted_he_fetch_pv(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *chain, const char *key, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PV assert(key)

 SV * Perl_refcounted_he_fetch_pvn(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *chain, const char *keypv, STRLEN keylen, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_PVN assert(keypv)

 SV * Perl_refcounted_he_fetch_sv(PerlInterpreter* my_perl __attribute__((unused)), const struct refcounted_he *chain, SV *key, U32 hash, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FETCH_SV assert(key)

 void Perl_refcounted_he_free(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *he);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_FREE 
 struct refcounted_he * Perl_refcounted_he_inc(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *he);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_INC 
 struct refcounted_he * Perl_refcounted_he_new_pv(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *parent, const char *key, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PV assert(key)

 struct refcounted_he * Perl_refcounted_he_new_pvn(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *parent, const char *keypv, STRLEN keylen, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_PVN assert(keypv)

 struct refcounted_he * Perl_refcounted_he_new_sv(PerlInterpreter* my_perl __attribute__((unused)), struct refcounted_he *parent, SV *key, U32 hash, SV *value, U32 flags);
#define PERL_ARGS_ASSERT_REFCOUNTED_HE_NEW_SV assert(key)

 SV* Perl_reg_named_buff(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const key, SV * const value, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF assert(rx)

 SV* Perl_reg_named_buff_all(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ALL assert(rx)

 _Bool Perl_reg_named_buff_exists(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const key, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_EXISTS assert(rx); assert(key)

 SV* Perl_reg_named_buff_fetch(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, SV * const namesv, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FETCH assert(rx); assert(namesv)

 SV* Perl_reg_named_buff_firstkey(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_FIRSTKEY assert(rx)

 SV* Perl_reg_named_buff_iter(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const lastkey, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_ITER assert(rx)

 SV* Perl_reg_named_buff_nextkey(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_NEXTKEY assert(rx)

 SV* Perl_reg_named_buff_scalar(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const U32 flags);
#define PERL_ARGS_ASSERT_REG_NAMED_BUFF_SCALAR assert(rx)

 void Perl_reg_numbered_buff_fetch(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren, SV * const sv);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_FETCH assert(rx)

 I32 Perl_reg_numbered_buff_length(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const SV * const sv, const I32 paren);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_LENGTH assert(rx); assert(sv)

 void Perl_reg_numbered_buff_store(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx, const I32 paren, SV const * const value);
#define PERL_ARGS_ASSERT_REG_NUMBERED_BUFF_STORE assert(rx)

 SV* Perl_reg_qr_package(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const rx);
#define PERL_ARGS_ASSERT_REG_QR_PACKAGE assert(rx)

 REGEXP* Perl_reg_temp_copy(PerlInterpreter* my_perl __attribute__((unused)), REGEXP* dsv, REGEXP* ssv);
#define PERL_ARGS_ASSERT_REG_TEMP_COPY assert(ssv)

 void Perl_regdump(PerlInterpreter* my_perl __attribute__((unused)), const regexp* r);
#define PERL_ARGS_ASSERT_REGDUMP assert(r)

 I32 Perl_regexec_flags(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *const rx, char *stringarg, char *strend, char *strbeg, ssize_t minend, SV *sv, void *data, U32 flags);
#define PERL_ARGS_ASSERT_REGEXEC_FLAGS assert(rx); assert(stringarg); assert(strend); assert(strbeg); assert(sv)

 void Perl_regfree_internal(PerlInterpreter* my_perl __attribute__((unused)), REGEXP *const rx);
#define PERL_ARGS_ASSERT_REGFREE_INTERNAL assert(rx)

 void Perl_reginitcolors(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_REGINITCOLORS 
 regnode* Perl_regnext(PerlInterpreter* my_perl __attribute__((unused)), regnode* p)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_REGNEXT 

 void Perl_repeatcpy(char* to, const char* from, I32 len, IV count);
#define PERL_ARGS_ASSERT_REPEATCPY assert(to); assert(from)

 void Perl_report_evil_fh(PerlInterpreter* my_perl __attribute__((unused)), const GV *gv);
#define PERL_ARGS_ASSERT_REPORT_EVIL_FH 
 void Perl_report_uninit(PerlInterpreter* my_perl __attribute__((unused)), const SV *uninit_sv);
#define PERL_ARGS_ASSERT_REPORT_UNINIT 
 void Perl_report_wrongway_fh(PerlInterpreter* my_perl __attribute__((unused)), const GV *gv, const char have);
#define PERL_ARGS_ASSERT_REPORT_WRONGWAY_FH 
 void Perl_require_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv);
#define PERL_ARGS_ASSERT_REQUIRE_PV assert(pv)

 char* Perl_rninstr(const char* big, const char* bigend, const char* little, const char* lend)
   __attribute__((warn_unused_result))
   __attribute__((pure));
#define PERL_ARGS_ASSERT_RNINSTR assert(big); assert(bigend); assert(little); assert(lend)


 void Perl_rpeep(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_RPEEP 
 Sighandler_t Perl_rsignal(PerlInterpreter* my_perl __attribute__((unused)), int i, Sighandler_t t);
#define PERL_ARGS_ASSERT_RSIGNAL 
 int Perl_rsignal_restore(PerlInterpreter* my_perl __attribute__((unused)), int i, Sigsave_t* t);
#define PERL_ARGS_ASSERT_RSIGNAL_RESTORE 
 int Perl_rsignal_save(PerlInterpreter* my_perl __attribute__((unused)), int i, Sighandler_t t1, Sigsave_t* save);
#define PERL_ARGS_ASSERT_RSIGNAL_SAVE assert(save)

 Sighandler_t Perl_rsignal_state(PerlInterpreter* my_perl __attribute__((unused)), int i);
#define PERL_ARGS_ASSERT_RSIGNAL_STATE 
 int Perl_runops_debug(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_RUNOPS_DEBUG 
 int Perl_runops_standard(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_RUNOPS_STANDARD 
 CV* Perl_rv2cv_op_cv(PerlInterpreter* my_perl __attribute__((unused)), OP *cvop, U32 flags);
#define PERL_ARGS_ASSERT_RV2CV_OP_CV assert(cvop)

 void Perl_rxres_save(PerlInterpreter* my_perl __attribute__((unused)), void **rsp, REGEXP *rx);
#define PERL_ARGS_ASSERT_RXRES_SAVE assert(rsp); assert(rx)

 void * Perl_safesyscalloc(size_t elements, size_t size)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAFESYSCALLOC 

 void Perl_safesysfree(void * where);
#define PERL_ARGS_ASSERT_SAFESYSFREE 
 void * Perl_safesysmalloc(size_t nbytes)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAFESYSMALLOC 

 void * Perl_safesysrealloc(void * where, size_t nbytes)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAFESYSREALLOC 

 void Perl_save_I16(PerlInterpreter* my_perl __attribute__((unused)), I16* intp);
#define PERL_ARGS_ASSERT_SAVE_I16 assert(intp)

 void Perl_save_I32(PerlInterpreter* my_perl __attribute__((unused)), I32* intp);
#define PERL_ARGS_ASSERT_SAVE_I32 assert(intp)

 void Perl_save_I8(PerlInterpreter* my_perl __attribute__((unused)), I8* bytep);
#define PERL_ARGS_ASSERT_SAVE_I8 assert(bytep)

 void Perl_save_adelete(PerlInterpreter* my_perl __attribute__((unused)), AV *av, ssize_t key);
#define PERL_ARGS_ASSERT_SAVE_ADELETE assert(av)


#define PERL_ARGS_ASSERT_SAVE_AELEM 
 void Perl_save_aelem_flags(PerlInterpreter* my_perl __attribute__((unused)), AV* av, ssize_t idx, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_AELEM_FLAGS assert(av); assert(sptr)

 I32 Perl_save_alloc(PerlInterpreter* my_perl __attribute__((unused)), I32 size, I32 pad);
#define PERL_ARGS_ASSERT_SAVE_ALLOC 
 void Perl_save_aptr(PerlInterpreter* my_perl __attribute__((unused)), AV** aptr);
#define PERL_ARGS_ASSERT_SAVE_APTR assert(aptr)

 AV* Perl_save_ary(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_SAVE_ARY assert(gv)

 void Perl_save_bool(PerlInterpreter* my_perl __attribute__((unused)), _Bool* boolp);
#define PERL_ARGS_ASSERT_SAVE_BOOL assert(boolp)

 void Perl_save_clearsv(PerlInterpreter* my_perl __attribute__((unused)), SV** svp);
#define PERL_ARGS_ASSERT_SAVE_CLEARSV assert(svp)

 void Perl_save_delete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, char *key, I32 klen);
#define PERL_ARGS_ASSERT_SAVE_DELETE assert(hv); assert(key)

 void Perl_save_destructor(PerlInterpreter* my_perl __attribute__((unused)), DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR assert(p)

 void Perl_save_destructor_x(PerlInterpreter* my_perl __attribute__((unused)), DESTRUCTORFUNC_t f, void* p);
#define PERL_ARGS_ASSERT_SAVE_DESTRUCTOR_X 

 void Perl_save_freeop(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_SAVE_FREEOP 


 void Perl_save_freepv(PerlInterpreter* my_perl __attribute__((unused)), char* pv);
#define PERL_ARGS_ASSERT_SAVE_FREEPV 


 void Perl_save_freesv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SAVE_FREESV 

 void Perl_save_generic_pvref(PerlInterpreter* my_perl __attribute__((unused)), char** str);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_PVREF assert(str)

 void Perl_save_generic_svref(PerlInterpreter* my_perl __attribute__((unused)), SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_GENERIC_SVREF assert(sptr)

 void Perl_save_gp(PerlInterpreter* my_perl __attribute__((unused)), GV* gv, I32 empty);
#define PERL_ARGS_ASSERT_SAVE_GP assert(gv)

 HV* Perl_save_hash(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_SAVE_HASH assert(gv)

 void Perl_save_hdelete(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *keysv);
#define PERL_ARGS_ASSERT_SAVE_HDELETE assert(hv); assert(keysv)


#define PERL_ARGS_ASSERT_SAVE_HELEM 
 void Perl_save_helem_flags(PerlInterpreter* my_perl __attribute__((unused)), HV *hv, SV *key, SV **sptr, const U32 flags);
#define PERL_ARGS_ASSERT_SAVE_HELEM_FLAGS assert(hv); assert(key); assert(sptr)

 void Perl_save_hints(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SAVE_HINTS 
 void Perl_save_hptr(PerlInterpreter* my_perl __attribute__((unused)), HV** hptr);
#define PERL_ARGS_ASSERT_SAVE_HPTR assert(hptr)

 void Perl_save_int(PerlInterpreter* my_perl __attribute__((unused)), int* intp);
#define PERL_ARGS_ASSERT_SAVE_INT assert(intp)

 void Perl_save_item(PerlInterpreter* my_perl __attribute__((unused)), SV* item);
#define PERL_ARGS_ASSERT_SAVE_ITEM assert(item)

 void Perl_save_iv(PerlInterpreter* my_perl __attribute__((unused)), IV *ivp);
#define PERL_ARGS_ASSERT_SAVE_IV assert(ivp)


 void Perl_save_list(PerlInterpreter* my_perl __attribute__((unused)), SV** sarg, I32 maxsarg)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SAVE_LIST assert(sarg)




 void Perl_save_long(PerlInterpreter* my_perl __attribute__((unused)), long* longp)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SAVE_LONG assert(longp)




 void Perl_save_mortalizesv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SAVE_MORTALIZESV assert(sv)



 void Perl_save_nogv(PerlInterpreter* my_perl __attribute__((unused)), GV* gv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SAVE_NOGV assert(gv)




 void Perl_save_op(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SAVE_OP 

 void Perl_save_padsv_and_mortalize(PerlInterpreter* my_perl __attribute__((unused)), PADOFFSET off);
#define PERL_ARGS_ASSERT_SAVE_PADSV_AND_MORTALIZE 
 void Perl_save_pptr(PerlInterpreter* my_perl __attribute__((unused)), char** pptr);
#define PERL_ARGS_ASSERT_SAVE_PPTR assert(pptr)

 void Perl_save_pushi32ptr(PerlInterpreter* my_perl __attribute__((unused)), const I32 i, void *const ptr, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHI32PTR 
 void Perl_save_pushptr(PerlInterpreter* my_perl __attribute__((unused)), void *const ptr, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHPTR 
 void Perl_save_pushptrptr(PerlInterpreter* my_perl __attribute__((unused)), void *const ptr1, void *const ptr2, const int type);
#define PERL_ARGS_ASSERT_SAVE_PUSHPTRPTR 
 void Perl_save_re_context(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SAVE_RE_CONTEXT 
 SV* Perl_save_scalar(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_SAVE_SCALAR assert(gv)

 void Perl_save_set_svflags(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, U32 mask, U32 val);
#define PERL_ARGS_ASSERT_SAVE_SET_SVFLAGS assert(sv)

 void Perl_save_shared_pvref(PerlInterpreter* my_perl __attribute__((unused)), char** str);
#define PERL_ARGS_ASSERT_SAVE_SHARED_PVREF assert(str)

 void Perl_save_sptr(PerlInterpreter* my_perl __attribute__((unused)), SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_SPTR assert(sptr)

 void Perl_save_strlen(PerlInterpreter* my_perl __attribute__((unused)), STRLEN* ptr);
#define PERL_ARGS_ASSERT_SAVE_STRLEN assert(ptr)

 SV* Perl_save_svref(PerlInterpreter* my_perl __attribute__((unused)), SV** sptr);
#define PERL_ARGS_ASSERT_SAVE_SVREF assert(sptr)

 void Perl_save_vptr(PerlInterpreter* my_perl __attribute__((unused)), void *ptr);
#define PERL_ARGS_ASSERT_SAVE_VPTR assert(ptr)

 char* Perl_savepv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAVEPV 

 char* Perl_savepvn(PerlInterpreter* my_perl __attribute__((unused)), const char* pv, size_t len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAVEPVN 

 char* Perl_savesharedpv(PerlInterpreter* my_perl __attribute__((unused)), const char* pv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAVESHAREDPV 

 char* Perl_savesharedpvn(PerlInterpreter* my_perl __attribute__((unused)), const char *const pv, const STRLEN len)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAVESHAREDPVN 

 char* Perl_savesharedsvpv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAVESHAREDSVPV assert(sv)


 void Perl_savestack_grow(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SAVESTACK_GROW 
 void Perl_savestack_grow_cnt(PerlInterpreter* my_perl __attribute__((unused)), I32 need);
#define PERL_ARGS_ASSERT_SAVESTACK_GROW_CNT 
 char* Perl_savesvpv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((__malloc__))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SAVESVPV assert(sv)


 void Perl_savetmps(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SAVETMPS 
 OP* Perl_sawparens(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_SAWPARENS 
 OP* Perl_scalar(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_SCALAR 
 OP* Perl_scalarvoid(PerlInterpreter* my_perl __attribute__((unused)), OP* o);
#define PERL_ARGS_ASSERT_SCALARVOID assert(o)

 NV Perl_scan_bin(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_BIN assert(start); assert(retlen)

 NV Perl_scan_hex(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_HEX assert(start); assert(retlen)

 char* Perl_scan_num(PerlInterpreter* my_perl __attribute__((unused)), const char* s, YYSTYPE *lvalp);
#define PERL_ARGS_ASSERT_SCAN_NUM assert(s); assert(lvalp)

 NV Perl_scan_oct(PerlInterpreter* my_perl __attribute__((unused)), const char* start, STRLEN len, STRLEN* retlen);
#define PERL_ARGS_ASSERT_SCAN_OCT assert(start); assert(retlen)

 char* Perl_scan_str(PerlInterpreter* my_perl __attribute__((unused)), char *start, int keep_quoted, int keep_delims, int re_reparse, char **delimp)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SCAN_STR assert(start)


 const char* Perl_scan_version(PerlInterpreter* my_perl __attribute__((unused)), const char *s, SV *rv, _Bool qv);
#define PERL_ARGS_ASSERT_SCAN_VERSION assert(s); assert(rv)

 char* Perl_scan_vstring(PerlInterpreter* my_perl __attribute__((unused)), const char *s, const char *const e, SV *sv);
#define PERL_ARGS_ASSERT_SCAN_VSTRING assert(s); assert(e); assert(sv)

 char* Perl_scan_word(PerlInterpreter* my_perl __attribute__((unused)), char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
#define PERL_ARGS_ASSERT_SCAN_WORD assert(s); assert(dest); assert(slp)

 U32 Perl_seed(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SEED 
 void Perl_set_caret_X(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SET_CARET_X 
 void Perl_set_context(void *t);
#define PERL_ARGS_ASSERT_SET_CONTEXT assert(t)

 void Perl_set_numeric_standard(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SET_NUMERIC_STANDARD 
 void Perl_set_numeric_underlying(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SET_NUMERIC_UNDERLYING 
 void Perl_setdefout(PerlInterpreter* my_perl __attribute__((unused)), GV* gv);
#define PERL_ARGS_ASSERT_SETDEFOUT assert(gv)

 void Perl_setfd_cloexec(int fd);
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC 
 void Perl_setfd_cloexec_for_nonsysfd(PerlInterpreter* my_perl __attribute__((unused)), int fd);
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC_FOR_NONSYSFD 
 void Perl_setfd_cloexec_or_inhexec_by_sysfdness(PerlInterpreter* my_perl __attribute__((unused)), int fd);
#define PERL_ARGS_ASSERT_SETFD_CLOEXEC_OR_INHEXEC_BY_SYSFDNESS 
 void Perl_setfd_inhexec(int fd);
#define PERL_ARGS_ASSERT_SETFD_INHEXEC 
 void Perl_setfd_inhexec_for_sysfd(PerlInterpreter* my_perl __attribute__((unused)), int fd);
#define PERL_ARGS_ASSERT_SETFD_INHEXEC_FOR_SYSFD 
 HEK* Perl_share_hek(PerlInterpreter* my_perl __attribute__((unused)), const char* str, ssize_t len, U32 hash);
#define PERL_ARGS_ASSERT_SHARE_HEK assert(str)

 void Perl_sighandler1(int sig);
#define PERL_ARGS_ASSERT_SIGHANDLER1 
 void Perl_sighandler3(int sig, Siginfo_t *info, void *uap);
#define PERL_ARGS_ASSERT_SIGHANDLER3 
 char* Perl_skipspace_flags(PerlInterpreter* my_perl __attribute__((unused)), char *s, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SKIPSPACE_FLAGS assert(s)


 void Perl_sortsv(PerlInterpreter* my_perl __attribute__((unused)), SV** array, size_t num_elts, SVCOMPARE_t cmp);
#define PERL_ARGS_ASSERT_SORTSV assert(cmp)

 void Perl_sortsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags);
#define PERL_ARGS_ASSERT_SORTSV_FLAGS assert(cmp)

 SV** Perl_stack_grow(PerlInterpreter* my_perl __attribute__((unused)), SV** sp, SV** p, ssize_t n);
#define PERL_ARGS_ASSERT_STACK_GROW assert(sp); assert(p)

 PerlIO* Perl_start_glob(PerlInterpreter* my_perl __attribute__((unused)), SV *tmpglob, IO *io);
#define PERL_ARGS_ASSERT_START_GLOB assert(tmpglob); assert(io)

 I32 Perl_start_subparse(PerlInterpreter* my_perl __attribute__((unused)), I32 is_format, U32 flags);
#define PERL_ARGS_ASSERT_START_SUBPARSE 
 NV Perl_str_to_version(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_STR_TO_VERSION assert(sv)


 void Perl_sub_crush_depth(PerlInterpreter* my_perl __attribute__((unused)), CV* cv);
#define PERL_ARGS_ASSERT_SUB_CRUSH_DEPTH assert(cv)


 _Bool Perl_sv_2bool(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_2BOOL assert(sv)


 _Bool Perl_sv_2bool_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, I32 flags);
#define PERL_ARGS_ASSERT_SV_2BOOL_FLAGS assert(sv)

 CV* Perl_sv_2cv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, HV **const st, GV **const gvp, const I32 lref);
#define PERL_ARGS_ASSERT_SV_2CV assert(st); assert(gvp)

 IO* Perl_sv_2io(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_2IO assert(sv)


 IV Perl_sv_2iv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_2IV assert(sv)


 IV Perl_sv_2iv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2IV_FLAGS assert(sv)

 SV* Perl_sv_2mortal(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_2MORTAL 
 SV* Perl_sv_2num(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_2NUM assert(sv)

 NV Perl_sv_2nv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2NV_FLAGS assert(sv)


 char* Perl_sv_2pv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp);
#define PERL_ARGS_ASSERT_SV_2PV assert(sv)


 char* Perl_sv_2pv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PV_FLAGS assert(sv)


 char* Perl_sv_2pv_nolen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_2PV_NOLEN assert(sv)




 char* Perl_sv_2pvbyte(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_2PVBYTE assert(sv)


 char* Perl_sv_2pvbyte_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PVBYTE_FLAGS assert(sv)


 char* Perl_sv_2pvbyte_nolen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_2PVBYTE_NOLEN assert(sv)




 char* Perl_sv_2pvutf8(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_2PVUTF8 assert(sv)


 char* Perl_sv_2pvutf8_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_2PVUTF8_FLAGS assert(sv)


 char* Perl_sv_2pvutf8_nolen(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_2PVUTF8_NOLEN assert(sv)




 UV Perl_sv_2uv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_2UV assert(sv)


 UV Perl_sv_2uv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_2UV_FLAGS assert(sv)

 void Perl_sv_backoff(SV *const sv);
#define PERL_ARGS_ASSERT_SV_BACKOFF assert(sv)

 SV* Perl_sv_bless(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, HV *const stash);
#define PERL_ARGS_ASSERT_SV_BLESS assert(sv); assert(stash)

 _Bool Perl_sv_cat_decode(PerlInterpreter* my_perl __attribute__((unused)), SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
#define PERL_ARGS_ASSERT_SV_CAT_DECODE assert(dsv); assert(encoding); assert(ssv); assert(offset); assert(tstr)

 void Perl_sv_catpv(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, const char* sstr);
#define PERL_ARGS_ASSERT_SV_CATPV assert(dsv)

 void Perl_sv_catpv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const char *sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPV_FLAGS assert(dsv); assert(sstr)

 void Perl_sv_catpv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, const char *const sstr);
#define PERL_ARGS_ASSERT_SV_CATPV_MG assert(dsv)

 void Perl_sv_catpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_SV_CATPVF assert(sv); assert(pat)


 void Perl_sv_catpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_SV_CATPVF_MG assert(sv); assert(pat)



 void Perl_sv_catpvn(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const char *sstr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_CATPVN assert(dsv); assert(sstr)


 void Perl_sv_catpvn_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, const char *sstr, const STRLEN len, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATPVN_FLAGS assert(dsv); assert(sstr)


 void Perl_sv_catpvn_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, const char *sstr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_CATPVN_MG assert(dsv); assert(sstr)



 void Perl_sv_catsv(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, SV *sstr);
#define PERL_ARGS_ASSERT_SV_CATSV assert(dsv)


 void Perl_sv_catsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const sstr, const I32 flags);
#define PERL_ARGS_ASSERT_SV_CATSV_FLAGS assert(dsv)


 void Perl_sv_catsv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, SV *sstr);
#define PERL_ARGS_ASSERT_SV_CATSV_MG assert(dsv)


 void Perl_sv_chop(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_CHOP assert(sv)

 I32 Perl_sv_clean_all(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SV_CLEAN_ALL 
 void Perl_sv_clean_objs(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SV_CLEAN_OBJS 
 void Perl_sv_clear(PerlInterpreter* my_perl __attribute__((unused)), SV *const orig_sv);
#define PERL_ARGS_ASSERT_SV_CLEAR assert(orig_sv)

 I32 Perl_sv_cmp(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2);
#define PERL_ARGS_ASSERT_SV_CMP 
 I32 Perl_sv_cmp_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_CMP_FLAGS 
 I32 Perl_sv_cmp_locale(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2);
#define PERL_ARGS_ASSERT_SV_CMP_LOCALE 
 I32 Perl_sv_cmp_locale_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv1, SV *const sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_CMP_LOCALE_FLAGS 

 void Perl_sv_copypv(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const ssv);
#define PERL_ARGS_ASSERT_SV_COPYPV assert(dsv); assert(ssv)


 void Perl_sv_copypv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_COPYPV_FLAGS assert(dsv); assert(ssv)


#define PERL_ARGS_ASSERT_SV_COPYPV_NOMG 
 void Perl_sv_dec(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEC 
 void Perl_sv_dec_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEC_NOMG 
 void Perl_sv_del_backref(PerlInterpreter* my_perl __attribute__((unused)), SV *const tsv, SV *const sv);
#define PERL_ARGS_ASSERT_SV_DEL_BACKREF assert(tsv); assert(sv)

 _Bool Perl_sv_derived_from(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM assert(sv); assert(name)


 _Bool Perl_sv_derived_from_pv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PV assert(sv); assert(name)


 _Bool Perl_sv_derived_from_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, const STRLEN len, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_PVN assert(sv); assert(name)


 _Bool Perl_sv_derived_from_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV *namesv, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DERIVED_FROM_SV assert(sv); assert(namesv)


 _Bool Perl_sv_destroyable(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_DESTROYABLE 
 _Bool Perl_sv_does(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DOES assert(sv); assert(name)


 _Bool Perl_sv_does_pv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DOES_PV assert(sv); assert(name)


 _Bool Perl_sv_does_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name, const STRLEN len, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DOES_PVN assert(sv); assert(name)


 _Bool Perl_sv_does_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV* namesv, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DOES_SV assert(sv); assert(namesv)


 void Perl_sv_dump(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SV_DUMP 

 I32 Perl_sv_eq(PerlInterpreter* my_perl __attribute__((unused)), SV* sv1, SV* sv2);
#define PERL_ARGS_ASSERT_SV_EQ 

 I32 Perl_sv_eq_flags(PerlInterpreter* my_perl __attribute__((unused)), SV* sv1, SV* sv2, const U32 flags);
#define PERL_ARGS_ASSERT_SV_EQ_FLAGS 

 void Perl_sv_force_normal(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL assert(sv)


 void Perl_sv_force_normal_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const U32 flags);
#define PERL_ARGS_ASSERT_SV_FORCE_NORMAL_FLAGS assert(sv)

 void Perl_sv_free(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_FREE 
 void Perl_sv_free2(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const U32 refcnt);
#define PERL_ARGS_ASSERT_SV_FREE2 assert(sv)

 void Perl_sv_free_arenas(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SV_FREE_ARENAS 
 SV* Perl_sv_get_backrefs(SV *const sv);
#define PERL_ARGS_ASSERT_SV_GET_BACKREFS assert(sv)

 char* Perl_sv_gets(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, PerlIO *const fp, I32 append);
#define PERL_ARGS_ASSERT_SV_GETS assert(sv); assert(fp)

 char* Perl_sv_grow(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN newlen);
#define PERL_ARGS_ASSERT_SV_GROW assert(sv)

 void Perl_sv_inc(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_INC 
 void Perl_sv_inc_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_INC_NOMG 

 void Perl_sv_insert(PerlInterpreter* my_perl __attribute__((unused)), SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen);
#define PERL_ARGS_ASSERT_SV_INSERT assert(bigstr); assert(little)


 void Perl_sv_insert_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const bigstr, const STRLEN offset, const STRLEN len, const char *little, const STRLEN littlelen, const U32 flags);
#define PERL_ARGS_ASSERT_SV_INSERT_FLAGS assert(bigstr); assert(little)

 int Perl_sv_isa(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, const char *const name);
#define PERL_ARGS_ASSERT_SV_ISA assert(name)

 _Bool Perl_sv_isa_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV* namesv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_ISA_SV assert(sv); assert(namesv)


 int Perl_sv_isobject(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SV_ISOBJECT 

 IV Perl_sv_iv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_IV assert(sv)



 STRLEN Perl_sv_len(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN 
 STRLEN Perl_sv_len_utf8(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8 
 STRLEN Perl_sv_len_utf8_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_LEN_UTF8_NOMG assert(sv)

 void Perl_sv_magic(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, SV *const obj, const int how, const char *const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGIC assert(sv)

 MAGIC * Perl_sv_magicext(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, SV *const obj, const int how, const MGVTBL *const vtbl, const char *const name, const I32 namlen);
#define PERL_ARGS_ASSERT_SV_MAGICEXT assert(sv)

 MAGIC * Perl_sv_magicext_mglob(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_MAGICEXT_MGLOB assert(sv)


 SV* Perl_sv_mortalcopy(PerlInterpreter* my_perl __attribute__((unused)), SV *const oldsv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_MORTALCOPY 


 SV* Perl_sv_mortalcopy_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const oldsv, U32 flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_MORTALCOPY_FLAGS 

 SV* Perl_sv_newmortal(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_NEWMORTAL 

 SV* Perl_sv_newref(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_NEWREF 

 void Perl_sv_nolocking(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_NOLOCKING 


 void Perl_sv_nosharing(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_NOSHARING 

 void Perl_sv_nounlocking(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_NOUNLOCKING 



 NV Perl_sv_nv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_NV assert(sv)




static __inline__ _Bool Perl_sv_only_taint_gmagic(SV *sv);
#define PERL_ARGS_ASSERT_SV_ONLY_TAINT_GMAGIC assert(sv)


 char* Perl_sv_peek(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SV_PEEK 
 void Perl_sv_pos_b2u(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, I32 *const offsetp);
#define PERL_ARGS_ASSERT_SV_POS_B2U assert(offsetp)

 STRLEN Perl_sv_pos_b2u_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN const offset, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_B2U_FLAGS assert(sv)

 void Perl_sv_pos_u2b(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, I32 *const offsetp, I32 *const lenp);
#define PERL_ARGS_ASSERT_SV_POS_U2B assert(offsetp)

 STRLEN Perl_sv_pos_u2b_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN uoffset, STRLEN *const lenp, U32 flags);
#define PERL_ARGS_ASSERT_SV_POS_U2B_FLAGS assert(sv)


 char* Perl_sv_pv(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_PV assert(sv)




 char* Perl_sv_pvbyte(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_PVBYTE assert(sv)




 char* Perl_sv_pvbyten(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_PVBYTEN assert(sv); assert(lp)



 char* Perl_sv_pvbyten_force(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_PVBYTEN_FORCE assert(sv)


 char* Perl_sv_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_PVN assert(sv); assert(lp)




 char* Perl_sv_pvn_force(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, STRLEN* lp);
#define PERL_ARGS_ASSERT_SV_PVN_FORCE assert(sv)


 char* Perl_sv_pvn_force_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp, const U32 flags);
#define PERL_ARGS_ASSERT_SV_PVN_FORCE_FLAGS assert(sv)


 char* Perl_sv_pvn_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, STRLEN* lp)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_PVN_NOMG assert(sv)




 char* Perl_sv_pvutf8(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_PVUTF8 assert(sv)




 char* Perl_sv_pvutf8n(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, STRLEN *lp)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_PVUTF8N assert(sv); assert(lp)



 char* Perl_sv_pvutf8n_force(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const lp);
#define PERL_ARGS_ASSERT_SV_PVUTF8N_FORCE assert(sv)

 char* Perl_sv_recode_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, SV *encoding);
#define PERL_ARGS_ASSERT_SV_RECODE_TO_UTF8 assert(sv); assert(encoding)

 SV* Perl_sv_ref(PerlInterpreter* my_perl __attribute__((unused)), SV *dst, const SV *const sv, const int ob);
#define PERL_ARGS_ASSERT_SV_REF assert(sv)

 const char* Perl_sv_reftype(PerlInterpreter* my_perl __attribute__((unused)), const SV *const sv, const int ob)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_REFTYPE assert(sv)


 void Perl_sv_replace(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, SV *const nsv);
#define PERL_ARGS_ASSERT_SV_REPLACE assert(sv); assert(nsv)

 void Perl_sv_report_used(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_SV_REPORT_USED 
 void Perl_sv_reset(PerlInterpreter* my_perl __attribute__((unused)), const char* s, HV *const stash);
#define PERL_ARGS_ASSERT_SV_RESET assert(s)

 void Perl_sv_resetpvn(PerlInterpreter* my_perl __attribute__((unused)), const char* s, STRLEN len, HV *const stash);
#define PERL_ARGS_ASSERT_SV_RESETPVN 
 SV* Perl_sv_rvunweaken(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_RVUNWEAKEN assert(sv)

 SV* Perl_sv_rvweaken(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_RVWEAKEN assert(sv)

 void Perl_sv_set_undef(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_SET_UNDEF assert(sv)

 void Perl_sv_sethek(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const HEK *const hek);
#define PERL_ARGS_ASSERT_SV_SETHEK assert(sv)

 void Perl_sv_setiv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV num);
#define PERL_ARGS_ASSERT_SV_SETIV assert(sv)

 void Perl_sv_setiv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV i);
#define PERL_ARGS_ASSERT_SV_SETIV_MG assert(sv)

 void Perl_sv_setnv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV assert(sv)

 void Perl_sv_setnv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const NV num);
#define PERL_ARGS_ASSERT_SV_SETNV_MG assert(sv)

 void Perl_sv_setpv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV assert(sv)

 char * Perl_sv_setpv_bufsize(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const STRLEN cur, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPV_BUFSIZE assert(sv)

 void Perl_sv_setpv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr);
#define PERL_ARGS_ASSERT_SV_SETPV_MG assert(sv)

 void Perl_sv_setpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_SV_SETPVF assert(sv); assert(pat)


 void Perl_sv_setpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_SV_SETPVF_MG assert(sv); assert(pat)



 void Perl_sv_setpviv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV num)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_SETPVIV assert(sv)




 void Perl_sv_setpviv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const IV iv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_SETPVIV_MG assert(sv)



 void Perl_sv_setpvn(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN assert(sv)

 void Perl_sv_setpvn_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const ptr, const STRLEN len);
#define PERL_ARGS_ASSERT_SV_SETPVN_MG assert(sv); assert(ptr)

 SV* Perl_sv_setref_iv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const IV iv);
#define PERL_ARGS_ASSERT_SV_SETREF_IV assert(rv)

 SV* Perl_sv_setref_nv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const NV nv);
#define PERL_ARGS_ASSERT_SV_SETREF_NV assert(rv)

 SV* Perl_sv_setref_pv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, void *const pv);
#define PERL_ARGS_ASSERT_SV_SETREF_PV assert(rv)

 SV* Perl_sv_setref_pvn(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const char *const pv, const STRLEN n);
#define PERL_ARGS_ASSERT_SV_SETREF_PVN assert(rv); assert(pv)

 SV* Perl_sv_setref_uv(PerlInterpreter* my_perl __attribute__((unused)), SV *const rv, const char *const classname, const UV uv);
#define PERL_ARGS_ASSERT_SV_SETREF_UV assert(rv)


 void Perl_sv_setsv(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, SV *ssv);
#define PERL_ARGS_ASSERT_SV_SETSV assert(dsv)


 void Perl_sv_setsv_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, SV *ssv, const I32 flags);
#define PERL_ARGS_ASSERT_SV_SETSV_FLAGS assert(dsv)

 void Perl_sv_setsv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, SV *const ssv);
#define PERL_ARGS_ASSERT_SV_SETSV_MG assert(dsv)

 void Perl_sv_setuv(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const UV num);
#define PERL_ARGS_ASSERT_SV_SETUV assert(sv)

 void Perl_sv_setuv_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const UV u);
#define PERL_ARGS_ASSERT_SV_SETUV_MG assert(sv)

 SV* Perl_sv_string_from_errnum(PerlInterpreter* my_perl __attribute__((unused)), int errnum, SV* tgtsv);
#define PERL_ARGS_ASSERT_SV_STRING_FROM_ERRNUM 

 void Perl_sv_taint(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SV_TAINT assert(sv)


 _Bool Perl_sv_tainted(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_TAINTED assert(sv)


 I32 Perl_sv_true(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_TRUE 
 char* Perl_sv_uni_display(PerlInterpreter* my_perl __attribute__((unused)), SV *dsv, SV *ssv, STRLEN pvlim, UV flags)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_UNI_DISPLAY assert(dsv); assert(ssv)


 int Perl_sv_unmagic(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const int type);
#define PERL_ARGS_ASSERT_SV_UNMAGIC assert(sv)

 int Perl_sv_unmagicext(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const int type, MGVTBL *vtbl);
#define PERL_ARGS_ASSERT_SV_UNMAGICEXT assert(sv)


 void Perl_sv_unref(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_SV_UNREF assert(sv)


 void Perl_sv_unref_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const ref, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UNREF_FLAGS assert(ref)

 void Perl_sv_untaint(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_UNTAINT assert(sv)

 void Perl_sv_upgrade(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, svtype new_type);
#define PERL_ARGS_ASSERT_SV_UPGRADE assert(sv)


 void Perl_sv_usepvn(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, char* ptr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_USEPVN assert(sv)


 void Perl_sv_usepvn_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, char* ptr, const STRLEN len, const U32 flags);
#define PERL_ARGS_ASSERT_SV_USEPVN_FLAGS assert(sv)


 void Perl_sv_usepvn_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *sv, char *ptr, STRLEN len);
#define PERL_ARGS_ASSERT_SV_USEPVN_MG assert(sv)


 _Bool Perl_sv_utf8_decode(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_DECODE assert(sv)


 _Bool Perl_sv_utf8_downgrade(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const _Bool fail_ok);
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE assert(sv)


 _Bool Perl_sv_utf8_downgrade_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const _Bool fail_ok, const U32 flags);
#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE_FLAGS assert(sv)


#define PERL_ARGS_ASSERT_SV_UTF8_DOWNGRADE_NOMG 
 void Perl_sv_utf8_encode(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv);
#define PERL_ARGS_ASSERT_SV_UTF8_ENCODE assert(sv)


 STRLEN Perl_sv_utf8_upgrade(PerlInterpreter* my_perl __attribute__((unused)), SV *sv);
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE assert(sv)



#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS 
 STRLEN Perl_sv_utf8_upgrade_flags_grow(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const I32 flags, STRLEN extra);
#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_FLAGS_GROW assert(sv)


#define PERL_ARGS_ASSERT_SV_UTF8_UPGRADE_NOMG 

 UV Perl_sv_uv(PerlInterpreter* my_perl __attribute__((unused)), SV* sv)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_SV_UV assert(sv)



 void Perl_sv_vcatpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VCATPVF assert(sv); assert(pat)

 void Perl_sv_vcatpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VCATPVF_MG assert(sv); assert(pat)

 void Perl_sv_vcatpvfn(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const size_t sv_count, _Bool *const maybe_tainted);
#define PERL_ARGS_ASSERT_SV_VCATPVFN assert(sv); assert(pat)

 void Perl_sv_vcatpvfn_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const size_t sv_count, _Bool *const maybe_tainted, const U32 flags);
#define PERL_ARGS_ASSERT_SV_VCATPVFN_FLAGS assert(sv); assert(pat)

 void Perl_sv_vsetpvf(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VSETPVF assert(sv); assert(pat)

 void Perl_sv_vsetpvf_mg(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, va_list *const args);
#define PERL_ARGS_ASSERT_SV_VSETPVF_MG assert(sv); assert(pat)

 void Perl_sv_vsetpvfn(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, const char *const pat, const STRLEN patlen, va_list *const args, SV **const svargs, const size_t sv_count, _Bool *const maybe_tainted);
#define PERL_ARGS_ASSERT_SV_VSETPVFN assert(sv); assert(pat)

 void Perl_switch_to_global_locale(void);
#define PERL_ARGS_ASSERT_SWITCH_TO_GLOBAL_LOCALE 
 _Bool Perl_sync_locale(void);
#define PERL_ARGS_ASSERT_SYNC_LOCALE 
 void Perl_sys_init(int* argc, char*** argv);
#define PERL_ARGS_ASSERT_SYS_INIT assert(argc); assert(argv)

 void Perl_sys_init3(int* argc, char*** argv, char*** env);
#define PERL_ARGS_ASSERT_SYS_INIT3 assert(argc); assert(argv); assert(env)

 void Perl_sys_term(void);
#define PERL_ARGS_ASSERT_SYS_TERM 
 void Perl_taint_env(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_TAINT_ENV 
 void Perl_taint_proper(PerlInterpreter* my_perl __attribute__((unused)), const char* f, const char *const s);
#define PERL_ARGS_ASSERT_TAINT_PROPER assert(s)

 void Perl_thread_locale_init(void);
#define PERL_ARGS_ASSERT_THREAD_LOCALE_INIT 
 void Perl_thread_locale_term(void);
#define PERL_ARGS_ASSERT_THREAD_LOCALE_TERM 
 OP * Perl_tied_method(PerlInterpreter* my_perl __attribute__((unused)), SV *methname, SV **sp, SV *const sv, const MAGIC *const mg, const U32 flags, U32 argc, ...);
#define PERL_ARGS_ASSERT_TIED_METHOD assert(methname); assert(sp); assert(sv); assert(mg)

 ssize_t Perl_tmps_grow_p(PerlInterpreter* my_perl __attribute__((unused)), ssize_t ix);
#define PERL_ARGS_ASSERT_TMPS_GROW_P 

#define PERL_ARGS_ASSERT_TO_UNI_FOLD 
 UV Perl_to_uni_lower(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_LOWER assert(p); assert(lenp)

 UV Perl_to_uni_title(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_TITLE assert(p); assert(lenp)

 UV Perl_to_uni_upper(PerlInterpreter* my_perl __attribute__((unused)), UV c, U8 *p, STRLEN *lenp);
#define PERL_ARGS_ASSERT_TO_UNI_UPPER assert(p); assert(lenp)

 _Bool Perl_try_amagic_bin(PerlInterpreter* my_perl __attribute__((unused)), int method, int flags);
#define PERL_ARGS_ASSERT_TRY_AMAGIC_BIN 
 _Bool Perl_try_amagic_un(PerlInterpreter* my_perl __attribute__((unused)), int method, int flags);
#define PERL_ARGS_ASSERT_TRY_AMAGIC_UN 

 ssize_t Perl_unpack_str(PerlInterpreter* my_perl __attribute__((unused)), const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_UNPACK_STR assert(pat); assert(patend); assert(s); assert(strend)



 ssize_t Perl_unpackstring(PerlInterpreter* my_perl __attribute__((unused)), const char *pat, const char *patend, const char *s, const char *strend, U32 flags);
#define PERL_ARGS_ASSERT_UNPACKSTRING assert(pat); assert(patend); assert(s); assert(strend)

 void Perl_unshare_hek(PerlInterpreter* my_perl __attribute__((unused)), HEK* hek);
#define PERL_ARGS_ASSERT_UNSHARE_HEK 
 void Perl_unsharepvn(PerlInterpreter* my_perl __attribute__((unused)), const char* sv, I32 len, U32 hash);
#define PERL_ARGS_ASSERT_UNSHAREPVN 
 SV* Perl_upg_version(PerlInterpreter* my_perl __attribute__((unused)), SV *ver, _Bool qv);
#define PERL_ARGS_ASSERT_UPG_VERSION assert(ver)

 U8* Perl_utf16_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), U8* p, U8 *d, size_t bytelen, size_t *newlen);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8 assert(p); assert(d); assert(newlen)

 U8* Perl_utf16_to_utf8_reversed(PerlInterpreter* my_perl __attribute__((unused)), U8* p, U8 *d, size_t bytelen, size_t *newlen);
#define PERL_ARGS_ASSERT_UTF16_TO_UTF8_REVERSED assert(p); assert(d); assert(newlen)


static __inline__ IV Perl_utf8_distance(PerlInterpreter* my_perl __attribute__((unused)), const U8 *a, const U8 *b)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_UTF8_DISTANCE assert(a); assert(b)




static __inline__ U8* Perl_utf8_hop(const U8 *s, ssize_t off)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_UTF8_HOP assert(s)




static __inline__ U8* Perl_utf8_hop_back(const U8 *s, ssize_t off, const U8 *start)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_UTF8_HOP_BACK assert(s); assert(start)




static __inline__ U8* Perl_utf8_hop_forward(const U8 *s, ssize_t off, const U8 *end)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_UTF8_HOP_FORWARD assert(s); assert(end)




static __inline__ U8* Perl_utf8_hop_safe(const U8 *s, ssize_t off, const U8 *start, const U8 *end)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_UTF8_HOP_SAFE assert(s); assert(start); assert(end)



 STRLEN Perl_utf8_length(PerlInterpreter* my_perl __attribute__((unused)), const U8* s, const U8 *e)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_UTF8_LENGTH assert(s); assert(e)


 U8* Perl_utf8_to_bytes(PerlInterpreter* my_perl __attribute__((unused)), U8 *s, STRLEN *lenp);
#define PERL_ARGS_ASSERT_UTF8_TO_BYTES assert(s); assert(lenp)


 UV Perl_utf8_to_uvchr(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR assert(s)



 UV Perl_utf8_to_uvchr_buf(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const U8 *send, STRLEN *retlen);
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR_BUF assert(s); assert(send)


static __inline__ UV Perl_utf8_to_uvchr_buf_helper(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const U8 *send, STRLEN *retlen);
#define PERL_ARGS_ASSERT_UTF8_TO_UVCHR_BUF_HELPER assert(s); assert(send)



 UV Perl_utf8_to_uvuni(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI assert(s)



 UV Perl_utf8_to_uvuni_buf(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const U8 *send, STRLEN *retlen)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_UTF8_TO_UVUNI_BUF assert(s); assert(send)


 UV Perl_utf8n_to_uvchr(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR assert(s)

 UV Perl_utf8n_to_uvchr_error(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags, U32 * errors);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR_ERROR assert(s)


static __inline__ UV Perl_utf8n_to_uvchr_msgs(const U8 *s, STRLEN curlen, STRLEN *retlen, const U32 flags, U32 * errors, AV ** msgs);
#define PERL_ARGS_ASSERT_UTF8N_TO_UVCHR_MSGS assert(s)



 UV Perl_utf8n_to_uvuni(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_UTF8N_TO_UVUNI assert(s)



 void Perl_utilize(PerlInterpreter* my_perl __attribute__((unused)), int aver, I32 floor, OP* version, OP* idop, OP* arg);
#define PERL_ARGS_ASSERT_UTILIZE assert(idop)


#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8 

#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8_FLAGS 

#define PERL_ARGS_ASSERT_UVCHR_TO_UTF8_FLAGS_MSGS 
 U8* Perl_uvoffuni_to_utf8_flags(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv, const UV flags);
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS assert(d)

 U8* Perl_uvoffuni_to_utf8_flags_msgs(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv, const UV flags, HV** msgs);
#define PERL_ARGS_ASSERT_UVOFFUNI_TO_UTF8_FLAGS_MSGS assert(d)

 U8* Perl_uvuni_to_utf8(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv);
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8 assert(d)


 U8* Perl_uvuni_to_utf8_flags(PerlInterpreter* my_perl __attribute__((unused)), U8 *d, UV uv, UV flags)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_UVUNI_TO_UTF8_FLAGS assert(d)




static __inline__ UV Perl_valid_utf8_to_uvchr(const U8 *s, STRLEN *retlen)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVCHR assert(s)




 UV Perl_valid_utf8_to_uvuni(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, STRLEN *retlen)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_VALID_UTF8_TO_UVUNI assert(s)



 _Bool Perl_validate_proto(PerlInterpreter* my_perl __attribute__((unused)), SV *name, SV *proto, _Bool warn, _Bool curstash);
#define PERL_ARGS_ASSERT_VALIDATE_PROTO assert(name)

 int Perl_vcmp(PerlInterpreter* my_perl __attribute__((unused)), SV *lhv, SV *rhv);
#define PERL_ARGS_ASSERT_VCMP assert(lhv); assert(rhv)

 void Perl_vcroak(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_VCROAK 

 void Perl_vdeb(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VDEB assert(pat)

 char* Perl_vform(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VFORM assert(pat)

 void Perl_vivify_defelem(PerlInterpreter* my_perl __attribute__((unused)), SV* sv);
#define PERL_ARGS_ASSERT_VIVIFY_DEFELEM assert(sv)

 SV* Perl_vivify_ref(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, U32 to_what)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_VIVIFY_REF assert(sv)


 void Perl_vload_module(PerlInterpreter* my_perl __attribute__((unused)), U32 flags, SV* name, SV* ver, va_list* args);
#define PERL_ARGS_ASSERT_VLOAD_MODULE assert(name)

 SV* Perl_vmess(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VMESS assert(pat)

 SV* Perl_vnewSVpvf(PerlInterpreter* my_perl __attribute__((unused)), const char *const pat, va_list *const args)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_VNEWSVPVF assert(pat)


 SV* Perl_vnormal(PerlInterpreter* my_perl __attribute__((unused)), SV *vs);
#define PERL_ARGS_ASSERT_VNORMAL assert(vs)

 SV* Perl_vnumify(PerlInterpreter* my_perl __attribute__((unused)), SV *vs);
#define PERL_ARGS_ASSERT_VNUMIFY assert(vs)

 SV* Perl_vstringify(PerlInterpreter* my_perl __attribute__((unused)), SV *vs);
#define PERL_ARGS_ASSERT_VSTRINGIFY assert(vs)

 SV* Perl_vverify(PerlInterpreter* my_perl __attribute__((unused)), SV *vs);
#define PERL_ARGS_ASSERT_VVERIFY assert(vs)

 void Perl_vwarn(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VWARN assert(pat)

 void Perl_vwarner(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, va_list* args);
#define PERL_ARGS_ASSERT_VWARNER assert(pat)

 I32 Perl_wait4pid(PerlInterpreter* my_perl __attribute__((unused)), pid_t pid, int* statusp, int flags);
#define PERL_ARGS_ASSERT_WAIT4PID assert(statusp)

 void Perl_warn(PerlInterpreter* my_perl __attribute__((unused)), const char* pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_WARN assert(pat)


 void Perl_warn_sv(PerlInterpreter* my_perl __attribute__((unused)), SV *baseex);
#define PERL_ARGS_ASSERT_WARN_SV assert(baseex)

 void Perl_warner(PerlInterpreter* my_perl __attribute__((unused)), U32 err, const char* pat, ...)
   __attribute__((format(__printf__,3,4)));
#define PERL_ARGS_ASSERT_WARNER assert(pat)


 I32 Perl_was_lvalue_sub(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_WAS_LVALUE_SUB 

 void Perl_watch(PerlInterpreter* my_perl __attribute__((unused)), char** addr);
#define PERL_ARGS_ASSERT_WATCH assert(addr)


#define PERL_ARGS_ASSERT_WHICHSIG 
 I32 Perl_whichsig_pv(PerlInterpreter* my_perl __attribute__((unused)), const char* sig);
#define PERL_ARGS_ASSERT_WHICHSIG_PV assert(sig)

 I32 Perl_whichsig_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char* sig, STRLEN len);
#define PERL_ARGS_ASSERT_WHICHSIG_PVN assert(sig)

 I32 Perl_whichsig_sv(PerlInterpreter* my_perl __attribute__((unused)), SV* sigsv);
#define PERL_ARGS_ASSERT_WHICHSIG_SV assert(sigsv)

 void Perl_wrap_keyword_plugin(PerlInterpreter* my_perl __attribute__((unused)), Perl_keyword_plugin_t new_plugin, Perl_keyword_plugin_t *old_plugin_p);
#define PERL_ARGS_ASSERT_WRAP_KEYWORD_PLUGIN assert(new_plugin); assert(old_plugin_p)

 void Perl_wrap_op_checker(PerlInterpreter* my_perl __attribute__((unused)), Optype opcode, Perl_check_t new_checker, Perl_check_t *old_checker_p);
#define PERL_ARGS_ASSERT_WRAP_OP_CHECKER assert(new_checker); assert(old_checker_p)

 void Perl_write_to_stderr(PerlInterpreter* my_perl __attribute__((unused)), SV* msv);
#define PERL_ARGS_ASSERT_WRITE_TO_STDERR assert(msv)

 void Perl_xs_boot_epilog(PerlInterpreter* my_perl __attribute__((unused)), const I32 ax);
#define PERL_ARGS_ASSERT_XS_BOOT_EPILOG 
 I32 Perl_xs_handshake(const U32 key, void * v_my_perl, const char * file, ...);
#define PERL_ARGS_ASSERT_XS_HANDSHAKE assert(v_my_perl); assert(file)

 int Perl_yyerror(PerlInterpreter* my_perl __attribute__((unused)), const char *const s);
#define PERL_ARGS_ASSERT_YYERROR assert(s)

 int Perl_yyerror_pv(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, U32 flags);
#define PERL_ARGS_ASSERT_YYERROR_PV assert(s)

 int Perl_yyerror_pvn(PerlInterpreter* my_perl __attribute__((unused)), const char *const s, STRLEN len, U32 flags);
#define PERL_ARGS_ASSERT_YYERROR_PVN 
 int Perl_yylex(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_YYLEX 
 int Perl_yyparse(PerlInterpreter* my_perl __attribute__((unused)), int gramtype);
#define PERL_ARGS_ASSERT_YYPARSE 
 void Perl_yyquit(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_YYQUIT 
 void Perl_yyunlex(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_YYUNLEX 
# 4215 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 const char* Perl_langinfo(const int item);
#define PERL_ARGS_ASSERT_PERL_LANGINFO 
# 4230 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 void Perl_csighandler(int sig);
#define PERL_ARGS_ASSERT_CSIGHANDLER 
 void Perl_sighandler(int sig);
#define PERL_ARGS_ASSERT_SIGHANDLER 


 int Perl_magic_regdatum_set(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg)
   __attribute__((noreturn));
#define PERL_ARGS_ASSERT_MAGIC_REGDATUM_SET assert(sv); assert(mg)





static __inline__ unsigned int Perl_variant_byte_number(PERL_UINTMAX_T word)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_VARIANT_BYTE_NUMBER 




 char* Perl_getenv_len(PerlInterpreter* my_perl __attribute__((unused)), const char *env_elem, unsigned long *len);
#define PERL_ARGS_ASSERT_GETENV_LEN assert(env_elem); assert(len)
# 4265 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 int Perl_my_mkostemp(char *templte, int flags);
#define PERL_ARGS_ASSERT_MY_MKOSTEMP assert(templte)
# 4387 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 I32 Perl_my_pclose(PerlInterpreter* my_perl __attribute__((unused)), PerlIO* ptr);
#define PERL_ARGS_ASSERT_MY_PCLOSE 
 PerlIO* Perl_my_popen(PerlInterpreter* my_perl __attribute__((unused)), const char* cmd, const char* mode);
#define PERL_ARGS_ASSERT_MY_POPEN assert(cmd); assert(mode)
# 4402 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
static __inline__ void Perl_cx_popblock(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPBLOCK assert(cx)



static __inline__ void Perl_cx_popeval(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPEVAL assert(cx)



static __inline__ void Perl_cx_popformat(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPFORMAT assert(cx)



static __inline__ void Perl_cx_popgiven(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPGIVEN assert(cx)



static __inline__ void Perl_cx_poploop(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPLOOP assert(cx)



static __inline__ void Perl_cx_popsub(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB assert(cx)



static __inline__ void Perl_cx_popsub_args(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB_ARGS assert(cx)



static __inline__ void Perl_cx_popsub_common(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPSUB_COMMON assert(cx)



static __inline__ void Perl_cx_popwhen(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_POPWHEN assert(cx)



static __inline__ PERL_CONTEXT * Perl_cx_pushblock(PerlInterpreter* my_perl __attribute__((unused)), U8 type, U8 gimme, SV** sp, I32 saveix);
#define PERL_ARGS_ASSERT_CX_PUSHBLOCK assert(sp)



static __inline__ void Perl_cx_pusheval(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, OP *retop, SV *namesv);
#define PERL_ARGS_ASSERT_CX_PUSHEVAL assert(cx)



static __inline__ void Perl_cx_pushformat(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, CV *cv, OP *retop, GV *gv);
#define PERL_ARGS_ASSERT_CX_PUSHFORMAT assert(cx); assert(cv)



static __inline__ void Perl_cx_pushgiven(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, SV *orig_defsv);
#define PERL_ARGS_ASSERT_CX_PUSHGIVEN assert(cx)



static __inline__ void Perl_cx_pushloop_for(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, void *itervarp, SV *itersave);
#define PERL_ARGS_ASSERT_CX_PUSHLOOP_FOR assert(cx); assert(itervarp)



static __inline__ void Perl_cx_pushloop_plain(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_PUSHLOOP_PLAIN assert(cx)



static __inline__ void Perl_cx_pushsub(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, CV *cv, OP *retop, _Bool hasargs);
#define PERL_ARGS_ASSERT_CX_PUSHSUB assert(cx); assert(cv)



static __inline__ void Perl_cx_pushtry(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, OP *retop);
#define PERL_ARGS_ASSERT_CX_PUSHTRY assert(cx)



static __inline__ void Perl_cx_pushwhen(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_PUSHWHEN assert(cx)



static __inline__ void Perl_cx_topblock(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx);
#define PERL_ARGS_ASSERT_CX_TOPBLOCK assert(cx)



static __inline__ U8 Perl_gimme_V(PerlInterpreter* my_perl __attribute__((unused)));
#define PERL_ARGS_ASSERT_GIMME_V 
# 4532 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 _Bool Perl_do_exec3(PerlInterpreter* my_perl __attribute__((unused)), const char *incmd, int fd, int do_report);
#define PERL_ARGS_ASSERT_DO_EXEC3 assert(incmd)
# 4544 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 int Perl_PerlSock_socketpair_cloexec(PerlInterpreter* my_perl __attribute__((unused)), int domain, int type, int protocol, int *pairfd)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLSOCK_SOCKETPAIR_CLOEXEC assert(pairfd)
# 4667 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 I32 Perl_do_ipcctl(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_IPCCTL assert(mark); assert(sp)

 I32 Perl_do_ipcget(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_IPCGET assert(mark); assert(sp)

 I32 Perl_do_msgrcv(PerlInterpreter* my_perl __attribute__((unused)), SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_MSGRCV assert(mark); assert(sp)

 I32 Perl_do_msgsnd(PerlInterpreter* my_perl __attribute__((unused)), SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_MSGSND assert(mark); assert(sp)

 I32 Perl_do_semop(PerlInterpreter* my_perl __attribute__((unused)), SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_SEMOP assert(mark); assert(sp)

 I32 Perl_do_shmio(PerlInterpreter* my_perl __attribute__((unused)), I32 optype, SV** mark, SV** sp);
#define PERL_ARGS_ASSERT_DO_SHMIO assert(mark); assert(sp)
# 4697 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 int Perl_PerlProc_pipe_cloexec(PerlInterpreter* my_perl __attribute__((unused)), int *pipefd)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLPROC_PIPE_CLOEXEC assert(pipefd)




 int Perl_PerlSock_accept_cloexec(PerlInterpreter* my_perl __attribute__((unused)), int listenfd, struct sockaddr *addr, socklen_t *addrlen)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLSOCK_ACCEPT_CLOEXEC 

 int Perl_PerlSock_socket_cloexec(PerlInterpreter* my_perl __attribute__((unused)), int domain, int type, int protocol)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLSOCK_SOCKET_CLOEXEC 
# 4742 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 SV* Perl_sv_setsv_cow(PerlInterpreter* my_perl __attribute__((unused)), SV* dsv, SV* ssv);
#define PERL_ARGS_ASSERT_SV_SETSV_COW assert(ssv)
# 4830 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 _Bool Perl_do_exec(PerlInterpreter* my_perl __attribute__((unused)), const char* cmd);
#define PERL_ARGS_ASSERT_DO_EXEC assert(cmd)




 GV* Perl_gv_SVadd(PerlInterpreter* my_perl __attribute__((unused)), GV *gv);
#define PERL_ARGS_ASSERT_GV_SVADD 



 void Perl_croak_nocontext(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_CROAK_NOCONTEXT 

 void Perl_deb_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_DEB_NOCONTEXT assert(pat)


 OP* Perl_die_nocontext(const char* pat, ...)
   __attribute__((noreturn))
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_DIE_NOCONTEXT 

 char* Perl_form_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_FORM_NOCONTEXT assert(pat)



 int Perl_fprintf_nocontext(PerlIO *stream, const char *format, ...)
   __attribute__((deprecated))
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_FPRINTF_NOCONTEXT assert(stream); assert(format)



 void Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...);
#define PERL_ARGS_ASSERT_LOAD_MODULE_NOCONTEXT assert(name)

 SV* Perl_mess_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_MESS_NOCONTEXT assert(pat)


 void* Perl_my_cxt_init(PerlInterpreter* my_perl __attribute__((unused)), int *indexp, size_t size);
#define PERL_ARGS_ASSERT_MY_CXT_INIT assert(indexp)

 SV* Perl_newSVpvf_nocontext(const char *const pat, ...)
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_NEWSVPVF_NOCONTEXT assert(pat)



 int Perl_printf_nocontext(const char *format, ...)
   __attribute__((deprecated))
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_PRINTF_NOCONTEXT assert(format)



 void Perl_sv_catpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_SV_CATPVF_MG_NOCONTEXT assert(sv); assert(pat)


 void Perl_sv_catpvf_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_SV_CATPVF_NOCONTEXT assert(sv); assert(pat)


 void Perl_sv_setpvf_mg_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_SV_SETPVF_MG_NOCONTEXT assert(sv); assert(pat)


 void Perl_sv_setpvf_nocontext(SV *const sv, const char *const pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_SV_SETPVF_NOCONTEXT assert(sv); assert(pat)


 void Perl_warn_nocontext(const char* pat, ...)
   __attribute__((format(__printf__,1,2)));
#define PERL_ARGS_ASSERT_WARN_NOCONTEXT assert(pat)


 void Perl_warner_nocontext(U32 err, const char* pat, ...)
   __attribute__((format(__printf__,2,3)));
#define PERL_ARGS_ASSERT_WARNER_NOCONTEXT assert(pat)
# 6707 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 PADOFFSET Perl_alloccopstash(PerlInterpreter* my_perl __attribute__((unused)), HV *hv);
#define PERL_ARGS_ASSERT_ALLOCCOPSTASH assert(hv)

 void* Perl_any_dup(PerlInterpreter* my_perl __attribute__((unused)), void* v, const PerlInterpreter* proto_perl)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_ANY_DUP assert(proto_perl)


 void Perl_clone_params_del(CLONE_PARAMS *param);
#define PERL_ARGS_ASSERT_CLONE_PARAMS_DEL assert(param)

 CLONE_PARAMS * Perl_clone_params_new(PerlInterpreter *const from, PerlInterpreter *const to)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CLONE_PARAMS_NEW assert(from); assert(to)


 PERL_CONTEXT* Perl_cx_dup(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT* cx, I32 ix, I32 max, CLONE_PARAMS* param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_CX_DUP assert(param)


 DIR* Perl_dirp_dup(PerlInterpreter* my_perl __attribute__((unused)), DIR *const dp, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_DIRP_DUP assert(param)


 PerlIO* Perl_fp_dup(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *const fp, const char type, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_FP_DUP assert(param)

 GP* Perl_gp_dup(PerlInterpreter* my_perl __attribute__((unused)), GP *const gp, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_GP_DUP assert(param)


 HE* Perl_he_dup(PerlInterpreter* my_perl __attribute__((unused)), const HE* e, _Bool shared, CLONE_PARAMS* param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HE_DUP assert(param)


 HEK* Perl_hek_dup(PerlInterpreter* my_perl __attribute__((unused)), HEK* e, CLONE_PARAMS* param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_HEK_DUP assert(param)


 MAGIC* Perl_mg_dup(PerlInterpreter* my_perl __attribute__((unused)), MAGIC *mg, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_MG_DUP assert(param)


 struct mro_meta* Perl_mro_meta_dup(PerlInterpreter* my_perl __attribute__((unused)), struct mro_meta* smeta, CLONE_PARAMS* param);
#define PERL_ARGS_ASSERT_MRO_META_DUP assert(smeta); assert(param)

 OP* Perl_newPADOP(PerlInterpreter* my_perl __attribute__((unused)), I32 type, I32 flags, SV* sv)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_NEWPADOP assert(sv)


 PADLIST * Perl_padlist_dup(PerlInterpreter* my_perl __attribute__((unused)), PADLIST *srcpad, CLONE_PARAMS *param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PADLIST_DUP assert(srcpad); assert(param)


 PADNAME * Perl_padname_dup(PerlInterpreter* my_perl __attribute__((unused)), PADNAME *src, CLONE_PARAMS *param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PADNAME_DUP assert(src); assert(param)


 PADNAMELIST * Perl_padnamelist_dup(PerlInterpreter* my_perl __attribute__((unused)), PADNAMELIST *srcpad, CLONE_PARAMS *param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PADNAMELIST_DUP assert(srcpad); assert(param)


 yy_parser* Perl_parser_dup(PerlInterpreter* my_perl __attribute__((unused)), const yy_parser *const proto, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_PARSER_DUP assert(param)

 PerlInterpreter* perl_clone(PerlInterpreter *proto_perl, UV flags);
#define PERL_ARGS_ASSERT_PERL_CLONE assert(proto_perl)

 void Perl_re_dup_guts(PerlInterpreter* my_perl __attribute__((unused)), const REGEXP *sstr, REGEXP *dstr, CLONE_PARAMS* param);
#define PERL_ARGS_ASSERT_RE_DUP_GUTS assert(sstr); assert(dstr); assert(param)

 void* Perl_regdupe_internal(PerlInterpreter* my_perl __attribute__((unused)), REGEXP * const r, CLONE_PARAMS* param);
#define PERL_ARGS_ASSERT_REGDUPE_INTERNAL assert(r); assert(param)

 void Perl_rvpv_dup(PerlInterpreter* my_perl __attribute__((unused)), SV *const dsv, const SV *const ssv, CLONE_PARAMS *const param);
#define PERL_ARGS_ASSERT_RVPV_DUP assert(dsv); assert(ssv); assert(param)

 PERL_SI* Perl_si_dup(PerlInterpreter* my_perl __attribute__((unused)), PERL_SI* si, CLONE_PARAMS* param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SI_DUP assert(param)


 ANY* Perl_ss_dup(PerlInterpreter* my_perl __attribute__((unused)), PerlInterpreter* proto_perl, CLONE_PARAMS* param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SS_DUP assert(proto_perl); assert(param)


 SV* Perl_sv_dup(PerlInterpreter* my_perl __attribute__((unused)), const SV *const ssv, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DUP assert(param)


 SV* Perl_sv_dup_inc(PerlInterpreter* my_perl __attribute__((unused)), const SV *const ssv, CLONE_PARAMS *const param)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_SV_DUP_INC assert(param)
# 6820 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4
 int Perl_magic_freecollxfrm(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_FREECOLLXFRM assert(sv); assert(mg)

 int Perl_magic_setcollxfrm(PerlInterpreter* my_perl __attribute__((unused)), SV* sv, MAGIC* mg);
#define PERL_ARGS_ASSERT_MAGIC_SETCOLLXFRM assert(sv); assert(mg)


 char* Perl_mem_collxfrm(PerlInterpreter* my_perl __attribute__((unused)), const char* input_string, STRLEN len, STRLEN* xlen)
   __attribute__((deprecated));
#define PERL_ARGS_ASSERT_MEM_COLLXFRM assert(input_string); assert(xlen)




 char* Perl_sv_collxfrm(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const nxp);
#define PERL_ARGS_ASSERT_SV_COLLXFRM assert(sv); assert(nxp)


 char* Perl_sv_collxfrm_flags(PerlInterpreter* my_perl __attribute__((unused)), SV *const sv, STRLEN *const nxp, I32 const flags);
#define PERL_ARGS_ASSERT_SV_COLLXFRM_FLAGS assert(sv); assert(nxp)



 void Perl_PerlIO_clearerr(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_CLEARERR 
 int Perl_PerlIO_close(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_CLOSE 
 int Perl_PerlIO_eof(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_EOF 
 int Perl_PerlIO_error(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_ERROR 
 int Perl_PerlIO_fileno(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_FILENO 
 int Perl_PerlIO_fill(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_FILL 
 int Perl_PerlIO_flush(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_FLUSH 
 char * Perl_PerlIO_get_base(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_GET_BASE 
 ssize_t Perl_PerlIO_get_bufsiz(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLIO_GET_BUFSIZ 

 ssize_t Perl_PerlIO_get_cnt(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f)
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLIO_GET_CNT 

 char * Perl_PerlIO_get_ptr(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_GET_PTR 
 ssize_t Perl_PerlIO_read(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, void *vbuf, size_t count);
#define PERL_ARGS_ASSERT_PERLIO_READ assert(vbuf)

 void Perl_PerlIO_restore_errno(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_RESTORE_ERRNO 
 void Perl_PerlIO_save_errno(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_SAVE_ERRNO 
 int Perl_PerlIO_seek(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, off_t offset, int whence);
#define PERL_ARGS_ASSERT_PERLIO_SEEK 
 void Perl_PerlIO_set_cnt(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, ssize_t cnt);
#define PERL_ARGS_ASSERT_PERLIO_SET_CNT 
 void Perl_PerlIO_set_ptrcnt(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, char *ptr, ssize_t cnt);
#define PERL_ARGS_ASSERT_PERLIO_SET_PTRCNT 
 void Perl_PerlIO_setlinebuf(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_SETLINEBUF 
 PerlIO * Perl_PerlIO_stderr(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLIO_STDERR 

 PerlIO * Perl_PerlIO_stdin(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLIO_STDIN 

 PerlIO * Perl_PerlIO_stdout(PerlInterpreter* my_perl __attribute__((unused)))
   __attribute__((warn_unused_result));
#define PERL_ARGS_ASSERT_PERLIO_STDOUT 

 off_t Perl_PerlIO_tell(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f);
#define PERL_ARGS_ASSERT_PERLIO_TELL 
 ssize_t Perl_PerlIO_unread(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const void *vbuf, size_t count);
#define PERL_ARGS_ASSERT_PERLIO_UNREAD assert(vbuf)

 ssize_t Perl_PerlIO_write(PerlInterpreter* my_perl __attribute__((unused)), PerlIO *f, const void *vbuf, size_t count);
#define PERL_ARGS_ASSERT_PERLIO_WRITE assert(vbuf)
# 6939 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/proto.h" 3 4

# 5706 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 1 3 4
# 146 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4



extern const char* const PL_op_name[];
# 561 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4
extern const char* const PL_op_desc[];
# 972 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4




extern Perl_ppaddr_t PL_ppaddr[]
# 1385 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4
;

extern Perl_check_t PL_check[]
# 1796 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4
;


extern const U32 PL_opargs[];
# 2209 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4



#define OPpARGELEM_SV 0x00
#define OPpLVREF_SV 0x00
#define OPpARG1_MASK 0x01
#define OPpCOREARGS_DEREF1 0x01
#define OPpENTERSUB_INARGS 0x01
#define OPpPADHV_ISKEYS 0x01
#define OPpRV2HV_ISKEYS 0x01
#define OPpSORT_NUMERIC 0x01
#define OPpTRANS_CAN_FORCE_UTF8 0x01
#define OPpARGELEM_AV 0x02
#define OPpCONST_NOVER 0x02
#define OPpCOREARGS_DEREF2 0x02
#define OPpEVAL_HAS_HH 0x02
#define OPpFT_ACCESS 0x02
#define OPpHINT_STRICT_REFS 0x02
#define OPpITER_REVERSED 0x02
#define OPpSORT_INTEGER 0x02
#define OPpTRANS_USE_SVOP 0x02
#define OPpARG2_MASK 0x03
#define OPpAVHVSWITCH_MASK 0x03
#define OPpARGELEM_HV 0x04
#define OPpASSIGN_TRUEBOOL 0x04
#define OPpCONST_SHORTCIRCUIT 0x04
#define OPpDONT_INIT_GV 0x04
#define OPpENTERSUB_HASTARG 0x04
#define OPpEVAL_UNICODE 0x04
#define OPpFT_STACKED 0x04
#define OPpLVREF_ELEM 0x04
#define OPpSLICEWARNING 0x04
#define OPpSORT_REVERSE 0x04
#define OPpSPLIT_IMPLIM 0x04
#define OPpTRANS_IDENTICAL 0x04
#define OPpARGELEM_MASK 0x06
#define OPpARG3_MASK 0x07
#define OPpPADRANGE_COUNTSHIFT 0x07
#define OPpCONST_STRICT 0x08
#define OPpENTERSUB_AMPER 0x08
#define OPpEVAL_BYTES 0x08
#define OPpFT_STACKING 0x08
#define OPpITER_DEF 0x08
#define OPpLVREF_ITER 0x08
#define OPpMAYBE_LVSUB 0x08
#define OPpMULTICONCAT_STRINGIFY 0x08
#define OPpREVERSE_INPLACE 0x08
#define OPpSORT_INPLACE 0x08
#define OPpSPLIT_LEX 0x08
#define OPpTRANS_SQUASH 0x08
#define OPpARG4_MASK 0x0f
#define OPpASSIGN_COMMON_AGG 0x10
#define OPpCONST_ENTERED 0x10
#define OPpDEREF_AV 0x10
#define OPpEVAL_COPHH 0x10
#define OPpFT_AFTER_t 0x10
#define OPpLVREF_AV 0x10
#define OPpMAYBE_TRUEBOOL 0x10
#define OPpMULTIDEREF_EXISTS 0x10
#define OPpOPEN_IN_RAW 0x10
#define OPpSORT_DESCEND 0x10
#define OPpSPLIT_ASSIGN 0x10
#define OPpSUBSTR_REPL_FIRST 0x10
#define OPpTARGET_MY 0x10
#define OPpASSIGN_COMMON_RC1 0x20
#define OPpDEREF_HV 0x20
#define OPpEARLY_CV 0x20
#define OPpEVAL_RE_REPARSING 0x20
#define OPpHUSH_VMSISH 0x20
#define OPpKVSLICE 0x20
#define OPpLVREF_HV 0x20
#define OPpMAY_RETURN_CONSTANT 0x20
#define OPpMULTICONCAT_FAKE 0x20
#define OPpMULTIDEREF_DELETE 0x20
#define OPpOPEN_IN_CRLF 0x20
#define OPpTRANS_COMPLEMENT 0x20
#define OPpTRUEBOOL 0x20
#define OPpDEREF 0x30
#define OPpDEREF_SV 0x30
#define OPpLVREF_CV 0x30
#define OPpLVREF_TYPE 0x30
#define OPpALLOW_FAKE 0x40
#define OPpASSIGN_BACKWARDS 0x40
#define OPpASSIGN_COMMON_SCALAR 0x40
#define OPpCONCAT_NESTED 0x40
#define OPpCONST_BARE 0x40
#define OPpCOREARGS_SCALARMOD 0x40
#define OPpENTERSUB_DB 0x40
#define OPpEXISTS_SUB 0x40
#define OPpFLIP_LINENUM 0x40
#define OPpINDEX_BOOLNEG 0x40
#define OPpLIST_GUESSED 0x40
#define OPpLVAL_DEFER 0x40
#define OPpMULTICONCAT_APPEND 0x40
#define OPpOPEN_OUT_RAW 0x40
#define OPpOUR_INTRO 0x40
#define OPpPAD_STATE 0x40
#define OPpREFCOUNTED 0x40
#define OPpREPEAT_DOLIST 0x40
#define OPpSLICE 0x40
#define OPpSORT_STABLE 0x40
#define OPpTRANS_GROWS 0x40
#define OPpPADRANGE_COUNTMASK 0x7f
#define OPpASSIGN_CV_TO_GV 0x80
#define OPpCOREARGS_PUSHMARK 0x80
#define OPpENTERSUB_NOPAREN 0x80
#define OPpLVALUE 0x80
#define OPpLVAL_INTRO 0x80
#define OPpOFFBYONE 0x80
#define OPpOPEN_OUT_CRLF 0x80
#define OPpPV_IS_UTF8 0x80
#define OPpSORT_UNSTABLE 0x80
#define OPpTRANS_DELETE 0x80






extern const I16 PL_op_private_bitdef_ix[];
extern const U16 PL_op_private_bitdefs[];
extern const char PL_op_private_labels[];
extern const I16 PL_op_private_bitfields[];
extern const U8 PL_op_private_valid[];
# 3382 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/opcode.h" 3 4

# 5709 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4




# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embedvar.h" 1 3 4
# 38 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embedvar.h" 3 4
#define vTHX aTHX




#define PL_AboveLatin1 (vTHX->IAboveLatin1)
#define PL_Assigned_invlist (vTHX->IAssigned_invlist)
#define PL_CCC_non0_non230 (vTHX->ICCC_non0_non230)
#define PL_DBcontrol (vTHX->IDBcontrol)
#define PL_DBcv (vTHX->IDBcv)
#define PL_DBgv (vTHX->IDBgv)
#define PL_DBline (vTHX->IDBline)
#define PL_DBsignal (vTHX->IDBsignal)
#define PL_DBsingle (vTHX->IDBsingle)
#define PL_DBsub (vTHX->IDBsub)
#define PL_DBtrace (vTHX->IDBtrace)
#define PL_Dir (vTHX->IDir)
#define PL_Env (vTHX->IEnv)
#define PL_GCB_invlist (vTHX->IGCB_invlist)
#define PL_HasMultiCharFold (vTHX->IHasMultiCharFold)
#define PL_InBitmap (vTHX->IInBitmap)
#define PL_InMultiCharFold (vTHX->IInMultiCharFold)
#define PL_LB_invlist (vTHX->ILB_invlist)
#define PL_LIO (vTHX->ILIO)
#define PL_Latin1 (vTHX->ILatin1)
#define PL_Mem (vTHX->IMem)
#define PL_MemParse (vTHX->IMemParse)
#define PL_MemShared (vTHX->IMemShared)
#define PL_Posix_ptrs (vTHX->IPosix_ptrs)
#define PL_Private_Use (vTHX->IPrivate_Use)
#define PL_Proc (vTHX->IProc)
#define PL_SB_invlist (vTHX->ISB_invlist)
#define PL_SCX_invlist (vTHX->ISCX_invlist)
#define PL_Sock (vTHX->ISock)
#define PL_StdIO (vTHX->IStdIO)
#define PL_Sv (vTHX->ISv)
#define PL_TR_SPECIAL_HANDLING_UTF8 (vTHX->ITR_SPECIAL_HANDLING_UTF8)
#define PL_UpperLatin1 (vTHX->IUpperLatin1)
#define PL_WB_invlist (vTHX->IWB_invlist)
#define PL_XPosix_ptrs (vTHX->IXPosix_ptrs)
#define PL_Xpv (vTHX->IXpv)
#define PL_an (vTHX->Ian)
#define PL_argvgv (vTHX->Iargvgv)
#define PL_argvout_stack (vTHX->Iargvout_stack)
#define PL_argvoutgv (vTHX->Iargvoutgv)
#define PL_basetime (vTHX->Ibasetime)
#define PL_beginav (vTHX->Ibeginav)
#define PL_beginav_save (vTHX->Ibeginav_save)
#define PL_blockhooks (vTHX->Iblockhooks)
#define PL_body_arenas (vTHX->Ibody_arenas)
#define PL_body_roots (vTHX->Ibody_roots)
#define PL_bodytarget (vTHX->Ibodytarget)
#define PL_breakable_sub_gen (vTHX->Ibreakable_sub_gen)
#define PL_checkav (vTHX->Icheckav)
#define PL_checkav_save (vTHX->Icheckav_save)
#define PL_chopset (vTHX->Ichopset)
#define PL_clocktick (vTHX->Iclocktick)
#define PL_collation_ix (vTHX->Icollation_ix)
#define PL_collation_name (vTHX->Icollation_name)
#define PL_collation_standard (vTHX->Icollation_standard)
#define PL_collxfrm_base (vTHX->Icollxfrm_base)
#define PL_collxfrm_mult (vTHX->Icollxfrm_mult)
#define PL_colors (vTHX->Icolors)
#define PL_colorset (vTHX->Icolorset)
#define PL_compcv (vTHX->Icompcv)
#define PL_compiling (vTHX->Icompiling)
#define PL_comppad (vTHX->Icomppad)
#define PL_comppad_name (vTHX->Icomppad_name)
#define PL_comppad_name_fill (vTHX->Icomppad_name_fill)
#define PL_comppad_name_floor (vTHX->Icomppad_name_floor)
#define PL_constpadix (vTHX->Iconstpadix)
#define PL_cop_seqmax (vTHX->Icop_seqmax)
#define PL_curcop (vTHX->Icurcop)
#define PL_curcopdb (vTHX->Icurcopdb)
#define PL_curlocales (vTHX->Icurlocales)
#define PL_curpad (vTHX->Icurpad)
#define PL_curpm (vTHX->Icurpm)
#define PL_curpm_under (vTHX->Icurpm_under)
#define PL_curstack (vTHX->Icurstack)
#define PL_curstackinfo (vTHX->Icurstackinfo)
#define PL_curstash (vTHX->Icurstash)
#define PL_curstname (vTHX->Icurstname)
#define PL_custom_op_descs (vTHX->Icustom_op_descs)
#define PL_custom_op_names (vTHX->Icustom_op_names)
#define PL_custom_ops (vTHX->Icustom_ops)
#define PL_cv_has_eval (vTHX->Icv_has_eval)
#define PL_dbargs (vTHX->Idbargs)
#define PL_debstash (vTHX->Idebstash)
#define PL_debug (vTHX->Idebug)
#define PL_debug_pad (vTHX->Idebug_pad)
#define PL_def_layerlist (vTHX->Idef_layerlist)
#define PL_defgv (vTHX->Idefgv)
#define PL_defoutgv (vTHX->Idefoutgv)
#define PL_defstash (vTHX->Idefstash)
#define PL_delaymagic (vTHX->Idelaymagic)
#define PL_delaymagic_egid (vTHX->Idelaymagic_egid)
#define PL_delaymagic_euid (vTHX->Idelaymagic_euid)
#define PL_delaymagic_gid (vTHX->Idelaymagic_gid)
#define PL_delaymagic_uid (vTHX->Idelaymagic_uid)
#define PL_destroyhook (vTHX->Idestroyhook)
#define PL_diehook (vTHX->Idiehook)
#define PL_doswitches (vTHX->Idoswitches)
#define PL_dowarn (vTHX->Idowarn)
#define PL_dump_re_max_len (vTHX->Idump_re_max_len)
#define PL_dumper_fd (vTHX->Idumper_fd)
#define PL_dumpindent (vTHX->Idumpindent)
#define PL_e_script (vTHX->Ie_script)
#define PL_efloatbuf (vTHX->Iefloatbuf)
#define PL_efloatsize (vTHX->Iefloatsize)
#define PL_endav (vTHX->Iendav)
#define PL_envgv (vTHX->Ienvgv)
#define PL_errgv (vTHX->Ierrgv)
#define PL_errors (vTHX->Ierrors)
#define PL_eval_root (vTHX->Ieval_root)
#define PL_eval_start (vTHX->Ieval_start)
#define PL_evalseq (vTHX->Ievalseq)
#define PL_exit_flags (vTHX->Iexit_flags)
#define PL_exitlist (vTHX->Iexitlist)
#define PL_exitlistlen (vTHX->Iexitlistlen)
#define PL_fdpid (vTHX->Ifdpid)
#define PL_filemode (vTHX->Ifilemode)
#define PL_firstgv (vTHX->Ifirstgv)
#define PL_forkprocess (vTHX->Iforkprocess)
#define PL_formtarget (vTHX->Iformtarget)
#define PL_generation (vTHX->Igeneration)
#define PL_gensym (vTHX->Igensym)
#define PL_globalstash (vTHX->Iglobalstash)
#define PL_globhook (vTHX->Iglobhook)
#define PL_hash_rand_bits (vTHX->Ihash_rand_bits)
#define PL_hash_rand_bits_enabled (vTHX->Ihash_rand_bits_enabled)
#define PL_hintgv (vTHX->Ihintgv)
#define PL_hv_fetch_ent_mh (vTHX->Ihv_fetch_ent_mh)
#define PL_in_clean_all (vTHX->Iin_clean_all)
#define PL_in_clean_objs (vTHX->Iin_clean_objs)
#define PL_in_eval (vTHX->Iin_eval)
#define PL_in_load_module (vTHX->Iin_load_module)
#define PL_in_some_fold (vTHX->Iin_some_fold)
#define PL_in_utf8_COLLATE_locale (vTHX->Iin_utf8_COLLATE_locale)
#define PL_in_utf8_CTYPE_locale (vTHX->Iin_utf8_CTYPE_locale)
#define PL_in_utf8_turkic_locale (vTHX->Iin_utf8_turkic_locale)
#define PL_incgv (vTHX->Iincgv)
#define PL_initav (vTHX->Iinitav)
#define PL_inplace (vTHX->Iinplace)
#define PL_internal_random_state (vTHX->Iinternal_random_state)
#define PL_isarev (vTHX->Iisarev)
#define PL_known_layers (vTHX->Iknown_layers)
#define PL_langinfo_buf (vTHX->Ilanginfo_buf)
#define PL_langinfo_bufsize (vTHX->Ilanginfo_bufsize)
#define PL_last_in_gv (vTHX->Ilast_in_gv)
#define PL_lastfd (vTHX->Ilastfd)
#define PL_lastgotoprobe (vTHX->Ilastgotoprobe)
#define PL_laststatval (vTHX->Ilaststatval)
#define PL_laststype (vTHX->Ilaststype)
#define PL_lc_numeric_mutex_depth (vTHX->Ilc_numeric_mutex_depth)
#define PL_locale_utf8ness (vTHX->Ilocale_utf8ness)
#define PL_localizing (vTHX->Ilocalizing)
#define PL_localpatches (vTHX->Ilocalpatches)
#define PL_lockhook (vTHX->Ilockhook)
#define PL_main_cv (vTHX->Imain_cv)
#define PL_main_root (vTHX->Imain_root)
#define PL_main_start (vTHX->Imain_start)
#define PL_mainstack (vTHX->Imainstack)
#define PL_markstack (vTHX->Imarkstack)
#define PL_markstack_max (vTHX->Imarkstack_max)
#define PL_markstack_ptr (vTHX->Imarkstack_ptr)
#define PL_max_intro_pending (vTHX->Imax_intro_pending)
#define PL_maxsysfd (vTHX->Imaxsysfd)
#define PL_mbrlen_ps (vTHX->Imbrlen_ps)
#define PL_mbrtowc_ps (vTHX->Imbrtowc_ps)
#define PL_mem_log (vTHX->Imem_log)
#define PL_memory_debug_header (vTHX->Imemory_debug_header)
#define PL_mess_sv (vTHX->Imess_sv)
#define PL_min_intro_pending (vTHX->Imin_intro_pending)
#define PL_minus_E (vTHX->Iminus_E)
#define PL_minus_F (vTHX->Iminus_F)
#define PL_minus_a (vTHX->Iminus_a)
#define PL_minus_c (vTHX->Iminus_c)
#define PL_minus_l (vTHX->Iminus_l)
#define PL_minus_n (vTHX->Iminus_n)
#define PL_minus_p (vTHX->Iminus_p)
#define PL_modcount (vTHX->Imodcount)
#define PL_modglobal (vTHX->Imodglobal)
#define PL_multideref_pc (vTHX->Imultideref_pc)
#define PL_my_cxt_list (vTHX->Imy_cxt_list)
#define PL_my_cxt_size (vTHX->Imy_cxt_size)
#define PL_na (vTHX->Ina)
#define PL_nomemok (vTHX->Inomemok)
#define PL_numeric_name (vTHX->Inumeric_name)
#define PL_numeric_radix_sv (vTHX->Inumeric_radix_sv)
#define PL_numeric_standard (vTHX->Inumeric_standard)
#define PL_numeric_underlying (vTHX->Inumeric_underlying)
#define PL_numeric_underlying_is_standard (vTHX->Inumeric_underlying_is_standard)
#define PL_ofsgv (vTHX->Iofsgv)
#define PL_oldname (vTHX->Ioldname)
#define PL_op (vTHX->Iop)
#define PL_op_exec_cnt (vTHX->Iop_exec_cnt)
#define PL_op_mask (vTHX->Iop_mask)
#define PL_opfreehook (vTHX->Iopfreehook)
#define PL_origalen (vTHX->Iorigalen)
#define PL_origargc (vTHX->Iorigargc)
#define PL_origargv (vTHX->Iorigargv)
#define PL_origenviron (vTHX->Iorigenviron)
#define PL_origfilename (vTHX->Iorigfilename)
#define PL_ors_sv (vTHX->Iors_sv)
#define PL_osname (vTHX->Iosname)
#define PL_pad_reset_pending (vTHX->Ipad_reset_pending)
#define PL_padix (vTHX->Ipadix)
#define PL_padix_floor (vTHX->Ipadix_floor)
#define PL_padlist_generation (vTHX->Ipadlist_generation)
#define PL_padname_const (vTHX->Ipadname_const)
#define PL_padname_undef (vTHX->Ipadname_undef)
#define PL_parser (vTHX->Iparser)
#define PL_patchlevel (vTHX->Ipatchlevel)
#define PL_peepp (vTHX->Ipeepp)
#define PL_perl_destruct_level (vTHX->Iperl_destruct_level)
#define PL_perldb (vTHX->Iperldb)
#define PL_perlio (vTHX->Iperlio)
#define PL_phase (vTHX->Iphase)
#define PL_pidstatus (vTHX->Ipidstatus)
#define PL_preambleav (vTHX->Ipreambleav)
#define PL_profiledata (vTHX->Iprofiledata)
#define PL_psig_name (vTHX->Ipsig_name)
#define PL_psig_pend (vTHX->Ipsig_pend)
#define PL_psig_ptr (vTHX->Ipsig_ptr)
#define PL_ptr_table (vTHX->Iptr_table)
#define PL_random_state (vTHX->Irandom_state)
#define PL_reentrant_buffer (vTHX->Ireentrant_buffer)
#define PL_reentrant_retint (vTHX->Ireentrant_retint)
#define PL_reg_curpm (vTHX->Ireg_curpm)
#define PL_regex_pad (vTHX->Iregex_pad)
#define PL_regex_padav (vTHX->Iregex_padav)
#define PL_registered_mros (vTHX->Iregistered_mros)
#define PL_regmatch_slab (vTHX->Iregmatch_slab)
#define PL_regmatch_state (vTHX->Iregmatch_state)
#define PL_replgv (vTHX->Ireplgv)
#define PL_restartjmpenv (vTHX->Irestartjmpenv)
#define PL_restartop (vTHX->Irestartop)
#define PL_rpeepp (vTHX->Irpeepp)
#define PL_rs (vTHX->Irs)
#define PL_runops (vTHX->Irunops)
#define PL_savebegin (vTHX->Isavebegin)
#define PL_savestack (vTHX->Isavestack)
#define PL_savestack_ix (vTHX->Isavestack_ix)
#define PL_savestack_max (vTHX->Isavestack_max)



#define PL_scopestack (vTHX->Iscopestack)
#define PL_scopestack_ix (vTHX->Iscopestack_ix)
#define PL_scopestack_max (vTHX->Iscopestack_max)
#define PL_scopestack_name (vTHX->Iscopestack_name)
#define PL_secondgv (vTHX->Isecondgv)
#define PL_setlocale_buf (vTHX->Isetlocale_buf)
#define PL_setlocale_bufsize (vTHX->Isetlocale_bufsize)
#define PL_sharehook (vTHX->Isharehook)
#define PL_sig_pending (vTHX->Isig_pending)
#define PL_sighandler1p (vTHX->Isighandler1p)
#define PL_sighandler3p (vTHX->Isighandler3p)
#define PL_sighandlerp (vTHX->Isighandlerp)
#define PL_signalhook (vTHX->Isignalhook)
#define PL_signals (vTHX->Isignals)
#define PL_sortcop (vTHX->Isortcop)
#define PL_sortstash (vTHX->Isortstash)
#define PL_splitstr (vTHX->Isplitstr)
#define PL_srand_called (vTHX->Isrand_called)
#define PL_stack_base (vTHX->Istack_base)
#define PL_stack_max (vTHX->Istack_max)
#define PL_stack_sp (vTHX->Istack_sp)
#define PL_start_env (vTHX->Istart_env)
#define PL_stashcache (vTHX->Istashcache)
#define PL_stashpad (vTHX->Istashpad)
#define PL_stashpadix (vTHX->Istashpadix)
#define PL_stashpadmax (vTHX->Istashpadmax)
#define PL_statcache (vTHX->Istatcache)
#define PL_statgv (vTHX->Istatgv)
#define PL_statname (vTHX->Istatname)
#define PL_statusvalue (vTHX->Istatusvalue)
#define PL_statusvalue_posix (vTHX->Istatusvalue_posix)
#define PL_statusvalue_vms (vTHX->Istatusvalue_vms)
#define PL_stderrgv (vTHX->Istderrgv)
#define PL_stdingv (vTHX->Istdingv)
#define PL_strtab (vTHX->Istrtab)
#define PL_strxfrm_NUL_replacement (vTHX->Istrxfrm_NUL_replacement)
#define PL_strxfrm_is_behaved (vTHX->Istrxfrm_is_behaved)
#define PL_strxfrm_max_cp (vTHX->Istrxfrm_max_cp)
#define PL_sub_generation (vTHX->Isub_generation)
#define PL_subline (vTHX->Isubline)
#define PL_subname (vTHX->Isubname)
#define PL_sv_arenaroot (vTHX->Isv_arenaroot)
#define PL_sv_consts (vTHX->Isv_consts)
#define PL_sv_count (vTHX->Isv_count)
#define PL_sv_immortals (vTHX->Isv_immortals)
#define PL_sv_no (vTHX->Isv_no)
#define PL_sv_root (vTHX->Isv_root)
#define PL_sv_serial (vTHX->Isv_serial)
#define PL_sv_undef (vTHX->Isv_undef)
#define PL_sv_yes (vTHX->Isv_yes)
#define PL_sv_zero (vTHX->Isv_zero)
#define PL_sys_intern (vTHX->Isys_intern)
#define PL_taint_warn (vTHX->Itaint_warn)
#define PL_tainted (vTHX->Itainted)
#define PL_tainting (vTHX->Itainting)
#define PL_threadhook (vTHX->Ithreadhook)
#define PL_tmps_floor (vTHX->Itmps_floor)
#define PL_tmps_ix (vTHX->Itmps_ix)
#define PL_tmps_max (vTHX->Itmps_max)
#define PL_tmps_stack (vTHX->Itmps_stack)
#define PL_top_env (vTHX->Itop_env)
#define PL_toptarget (vTHX->Itoptarget)
#define PL_underlying_numeric_obj (vTHX->Iunderlying_numeric_obj)
#define PL_unicode (vTHX->Iunicode)
#define PL_unitcheckav (vTHX->Iunitcheckav)
#define PL_unitcheckav_save (vTHX->Iunitcheckav_save)
#define PL_unlockhook (vTHX->Iunlockhook)
#define PL_unsafe (vTHX->Iunsafe)
#define PL_utf8_charname_begin (vTHX->Iutf8_charname_begin)
#define PL_utf8_charname_continue (vTHX->Iutf8_charname_continue)
#define PL_utf8_foldclosures (vTHX->Iutf8_foldclosures)
#define PL_utf8_idcont (vTHX->Iutf8_idcont)
#define PL_utf8_idstart (vTHX->Iutf8_idstart)
#define PL_utf8_mark (vTHX->Iutf8_mark)
#define PL_utf8_perl_idcont (vTHX->Iutf8_perl_idcont)
#define PL_utf8_perl_idstart (vTHX->Iutf8_perl_idstart)
#define PL_utf8_tofold (vTHX->Iutf8_tofold)
#define PL_utf8_tolower (vTHX->Iutf8_tolower)
#define PL_utf8_tosimplefold (vTHX->Iutf8_tosimplefold)
#define PL_utf8_totitle (vTHX->Iutf8_totitle)
#define PL_utf8_toupper (vTHX->Iutf8_toupper)
#define PL_utf8_xidcont (vTHX->Iutf8_xidcont)
#define PL_utf8_xidstart (vTHX->Iutf8_xidstart)
#define PL_utf8cache (vTHX->Iutf8cache)
#define PL_utf8locale (vTHX->Iutf8locale)
#define PL_warn_locale (vTHX->Iwarn_locale)
#define PL_warnhook (vTHX->Iwarnhook)
#define PL_watchaddr (vTHX->Iwatchaddr)
#define PL_watchok (vTHX->Iwatchok)
#define PL_wcrtomb_ps (vTHX->Iwcrtomb_ps)
#define PL_xsubfilename (vTHX->Ixsubfilename)
# 5714 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4







#define PERLVAR(prefix,var,type) EXT type PL_ ##var;
#define PERLVARA(prefix,var,n,type) EXT type PL_ ##var[n];
#define PERLVARI(prefix,var,type,init) EXT type PL_ ##var INIT(init);
#define PERLVARIC(prefix,var,type,init) EXTCONST type PL_ ##var INIT(init);
# 5744 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 1 3 4
# 31 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 3 4
#define Gv_AMupdate(a,b) Perl_Gv_AMupdate(aTHX_ a,b)
#define SvAMAGIC_off Perl_SvAMAGIC_off
#define SvAMAGIC_on Perl_SvAMAGIC_on
#define SvTRUE(a) Perl_SvTRUE(aTHX_ a)
#define SvTRUE_NN(a) Perl_SvTRUE_NN(aTHX_ a)
#define SvTRUE_common(a,b) Perl_SvTRUE_common(aTHX_ a,b)
#define SvTRUE_nomg(a) Perl_SvTRUE_nomg(aTHX_ a)
#define _force_out_malformed_utf8_message(a,b,c,d) Perl__force_out_malformed_utf8_message(aTHX_ a,b,c,d)
#define _is_uni_FOO(a,b) Perl__is_uni_FOO(aTHX_ a,b)
#define _is_uni_perl_idcont(a) Perl__is_uni_perl_idcont(aTHX_ a)
#define _is_uni_perl_idstart(a) Perl__is_uni_perl_idstart(aTHX_ a)
#define _is_utf8_FOO(a,b,c) Perl__is_utf8_FOO(aTHX_ a,b,c)
#define _is_utf8_perl_idcont(a,b) Perl__is_utf8_perl_idcont(aTHX_ a,b)
#define _is_utf8_perl_idstart(a,b) Perl__is_utf8_perl_idstart(aTHX_ a,b)
#define _to_uni_fold_flags(a,b,c,d) Perl__to_uni_fold_flags(aTHX_ a,b,c,d)
#define _to_utf8_fold_flags(a,b,c,d,e) Perl__to_utf8_fold_flags(aTHX_ a,b,c,d,e)
#define _to_utf8_lower_flags(a,b,c,d,e) Perl__to_utf8_lower_flags(aTHX_ a,b,c,d,e)
#define _to_utf8_title_flags(a,b,c,d,e) Perl__to_utf8_title_flags(aTHX_ a,b,c,d,e)
#define _to_utf8_upper_flags(a,b,c,d,e) Perl__to_utf8_upper_flags(aTHX_ a,b,c,d,e)
#define _utf8n_to_uvchr_msgs_helper Perl__utf8n_to_uvchr_msgs_helper
#define amagic_call(a,b,c,d) Perl_amagic_call(aTHX_ a,b,c,d)
#define amagic_deref_call(a,b) Perl_amagic_deref_call(aTHX_ a,b)
#define apply_attrs_string(a,b,c,d) Perl_apply_attrs_string(aTHX_ a,b,c,d)
#define atfork_lock Perl_atfork_lock
#define atfork_unlock Perl_atfork_unlock
#define av_clear(a) Perl_av_clear(aTHX_ a)
#define av_count(a) Perl_av_count(aTHX_ a)
#define av_delete(a,b,c) Perl_av_delete(aTHX_ a,b,c)
#define av_exists(a,b) Perl_av_exists(aTHX_ a,b)
#define av_extend(a,b) Perl_av_extend(aTHX_ a,b)
#define av_fetch(a,b,c) Perl_av_fetch(aTHX_ a,b,c)
#define av_fill(a,b) Perl_av_fill(aTHX_ a,b)
#define av_len(a) Perl_av_len(aTHX_ a)
#define av_make(a,b) Perl_av_make(aTHX_ a,b)
#define av_pop(a) Perl_av_pop(aTHX_ a)
#define av_push(a,b) Perl_av_push(aTHX_ a,b)
#define av_shift(a) Perl_av_shift(aTHX_ a)
#define av_store(a,b,c) Perl_av_store(aTHX_ a,b,c)
#define av_undef(a) Perl_av_undef(aTHX_ a)
#define av_unshift(a,b) Perl_av_unshift(aTHX_ a,b)
#define block_end(a,b) Perl_block_end(aTHX_ a,b)
#define block_gimme() Perl_block_gimme(aTHX)
#define block_start(a) Perl_block_start(aTHX_ a)
#define bytes_cmp_utf8(a,b,c,d) Perl_bytes_cmp_utf8(aTHX_ a,b,c,d)
#define bytes_from_utf8_loc Perl_bytes_from_utf8_loc
#define bytes_to_utf8(a,b) Perl_bytes_to_utf8(aTHX_ a,b)
#define call_argv(a,b,c) Perl_call_argv(aTHX_ a,b,c)
#define call_atexit(a,b) Perl_call_atexit(aTHX_ a,b)
#define call_list(a,b) Perl_call_list(aTHX_ a,b)
#define call_method(a,b) Perl_call_method(aTHX_ a,b)
#define call_pv(a,b) Perl_call_pv(aTHX_ a,b)
#define call_sv(a,b) Perl_call_sv(aTHX_ a,b)
#define caller_cx(a,b) Perl_caller_cx(aTHX_ a,b)
#define cast_i32 Perl_cast_i32
#define cast_iv Perl_cast_iv
#define cast_ulong Perl_cast_ulong
#define cast_uv Perl_cast_uv
#define ck_entersub_args_list(a) Perl_ck_entersub_args_list(aTHX_ a)
#define ck_entersub_args_proto(a,b,c) Perl_ck_entersub_args_proto(aTHX_ a,b,c)
#define ck_entersub_args_proto_or_list(a,b,c) Perl_ck_entersub_args_proto_or_list(aTHX_ a,b,c)




#define clear_defarray(a,b) Perl_clear_defarray(aTHX_ a,b)
#define cop_fetch_label(a,b,c) Perl_cop_fetch_label(aTHX_ a,b,c)
#define cop_store_label(a,b,c,d) Perl_cop_store_label(aTHX_ a,b,c,d)



#define croak_memory_wrap Perl_croak_memory_wrap
#define croak_no_modify Perl_croak_no_modify
#define croak_sv(a) Perl_croak_sv(aTHX_ a)
#define croak_xs_usage Perl_croak_xs_usage
#define csighandler1 Perl_csighandler1
#define csighandler3 Perl_csighandler3

#define custom_op_desc(a) Perl_custom_op_desc(aTHX_ a)


#define custom_op_name(a) Perl_custom_op_name(aTHX_ a)

#define cv_clone(a) Perl_cv_clone(aTHX_ a)
#define cv_const_sv Perl_cv_const_sv
#define cv_get_call_checker(a,b,c) Perl_cv_get_call_checker(aTHX_ a,b,c)
#define cv_get_call_checker_flags(a,b,c,d,e) Perl_cv_get_call_checker_flags(aTHX_ a,b,c,d,e)
#define cv_name(a,b,c) Perl_cv_name(aTHX_ a,b,c)
#define cv_set_call_checker(a,b,c) Perl_cv_set_call_checker(aTHX_ a,b,c)
#define cv_set_call_checker_flags(a,b,c,d) Perl_cv_set_call_checker_flags(aTHX_ a,b,c,d)
#define cv_undef(a) Perl_cv_undef(aTHX_ a)
#define cx_dump(a) Perl_cx_dump(aTHX_ a)
#define cxinc() Perl_cxinc(aTHX)



#define debop(a) Perl_debop(aTHX_ a)
#define debprofdump() Perl_debprofdump(aTHX)
#define debstack() Perl_debstack(aTHX)
#define debstackptrs() Perl_debstackptrs(aTHX)
#define delimcpy Perl_delimcpy
#define despatch_signals() Perl_despatch_signals(aTHX)



#define die_sv(a) Perl_die_sv(aTHX_ a)

#define do_binmode(a,b,c) Perl_do_binmode(aTHX_ a,b,c)

#define do_close(a,b) Perl_do_close(aTHX_ a,b)
#define do_gv_dump(a,b,c,d) Perl_do_gv_dump(aTHX_ a,b,c,d)
#define do_gvgv_dump(a,b,c,d) Perl_do_gvgv_dump(aTHX_ a,b,c,d)
#define do_hv_dump(a,b,c,d) Perl_do_hv_dump(aTHX_ a,b,c,d)
#define do_join(a,b,c,d) Perl_do_join(aTHX_ a,b,c,d)
#define do_magic_dump(a,b,c,d,e,f,g) Perl_do_magic_dump(aTHX_ a,b,c,d,e,f,g)
#define do_op_dump(a,b,c) Perl_do_op_dump(aTHX_ a,b,c)

#define do_open9(a,b,c,d,e,f,g,h,i) Perl_do_open9(aTHX_ a,b,c,d,e,f,g,h,i)

#define do_openn(a,b,c,d,e,f,g,h,i) Perl_do_openn(aTHX_ a,b,c,d,e,f,g,h,i)
#define do_pmop_dump(a,b,c) Perl_do_pmop_dump(aTHX_ a,b,c)
#define do_sprintf(a,b,c) Perl_do_sprintf(aTHX_ a,b,c)
#define do_sv_dump(a,b,c,d,e,f,g) Perl_do_sv_dump(aTHX_ a,b,c,d,e,f,g)
#define doing_taint Perl_doing_taint
#define doref(a,b,c) Perl_doref(aTHX_ a,b,c)
#define dounwind(a) Perl_dounwind(aTHX_ a)
#define dowantarray() Perl_dowantarray(aTHX)
#define dump_all() Perl_dump_all(aTHX)
#define dump_eval() Perl_dump_eval(aTHX)
#define dump_form(a) Perl_dump_form(aTHX_ a)



#define dump_packsubs(a) Perl_dump_packsubs(aTHX_ a)
#define dump_sub(a) Perl_dump_sub(aTHX_ a)
#define dump_vindent(a,b,c,d) Perl_dump_vindent(aTHX_ a,b,c,d)
#define eval_pv(a,b) Perl_eval_pv(aTHX_ a,b)
#define eval_sv(a,b) Perl_eval_sv(aTHX_ a,b)
#define fbm_compile(a,b) Perl_fbm_compile(aTHX_ a,b)
#define fbm_instr(a,b,c,d) Perl_fbm_instr(aTHX_ a,b,c,d)
#define filter_add(a,b) Perl_filter_add(aTHX_ a,b)
#define filter_del(a) Perl_filter_del(aTHX_ a)
#define filter_read(a,b,c) Perl_filter_read(aTHX_ a,b,c)
#define find_runcv(a) Perl_find_runcv(aTHX_ a)
#define find_rundefsv() Perl_find_rundefsv(aTHX)
#define find_rundefsvoffset() Perl_find_rundefsvoffset(aTHX)
#define foldEQ Perl_foldEQ
#define foldEQ_latin1 Perl_foldEQ_latin1
#define foldEQ_locale Perl_foldEQ_locale
#define foldEQ_utf8_flags(a,b,c,d,e,f,g,h,i) Perl_foldEQ_utf8_flags(aTHX_ a,b,c,d,e,f,g,h,i)



#define free_tmps() Perl_free_tmps(aTHX)
#define get_av(a,b) Perl_get_av(aTHX_ a,b)
#define get_context Perl_get_context
#define get_cv(a,b) Perl_get_cv(aTHX_ a,b)
#define get_cvn_flags(a,b,c) Perl_get_cvn_flags(aTHX_ a,b,c)
#define get_hv(a,b) Perl_get_hv(aTHX_ a,b)
#define get_op_descs() Perl_get_op_descs(aTHX)
#define get_op_names() Perl_get_op_names(aTHX)
#define get_ppaddr() Perl_get_ppaddr(aTHX)
#define get_sv(a,b) Perl_get_sv(aTHX_ a,b)
#define get_vtbl(a) Perl_get_vtbl(aTHX_ a)
#define getcwd_sv(a) Perl_getcwd_sv(aTHX_ a)
#define gp_free(a) Perl_gp_free(aTHX_ a)
#define gp_ref(a) Perl_gp_ref(aTHX_ a)
#define grok_bin_oct_hex(a,b,c,d,e,f,g) Perl_grok_bin_oct_hex(aTHX_ a,b,c,d,e,f,g)
#define grok_infnan(a,b) Perl_grok_infnan(aTHX_ a,b)
#define grok_number(a,b,c) Perl_grok_number(aTHX_ a,b,c)
#define grok_number_flags(a,b,c,d) Perl_grok_number_flags(aTHX_ a,b,c,d)
#define grok_numeric_radix(a,b) Perl_grok_numeric_radix(aTHX_ a,b)
#define gv_add_by_type(a,b) Perl_gv_add_by_type(aTHX_ a,b)
#define gv_autoload_pv(a,b,c) Perl_gv_autoload_pv(aTHX_ a,b,c)
#define gv_autoload_pvn(a,b,c,d) Perl_gv_autoload_pvn(aTHX_ a,b,c,d)
#define gv_autoload_sv(a,b,c) Perl_gv_autoload_sv(aTHX_ a,b,c)
#define gv_check(a) Perl_gv_check(aTHX_ a)
#define gv_const_sv(a) Perl_gv_const_sv(aTHX_ a)
#define gv_dump(a) Perl_gv_dump(aTHX_ a)

#define gv_efullname(a,b) Perl_gv_efullname(aTHX_ a,b)

#define gv_efullname4(a,b,c,d) Perl_gv_efullname4(aTHX_ a,b,c,d)
#define gv_fetchfile(a) Perl_gv_fetchfile(aTHX_ a)
#define gv_fetchfile_flags(a,b,c) Perl_gv_fetchfile_flags(aTHX_ a,b,c)
#define gv_fetchmeth_pv(a,b,c,d) Perl_gv_fetchmeth_pv(aTHX_ a,b,c,d)
#define gv_fetchmeth_pv_autoload(a,b,c,d) Perl_gv_fetchmeth_pv_autoload(aTHX_ a,b,c,d)
#define gv_fetchmeth_pvn(a,b,c,d,e) Perl_gv_fetchmeth_pvn(aTHX_ a,b,c,d,e)
#define gv_fetchmeth_pvn_autoload(a,b,c,d,e) Perl_gv_fetchmeth_pvn_autoload(aTHX_ a,b,c,d,e)
#define gv_fetchmeth_sv(a,b,c,d) Perl_gv_fetchmeth_sv(aTHX_ a,b,c,d)
#define gv_fetchmeth_sv_autoload(a,b,c,d) Perl_gv_fetchmeth_sv_autoload(aTHX_ a,b,c,d)
#define gv_fetchmethod_autoload(a,b,c) Perl_gv_fetchmethod_autoload(aTHX_ a,b,c)
#define gv_fetchmethod_pv_flags(a,b,c) Perl_gv_fetchmethod_pv_flags(aTHX_ a,b,c)
#define gv_fetchmethod_pvn_flags(a,b,c,d) Perl_gv_fetchmethod_pvn_flags(aTHX_ a,b,c,d)
#define gv_fetchmethod_sv_flags(a,b,c) Perl_gv_fetchmethod_sv_flags(aTHX_ a,b,c)
#define gv_fetchpv(a,b,c) Perl_gv_fetchpv(aTHX_ a,b,c)
#define gv_fetchpvn_flags(a,b,c,d) Perl_gv_fetchpvn_flags(aTHX_ a,b,c,d)
#define gv_fetchsv(a,b,c) Perl_gv_fetchsv(aTHX_ a,b,c)

#define gv_fullname(a,b) Perl_gv_fullname(aTHX_ a,b)

#define gv_fullname4(a,b,c,d) Perl_gv_fullname4(aTHX_ a,b,c,d)
#define gv_handler(a,b) Perl_gv_handler(aTHX_ a,b)
#define gv_init_pv(a,b,c,d) Perl_gv_init_pv(aTHX_ a,b,c,d)
#define gv_init_pvn(a,b,c,d,e) Perl_gv_init_pvn(aTHX_ a,b,c,d,e)
#define gv_init_sv(a,b,c,d) Perl_gv_init_sv(aTHX_ a,b,c,d)
#define gv_name_set(a,b,c,d) Perl_gv_name_set(aTHX_ a,b,c,d)
#define gv_stashpv(a,b) Perl_gv_stashpv(aTHX_ a,b)
#define gv_stashpvn(a,b,c) Perl_gv_stashpvn(aTHX_ a,b,c)
#define gv_stashsv(a,b) Perl_gv_stashsv(aTHX_ a,b)
#define hv_bucket_ratio(a) Perl_hv_bucket_ratio(aTHX_ a)
#define hv_clear(a) Perl_hv_clear(aTHX_ a)
#define hv_clear_placeholders(a) Perl_hv_clear_placeholders(aTHX_ a)
#define hv_common(a,b,c,d,e,f,g,h) Perl_hv_common(aTHX_ a,b,c,d,e,f,g,h)
#define hv_common_key_len(a,b,c,d,e,f) Perl_hv_common_key_len(aTHX_ a,b,c,d,e,f)
#define hv_copy_hints_hv(a) Perl_hv_copy_hints_hv(aTHX_ a)
#define hv_delayfree_ent(a,b) Perl_hv_delayfree_ent(aTHX_ a,b)
#define hv_free_ent(a,b) Perl_hv_free_ent(aTHX_ a,b)
#define hv_iterinit(a) Perl_hv_iterinit(aTHX_ a)
#define hv_iterkey(a,b) Perl_hv_iterkey(aTHX_ a,b)
#define hv_iterkeysv(a) Perl_hv_iterkeysv(aTHX_ a)
#define hv_iternext_flags(a,b) Perl_hv_iternext_flags(aTHX_ a,b)
#define hv_iternextsv(a,b,c) Perl_hv_iternextsv(aTHX_ a,b,c)
#define hv_iterval(a,b) Perl_hv_iterval(aTHX_ a,b)
#define hv_ksplit(a,b) Perl_hv_ksplit(aTHX_ a,b)
#define hv_name_set(a,b,c,d) Perl_hv_name_set(aTHX_ a,b,c,d)
#define hv_rand_set(a,b) Perl_hv_rand_set(aTHX_ a,b)
#define hv_scalar(a) Perl_hv_scalar(aTHX_ a)
#define init_i18nl10n(a) Perl_init_i18nl10n(aTHX_ a)

#define init_i18nl14n(a) Perl_init_i18nl14n(aTHX_ a)

#define init_stacks() Perl_init_stacks(aTHX)
#define init_tm(a) Perl_init_tm(aTHX_ a)
#define intro_my() Perl_intro_my(aTHX)
#define isC9_STRICT_UTF8_CHAR Perl_isC9_STRICT_UTF8_CHAR
#define isSTRICT_UTF8_CHAR Perl_isSTRICT_UTF8_CHAR
#define isUTF8_CHAR Perl_isUTF8_CHAR
#define is_c9strict_utf8_string_loclen Perl_is_c9strict_utf8_string_loclen
#define is_lvalue_sub() Perl_is_lvalue_sub(aTHX)
#define is_safe_syscall(a,b,c,d) Perl_is_safe_syscall(aTHX_ a,b,c,d)
#define is_strict_utf8_string_loclen Perl_is_strict_utf8_string_loclen

#define is_utf8_char Perl_is_utf8_char

#define is_utf8_char_helper Perl_is_utf8_char_helper
#define is_utf8_fixed_width_buf_loclen_flags Perl_is_utf8_fixed_width_buf_loclen_flags
#define is_utf8_invariant_string_loc Perl_is_utf8_invariant_string_loc
#define is_utf8_string_flags Perl_is_utf8_string_flags
#define is_utf8_string_loclen Perl_is_utf8_string_loclen
#define is_utf8_string_loclen_flags Perl_is_utf8_string_loclen_flags
#define is_utf8_valid_partial_char_flags Perl_is_utf8_valid_partial_char_flags
#define isinfnan Perl_isinfnan
#define leave_adjust_stacks(a,b,c,d) Perl_leave_adjust_stacks(aTHX_ a,b,c,d)
#define leave_scope(a) Perl_leave_scope(aTHX_ a)
#define lex_bufutf8() Perl_lex_bufutf8(aTHX)
#define lex_discard_to(a) Perl_lex_discard_to(aTHX_ a)
#define lex_grow_linestr(a) Perl_lex_grow_linestr(aTHX_ a)
#define lex_next_chunk(a) Perl_lex_next_chunk(aTHX_ a)
#define lex_peek_unichar(a) Perl_lex_peek_unichar(aTHX_ a)
#define lex_read_space(a) Perl_lex_read_space(aTHX_ a)
#define lex_read_to(a) Perl_lex_read_to(aTHX_ a)
#define lex_read_unichar(a) Perl_lex_read_unichar(aTHX_ a)
#define lex_start(a,b,c) Perl_lex_start(aTHX_ a,b,c)
#define lex_stuff_pv(a,b) Perl_lex_stuff_pv(aTHX_ a,b)
#define lex_stuff_pvn(a,b,c) Perl_lex_stuff_pvn(aTHX_ a,b,c)
#define lex_stuff_sv(a,b) Perl_lex_stuff_sv(aTHX_ a,b)
#define lex_unstuff(a) Perl_lex_unstuff(aTHX_ a)



#define looks_like_number(a) Perl_looks_like_number(aTHX_ a)
#define magic_dump(a) Perl_magic_dump(aTHX_ a)
#define markstack_grow() Perl_markstack_grow(aTHX)



#define mess_sv(a,b) Perl_mess_sv(aTHX_ a,b)
#define mg_clear(a) Perl_mg_clear(aTHX_ a)
#define mg_copy(a,b,c,d) Perl_mg_copy(aTHX_ a,b,c,d)
#define mg_find Perl_mg_find
#define mg_findext Perl_mg_findext
#define mg_free(a) Perl_mg_free(aTHX_ a)
#define mg_free_type(a,b) Perl_mg_free_type(aTHX_ a,b)
#define mg_freeext(a,b,c) Perl_mg_freeext(aTHX_ a,b,c)
#define mg_get(a) Perl_mg_get(aTHX_ a)
#define mg_length(a) Perl_mg_length(aTHX_ a)
#define mg_magical Perl_mg_magical
#define mg_set(a) Perl_mg_set(aTHX_ a)
#define mg_size(a) Perl_mg_size(aTHX_ a)
#define mini_mktime Perl_mini_mktime
#define moreswitches(a) Perl_moreswitches(aTHX_ a)
#define mortal_getenv Perl_mortal_getenv
#define mro_get_linear_isa(a) Perl_mro_get_linear_isa(aTHX_ a)
#define mro_method_changed_in(a) Perl_mro_method_changed_in(aTHX_ a)
#define my_atof(a) Perl_my_atof(aTHX_ a)
#define my_atof3(a,b,c) Perl_my_atof3(aTHX_ a,b,c)
#define my_dirfd Perl_my_dirfd
#define my_exit(a) Perl_my_exit(aTHX_ a)
#define my_failure_exit() Perl_my_failure_exit(aTHX)
#define my_fflush_all() Perl_my_fflush_all(aTHX)
#define my_fork Perl_my_fork
#define my_popen_list(a,b,c) Perl_my_popen_list(aTHX_ a,b,c)
#define my_setenv(a,b) Perl_my_setenv(aTHX_ a,b)
#define my_socketpair Perl_my_socketpair
#define my_strftime(a,b,c,d,e,f,g,h,i,j) Perl_my_strftime(aTHX_ a,b,c,d,e,f,g,h,i,j)
#define my_strtod Perl_my_strtod
#define newANONATTRSUB(a,b,c,d) Perl_newANONATTRSUB(aTHX_ a,b,c,d)
#define newANONHASH(a) Perl_newANONHASH(aTHX_ a)
#define newANONLIST(a) Perl_newANONLIST(aTHX_ a)
#define newANONSUB(a,b,c) Perl_newANONSUB(aTHX_ a,b,c)
#define newASSIGNOP(a,b,c,d) Perl_newASSIGNOP(aTHX_ a,b,c,d)
#define newAVREF(a) Perl_newAVREF(aTHX_ a)
#define newBINOP(a,b,c,d) Perl_newBINOP(aTHX_ a,b,c,d)
#define newCONDOP(a,b,c,d) Perl_newCONDOP(aTHX_ a,b,c,d)
#define newCONSTSUB(a,b,c) Perl_newCONSTSUB(aTHX_ a,b,c)
#define newCONSTSUB_flags(a,b,c,d,e) Perl_newCONSTSUB_flags(aTHX_ a,b,c,d,e)
#define newCVREF(a,b) Perl_newCVREF(aTHX_ a,b)
#define newDEFSVOP() Perl_newDEFSVOP(aTHX)
#define newFORM(a,b,c) Perl_newFORM(aTHX_ a,b,c)
#define newFOROP(a,b,c,d,e) Perl_newFOROP(aTHX_ a,b,c,d,e)
#define newGIVENOP(a,b,c) Perl_newGIVENOP(aTHX_ a,b,c)
#define newGVOP(a,b,c) Perl_newGVOP(aTHX_ a,b,c)
#define newGVREF(a,b) Perl_newGVREF(aTHX_ a,b)
#define newGVgen_flags(a,b) Perl_newGVgen_flags(aTHX_ a,b)
#define newHVREF(a) Perl_newHVREF(aTHX_ a)
#define newHVhv(a) Perl_newHVhv(aTHX_ a)
#define newLISTOP(a,b,c,d) Perl_newLISTOP(aTHX_ a,b,c,d)
#define newLOGOP(a,b,c,d) Perl_newLOGOP(aTHX_ a,b,c,d)
#define newLOOPEX(a,b) Perl_newLOOPEX(aTHX_ a,b)
#define newLOOPOP(a,b,c,d) Perl_newLOOPOP(aTHX_ a,b,c,d)
#define newMETHOP(a,b,c) Perl_newMETHOP(aTHX_ a,b,c)
#define newMETHOP_named(a,b,c) Perl_newMETHOP_named(aTHX_ a,b,c)
#define newMYSUB(a,b,c,d,e) Perl_newMYSUB(aTHX_ a,b,c,d,e)
#define newNULLLIST() Perl_newNULLLIST(aTHX)
#define newOP(a,b) Perl_newOP(aTHX_ a,b)
#define newPADNAMELIST Perl_newPADNAMELIST
#define newPADNAMEouter Perl_newPADNAMEouter
#define newPADNAMEpvn Perl_newPADNAMEpvn
#define newPMOP(a,b) Perl_newPMOP(aTHX_ a,b)
#define newPROG(a) Perl_newPROG(aTHX_ a)
#define newPVOP(a,b,c) Perl_newPVOP(aTHX_ a,b,c)
#define newRANGE(a,b,c) Perl_newRANGE(aTHX_ a,b,c)
#define newRV(a) Perl_newRV(aTHX_ a)
#define newRV_noinc(a) Perl_newRV_noinc(aTHX_ a)
#define newSLICEOP(a,b,c) Perl_newSLICEOP(aTHX_ a,b,c)
#define newSTATEOP(a,b,c) Perl_newSTATEOP(aTHX_ a,b,c)
#define newSV(a) Perl_newSV(aTHX_ a)
#define newSVOP(a,b,c) Perl_newSVOP(aTHX_ a,b,c)
#define newSVREF(a) Perl_newSVREF(aTHX_ a)
#define newSV_type(a) Perl_newSV_type(aTHX_ a)
#define newSVhek(a) Perl_newSVhek(aTHX_ a)
#define newSViv(a) Perl_newSViv(aTHX_ a)
#define newSVnv(a) Perl_newSVnv(aTHX_ a)
#define newSVpv(a,b) Perl_newSVpv(aTHX_ a,b)
#define newSVpv_share(a,b) Perl_newSVpv_share(aTHX_ a,b)



#define newSVpvn(a,b) Perl_newSVpvn(aTHX_ a,b)
#define newSVpvn_flags(a,b,c) Perl_newSVpvn_flags(aTHX_ a,b,c)
#define newSVpvn_share(a,b,c) Perl_newSVpvn_share(aTHX_ a,b,c)
#define newSVrv(a,b) Perl_newSVrv(aTHX_ a,b)
#define newSVsv_flags(a,b) Perl_newSVsv_flags(aTHX_ a,b)
#define newSVuv(a) Perl_newSVuv(aTHX_ a)
#define newTRYCATCHOP(a,b,c,d) Perl_newTRYCATCHOP(aTHX_ a,b,c,d)
#define newUNOP(a,b,c) Perl_newUNOP(aTHX_ a,b,c)
#define newUNOP_AUX(a,b,c,d) Perl_newUNOP_AUX(aTHX_ a,b,c,d)
#define newWHENOP(a,b) Perl_newWHENOP(aTHX_ a,b)
#define newWHILEOP(a,b,c,d,e,f,g) Perl_newWHILEOP(aTHX_ a,b,c,d,e,f,g)
#define newXS(a,b,c) Perl_newXS(aTHX_ a,b,c)
#define newXS_flags(a,b,c,d,e) Perl_newXS_flags(aTHX_ a,b,c,d,e)
#define new_stackinfo(a,b) Perl_new_stackinfo(aTHX_ a,b)
#define new_version(a) Perl_new_version(aTHX_ a)
#define nothreadhook() Perl_nothreadhook(aTHX)
#define op_append_elem(a,b,c) Perl_op_append_elem(aTHX_ a,b,c)
#define op_append_list(a,b,c) Perl_op_append_list(aTHX_ a,b,c)
#define op_class(a) Perl_op_class(aTHX_ a)
#define op_contextualize(a,b) Perl_op_contextualize(aTHX_ a,b)
#define op_convert_list(a,b,c) Perl_op_convert_list(aTHX_ a,b,c)
#define op_dump(a) Perl_op_dump(aTHX_ a)
#define op_free(a) Perl_op_free(aTHX_ a)
#define op_linklist(a) Perl_op_linklist(aTHX_ a)
#define op_null(a) Perl_op_null(aTHX_ a)
#define op_parent Perl_op_parent
#define op_prepend_elem(a,b,c) Perl_op_prepend_elem(aTHX_ a,b,c)
#define op_refcnt_lock() Perl_op_refcnt_lock(aTHX)
#define op_refcnt_unlock() Perl_op_refcnt_unlock(aTHX)
#define op_scope(a) Perl_op_scope(aTHX_ a)
#define op_sibling_splice Perl_op_sibling_splice

#define pack_cat(a,b,c,d,e,f,g) Perl_pack_cat(aTHX_ a,b,c,d,e,f,g)

#define packlist(a,b,c,d,e) Perl_packlist(aTHX_ a,b,c,d,e)
#define pad_add_anon(a,b) Perl_pad_add_anon(aTHX_ a,b)
#define pad_add_name_pv(a,b,c,d) Perl_pad_add_name_pv(aTHX_ a,b,c,d)
#define pad_add_name_pvn(a,b,c,d,e) Perl_pad_add_name_pvn(aTHX_ a,b,c,d,e)
#define pad_add_name_sv(a,b,c,d) Perl_pad_add_name_sv(aTHX_ a,b,c,d)
#define pad_alloc(a,b) Perl_pad_alloc(aTHX_ a,b)

#define pad_compname_type(a) Perl_pad_compname_type(aTHX_ a)

#define pad_findmy_pv(a,b) Perl_pad_findmy_pv(aTHX_ a,b)
#define pad_findmy_pvn(a,b,c) Perl_pad_findmy_pvn(aTHX_ a,b,c)
#define pad_findmy_sv(a,b) Perl_pad_findmy_sv(aTHX_ a,b)
#define pad_new(a) Perl_pad_new(aTHX_ a)
#define pad_tidy(a) Perl_pad_tidy(aTHX_ a)
#define padnamelist_fetch Perl_padnamelist_fetch
#define padnamelist_store(a,b,c) Perl_padnamelist_store(aTHX_ a,b,c)
#define parse_arithexpr(a) Perl_parse_arithexpr(aTHX_ a)
#define parse_barestmt(a) Perl_parse_barestmt(aTHX_ a)
#define parse_block(a) Perl_parse_block(aTHX_ a)
#define parse_fullexpr(a) Perl_parse_fullexpr(aTHX_ a)
#define parse_fullstmt(a) Perl_parse_fullstmt(aTHX_ a)
#define parse_label(a) Perl_parse_label(aTHX_ a)
#define parse_listexpr(a) Perl_parse_listexpr(aTHX_ a)
#define parse_stmtseq(a) Perl_parse_stmtseq(aTHX_ a)
#define parse_subsignature(a) Perl_parse_subsignature(aTHX_ a)
#define parse_termexpr(a) Perl_parse_termexpr(aTHX_ a)
#define perly_sighandler Perl_perly_sighandler
#define pmop_dump(a) Perl_pmop_dump(aTHX_ a)
#define pop_scope() Perl_pop_scope(aTHX)
#define pregcomp(a,b) Perl_pregcomp(aTHX_ a,b)
#define pregexec(a,b,c,d,e,f,g) Perl_pregexec(aTHX_ a,b,c,d,e,f,g)
#define pregfree(a) Perl_pregfree(aTHX_ a)
#define pregfree2(a) Perl_pregfree2(aTHX_ a)
#define prescan_version(a,b,c,d,e,f,g) Perl_prescan_version(aTHX_ a,b,c,d,e,f,g)
#define ptr_table_clear(a) Perl_ptr_table_clear(aTHX_ a)
#define ptr_table_fetch(a,b) Perl_ptr_table_fetch(aTHX_ a,b)
#define ptr_table_free(a) Perl_ptr_table_free(aTHX_ a)
#define ptr_table_new() Perl_ptr_table_new(aTHX)
#define ptr_table_split(a) Perl_ptr_table_split(aTHX_ a)
#define ptr_table_store(a,b,c) Perl_ptr_table_store(aTHX_ a,b,c)
#define push_scope() Perl_push_scope(aTHX)
#define pv_display(a,b,c,d,e) Perl_pv_display(aTHX_ a,b,c,d,e)
#define pv_escape(a,b,c,d,e,f) Perl_pv_escape(aTHX_ a,b,c,d,e,f)
#define pv_pretty(a,b,c,d,e,f,g) Perl_pv_pretty(aTHX_ a,b,c,d,e,f,g)
#define pv_uni_display(a,b,c,d,e) Perl_pv_uni_display(aTHX_ a,b,c,d,e)
#define re_compile(a,b) Perl_re_compile(aTHX_ a,b)
#define re_intuit_start(a,b,c,d,e,f,g) Perl_re_intuit_start(aTHX_ a,b,c,d,e,f,g)
#define re_intuit_string(a) Perl_re_intuit_string(aTHX_ a)
#define reentrant_free() Perl_reentrant_free(aTHX)
#define reentrant_init() Perl_reentrant_init(aTHX)
#define reentrant_retry Perl_reentrant_retry
#define reentrant_size() Perl_reentrant_size(aTHX)
#define reg_named_buff_all(a,b) Perl_reg_named_buff_all(aTHX_ a,b)
#define reg_named_buff_exists(a,b,c) Perl_reg_named_buff_exists(aTHX_ a,b,c)
#define reg_named_buff_fetch(a,b,c) Perl_reg_named_buff_fetch(aTHX_ a,b,c)
#define reg_named_buff_firstkey(a,b) Perl_reg_named_buff_firstkey(aTHX_ a,b)
#define reg_named_buff_nextkey(a,b) Perl_reg_named_buff_nextkey(aTHX_ a,b)
#define reg_named_buff_scalar(a,b) Perl_reg_named_buff_scalar(aTHX_ a,b)
#define regdump(a) Perl_regdump(aTHX_ a)
#define regexec_flags(a,b,c,d,e,f,g,h) Perl_regexec_flags(aTHX_ a,b,c,d,e,f,g,h)
#define regfree_internal(a) Perl_regfree_internal(aTHX_ a)
#define reginitcolors() Perl_reginitcolors(aTHX)
#define regnext(a) Perl_regnext(aTHX_ a)
#define repeatcpy Perl_repeatcpy
#define require_pv(a) Perl_require_pv(aTHX_ a)
#define rninstr Perl_rninstr
#define rsignal(a,b) Perl_rsignal(aTHX_ a,b)
#define rsignal_state(a) Perl_rsignal_state(aTHX_ a)
#define runops_debug() Perl_runops_debug(aTHX)
#define runops_standard() Perl_runops_standard(aTHX)
#define rv2cv_op_cv(a,b) Perl_rv2cv_op_cv(aTHX_ a,b)
#define safesyscalloc Perl_safesyscalloc
#define safesysfree Perl_safesysfree
#define safesysmalloc Perl_safesysmalloc
#define safesysrealloc Perl_safesysrealloc
#define save_I16(a) Perl_save_I16(aTHX_ a)
#define save_I32(a) Perl_save_I32(aTHX_ a)
#define save_I8(a) Perl_save_I8(aTHX_ a)
#define save_adelete(a,b) Perl_save_adelete(aTHX_ a,b)
#define save_aelem_flags(a,b,c,d) Perl_save_aelem_flags(aTHX_ a,b,c,d)
#define save_alloc(a,b) Perl_save_alloc(aTHX_ a,b)
#define save_aptr(a) Perl_save_aptr(aTHX_ a)
#define save_ary(a) Perl_save_ary(aTHX_ a)
#define save_bool(a) Perl_save_bool(aTHX_ a)
#define save_clearsv(a) Perl_save_clearsv(aTHX_ a)
#define save_delete(a,b,c) Perl_save_delete(aTHX_ a,b,c)
#define save_destructor(a,b) Perl_save_destructor(aTHX_ a,b)
#define save_destructor_x(a,b) Perl_save_destructor_x(aTHX_ a,b)
#define save_generic_pvref(a) Perl_save_generic_pvref(aTHX_ a)
#define save_generic_svref(a) Perl_save_generic_svref(aTHX_ a)
#define save_gp(a,b) Perl_save_gp(aTHX_ a,b)
#define save_hash(a) Perl_save_hash(aTHX_ a)
#define save_hdelete(a,b) Perl_save_hdelete(aTHX_ a,b)
#define save_helem_flags(a,b,c,d) Perl_save_helem_flags(aTHX_ a,b,c,d)
#define save_hints() Perl_save_hints(aTHX)
#define save_hptr(a) Perl_save_hptr(aTHX_ a)
#define save_int(a) Perl_save_int(aTHX_ a)
#define save_item(a) Perl_save_item(aTHX_ a)
#define save_iv(a) Perl_save_iv(aTHX_ a)

#define save_list(a,b) Perl_save_list(aTHX_ a,b)


#define save_long(a) Perl_save_long(aTHX_ a)


#define save_nogv(a) Perl_save_nogv(aTHX_ a)

#define save_padsv_and_mortalize(a) Perl_save_padsv_and_mortalize(aTHX_ a)
#define save_pptr(a) Perl_save_pptr(aTHX_ a)
#define save_pushi32ptr(a,b,c) Perl_save_pushi32ptr(aTHX_ a,b,c)
#define save_pushptr(a,b) Perl_save_pushptr(aTHX_ a,b)
#define save_pushptrptr(a,b,c) Perl_save_pushptrptr(aTHX_ a,b,c)
#define save_re_context() Perl_save_re_context(aTHX)
#define save_scalar(a) Perl_save_scalar(aTHX_ a)
#define save_set_svflags(a,b,c) Perl_save_set_svflags(aTHX_ a,b,c)
#define save_shared_pvref(a) Perl_save_shared_pvref(aTHX_ a)
#define save_sptr(a) Perl_save_sptr(aTHX_ a)
#define save_svref(a) Perl_save_svref(aTHX_ a)
#define save_vptr(a) Perl_save_vptr(aTHX_ a)
#define savepv(a) Perl_savepv(aTHX_ a)
#define savepvn(a,b) Perl_savepvn(aTHX_ a,b)
#define savesharedpv(a) Perl_savesharedpv(aTHX_ a)
#define savesharedpvn(a,b) Perl_savesharedpvn(aTHX_ a,b)
#define savesharedsvpv(a) Perl_savesharedsvpv(aTHX_ a)
#define savestack_grow() Perl_savestack_grow(aTHX)
#define savestack_grow_cnt(a) Perl_savestack_grow_cnt(aTHX_ a)
#define savesvpv(a) Perl_savesvpv(aTHX_ a)
#define scan_bin(a,b,c) Perl_scan_bin(aTHX_ a,b,c)
#define scan_hex(a,b,c) Perl_scan_hex(aTHX_ a,b,c)
#define scan_num(a,b) Perl_scan_num(aTHX_ a,b)
#define scan_oct(a,b,c) Perl_scan_oct(aTHX_ a,b,c)
#define scan_version(a,b,c) Perl_scan_version(aTHX_ a,b,c)
#define scan_vstring(a,b,c) Perl_scan_vstring(aTHX_ a,b,c)
#define seed() Perl_seed(aTHX)
#define set_context Perl_set_context
#define setdefout(a) Perl_setdefout(aTHX_ a)
#define share_hek(a,b,c) Perl_share_hek(aTHX_ a,b,c)
#define sortsv(a,b,c) Perl_sortsv(aTHX_ a,b,c)
#define sortsv_flags(a,b,c,d) Perl_sortsv_flags(aTHX_ a,b,c,d)
#define stack_grow(a,b,c) Perl_stack_grow(aTHX_ a,b,c)
#define start_subparse(a,b) Perl_start_subparse(aTHX_ a,b)
#define str_to_version(a) Perl_str_to_version(aTHX_ a)
#define sv_2bool_flags(a,b) Perl_sv_2bool_flags(aTHX_ a,b)
#define sv_2cv(a,b,c,d) Perl_sv_2cv(aTHX_ a,b,c,d)
#define sv_2io(a) Perl_sv_2io(aTHX_ a)
#define sv_2iv_flags(a,b) Perl_sv_2iv_flags(aTHX_ a,b)
#define sv_2mortal(a) Perl_sv_2mortal(aTHX_ a)
#define sv_2nv_flags(a,b) Perl_sv_2nv_flags(aTHX_ a,b)
#define sv_2pv_flags(a,b,c) Perl_sv_2pv_flags(aTHX_ a,b,c)
#define sv_2pvbyte_flags(a,b,c) Perl_sv_2pvbyte_flags(aTHX_ a,b,c)
#define sv_2pvutf8_flags(a,b,c) Perl_sv_2pvutf8_flags(aTHX_ a,b,c)
#define sv_2uv_flags(a,b) Perl_sv_2uv_flags(aTHX_ a,b)
#define sv_backoff Perl_sv_backoff
#define sv_bless(a,b) Perl_sv_bless(aTHX_ a,b)
#define sv_cat_decode(a,b,c,d,e,f) Perl_sv_cat_decode(aTHX_ a,b,c,d,e,f)
#define sv_catpv(a,b) Perl_sv_catpv(aTHX_ a,b)
#define sv_catpv_flags(a,b,c) Perl_sv_catpv_flags(aTHX_ a,b,c)
#define sv_catpv_mg(a,b) Perl_sv_catpv_mg(aTHX_ a,b)




#define sv_catpvn_flags(a,b,c,d) Perl_sv_catpvn_flags(aTHX_ a,b,c,d)
#define sv_catsv_flags(a,b,c) Perl_sv_catsv_flags(aTHX_ a,b,c)
#define sv_chop(a,b) Perl_sv_chop(aTHX_ a,b)
#define sv_clear(a) Perl_sv_clear(aTHX_ a)
#define sv_cmp_flags(a,b,c) Perl_sv_cmp_flags(aTHX_ a,b,c)
#define sv_cmp_locale_flags(a,b,c) Perl_sv_cmp_locale_flags(aTHX_ a,b,c)
#define sv_copypv_flags(a,b,c) Perl_sv_copypv_flags(aTHX_ a,b,c)
#define sv_dec(a) Perl_sv_dec(aTHX_ a)
#define sv_dec_nomg(a) Perl_sv_dec_nomg(aTHX_ a)
#define sv_derived_from(a,b) Perl_sv_derived_from(aTHX_ a,b)
#define sv_derived_from_pv(a,b,c) Perl_sv_derived_from_pv(aTHX_ a,b,c)
#define sv_derived_from_pvn(a,b,c,d) Perl_sv_derived_from_pvn(aTHX_ a,b,c,d)
#define sv_derived_from_sv(a,b,c) Perl_sv_derived_from_sv(aTHX_ a,b,c)
#define sv_destroyable(a) Perl_sv_destroyable(aTHX_ a)
#define sv_does(a,b) Perl_sv_does(aTHX_ a,b)
#define sv_does_pv(a,b,c) Perl_sv_does_pv(aTHX_ a,b,c)
#define sv_does_pvn(a,b,c,d) Perl_sv_does_pvn(aTHX_ a,b,c,d)
#define sv_does_sv(a,b,c) Perl_sv_does_sv(aTHX_ a,b,c)
#define sv_dump(a) Perl_sv_dump(aTHX_ a)
#define sv_eq_flags(a,b,c) Perl_sv_eq_flags(aTHX_ a,b,c)
#define sv_force_normal_flags(a,b) Perl_sv_force_normal_flags(aTHX_ a,b)
#define sv_free(a) Perl_sv_free(aTHX_ a)
#define sv_get_backrefs Perl_sv_get_backrefs
#define sv_gets(a,b,c) Perl_sv_gets(aTHX_ a,b,c)
#define sv_grow(a,b) Perl_sv_grow(aTHX_ a,b)
#define sv_inc(a) Perl_sv_inc(aTHX_ a)
#define sv_inc_nomg(a) Perl_sv_inc_nomg(aTHX_ a)
#define sv_insert_flags(a,b,c,d,e,f) Perl_sv_insert_flags(aTHX_ a,b,c,d,e,f)
#define sv_isa(a,b) Perl_sv_isa(aTHX_ a,b)
#define sv_isa_sv(a,b) Perl_sv_isa_sv(aTHX_ a,b)
#define sv_isobject(a) Perl_sv_isobject(aTHX_ a)

#define sv_iv(a) Perl_sv_iv(aTHX_ a)

#define sv_len(a) Perl_sv_len(aTHX_ a)
#define sv_len_utf8(a) Perl_sv_len_utf8(aTHX_ a)
#define sv_magic(a,b,c,d,e) Perl_sv_magic(aTHX_ a,b,c,d,e)
#define sv_magicext(a,b,c,d,e,f) Perl_sv_magicext(aTHX_ a,b,c,d,e,f)
#define sv_mortalcopy_flags(a,b) Perl_sv_mortalcopy_flags(aTHX_ a,b)
#define sv_newmortal() Perl_sv_newmortal(aTHX)
#define sv_newref(a) Perl_sv_newref(aTHX_ a)

#define sv_nolocking(a) Perl_sv_nolocking(aTHX_ a)

#define sv_nosharing(a) Perl_sv_nosharing(aTHX_ a)

#define sv_nounlocking(a) Perl_sv_nounlocking(aTHX_ a)


#define sv_nv(a) Perl_sv_nv(aTHX_ a)

#define sv_peek(a) Perl_sv_peek(aTHX_ a)
#define sv_pos_b2u(a,b) Perl_sv_pos_b2u(aTHX_ a,b)
#define sv_pos_b2u_flags(a,b,c) Perl_sv_pos_b2u_flags(aTHX_ a,b,c)
#define sv_pos_u2b(a,b,c) Perl_sv_pos_u2b(aTHX_ a,b,c)
#define sv_pos_u2b_flags(a,b,c,d) Perl_sv_pos_u2b_flags(aTHX_ a,b,c,d)

#define sv_pvbyten(a,b) Perl_sv_pvbyten(aTHX_ a,b)

#define sv_pvbyten_force(a,b) Perl_sv_pvbyten_force(aTHX_ a,b)

#define sv_pvn(a,b) Perl_sv_pvn(aTHX_ a,b)

#define sv_pvn_force_flags(a,b,c) Perl_sv_pvn_force_flags(aTHX_ a,b,c)

#define sv_pvn_nomg(a,b) Perl_sv_pvn_nomg(aTHX_ a,b)


#define sv_pvutf8n(a,b) Perl_sv_pvutf8n(aTHX_ a,b)

#define sv_pvutf8n_force(a,b) Perl_sv_pvutf8n_force(aTHX_ a,b)
#define sv_recode_to_utf8(a,b) Perl_sv_recode_to_utf8(aTHX_ a,b)
#define sv_ref(a,b,c) Perl_sv_ref(aTHX_ a,b,c)
#define sv_reftype(a,b) Perl_sv_reftype(aTHX_ a,b)
#define sv_replace(a,b) Perl_sv_replace(aTHX_ a,b)
#define sv_report_used() Perl_sv_report_used(aTHX)
#define sv_reset(a,b) Perl_sv_reset(aTHX_ a,b)
#define sv_rvunweaken(a) Perl_sv_rvunweaken(aTHX_ a)
#define sv_rvweaken(a) Perl_sv_rvweaken(aTHX_ a)
#define sv_set_undef(a) Perl_sv_set_undef(aTHX_ a)
#define sv_setiv(a,b) Perl_sv_setiv(aTHX_ a,b)
#define sv_setiv_mg(a,b) Perl_sv_setiv_mg(aTHX_ a,b)
#define sv_setnv(a,b) Perl_sv_setnv(aTHX_ a,b)
#define sv_setnv_mg(a,b) Perl_sv_setnv_mg(aTHX_ a,b)
#define sv_setpv(a,b) Perl_sv_setpv(aTHX_ a,b)
#define sv_setpv_bufsize(a,b,c) Perl_sv_setpv_bufsize(aTHX_ a,b,c)
#define sv_setpv_mg(a,b) Perl_sv_setpv_mg(aTHX_ a,b)





#define sv_setpviv(a,b) Perl_sv_setpviv(aTHX_ a,b)


#define sv_setpviv_mg(a,b) Perl_sv_setpviv_mg(aTHX_ a,b)

#define sv_setpvn(a,b,c) Perl_sv_setpvn(aTHX_ a,b,c)
#define sv_setpvn_mg(a,b,c) Perl_sv_setpvn_mg(aTHX_ a,b,c)
#define sv_setref_iv(a,b,c) Perl_sv_setref_iv(aTHX_ a,b,c)
#define sv_setref_nv(a,b,c) Perl_sv_setref_nv(aTHX_ a,b,c)
#define sv_setref_pv(a,b,c) Perl_sv_setref_pv(aTHX_ a,b,c)
#define sv_setref_pvn(a,b,c,d) Perl_sv_setref_pvn(aTHX_ a,b,c,d)
#define sv_setref_uv(a,b,c) Perl_sv_setref_uv(aTHX_ a,b,c)
#define sv_setsv_flags(a,b,c) Perl_sv_setsv_flags(aTHX_ a,b,c)
#define sv_setsv_mg(a,b) Perl_sv_setsv_mg(aTHX_ a,b)
#define sv_setuv(a,b) Perl_sv_setuv(aTHX_ a,b)
#define sv_setuv_mg(a,b) Perl_sv_setuv_mg(aTHX_ a,b)
#define sv_string_from_errnum(a,b) Perl_sv_string_from_errnum(aTHX_ a,b)
#define sv_tainted(a) Perl_sv_tainted(aTHX_ a)
#define sv_true(a) Perl_sv_true(aTHX_ a)
#define sv_uni_display(a,b,c,d) Perl_sv_uni_display(aTHX_ a,b,c,d)
#define sv_unmagic(a,b) Perl_sv_unmagic(aTHX_ a,b)
#define sv_unmagicext(a,b,c) Perl_sv_unmagicext(aTHX_ a,b,c)
#define sv_unref_flags(a,b) Perl_sv_unref_flags(aTHX_ a,b)
#define sv_untaint(a) Perl_sv_untaint(aTHX_ a)
#define sv_upgrade(a,b) Perl_sv_upgrade(aTHX_ a,b)
#define sv_usepvn_flags(a,b,c,d) Perl_sv_usepvn_flags(aTHX_ a,b,c,d)
#define sv_utf8_decode(a) Perl_sv_utf8_decode(aTHX_ a)
#define sv_utf8_downgrade_flags(a,b,c) Perl_sv_utf8_downgrade_flags(aTHX_ a,b,c)
#define sv_utf8_encode(a) Perl_sv_utf8_encode(aTHX_ a)
#define sv_utf8_upgrade_flags_grow(a,b,c) Perl_sv_utf8_upgrade_flags_grow(aTHX_ a,b,c)

#define sv_uv(a) Perl_sv_uv(aTHX_ a)

#define sv_vcatpvf(a,b,c) Perl_sv_vcatpvf(aTHX_ a,b,c)
#define sv_vcatpvf_mg(a,b,c) Perl_sv_vcatpvf_mg(aTHX_ a,b,c)
#define sv_vcatpvfn(a,b,c,d,e,f,g) Perl_sv_vcatpvfn(aTHX_ a,b,c,d,e,f,g)
#define sv_vcatpvfn_flags(a,b,c,d,e,f,g,h) Perl_sv_vcatpvfn_flags(aTHX_ a,b,c,d,e,f,g,h)
#define sv_vsetpvf(a,b,c) Perl_sv_vsetpvf(aTHX_ a,b,c)
#define sv_vsetpvf_mg(a,b,c) Perl_sv_vsetpvf_mg(aTHX_ a,b,c)
#define sv_vsetpvfn(a,b,c,d,e,f,g) Perl_sv_vsetpvfn(aTHX_ a,b,c,d,e,f,g)
#define switch_to_global_locale Perl_switch_to_global_locale
#define sync_locale Perl_sync_locale
#define taint_env() Perl_taint_env(aTHX)
#define taint_proper(a,b) Perl_taint_proper(aTHX_ a,b)
#define thread_locale_init Perl_thread_locale_init
#define thread_locale_term Perl_thread_locale_term
#define to_uni_lower(a,b,c) Perl_to_uni_lower(aTHX_ a,b,c)
#define to_uni_title(a,b,c) Perl_to_uni_title(aTHX_ a,b,c)
#define to_uni_upper(a,b,c) Perl_to_uni_upper(aTHX_ a,b,c)

#define unpack_str(a,b,c,d,e,f,g,h) Perl_unpack_str(aTHX_ a,b,c,d,e,f,g,h)

#define unpackstring(a,b,c,d,e) Perl_unpackstring(aTHX_ a,b,c,d,e)
#define unsharepvn(a,b,c) Perl_unsharepvn(aTHX_ a,b,c)
#define upg_version(a,b) Perl_upg_version(aTHX_ a,b)
#define utf8_distance(a,b) Perl_utf8_distance(aTHX_ a,b)
#define utf8_hop Perl_utf8_hop
#define utf8_hop_back Perl_utf8_hop_back
#define utf8_hop_forward Perl_utf8_hop_forward
#define utf8_hop_safe Perl_utf8_hop_safe
#define utf8_length(a,b) Perl_utf8_length(aTHX_ a,b)
#define utf8_to_bytes(a,b) Perl_utf8_to_bytes(aTHX_ a,b)

#define utf8_to_uvchr(a,b) Perl_utf8_to_uvchr(aTHX_ a,b)

#define utf8_to_uvchr_buf_helper(a,b,c) Perl_utf8_to_uvchr_buf_helper(aTHX_ a,b,c)

#define utf8_to_uvuni(a,b) Perl_utf8_to_uvuni(aTHX_ a,b)

#define utf8_to_uvuni_buf(a,b,c) Perl_utf8_to_uvuni_buf(aTHX_ a,b,c)
#define utf8n_to_uvchr_msgs Perl_utf8n_to_uvchr_msgs

#define utf8n_to_uvuni(a,b,c,d) Perl_utf8n_to_uvuni(aTHX_ a,b,c,d)

#define uvoffuni_to_utf8_flags_msgs(a,b,c,d) Perl_uvoffuni_to_utf8_flags_msgs(aTHX_ a,b,c,d)
#define uvuni_to_utf8(a,b) Perl_uvuni_to_utf8(aTHX_ a,b)

#define uvuni_to_utf8_flags(a,b,c) Perl_uvuni_to_utf8_flags(aTHX_ a,b,c)

#define valid_utf8_to_uvchr Perl_valid_utf8_to_uvchr

#define valid_utf8_to_uvuni(a,b) Perl_valid_utf8_to_uvuni(aTHX_ a,b)

#define vcmp(a,b) Perl_vcmp(aTHX_ a,b)
#define vcroak(a,b) Perl_vcroak(aTHX_ a,b)
#define vdeb(a,b) Perl_vdeb(aTHX_ a,b)
#define vform(a,b) Perl_vform(aTHX_ a,b)
#define vload_module(a,b,c,d) Perl_vload_module(aTHX_ a,b,c,d)
#define vmess(a,b) Perl_vmess(aTHX_ a,b)
#define vnewSVpvf(a,b) Perl_vnewSVpvf(aTHX_ a,b)
#define vnormal(a) Perl_vnormal(aTHX_ a)
#define vnumify(a) Perl_vnumify(aTHX_ a)
#define vstringify(a) Perl_vstringify(aTHX_ a)
#define vverify(a) Perl_vverify(aTHX_ a)
#define vwarn(a,b) Perl_vwarn(aTHX_ a,b)
#define vwarner(a,b,c) Perl_vwarner(aTHX_ a,b,c)



#define warn_sv(a) Perl_warn_sv(aTHX_ a)



#define whichsig_pv(a) Perl_whichsig_pv(aTHX_ a)
#define whichsig_pvn(a,b) Perl_whichsig_pvn(aTHX_ a,b)
#define whichsig_sv(a) Perl_whichsig_sv(aTHX_ a)
#define wrap_keyword_plugin(a,b) Perl_wrap_keyword_plugin(aTHX_ a,b)
#define wrap_op_checker(a,b,c) Perl_wrap_op_checker(aTHX_ a,b,c)

#define csighandler Perl_csighandler


#define variant_byte_number Perl_variant_byte_number
# 805 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 3 4
#define my_pclose(a) Perl_my_pclose(aTHX_ a)
#define my_popen(a,b) Perl_my_popen(aTHX_ a,b)


#define cx_popblock(a) Perl_cx_popblock(aTHX_ a)
#define cx_popeval(a) Perl_cx_popeval(aTHX_ a)
#define cx_popformat(a) Perl_cx_popformat(aTHX_ a)
#define cx_popgiven(a) Perl_cx_popgiven(aTHX_ a)
#define cx_poploop(a) Perl_cx_poploop(aTHX_ a)
#define cx_popsub(a) Perl_cx_popsub(aTHX_ a)
#define cx_popsub_args(a) Perl_cx_popsub_args(aTHX_ a)
#define cx_popsub_common(a) Perl_cx_popsub_common(aTHX_ a)
#define cx_popwhen(a) Perl_cx_popwhen(aTHX_ a)
#define cx_pushblock(a,b,c,d) Perl_cx_pushblock(aTHX_ a,b,c,d)
#define cx_pusheval(a,b,c) Perl_cx_pusheval(aTHX_ a,b,c)
#define cx_pushformat(a,b,c,d) Perl_cx_pushformat(aTHX_ a,b,c,d)
#define cx_pushgiven(a,b) Perl_cx_pushgiven(aTHX_ a,b)
#define cx_pushloop_for(a,b,c) Perl_cx_pushloop_for(aTHX_ a,b,c)
#define cx_pushloop_plain(a) Perl_cx_pushloop_plain(aTHX_ a)
#define cx_pushsub(a,b,c,d) Perl_cx_pushsub(aTHX_ a,b,c,d)
#define cx_pushtry(a,b) Perl_cx_pushtry(aTHX_ a,b)
#define cx_pushwhen(a) Perl_cx_pushwhen(aTHX_ a)
#define cx_topblock(a) Perl_cx_topblock(aTHX_ a)
#define gimme_V() Perl_gimme_V(aTHX)
# 846 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 3 4
#define croak_nocontext Perl_croak_nocontext
#define deb_nocontext Perl_deb_nocontext
#define die_nocontext Perl_die_nocontext
#define form_nocontext Perl_form_nocontext

#define fprintf_nocontext Perl_fprintf_nocontext

#define load_module_nocontext Perl_load_module_nocontext
#define mess_nocontext Perl_mess_nocontext
#define newSVpvf_nocontext Perl_newSVpvf_nocontext

#define printf_nocontext Perl_printf_nocontext

#define sv_catpvf_mg_nocontext Perl_sv_catpvf_mg_nocontext
#define sv_catpvf_nocontext Perl_sv_catpvf_nocontext
#define sv_setpvf_mg_nocontext Perl_sv_setpvf_mg_nocontext
#define sv_setpvf_nocontext Perl_sv_setpvf_nocontext
#define warn_nocontext Perl_warn_nocontext
#define warner_nocontext Perl_warner_nocontext
# 877 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 3 4
#define alloccopstash(a) Perl_alloccopstash(aTHX_ a)
#define any_dup(a,b) Perl_any_dup(aTHX_ a,b)
#define cx_dup(a,b,c,d) Perl_cx_dup(aTHX_ a,b,c,d)
#define dirp_dup(a,b) Perl_dirp_dup(aTHX_ a,b)
#define fp_dup(a,b,c) Perl_fp_dup(aTHX_ a,b,c)
#define gp_dup(a,b) Perl_gp_dup(aTHX_ a,b)
#define he_dup(a,b,c) Perl_he_dup(aTHX_ a,b,c)
#define hek_dup(a,b) Perl_hek_dup(aTHX_ a,b)
#define mg_dup(a,b) Perl_mg_dup(aTHX_ a,b)
#define newPADOP(a,b,c) Perl_newPADOP(aTHX_ a,b,c)
#define parser_dup(a,b) Perl_parser_dup(aTHX_ a,b)
#define re_dup_guts(a,b,c) Perl_re_dup_guts(aTHX_ a,b,c)
#define regdupe_internal(a,b) Perl_regdupe_internal(aTHX_ a,b)
#define rvpv_dup(a,b,c) Perl_rvpv_dup(aTHX_ a,b,c)
#define si_dup(a,b) Perl_si_dup(aTHX_ a,b)
#define ss_dup(a,b) Perl_ss_dup(aTHX_ a,b)
#define sv_dup(a,b) Perl_sv_dup(aTHX_ a,b)
#define sv_dup_inc(a,b) Perl_sv_dup_inc(aTHX_ a,b)





#define sv_collxfrm_flags(a,b,c) Perl_sv_collxfrm_flags(aTHX_ a,b,c)


#define PerlIO_clearerr(a) Perl_PerlIO_clearerr(aTHX_ a)
#define PerlIO_close(a) Perl_PerlIO_close(aTHX_ a)
#define PerlIO_eof(a) Perl_PerlIO_eof(aTHX_ a)
#define PerlIO_error(a) Perl_PerlIO_error(aTHX_ a)
#define PerlIO_fileno(a) Perl_PerlIO_fileno(aTHX_ a)
#define PerlIO_fill(a) Perl_PerlIO_fill(aTHX_ a)
#define PerlIO_flush(a) Perl_PerlIO_flush(aTHX_ a)
#define PerlIO_get_base(a) Perl_PerlIO_get_base(aTHX_ a)
#define PerlIO_get_bufsiz(a) Perl_PerlIO_get_bufsiz(aTHX_ a)
#define PerlIO_get_cnt(a) Perl_PerlIO_get_cnt(aTHX_ a)
#define PerlIO_get_ptr(a) Perl_PerlIO_get_ptr(aTHX_ a)
#define PerlIO_read(a,b,c) Perl_PerlIO_read(aTHX_ a,b,c)
#define PerlIO_seek(a,b,c) Perl_PerlIO_seek(aTHX_ a,b,c)
#define PerlIO_set_cnt(a,b) Perl_PerlIO_set_cnt(aTHX_ a,b)
#define PerlIO_set_ptrcnt(a,b,c) Perl_PerlIO_set_ptrcnt(aTHX_ a,b,c)
#define PerlIO_setlinebuf(a) Perl_PerlIO_setlinebuf(aTHX_ a)
#define PerlIO_stderr() Perl_PerlIO_stderr(aTHX)
#define PerlIO_stdin() Perl_PerlIO_stdin(aTHX)
#define PerlIO_stdout() Perl_PerlIO_stdout(aTHX)
#define PerlIO_tell(a) Perl_PerlIO_tell(aTHX_ a)
#define PerlIO_unread(a,b,c) Perl_PerlIO_unread(aTHX_ a,b,c)
#define PerlIO_write(a,b,c) Perl_PerlIO_write(aTHX_ a,b,c)
# 2048 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 3 4
#define sv_setptrobj(rv,ptr,name) sv_setref_iv(rv,name,PTR2IV(ptr))
#define sv_setptrref(rv,ptr) sv_setref_iv(rv,NULL,PTR2IV(ptr))
# 2060 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/embed.h" 3 4
#define perl_atexit(a,b) call_atexit(a,b)
#define perl_call_argv(a,b,c) call_argv(a,b,c)
#define perl_call_method(a,b) call_method(a,b)
#define perl_call_pv(a,b) call_pv(a,b)
#define perl_call_sv(a,b) call_sv(a,b)
#define perl_eval_pv(a,b) eval_pv(a,b)
#define perl_eval_sv(a,b) eval_sv(a,b)
#define perl_get_av(a,b) get_av(a,b)
#define perl_get_cv(a,b) get_cv(a,b)
#define perl_get_hv(a,b) get_hv(a,b)
#define perl_get_sv(a,b) get_sv(a,b)
#define perl_init_i18nl10n(a) init_i18nl10n(a)
#define perl_init_i18nl14n(a) init_i18nl14n(a)
#define perl_require_pv(a) require_pv(a)







#define croak Perl_croak_nocontext
#define deb Perl_deb_nocontext
#define die Perl_die_nocontext
#define form Perl_form_nocontext
#define load_module Perl_load_module_nocontext
#define mess Perl_mess_nocontext
#define newSVpvf Perl_newSVpvf_nocontext
#define sv_catpvf Perl_sv_catpvf_nocontext
#define sv_catpvf_mg Perl_sv_catpvf_mg_nocontext
#define sv_setpvf Perl_sv_setpvf_nocontext
#define sv_setpvf_mg Perl_sv_setpvf_mg_nocontext
#define warn Perl_warn_nocontext
#define warner Perl_warner_nocontext
# 5745 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4



# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 1 3 4
# 38 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern perl_mutex PL_op_mutex;

extern PerlInterpreter * PL_curinterp ;




extern perl_key PL_thr_key;



extern _Bool PL_do_undump ;


extern _Bool PL_use_safe_putenv ;
# 75 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern Sighandler_t PL_sigfpe_saved;




extern Sighandler_t PL_csighandlerp ;
extern Sighandler1_t PL_csighandler1p ;
extern Sighandler3_t PL_csighandler3p ;
# 93 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern perl_mutex PL_perlio_mutex;


extern int * PL_perlio_fd_refcnt ;
extern int PL_perlio_fd_refcnt_size ;
extern int PL_perlio_debug_fd ;



extern IV PL_mmap_page_size ;



extern perl_mutex PL_hints_mutex;
extern perl_RnW1_mutex_t PL_env_mutex;
extern perl_mutex PL_locale_mutex;






extern locale_t PL_C_locale_obj;


extern char * PL_watch_pvx ;
# 171 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern perl_mutex PL_check_mutex;






extern perl_mutex PL_my_ctx_mutex;

extern int PL_my_cxt_index ;




extern int PL_veto_cleanup ;
# 244 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern perl_mutex PL_keyword_plugin_mutex;

extern Perl_keyword_plugin_t PL_keyword_plugin ;

extern HV * PL_op_sequence ;
extern UV PL_op_seq ;


extern perl_mutex PL_dollarzero_mutex;







extern SV PL_sv_placeholder;





extern _Bool PL_hash_seed_set ;
extern U64 PL_hash_seed_w[(( ( ( (( (sizeof(U64) * 2) + (int)( 3 * sizeof(U32)) )) + ( (sizeof(U64)) - 1 ) ) / (sizeof(U64)) ) * (sizeof(U64)) )/sizeof(U64))];

extern U64 PL_hash_state_w[(( ( ( (( (sizeof(U64) * 4) + ( ( 1 + ( 256 * 24 ) ) * sizeof(U32) ) )) + ( (sizeof(U64)) - 1 ) ) / (sizeof(U64)) ) * (sizeof(U64)) )/sizeof(U64))];
# 284 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern HV * PL_user_def_props ;


extern PerlInterpreter * PL_user_def_props_aTHX;

extern perl_mutex PL_user_prop_mutex;
# 299 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perlvars.h" 3 4
extern int PL_strategy_dup ;
extern int PL_strategy_dup2 ;
extern int PL_strategy_open ;
extern int PL_strategy_open3 ;
extern int PL_strategy_mkstemp ;
extern int PL_strategy_socket ;
extern int PL_strategy_accept ;
extern int PL_strategy_pipe ;
extern int PL_strategy_socketpair ;
# 5749 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4



#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC
# 5777 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4





extern const runops_proc_t PL_runops_std
  ;
extern const runops_proc_t PL_runops_dbg
  ;

#define EXT_MGVTBL EXTCONST MGVTBL

#define PERL_MAGIC_READONLY_ACCEPTABLE 0x40
#define PERL_MAGIC_VALUE_MAGIC 0x80
#define PERL_MAGIC_VTABLE_MASK 0x3F


#define PERL_MAGIC_TYPE_READONLY_ACCEPTABLE(t) (PL_magic_data[(U8)(t)] & PERL_MAGIC_READONLY_ACCEPTABLE)





#define PERL_MAGIC_TYPE_IS_VALUE_MAGIC(t) (PL_magic_data[(U8)(t)] & PERL_MAGIC_VALUE_MAGIC)


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg_vtable.h" 1 3 4
# 15 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg_vtable.h" 3 4
#define PERL_MAGIC_sv '\0'
#define PERL_MAGIC_arylen '#'
#define PERL_MAGIC_rhash '%'
#define PERL_MAGIC_debugvar '*'
#define PERL_MAGIC_pos '.'
#define PERL_MAGIC_symtab ':'
#define PERL_MAGIC_backref '<'
#define PERL_MAGIC_arylen_p '@'
#define PERL_MAGIC_bm 'B'
#define PERL_MAGIC_overload_table 'c'
#define PERL_MAGIC_regdata 'D'

#define PERL_MAGIC_regdatum 'd'
#define PERL_MAGIC_env 'E'
#define PERL_MAGIC_envelem 'e'
#define PERL_MAGIC_fm 'f'
#define PERL_MAGIC_regex_global 'g'
#define PERL_MAGIC_hints 'H'
#define PERL_MAGIC_hintselem 'h'
#define PERL_MAGIC_isa 'I'
#define PERL_MAGIC_isaelem 'i'
#define PERL_MAGIC_nkeys 'k'
#define PERL_MAGIC_dbfile 'L'
#define PERL_MAGIC_dbline 'l'
#define PERL_MAGIC_shared 'N'
#define PERL_MAGIC_shared_scalar 'n'
#define PERL_MAGIC_collxfrm 'o'
#define PERL_MAGIC_tied 'P'
#define PERL_MAGIC_tiedelem 'p'
#define PERL_MAGIC_tiedscalar 'q'
#define PERL_MAGIC_qr 'r'
#define PERL_MAGIC_sig 'S'
#define PERL_MAGIC_sigelem 's'
#define PERL_MAGIC_taint 't'
#define PERL_MAGIC_uvar 'U'
#define PERL_MAGIC_uvar_elem 'u'
#define PERL_MAGIC_vstring 'V'
#define PERL_MAGIC_vec 'v'
#define PERL_MAGIC_utf8 'w'
#define PERL_MAGIC_substr 'x'
#define PERL_MAGIC_nonelem 'Y'
#define PERL_MAGIC_defelem 'y'

#define PERL_MAGIC_lvref '\\'
#define PERL_MAGIC_checkcall ']'
#define PERL_MAGIC_ext '~'

enum {
    want_vtbl_arylen,
    want_vtbl_arylen_p,
    want_vtbl_backref,
    want_vtbl_checkcall,
    want_vtbl_collxfrm,
    want_vtbl_dbline,
    want_vtbl_debugvar,
    want_vtbl_defelem,
    want_vtbl_env,
    want_vtbl_envelem,
    want_vtbl_hints,
    want_vtbl_hintselem,
    want_vtbl_isa,
    want_vtbl_isaelem,
    want_vtbl_lvref,
    want_vtbl_mglob,
    want_vtbl_nkeys,
    want_vtbl_nonelem,
    want_vtbl_ovrld,
    want_vtbl_pack,
    want_vtbl_packelem,
    want_vtbl_pos,
    want_vtbl_regdata,
    want_vtbl_regdatum,
    want_vtbl_regexp,
    want_vtbl_sigelem,
    want_vtbl_substr,
    want_vtbl_sv,
    want_vtbl_taint,
    want_vtbl_utf8,
    want_vtbl_uvar,
    want_vtbl_vec,
    magic_vtable_max
};
# 134 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg_vtable.h" 3 4
extern const char * const PL_magic_vtable_names[magic_vtable_max];
# 198 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/mg_vtable.h" 3 4
extern const MGVTBL PL_magic_vtables[magic_vtable_max];


#define want_vtbl_bm want_vtbl_regexp
#define want_vtbl_fm want_vtbl_regexp

#define PL_vtbl_arylen PL_magic_vtables[want_vtbl_arylen]
#define PL_vtbl_arylen_p PL_magic_vtables[want_vtbl_arylen_p]
#define PL_vtbl_backref PL_magic_vtables[want_vtbl_backref]
#define PL_vtbl_bm PL_magic_vtables[want_vtbl_bm]
#define PL_vtbl_checkcall PL_magic_vtables[want_vtbl_checkcall]
#define PL_vtbl_collxfrm PL_magic_vtables[want_vtbl_collxfrm]
#define PL_vtbl_dbline PL_magic_vtables[want_vtbl_dbline]
#define PL_vtbl_debugvar PL_magic_vtables[want_vtbl_debugvar]
#define PL_vtbl_defelem PL_magic_vtables[want_vtbl_defelem]
#define PL_vtbl_env PL_magic_vtables[want_vtbl_env]
#define PL_vtbl_envelem PL_magic_vtables[want_vtbl_envelem]
#define PL_vtbl_fm PL_magic_vtables[want_vtbl_fm]
#define PL_vtbl_hints PL_magic_vtables[want_vtbl_hints]
#define PL_vtbl_hintselem PL_magic_vtables[want_vtbl_hintselem]
#define PL_vtbl_isa PL_magic_vtables[want_vtbl_isa]
#define PL_vtbl_isaelem PL_magic_vtables[want_vtbl_isaelem]
#define PL_vtbl_lvref PL_magic_vtables[want_vtbl_lvref]
#define PL_vtbl_mglob PL_magic_vtables[want_vtbl_mglob]
#define PL_vtbl_nkeys PL_magic_vtables[want_vtbl_nkeys]
#define PL_vtbl_nonelem PL_magic_vtables[want_vtbl_nonelem]
#define PL_vtbl_ovrld PL_magic_vtables[want_vtbl_ovrld]
#define PL_vtbl_pack PL_magic_vtables[want_vtbl_pack]
#define PL_vtbl_packelem PL_magic_vtables[want_vtbl_packelem]
#define PL_vtbl_pos PL_magic_vtables[want_vtbl_pos]
#define PL_vtbl_regdata PL_magic_vtables[want_vtbl_regdata]
#define PL_vtbl_regdatum PL_magic_vtables[want_vtbl_regdatum]
#define PL_vtbl_regexp PL_magic_vtables[want_vtbl_regexp]
#define PL_vtbl_sigelem PL_magic_vtables[want_vtbl_sigelem]
#define PL_vtbl_substr PL_magic_vtables[want_vtbl_substr]
#define PL_vtbl_sv PL_magic_vtables[want_vtbl_sv]
#define PL_vtbl_taint PL_magic_vtables[want_vtbl_taint]
#define PL_vtbl_utf8 PL_magic_vtables[want_vtbl_utf8]
#define PL_vtbl_uvar PL_magic_vtables[want_vtbl_uvar]
#define PL_vtbl_vec PL_magic_vtables[want_vtbl_vec]
# 5804 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 5814 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const U8 PL_magic_data[256];
# 5834 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const _Bool PL_valid_types_IVX[];
extern const _Bool PL_valid_types_NVX[];
extern const _Bool PL_valid_types_PVX[];
extern const _Bool PL_valid_types_RV[];
extern const _Bool PL_valid_types_IV_set[];
extern const _Bool PL_valid_types_NV_set[];
# 5850 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define INFNAN_U8_NV_DECL EXTCONST union { U8 u8[NVSIZE]; NV nv; }
#define INFNAN_NV_U8_DECL EXTCONST union { NV nv; U8 u8[NVSIZE]; }
# 6285 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const U8 PL_extended_utf8_dfa_tab[];
extern const U8 PL_strict_utf8_dfa_tab[];
extern const U8 PL_c9_utf8_dfa_tab[];




# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/overload.h" 1 3 4
# 16 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/overload.h" 3 4
enum {
    fallback_amg,
    to_sv_amg,
    to_av_amg,
    to_hv_amg,
    to_gv_amg,
    to_cv_amg,
    inc_amg,
    dec_amg,
    bool__amg,
    numer_amg,
    string_amg,
    not_amg,
    copy_amg,
    abs_amg,
    neg_amg,
    iter_amg,
    int_amg,
    lt_amg,
    le_amg,
    gt_amg,
    ge_amg,
    eq_amg,
    ne_amg,
    slt_amg,
    sle_amg,
    sgt_amg,
    sge_amg,
    seq_amg,
    sne_amg,
    nomethod_amg,
    add_amg,
    add_ass_amg,
    subtr_amg,
    subtr_ass_amg,
    mult_amg,
    mult_ass_amg,
    div_amg,
    div_ass_amg,
    modulo_amg,
    modulo_ass_amg,
    pow_amg,
    pow_ass_amg,
    lshift_amg,
    lshift_ass_amg,
    rshift_amg,
    rshift_ass_amg,
    band_amg,
    band_ass_amg,
    sband_amg,
    sband_ass_amg,
    bor_amg,
    bor_ass_amg,
    sbor_amg,
    sbor_ass_amg,
    bxor_amg,
    bxor_ass_amg,
    sbxor_amg,
    sbxor_ass_amg,
    ncmp_amg,
    scmp_amg,
    compl_amg,
    scompl_amg,
    atan2_amg,
    cos_amg,
    sin_amg,
    exp_amg,
    log_amg,
    sqrt_amg,
    repeat_amg,
    repeat_ass_amg,
    concat_amg,
    concat_ass_amg,
    smart_amg,
    ftest_amg,
    regexp_amg,
    max_amg_code

};

#define NofAMmeth max_amg_code
# 6293 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4



struct am_table {
  U8 flags;
  U8 fallback;
  U16 spare;
  U32 was_ok_sub;
  CV* table[max_amg_code];
};
struct am_table_short {
  U8 flags;
  U8 fallback;
  U16 spare;
  U32 was_ok_sub;
};
typedef struct am_table AMT;
typedef struct am_table_short AMTS;

#define AMGfallNEVER 1
#define AMGfallNO 2
#define AMGfallYES 3

#define AMTf_AMAGIC 1
#define AMT_AMAGIC(amt) ((amt)->flags & AMTf_AMAGIC)
#define AMT_AMAGIC_on(amt) ((amt)->flags |= AMTf_AMAGIC)
#define AMT_AMAGIC_off(amt) ((amt)->flags &= ~AMTf_AMAGIC)

#define StashHANDLER(stash,meth) gv_handler((stash),CAT2(meth,_amg))
# 6354 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERLDB_ALL (PERLDBf_SUB | PERLDBf_LINE | PERLDBf_NOOPT | PERLDBf_INTER | PERLDBf_SUBLINE| PERLDBf_SINGLE| PERLDBf_NAMEEVAL| PERLDBf_NAMEANON | PERLDBf_SAVESRC)





#define PERLDBf_SUB 0x01
#define PERLDBf_LINE 0x02
#define PERLDBf_NOOPT 0x04
#define PERLDBf_INTER 0x08

#define PERLDBf_SUBLINE 0x10
#define PERLDBf_SINGLE 0x20
#define PERLDBf_NONAME 0x40
#define PERLDBf_GOTO 0x80
#define PERLDBf_NAMEEVAL 0x100
#define PERLDBf_NAMEANON 0x200
#define PERLDBf_SAVESRC 0x400
#define PERLDBf_SAVESRC_NOSUBS 0x800
#define PERLDBf_SAVESRC_INVALID 0x1000

#define PERLDB_SUB (PL_perldb & PERLDBf_SUB)
#define PERLDB_LINE (PL_perldb & PERLDBf_LINE)
#define PERLDB_NOOPT (PL_perldb & PERLDBf_NOOPT)
#define PERLDB_INTER (PL_perldb & PERLDBf_INTER)
#define PERLDB_SUBLINE (PL_perldb & PERLDBf_SUBLINE)
#define PERLDB_SINGLE (PL_perldb & PERLDBf_SINGLE)
#define PERLDB_SUB_NN (PL_perldb & PERLDBf_NONAME)
#define PERLDB_GOTO (PL_perldb & PERLDBf_GOTO)
#define PERLDB_NAMEEVAL (PL_perldb & PERLDBf_NAMEEVAL)
#define PERLDB_NAMEANON (PL_perldb & PERLDBf_NAMEANON)
#define PERLDB_SAVESRC (PL_perldb & PERLDBf_SAVESRC)
#define PERLDB_SAVESRC_NOSUBS (PL_perldb & PERLDBf_SAVESRC_NOSUBS)
#define PERLDB_SAVESRC_INVALID (PL_perldb & PERLDBf_SAVESRC_INVALID)

#define PERLDB_LINE_OR_SAVESRC (PL_perldb & (PERLDBf_LINE | PERLDBf_SAVESRC))


#define KEYWORD_PLUGIN_MUTEX_INIT MUTEX_INIT(&PL_keyword_plugin_mutex)
#define KEYWORD_PLUGIN_MUTEX_LOCK MUTEX_LOCK(&PL_keyword_plugin_mutex)
#define KEYWORD_PLUGIN_MUTEX_UNLOCK MUTEX_UNLOCK(&PL_keyword_plugin_mutex)
#define KEYWORD_PLUGIN_MUTEX_TERM MUTEX_DESTROY(&PL_keyword_plugin_mutex)
#define USER_PROP_MUTEX_INIT MUTEX_INIT(&PL_user_prop_mutex)
#define USER_PROP_MUTEX_LOCK MUTEX_LOCK(&PL_user_prop_mutex)
#define USER_PROP_MUTEX_UNLOCK MUTEX_UNLOCK(&PL_user_prop_mutex)
#define USER_PROP_MUTEX_TERM MUTEX_DESTROY(&PL_user_prop_mutex)
# 6415 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define IN_LOCALE_RUNTIME (PL_curcop && CopHINTS_get(PL_curcop) & HINT_LOCALE)



#define IN_SOME_LOCALE_FORM_RUNTIME cBOOL(CopHINTS_get(PL_curcop) & (HINT_LOCALE|HINT_LOCALE_PARTIAL))


#define IN_LOCALE_COMPILETIME cBOOL(PL_hints & HINT_LOCALE)
#define IN_SOME_LOCALE_FORM_COMPILETIME cBOOL(PL_hints & (HINT_LOCALE|HINT_LOCALE_PARTIAL))
# 6447 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define IN_LOCALE (IN_PERL_COMPILETIME ? IN_LOCALE_COMPILETIME : IN_LOCALE_RUNTIME)

#define IN_SOME_LOCALE_FORM (IN_PERL_COMPILETIME ? IN_SOME_LOCALE_FORM_COMPILETIME : IN_SOME_LOCALE_FORM_RUNTIME)



#define IN_LC_ALL_COMPILETIME IN_LOCALE_COMPILETIME
#define IN_LC_ALL_RUNTIME IN_LOCALE_RUNTIME

#define IN_LC_PARTIAL_COMPILETIME cBOOL(PL_hints & HINT_LOCALE_PARTIAL)
#define IN_LC_PARTIAL_RUNTIME (PL_curcop && CopHINTS_get(PL_curcop) & HINT_LOCALE_PARTIAL)


#define IN_LC_COMPILETIME(category) ( IN_LC_ALL_COMPILETIME || ( IN_LC_PARTIAL_COMPILETIME && Perl__is_in_locale_category(aTHX_ TRUE, (category))))



#define IN_LC_RUNTIME(category) (IN_LC_ALL_RUNTIME || (IN_LC_PARTIAL_RUNTIME && Perl__is_in_locale_category(aTHX_ FALSE, (category))))


#define IN_LC(category) (IN_LC_COMPILETIME(category) || IN_LC_RUNTIME(category))
# 6601 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LOCALE_LOCK_ STMT_START { DEBUG_Lv(PerlIO_printf(Perl_debug_log, "%s: %d: locking locale\n", __FILE__, __LINE__)); MUTEX_LOCK(&PL_locale_mutex); } STMT_END





#define LOCALE_UNLOCK_ STMT_START { DEBUG_Lv(PerlIO_printf(Perl_debug_log, "%s: %d: unlocking locale\n", __FILE__, __LINE__)); MUTEX_UNLOCK(&PL_locale_mutex); } STMT_END
# 6626 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NL_LANGINFO_LOCK LOCALE_LOCK_
#define NL_LANGINFO_UNLOCK LOCALE_UNLOCK_
# 6643 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LOCALE_TERM_LC_NUMERIC_ NOOP
#define LOCALE_INIT_LC_NUMERIC_ NOOP
#define LC_NUMERIC_LOCK(cond) NOOP
#define LC_NUMERIC_UNLOCK NOOP
#define LOCALE_INIT_LC_NUMERIC_ NOOP
#define LOCALE_TERM_LC_NUMERIC_ NOOP



#define SETLOCALE_LOCK NOOP
#define SETLOCALE_UNLOCK NOOP
# 6733 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LOCALE_TERM_POSIX_2008_ STMT_START { if (PL_C_locale_obj) { uselocale(LC_GLOBAL_LOCALE); freelocale(PL_C_locale_obj); PL_C_locale_obj = (locale_t) NULL; } } STMT_END
# 6747 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LOCALE_INIT STMT_START { MUTEX_INIT(&PL_locale_mutex); LOCALE_INIT_LC_NUMERIC_; } STMT_END




#define LOCALE_TERM STMT_START { MUTEX_DESTROY(&PL_locale_mutex); LOCALE_TERM_LC_NUMERIC_; LOCALE_TERM_POSIX_2008_; } STMT_END
# 6915 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define _NOT_IN_NUMERIC_STANDARD (! PL_numeric_standard)




#define _NOT_IN_NUMERIC_UNDERLYING (! PL_numeric_underlying && PL_numeric_standard < 2)


#define DECLARATION_FOR_LC_NUMERIC_MANIPULATION void (*_restore_LC_NUMERIC_function)(pTHX) = NULL


#define STORE_LC_NUMERIC_SET_TO_NEEDED_IN(in) STMT_START { bool _in_lc_numeric = (in); LC_NUMERIC_LOCK( ( ( _in_lc_numeric && _NOT_IN_NUMERIC_UNDERLYING) || (! _in_lc_numeric && _NOT_IN_NUMERIC_STANDARD))); if (_in_lc_numeric) { if (_NOT_IN_NUMERIC_UNDERLYING) { Perl_set_numeric_underlying(aTHX); _restore_LC_NUMERIC_function = &Perl_set_numeric_standard; } } else { if (_NOT_IN_NUMERIC_STANDARD) { Perl_set_numeric_standard(aTHX); _restore_LC_NUMERIC_function = &Perl_set_numeric_underlying; } } } STMT_END
# 6948 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STORE_LC_NUMERIC_SET_TO_NEEDED() STORE_LC_NUMERIC_SET_TO_NEEDED_IN(IN_LC(LC_NUMERIC))


#define RESTORE_LC_NUMERIC() STMT_START { if (_restore_LC_NUMERIC_function) { _restore_LC_NUMERIC_function(aTHX); } LC_NUMERIC_UNLOCK; } STMT_END
# 6961 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define SET_NUMERIC_STANDARD() STMT_START { DEBUG_Lv(PerlIO_printf(Perl_debug_log, "%s: %d: lc_numeric standard=%d\n", __FILE__, __LINE__, PL_numeric_standard)); Perl_set_numeric_standard(aTHX); DEBUG_Lv(PerlIO_printf(Perl_debug_log, "%s: %d: lc_numeric standard=%d\n", __FILE__, __LINE__, PL_numeric_standard)); } STMT_END
# 6972 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define SET_NUMERIC_UNDERLYING() STMT_START { if (_NOT_IN_NUMERIC_UNDERLYING) { Perl_set_numeric_underlying(aTHX); } } STMT_END
# 6981 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STORE_LC_NUMERIC_SET_STANDARD() STMT_START { LC_NUMERIC_LOCK(_NOT_IN_NUMERIC_STANDARD); if (_NOT_IN_NUMERIC_STANDARD) { _restore_LC_NUMERIC_function = &Perl_set_numeric_underlying; Perl_set_numeric_standard(aTHX); } } STMT_END
# 6992 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define STORE_LC_NUMERIC_FORCE_TO_UNDERLYING() STMT_START { LC_NUMERIC_LOCK(_NOT_IN_NUMERIC_UNDERLYING); if (_NOT_IN_NUMERIC_UNDERLYING) { Perl_set_numeric_underlying(aTHX); _restore_LC_NUMERIC_function = &Perl_set_numeric_standard; } } STMT_END
# 7003 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LOCK_LC_NUMERIC_STANDARD() STMT_START { DEBUG_Lv(PerlIO_printf(Perl_debug_log, "%s: %d: lc_numeric_standard now locked to depth %d\n", __FILE__, __LINE__, PL_numeric_standard)); __ASSERT_(PL_numeric_standard) PL_numeric_standard++; } STMT_END
# 7012 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define UNLOCK_LC_NUMERIC_STANDARD() STMT_START { if (PL_numeric_standard > 1) { PL_numeric_standard--; } else { assert(0); } DEBUG_Lv(PerlIO_printf(Perl_debug_log, "%s: %d: ", __FILE__, __LINE__); if (PL_numeric_standard <= 1) PerlIO_printf(Perl_debug_log, "lc_numeric_standard now unlocked\n"); else PerlIO_printf(Perl_debug_log, "lc_numeric_standard lock decremented to depth %d\n", PL_numeric_standard);); } STMT_END
# 7030 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define WITH_LC_NUMERIC_SET_TO_NEEDED_IN(in_lc_numeric,block) STMT_START { DECLARATION_FOR_LC_NUMERIC_MANIPULATION; STORE_LC_NUMERIC_SET_TO_NEEDED_IN(in_lc_numeric); block; RESTORE_LC_NUMERIC(); } STMT_END;







#define WITH_LC_NUMERIC_SET_TO_NEEDED(block) WITH_LC_NUMERIC_SET_TO_NEEDED_IN(IN_LC(LC_NUMERIC), block)
# 7062 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define ENV_LOCK PERL_WRITE_LOCK(&PL_env_mutex)
#define ENV_UNLOCK PERL_WRITE_UNLOCK(&PL_env_mutex)
#define ENV_READ_LOCK PERL_READ_LOCK(&PL_env_mutex)
#define ENV_READ_UNLOCK PERL_READ_UNLOCK(&PL_env_mutex)
#define ENV_INIT PERL_RW_MUTEX_INIT(&PL_env_mutex)
#define ENV_TERM PERL_RW_MUTEX_DESTROY(&PL_env_mutex)







#define GETENV_LOCK ENV_READ_LOCK
#define GETENV_UNLOCK ENV_READ_UNLOCK
# 7107 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4


# 1 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 1 3 4
# 51 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ size_t
Perl_av_count(PerlInterpreter* my_perl __attribute__((unused)), AV *av)
{
    ((void)0);
    ((void)0);

    return (((((const SV *) (av))->sv_flags & 0x00800000)) ? Perl_mg_size(my_perl, ((SV *)({ void *p_ = (av); p_; }))) : ((XPVAV*) (av)->sv_any)->xav_fill) + 1;
}
# 69 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ GV *
Perl_CvGV(PerlInterpreter* my_perl __attribute__((unused)), CV *sv)
{
    ((void)0);

    return (((XPVCV*)({ void *p_ = ((sv)->sv_any); p_; }))->xcv_flags & 0x8000)
        ? Perl_cvgv_from_hek(my_perl, sv)
        : ((XPVCV*)({ void *p_ = ((sv)->sv_any); p_; }))->xcv_gv_u.xcv_gv;
}

static __inline__ I32 *
Perl_CvDEPTH(const CV * const sv)
{
    ((void)0);
    ((void)0);

    return &((XPVCV*)(sv)->sv_any)->xcv_depth;
}
# 177 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ I32
Perl_TOPMARK(PerlInterpreter* my_perl __attribute__((unused)))
{
   


                                                          ;
    return *(my_perl->Imarkstack_ptr);
}

static __inline__ I32
Perl_POPMARK(PerlInterpreter* my_perl __attribute__((unused)))
{
   


                                                              ;
    ((void)0);
    return *(my_perl->Imarkstack_ptr)--;
}



static __inline__ struct regexp *
Perl_ReANY(const REGEXP * const re)
{
    XPV* const p = (XPV*)(re)->sv_any;

    ((void)0);
    ((void)0);

    return ((svtype)((re)->sv_flags & 0xff)) == SVt_PVLV ? p->xpv_len_u.xpvlenu_rx
                                   : (struct regexp *)p;
}



static __inline__ _Bool
Perl_SvTRUE(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    ;

    if (__builtin_expect(((sv == ((void *)0)) ? (_Bool)1 : (_Bool)0),(0)))
        return (0);
    ((void)(__builtin_expect(((((sv)->sv_flags & 0x00200000)) ? (_Bool)1 : (_Bool)0),(0)) && Perl_mg_get(my_perl, sv)));
    return Perl_SvTRUE_common(my_perl, sv,(1));
}

static __inline__ _Bool
Perl_SvTRUE_nomg(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    ;

    if (__builtin_expect(((sv == ((void *)0)) ? (_Bool)1 : (_Bool)0),(0)))
        return (0);
    return Perl_SvTRUE_common(my_perl, sv,(1));
}

static __inline__ _Bool
Perl_SvTRUE_NN(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    ((void)0);

    ((void)(__builtin_expect(((((sv)->sv_flags & 0x00200000)) ? (_Bool)1 : (_Bool)0),(0)) && Perl_mg_get(my_perl, sv)));
    return Perl_SvTRUE_common(my_perl, sv,(1));
}

static __inline__ _Bool
Perl_SvTRUE_common(PerlInterpreter* my_perl __attribute__((unused)), SV * sv, const _Bool sv_2bool_is_fallback)
{
    ((void)0);

    if (__builtin_expect(((((size_t)((sv) - &(my_perl->Isv_yes)) < 4)) ? (_Bool)1 : (_Bool)0),(0)))
        return ((sv) == &(my_perl->Isv_yes));

    if (! ((sv)->sv_flags & (0x00000100|0x00000200|0x00000400|0x00000800| 0x00001000|0x00002000|0x00004000|0x00008000)))
        return (0);

    if (((sv)->sv_flags & 0x00000400))
        return ( ((XPV*)((sv))->sv_any) && ( ((XPV*)((sv))->sv_any)->xpv_cur > 1 || ( ((XPV*)((sv))->sv_any)->xpv_cur && *(sv)->sv_u.svu_pv != '0' ) ) );

    if (((sv)->sv_flags & 0x00000100))
        return ((XPVIV*) (sv)->sv_any)->xiv_u.xivu_iv != 0;

    if (((sv)->sv_flags & 0x00000800) && !(((((sv)->sv_u.svu_rv))->sv_flags & 0x00100000) && ((((XPVMG*) (((sv)->sv_u.svu_rv))->sv_any)->xmg_stash)->sv_flags & 0x10000000)))
        return (1);

    if (sv_2bool_is_fallback)
        return Perl_sv_2bool_flags(my_perl, sv,0);

    return ((((sv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((sv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((sv)->sv_flags & 0xff)) == SVt_PVLV));
}


static __inline__ SV *
Perl_SvREFCNT_inc(SV *sv)
{
    if (__builtin_expect(((sv != ((void *)0)) ? (_Bool)1 : (_Bool)0),(1)))
        (sv)->sv_refcnt++;
    return sv;
}
static __inline__ SV *
Perl_SvREFCNT_inc_NN(SV *sv)
{
    ((void)0);

    (sv)->sv_refcnt++;
    return sv;
}
static __inline__ void
Perl_SvREFCNT_inc_void(SV *sv)
{
    if (__builtin_expect(((sv != ((void *)0)) ? (_Bool)1 : (_Bool)0),(1)))
        (sv)->sv_refcnt++;
}
static __inline__ void
Perl_SvREFCNT_dec(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    if (__builtin_expect(((sv != ((void *)0)) ? (_Bool)1 : (_Bool)0),(1))) {
        U32 rc = (sv)->sv_refcnt;
        if (__builtin_expect(((rc > 1) ? (_Bool)1 : (_Bool)0),(1)))
            (sv)->sv_refcnt = rc - 1;
        else
            Perl_sv_free2(my_perl, sv, rc);
    }
}

static __inline__ void
Perl_SvREFCNT_dec_NN(PerlInterpreter* my_perl __attribute__((unused)), SV *sv)
{
    U32 rc = (sv)->sv_refcnt;

    ((void)0);

    if (__builtin_expect(((rc > 1) ? (_Bool)1 : (_Bool)0),(1)))
        (sv)->sv_refcnt = rc - 1;
    else
        Perl_sv_free2(my_perl, sv, rc);
}

static __inline__ void
Perl_SvAMAGIC_on(SV *sv)
{
    ((void)0);
    ((void)0);

    if (((((sv)->sv_u.svu_rv))->sv_flags & 0x00100000)) ((((XPVMG*) (((sv)->sv_u.svu_rv))->sv_any)->xmg_stash)->sv_flags |= 0x10000000);
}
static __inline__ void
Perl_SvAMAGIC_off(SV *sv)
{
    ((void)0);

    if (((sv)->sv_flags & 0x00000800) && ((((sv)->sv_u.svu_rv))->sv_flags & 0x00100000))
        ((((XPVMG*) (((sv)->sv_u.svu_rv))->sv_any)->xmg_stash)->sv_flags &=~ 0x10000000);
}

static __inline__ U32
Perl_SvPADSTALE_on(SV *sv)
{
    ((void)0);
    return (sv)->sv_flags |= 0x00040000;
}
static __inline__ U32
Perl_SvPADSTALE_off(SV *sv)
{
    ((void)0);
    return (sv)->sv_flags &= ~0x00040000;
}
# 366 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ void
Perl_append_utf8_from_native_byte(const U8 byte, U8** dest)
{



    ((void)0);

    if (((((U64)(((UV) ((byte) | 0)))) < (((U8) (0xFF << 6)) & 0xB0))))
        *((*dest)++) = byte;
    else {
        *((*dest)++) = ( ( ( ( ((U8) (((( ((U8) ((byte) | 0))) >> 6) | (__builtin_expect((((2) > 7) ? (_Bool)1 : (_Bool)0),(0)) ? 0xFF : ((U8) (0xFE << (7-(2)))))) | 0))))));
        *((*dest)++) = ( (( ( ((U8) (((( ((U8) ((byte) | 0))) & ((U8) ((((1UL) << (6)) - 1)))) | (((U8) (0xFF << 6)) & 0xB0)) | 0))))));
    }
}
# 393 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ UV
Perl_valid_utf8_to_uvchr(const U8 *s, STRLEN *retlen)
{
    const UV expectlen = PL_utf8skip[*(const U8*)(s)];
    const U8* send = s + expectlen;
    UV uv = *s;

    ((void)0);

    if (retlen) {
        *retlen = expectlen;
    }


    if (expectlen == 1) {
        return uv;
    }



    uv = ( ((U8) ((uv) | 0))) & (__builtin_expect((((expectlen) >= 7) ? (_Bool)1 : (_Bool)0),(0)) ? 0x00 : (0x1F >> ((expectlen)-2)));




    for (++s; s < send; s++) {
        uv = ( ((uv) << 6) | ((( ((U8) ((*s) | 0)))) & ((U8) ((((1UL) << (6)) - 1)))));
    }

    return ((UV) ((uv) | 0));

}
# 462 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_invariant_string(s,len) is_utf8_invariant_string_loc(s, len, NULL)
# 476 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_utf8_invariant_string_loc(const U8* const s, STRLEN len, const U8 ** ep)
{
    const U8* send;
    const U8* x = s;

    ((void)0);

    if (len == 0) {
        len = strlen((const char *)s);
    }

    send = s + len;


#define PERL_COUNT_MULTIPLIER (~ (UINTMAX_C(0)) / 0xFF)


#define PERL_VARIANTS_WORD_MASK (PERL_COUNT_MULTIPLIER * 0x80)
#define PERL_WORDSIZE sizeof(PERL_UINTMAX_T)
#define PERL_WORD_BOUNDARY_MASK (PERL_WORDSIZE - 1)





#define PERL_IS_SUBWORD_ADDR(x) (1 & ( PTR2nat(x) | ( PTR2nat(x) >> 1) | ( ( (PTR2nat(x) & PERL_WORD_BOUNDARY_MASK) >> 2))))
# 513 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    if ((STRLEN) (send - x) >= sizeof(PERL_UINTMAX_T)


                          + sizeof(PERL_UINTMAX_T) * (1 & ( (UV)(x) | ( (UV)(x) >> 1) | ( ( ((UV)(x) & (sizeof(PERL_UINTMAX_T) - 1)) >> 2))))


                          - ((UV)(x) & (sizeof(PERL_UINTMAX_T) - 1)))
    {



        while ((UV)(x) & (sizeof(PERL_UINTMAX_T) - 1)) {
            if (! ((((U64)(((UV) (((*x) | 0) | 0)))) < (((U8) (0xFF << 6)) & 0xB0)))) {
                if (ep) {
                    *ep = x;
                }

                return (0);
            }
            x++;
        }



        do {
            if ((* (PERL_UINTMAX_T *) x) & ((~ ((0UL)) / 0xFF) * 0x80)) {



                if (! ep) {
                    return (0);
                }




                *ep = x + Perl_variant_byte_number(* (PERL_UINTMAX_T *) x);
                ((void)0);

                return (0);






            }

            x += sizeof(PERL_UINTMAX_T);

        } while (x + sizeof(PERL_UINTMAX_T) <= send);
    }




    while (x < send) {
        if (! ((((U64)(((UV) (((*x) | 0) | 0)))) < (((U8) (0xFF << 6)) & 0xB0)))) {
            if (ep) {
                *ep = x;
            }

            return (0);
        }

        x++;
    }

    return (1);
}



static __inline__ unsigned int
Perl_variant_byte_number(PERL_UINTMAX_T word)
{




    ((void)0);


    word &= ((~ ((0UL)) / 0xFF) * 0x80);
# 622 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    word >>= 1;
    word = 1 + (word ^ (word - 1));
# 657 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    word = (word >> 7) * (((7UL) << 56) | ((15UL) << 48)
                        | ((23UL) << 40) | ((31UL) << 32)
                        | (39 << 24) | (47 << 16)
                        | (55 << 8) | (63 << 0));
    word >>= sizeof(PERL_UINTMAX_T) * 7;


    word = ((word + 1) >> 3) - 1;
# 673 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    return (unsigned int) word;
}
# 758 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#undef PERL_WORDSIZE
#undef PERL_COUNT_MULTIPLIER
#undef PERL_WORD_BOUNDARY_MASK
#undef PERL_VARIANTS_WORD_MASK
# 791 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_string(s,len) is_utf8_string_loclen(s, len, NULL, NULL)
# 874 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_strict_utf8_string(s,len) is_strict_utf8_string_loclen(s, len, NULL, NULL)
# 914 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_c9strict_utf8_string(s,len) is_c9strict_utf8_string_loclen(s, len, NULL, 0)
# 956 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_utf8_string_flags(const U8 *s, STRLEN len, const U32 flags)
{
    const U8 * first_variant;

    ((void)0);
    ((void)0)
                                                         ;

    if (len == 0) {
        len = strlen((const char *)s);
    }

    if (flags == 0) {
        return Perl_is_utf8_string_loclen(s, len, ((void *)0), ((void *)0));
    }

    if ((flags & ~0x4000)
                                        == ((0x1000|0x0100)|0x0400))
    {
        return Perl_is_strict_utf8_string_loclen(s, len, ((void *)0), ((void *)0));
    }

    if ((flags & ~0x4000)
                                       == (0x1000|0x0100))
    {
        return Perl_is_c9strict_utf8_string_loclen(s, len, ((void *)0), 0);
    }

    if (! Perl_is_utf8_invariant_string_loc(s, len, &first_variant)) {
        const U8* const send = s + len;
        const U8* x = first_variant;

        while (x < send) {
            STRLEN cur_len = (__builtin_expect((((send) <= (x)) ? (_Bool)1 : (_Bool)0),(0)) ? 0 : (((((U64)(((UV) (((*x) | 0) | 0)))) < (((U8) (0xFF << 6)) & 0xB0)))) ? 1 : __builtin_expect(((((send) - (x)) < PL_utf8skip[*(const U8*)(x)]) ? (_Bool)1 : (_Bool)0),(0)) ? 0 : Perl_is_utf8_char_helper(x, send, flags));
            if (__builtin_expect(((! cur_len) ? (_Bool)1 : (_Bool)0),(0))) {
                return (0);
            }
            x += cur_len;
        }
    }

    return (1);
}
# 1014 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_string_loc(s,len,ep) is_utf8_string_loclen(s, len, ep, 0)
# 1030 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
{
    const U8 * first_variant;

    ((void)0);

    if (len == 0) {
        len = strlen((const char *) s);
    }

    if (Perl_is_utf8_invariant_string_loc(s, len, &first_variant)) {
        if (el)
            *el = len;

        if (ep) {
            *ep = s + len;
        }

        return (1);
    }

    {
        const U8* const send = s + len;
        const U8* x = first_variant;
        STRLEN outlen = first_variant - s;

        while (x < send) {
            const STRLEN cur_len = Perl_isUTF8_CHAR(x, send);
            if (__builtin_expect(((! cur_len) ? (_Bool)1 : (_Bool)0),(0))) {
                break;
            }
            x += cur_len;
            outlen++;
        }

        if (el)
            *el = outlen;

        if (ep) {
            *ep = x;
        }

        return (x == send);
    }
}
# 1115 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ size_t
Perl_isUTF8_CHAR(const U8 * const s0, const U8 * const e)
{
    const U8 * s = s0;
    UV state = 0;

    ((void)0); ((void)0);







    while (s < e && __builtin_expect(((state != 1) ? (_Bool)1 : (_Bool)0),(1))) {
        state = PL_extended_utf8_dfa_tab[256
                                         + state
                                         + PL_extended_utf8_dfa_tab[*s]];
        if (state != 0) {
            s++;
            continue;
        }

        return s - s0 + 1;
    }



    if (( ((U8) ((*s0) | 0))) == 0xFF && e - s0 >= 13) {
       return Perl_is_utf8_char_helper(s0, e, 0);
    }



    return 0;
}
# 1189 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ size_t
Perl_isSTRICT_UTF8_CHAR(const U8 * const s0, const U8 * const e)
{
    const U8 * s = s0;
    UV state = 0;

    ((void)0); ((void)0);

    while (s < e && __builtin_expect(((state != 1) ? (_Bool)1 : (_Bool)0),(1))) {
        state = PL_strict_utf8_dfa_tab[256 + state + PL_strict_utf8_dfa_tab[*s]];

        if (state != 0) {
            s++;
            continue;
        }

        return s - s0 + 1;
    }




    if (( ( ( ( ( ((e) - (s0)) >= 3 ) && ( 0xED == ((const U8*)s0)[0] ) ) && ( (((U64) (((((U8) (((const U8*)s0)[1])))) - (((0x80)) | 0))) <= (((U64) ((((0x9F) - (0x80))) | 0)))) ) ) && ( (((U64) (((((U8) (((const U8*)s0)[2])))) - (((0x80)) | 0))) <= (((U64) ((((0xBF) - (0x80))) | 0)))) ) ) ? 3 : 0 )) {
        return 3;
    }



    return 0;
}
# 1255 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ size_t
Perl_isC9_STRICT_UTF8_CHAR(const U8 * const s0, const U8 * const e)
{
    const U8 * s = s0;
    UV state = 0;

    ((void)0); ((void)0);

    while (s < e && __builtin_expect(((state != 1) ? (_Bool)1 : (_Bool)0),(1))) {
        state = PL_c9_utf8_dfa_tab[256 + state + PL_c9_utf8_dfa_tab[*s]];

        if (state != 0) {
            s++;
            continue;
        }

        return s - s0 + 1;
    }

    return 0;
}
# 1290 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_strict_utf8_string_loc(s,len,ep) is_strict_utf8_string_loclen(s, len, ep, 0)
# 1307 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_strict_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
{
    const U8 * first_variant;

    ((void)0);

    if (len == 0) {
        len = strlen((const char *) s);
    }

    if (Perl_is_utf8_invariant_string_loc(s, len, &first_variant)) {
        if (el)
            *el = len;

        if (ep) {
            *ep = s + len;
        }

        return (1);
    }

    {
        const U8* const send = s + len;
        const U8* x = first_variant;
        STRLEN outlen = first_variant - s;

        while (x < send) {
            const STRLEN cur_len = Perl_isSTRICT_UTF8_CHAR(x, send);
            if (__builtin_expect(((! cur_len) ? (_Bool)1 : (_Bool)0),(0))) {
                break;
            }
            x += cur_len;
            outlen++;
        }

        if (el)
            *el = outlen;

        if (ep) {
            *ep = x;
        }

        return (x == send);
    }
}
# 1367 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_c9strict_utf8_string_loc(s,len,ep) is_c9strict_utf8_string_loclen(s, len, ep, 0)
# 1384 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_c9strict_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)
{
    const U8 * first_variant;

    ((void)0);

    if (len == 0) {
        len = strlen((const char *) s);
    }

    if (Perl_is_utf8_invariant_string_loc(s, len, &first_variant)) {
        if (el)
            *el = len;

        if (ep) {
            *ep = s + len;
        }

        return (1);
    }

    {
        const U8* const send = s + len;
        const U8* x = first_variant;
        STRLEN outlen = first_variant - s;

        while (x < send) {
            const STRLEN cur_len = Perl_isC9_STRICT_UTF8_CHAR(x, send);
            if (__builtin_expect(((! cur_len) ? (_Bool)1 : (_Bool)0),(0))) {
                break;
            }
            x += cur_len;
            outlen++;
        }

        if (el)
            *el = outlen;

        if (ep) {
            *ep = x;
        }

        return (x == send);
    }
}
# 1444 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_string_loc_flags(s,len,ep,flags) is_utf8_string_loclen_flags(s, len, ep, 0, flags)
# 1466 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_utf8_string_loclen_flags(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el, const U32 flags)
{
    const U8 * first_variant;

    ((void)0);
    ((void)0)
                                                         ;

    if (len == 0) {
        len = strlen((const char *) s);
    }

    if (flags == 0) {
        return Perl_is_utf8_string_loclen(s, len, ep, el);
    }

    if ((flags & ~0x4000)
                                        == ((0x1000|0x0100)|0x0400))
    {
        return Perl_is_strict_utf8_string_loclen(s, len, ep, el);
    }

    if ((flags & ~0x4000)
                                    == (0x1000|0x0100))
    {
        return Perl_is_c9strict_utf8_string_loclen(s, len, ep, el);
    }

    if (Perl_is_utf8_invariant_string_loc(s, len, &first_variant)) {
        if (el)
            *el = len;

        if (ep) {
            *ep = s + len;
        }

        return (1);
    }

    {
        const U8* send = s + len;
        const U8* x = first_variant;
        STRLEN outlen = first_variant - s;

        while (x < send) {
            const STRLEN cur_len = (__builtin_expect((((send) <= (x)) ? (_Bool)1 : (_Bool)0),(0)) ? 0 : (((((U64)(((UV) (((*x) | 0) | 0)))) < (((U8) (0xFF << 6)) & 0xB0)))) ? 1 : __builtin_expect(((((send) - (x)) < PL_utf8skip[*(const U8*)(x)]) ? (_Bool)1 : (_Bool)0),(0)) ? 0 : Perl_is_utf8_char_helper(x, send, flags));
            if (__builtin_expect(((! cur_len) ? (_Bool)1 : (_Bool)0),(0))) {
                break;
            }
            x += cur_len;
            outlen++;
        }

        if (el)
            *el = outlen;

        if (ep) {
            *ep = x;
        }

        return (x == send);
    }
}
# 1543 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ IV
Perl_utf8_distance(PerlInterpreter* my_perl __attribute__((unused)), const U8 *a, const U8 *b)
{
    ((void)0); ((void)0);

    return (a < b) ? -1 * (IV) Perl_utf8_length(my_perl, a,b) : (IV) Perl_utf8_length(my_perl, b,a);
}
# 1564 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ U8 *
Perl_utf8_hop(const U8 *s, ssize_t off)
{
    ((void)0);





    if (off >= 0) {
        while (off--)
            s += PL_utf8skip[*(const U8*)(s)];
    }
    else {
        while (off++) {
            s--;
            while (( (((( ((U8) ((*s) | 0))) & ((U8) (0xFF << 6))) == (((U8) (0xFF << 6)) & 0xB0)))))
                s--;
        }
    }
   
# 1584 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic push
# 1584 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
# 1584 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic ignored "-Wcast-qual"
# 1584 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
    return (U8 *)s;
   
# 1586 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic pop
# 1586 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
}
# 1606 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ U8 *
Perl_utf8_hop_forward(const U8 *s, ssize_t off, const U8 *end)
{
    ((void)0); ((void)0);





    ((void)0);
    ((void)0);

    while (off--) {
        STRLEN skip = PL_utf8skip[*(const U8*)(s)];
        if ((STRLEN)(end - s) <= skip) {
           
# 1621 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic push
# 1621 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
           
# 1621 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic ignored "-Wcast-qual"
# 1621 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
           
            return (U8 *)end;
           
# 1623 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic pop
# 1623 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
           
        }
        s += skip;
    }

   
# 1628 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic push
# 1628 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
# 1628 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic ignored "-Wcast-qual"
# 1628 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
    return (U8 *)s;
   
# 1630 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic pop
# 1630 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
}
# 1650 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ U8 *
Perl_utf8_hop_back(const U8 *s, ssize_t off, const U8 *start)
{
    ((void)0); ((void)0);





    ((void)0);
    ((void)0);

    while (off++ && s > start) {
        do {
            s--;
        } while (( (((( ((U8) ((*s) | 0))) & ((U8) (0xFF << 6))) == (((U8) (0xFF << 6)) & 0xB0)))) && s > start);
    }

   
# 1668 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic push
# 1668 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
# 1668 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic ignored "-Wcast-qual"
# 1668 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
    return (U8 *)s;
   
# 1670 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#pragma GCC diagnostic pop
# 1670 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
   
}
# 1688 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ U8 *
Perl_utf8_hop_safe(const U8 *s, ssize_t off, const U8 *start, const U8 *end)
{
    ((void)0); ((void)0); ((void)0);





    ((void)0);

    if (off >= 0) {
        return Perl_utf8_hop_forward(s, off, end);
    }
    else {
        return Perl_utf8_hop_back(s, off, start);
    }
}
# 1732 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_valid_partial_char(s,e) is_utf8_valid_partial_char_flags(s, e, 0)
# 1756 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_utf8_valid_partial_char_flags(const U8 * const s, const U8 * const e, const U32 flags)
{
    ((void)0); ((void)0);

    ((void)0)
                                                         ;

    if (s >= e || s + PL_utf8skip[*(const U8*)(s)] <= e) {
        return (0);
    }

    return ((Perl_is_utf8_char_helper(s, e, flags)) ? (_Bool)1 : (_Bool)0);
}
# 1794 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_fixed_width_buf_flags(s,len,flags) is_utf8_fixed_width_buf_loclen_flags(s, len, 0, 0, flags)
# 1811 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
#define is_utf8_fixed_width_buf_loc_flags(s,len,loc,flags) is_utf8_fixed_width_buf_loclen_flags(s, len, loc, 0, flags)
# 1824 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_utf8_fixed_width_buf_loclen_flags(const U8 * const s,
                                       STRLEN len,
                                       const U8 **ep,
                                       STRLEN *el,
                                       const U32 flags)
{
    const U8 * maybe_partial;

    ((void)0);

    if (! ep) {
        ep = &maybe_partial;
    }



    return Perl_is_utf8_string_loclen_flags(s, len, ep, el, flags)
           || Perl_is_utf8_valid_partial_char_flags(*ep, s + len, flags);
}

static __inline__ UV
Perl_utf8n_to_uvchr_msgs(const U8 *s,
                      STRLEN curlen,
                      STRLEN *retlen,
                      const U32 flags,
                      U32 * errors,
                      AV ** msgs)
{
# 1866 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    const U8 * const s0 = s;
    const U8 * send = s0 + curlen;
    UV uv = 0;
    UV state = 0;

    ((void)0);






    while (s < send && __builtin_expect(((state != 1) ? (_Bool)1 : (_Bool)0),(1))) {
        UV type = PL_strict_utf8_dfa_tab[*s];

        uv = (state == 0)
             ? ((0xff >> type) & ( ((U8) ((*s) | 0))))
             : ( ((uv) << 6) | ((( ((U8) ((*s) | 0)))) & ((U8) ((((1UL) << (6)) - 1)))));
        state = PL_strict_utf8_dfa_tab[256 + state + type];

        if (state != 0) {
            s++;
            continue;
        }

        if (retlen) {
            *retlen = s - s0 + 1;
        }
        if (errors) {
            *errors = 0;
        }
        if (msgs) {
            *msgs = ((void *)0);
        }

        return ((UV) ((uv) | 0));
    }


    return Perl__utf8n_to_uvchr_msgs_helper(s0, curlen, retlen, flags, errors, msgs);
}

static __inline__ UV
Perl_utf8_to_uvchr_buf_helper(PerlInterpreter* my_perl __attribute__((unused)), const U8 *s, const U8 *send, STRLEN *retlen)
{
    ((void)0); ((void)0);

    ((void)0);

    if (! Perl_ckwarn_d(my_perl, (44 ))) {




        return Perl_utf8n_to_uvchr_msgs(s, send - s, retlen, (( 0x0002 |0x0004 |0x0008 |0x0010 |0x0080) | 0x0001), 0, 0)
                                                                  ;
    }
    else {
        UV ret = Perl_utf8n_to_uvchr_msgs(s, send - s, retlen, 0, 0, 0);
        if (retlen && ret == 0 && *s != '\0') {
            *retlen = (STRLEN) -1;
        }

        return ret;
    }
}
# 1954 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_is_safe_syscall(PerlInterpreter* my_perl __attribute__((unused)), const char *pv, STRLEN len, const char *what, const char *op_name)
{




    ((void)0); ((void)0); ((void)0);

    if (len > 1) {
        char *null_at;
        if (__builtin_expect((((null_at = (char *)memchr(pv, 0, len-1)) != ((void *)0)) ? (_Bool)1 : (_Bool)0),(0))) {
                ((*__error()) = (2));
                Perl_ck_warner(my_perl, (57 ),
                                   "Invalid \\0 character in %s for %s: %s\\0%s",
                                   what, op_name, pv, null_at+1);
                return (0);
        }
    }

    return (1);
}
# 2085 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ _Bool
Perl_sv_only_taint_gmagic(SV *sv)
{
    MAGIC *mg = ((XPVMG*) (sv)->sv_any)->xmg_u.xmg_magic;

    ((void)0);

    while (mg) {
        if (mg->mg_type != 't'
            && !(mg->mg_flags & 4)
            && mg->mg_virtual->svt_get) {
            return (0);
        }
        mg = mg->mg_moremagic;
    }

    return (1);
}





static __inline__ U8
Perl_gimme_V(PerlInterpreter* my_perl __attribute__((unused)))
{
    I32 cxix;
    U8 gimme = ((my_perl->Iop)->op_flags & 3);

    if (gimme)
        return gimme;
    cxix = (my_perl->Icurstackinfo)->si_cxsubix;
    if (cxix < 0)
        return (my_perl->Icurstackinfo)->si_type == 3 ? 2: 1;
    ((void)0);
    return (((my_perl->Icurstackinfo)->si_cxstack)[cxix].cx_u.cx_blk.blku_gimme & 3);
}




static __inline__ PERL_CONTEXT *
Perl_cx_pushblock(PerlInterpreter* my_perl __attribute__((unused)), U8 type, U8 gimme, SV** sp, I32 saveix)
{
    PERL_CONTEXT * cx;

    ((void)0);

    (((my_perl->Icurstackinfo)->si_cxix) < ((my_perl->Icurstackinfo)->si_cxmax) ? ++((my_perl->Icurstackinfo)->si_cxix) : (((my_perl->Icurstackinfo)->si_cxix) = Perl_cxinc(my_perl)));
    cx = (&((my_perl->Icurstackinfo)->si_cxstack)[((my_perl->Icurstackinfo)->si_cxix)]);
    cx->cx_u.cx_subst.sbu_type = type;
    cx->cx_u.cx_blk.blku_gimme = gimme;
    cx->cx_u.cx_blk.blku_oldsaveix = saveix;
    cx->cx_u.cx_blk.blku_oldsp = (I32)(sp - (my_perl->Istack_base));
    cx->cx_u.cx_blk.blku_oldcop = (my_perl->Icurcop);
    cx->cx_u.cx_blk.blku_oldmarksp = (I32)((my_perl->Imarkstack_ptr) - (my_perl->Imarkstack));
    cx->cx_u.cx_blk.blku_oldscopesp = (my_perl->Iscopestack_ix);
    cx->cx_u.cx_blk.blku_oldpm = (my_perl->Icurpm);
    cx->cx_u.cx_blk.blku_old_tmpsfloor = (my_perl->Itmps_floor);

    (my_perl->Itmps_floor) = (my_perl->Itmps_ix);
    ;;
    return cx;
}




static __inline__ void
Perl_cx_popblock(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);

    ;;

    (my_perl->Imarkstack_ptr) = (my_perl->Imarkstack) + cx->cx_u.cx_blk.blku_oldmarksp;
    (my_perl->Iscopestack_ix) = cx->cx_u.cx_blk.blku_oldscopesp;
    (my_perl->Icurpm) = cx->cx_u.cx_blk.blku_oldpm;




    ((void)0)
                                                    ;
    (my_perl->Icurcop) = cx->cx_u.cx_blk.blku_oldcop;
    (my_perl->Itmps_floor) = cx->cx_u.cx_blk.blku_old_tmpsfloor;
}






static __inline__ void
Perl_cx_topblock(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);

    ;;

    (my_perl->Imarkstack_ptr) = (my_perl->Imarkstack) + cx->cx_u.cx_blk.blku_oldmarksp;
    (my_perl->Iscopestack_ix) = cx->cx_u.cx_blk.blku_oldscopesp;
    (my_perl->Icurpm) = cx->cx_u.cx_blk.blku_oldpm;

    (my_perl->Istack_sp) = (my_perl->Istack_base) + cx->cx_u.cx_blk.blku_oldsp;
}


static __inline__ void
Perl_cx_pushsub(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, CV *cv, OP *retop, _Bool hasargs)
{
    U8 phlags = ( ((my_perl->Iop)->op_flags & 3) ? (0x80|0x01) : !((my_perl->Iop)->op_private & (0x80|0x01)) ? 0 : (U8)Perl_was_lvalue_sub(my_perl) );

    ((void)0); ((void)0);

    ;
    cx->cx_u.cx_blk.blk_u.blku_sub.old_cxsubix = (my_perl->Icurstackinfo)->si_cxsubix;
    (my_perl->Icurstackinfo)->si_cxsubix = cx - (my_perl->Icurstackinfo)->si_cxstack;
    cx->cx_u.cx_blk.blk_u.blku_sub.cv = cv;
    cx->cx_u.cx_blk.blk_u.blku_sub.olddepth = (*Perl_CvDEPTH((const CV *)cv));
    cx->cx_u.cx_blk.blk_u.blku_sub.prevcomppad = (my_perl->Icomppad);
    cx->cx_u.cx_subst.sbu_type |= (hasargs) ? 0x20 : 0;
    cx->cx_u.cx_blk.blk_u.blku_sub.retop = retop;
    (void)(++(((SV *)({ void *p_ = (cv); p_; })))->sv_refcnt);
    cx->cx_u.cx_blk.blku_u16 = (my_perl->Iop)->op_private & (phlags|0x30);
}




static __inline__ void
Perl_cx_popsub_common(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    CV *cv;

    ((void)0);
    ((void)0);

    (my_perl->Icomppad) = cx->cx_u.cx_blk.blk_u.blku_sub.prevcomppad;
    (my_perl->Icurpad) = __builtin_expect((((my_perl->Icomppad)) ? (_Bool)1 : (_Bool)0),(1)) ? (((my_perl->Icomppad))->sv_u.svu_array) : ((void *)0);
    cv = cx->cx_u.cx_blk.blk_u.blku_sub.cv;
    (*Perl_CvDEPTH((const CV *)cv)) = cx->cx_u.cx_blk.blk_u.blku_sub.olddepth;
    cx->cx_u.cx_blk.blk_u.blku_sub.cv = ((void *)0);
    Perl_SvREFCNT_dec(my_perl, ((SV *)({ void *p_ = (cv); p_; })));
    (my_perl->Icurstackinfo)->si_cxsubix = cx->cx_u.cx_blk.blk_u.blku_sub.old_cxsubix;
}




static __inline__ void
Perl_cx_popsub_args(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    AV *av;

    ((void)0);
    ((void)0);
    ((void)0)

                                                        ;

    (void)( { AV *cx_pop_savearray_av = ((0+((my_perl->Idefgv))->sv_u.svu_gp)->gp_av); ((0+((my_perl->Idefgv))->sv_u.svu_gp)->gp_av) = cx->cx_u.cx_blk.blk_u.blku_sub.savearray; cx->cx_u.cx_blk.blk_u.blku_sub.savearray = ((void *)0); Perl_SvREFCNT_dec(my_perl, ((SV *)({ void *p_ = (cx_pop_savearray_av); p_; }))); } );
    av = ((AV *)({ void *p_ = (((my_perl->Icurpad)[0])); p_; }));
    if (__builtin_expect(((((av)->sv_flags & 0x40000000)) ? (_Bool)1 : (_Bool)0),(0)))

        Perl_clear_defarray(my_perl, av,0);
    else {
        (void)( { ((XPVAV*) (av)->sv_any)->xav_max += ((av)->sv_u.svu_array) - ((XPVAV*) (av)->sv_any)->xav_alloc; ((av)->sv_u.svu_array) = ((XPVAV*) (av)->sv_any)->xav_alloc; ((XPVAV*) (av)->sv_any)->xav_fill = -1; } );
    }
}


static __inline__ void
Perl_cx_popsub(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);
    ((void)0);

    ;

    if ((((cx)->cx_u.cx_subst.sbu_type & 0x20) == 0x20))
        Perl_cx_popsub_args(my_perl, cx);
    Perl_cx_popsub_common(my_perl, cx);
}


static __inline__ void
Perl_cx_pushformat(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, CV *cv, OP *retop, GV *gv)
{
    ((void)0); ((void)0);

    cx->cx_u.cx_blk.blk_u.blku_format.old_cxsubix = (my_perl->Icurstackinfo)->si_cxsubix;
    (my_perl->Icurstackinfo)->si_cxsubix= cx - (my_perl->Icurstackinfo)->si_cxstack;
    cx->cx_u.cx_blk.blk_u.blku_format.cv = cv;
    cx->cx_u.cx_blk.blk_u.blku_format.retop = retop;
    cx->cx_u.cx_blk.blk_u.blku_format.gv = gv;
    cx->cx_u.cx_blk.blk_u.blku_format.dfoutgv = (my_perl->Idefoutgv);
    cx->cx_u.cx_blk.blk_u.blku_format.prevcomppad = (my_perl->Icomppad);
    cx->cx_u.cx_blk.blku_u16 = 0;

    (void)(++(((SV *)({ void *p_ = (cv); p_; })))->sv_refcnt);
    (*Perl_CvDEPTH((const CV *)cv))++;
    Perl_SvREFCNT_inc_void(((SV *)({ void *p_ = (cx->cx_u.cx_blk.blk_u.blku_format.dfoutgv); p_; })));
}


static __inline__ void
Perl_cx_popformat(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    CV *cv;
    GV *dfout;

    ((void)0);
    ((void)0);

    dfout = cx->cx_u.cx_blk.blk_u.blku_format.dfoutgv;
    Perl_setdefout(my_perl, dfout);
    cx->cx_u.cx_blk.blk_u.blku_format.dfoutgv = ((void *)0);
    Perl_SvREFCNT_dec_NN(my_perl, ((SV *)({ void *p_ = (dfout); p_; })));

    (my_perl->Icomppad) = cx->cx_u.cx_blk.blk_u.blku_format.prevcomppad;
    (my_perl->Icurpad) = __builtin_expect((((my_perl->Icomppad)) ? (_Bool)1 : (_Bool)0),(1)) ? (((my_perl->Icomppad))->sv_u.svu_array) : ((void *)0);
    cv = cx->cx_u.cx_blk.blk_u.blku_format.cv;
    cx->cx_u.cx_blk.blk_u.blku_format.cv = ((void *)0);
    --(*Perl_CvDEPTH((const CV *)cv));
    Perl_SvREFCNT_dec_NN(my_perl, ((SV *)({ void *p_ = (cv); p_; })));
    (my_perl->Icurstackinfo)->si_cxsubix = cx->cx_u.cx_blk.blk_u.blku_format.old_cxsubix;
}


static __inline__ void
Perl_push_evalortry_common(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, OP *retop, SV *namesv)
{
    cx->cx_u.cx_blk.blk_u.blku_eval.retop = retop;
    cx->cx_u.cx_blk.blk_u.blku_eval.old_namesv = namesv;
    cx->cx_u.cx_blk.blk_u.blku_eval.old_eval_root = (my_perl->Ieval_root);
    cx->cx_u.cx_blk.blk_u.blku_eval.cur_text = (my_perl->Iparser) ? (my_perl->Iparser)->linestr : ((void *)0);
    cx->cx_u.cx_blk.blk_u.blku_eval.cv = ((void *)0);
    cx->cx_u.cx_blk.blk_u.blku_eval.cur_top_env = (my_perl->Itop_env);

    ((void)0);
    ((void)0);
    cx->cx_u.cx_blk.blku_u16 = ((my_perl->Iin_eval) & 0x3F) | ((U16)(my_perl->Iop)->op_type << 7);
}

static __inline__ void
Perl_cx_pusheval(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, OP *retop, SV *namesv)
{
    ((void)0);

    Perl_push_evalortry_common(my_perl, cx, retop, namesv);

    cx->cx_u.cx_blk.blk_u.blku_eval.old_cxsubix = (my_perl->Icurstackinfo)->si_cxsubix;
    (my_perl->Icurstackinfo)->si_cxsubix = cx - (my_perl->Icurstackinfo)->si_cxstack;
}

static __inline__ void
Perl_cx_pushtry(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, OP *retop)
{
    ((void)0);

    Perl_push_evalortry_common(my_perl, cx, retop, ((void *)0));



    cx->cx_u.cx_blk.blk_u.blku_eval.old_cxsubix = (my_perl->Icurstackinfo)->si_cxsubix;
}


static __inline__ void
Perl_cx_popeval(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    SV *sv;

    ((void)0);
    ((void)0);

    (my_perl->Iin_eval) = (((cx)->cx_u.cx_blk.blku_u16) & 0x3F);
    ((void)0);
    (my_perl->Ieval_root) = cx->cx_u.cx_blk.blk_u.blku_eval.old_eval_root;
    sv = cx->cx_u.cx_blk.blk_u.blku_eval.cur_text;
    if (sv && (((cx)->cx_u.cx_blk.blku_u16) & 0x40)) {
        cx->cx_u.cx_blk.blk_u.blku_eval.cur_text = ((void *)0);
        Perl_SvREFCNT_dec_NN(my_perl, ((SV *)({ void *p_ = (sv); p_; })));
    }

    sv = cx->cx_u.cx_blk.blk_u.blku_eval.old_namesv;
    if (sv) {
        cx->cx_u.cx_blk.blk_u.blku_eval.old_namesv = ((void *)0);
        Perl_SvREFCNT_dec_NN(my_perl, ((SV *)({ void *p_ = (sv); p_; })));
    }
    (my_perl->Icurstackinfo)->si_cxsubix = cx->cx_u.cx_blk.blk_u.blku_eval.old_cxsubix;
}
# 2387 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ void
Perl_cx_pushloop_plain(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);
    cx->cx_u.cx_blk.blk_u.blku_loop.my_op = ((LOOP*)((my_perl->Iop)));
}






static __inline__ void
Perl_cx_pushloop_for(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, void *itervarp, SV* itersave)
{
    ((void)0); ((void)0);


    cx->cx_u.cx_blk.blk_u.blku_loop.my_op = ((LOOP*)((my_perl->Iop)));

    cx->cx_u.cx_blk.blk_u.blku_loop.itervar_u.svp = (SV**)itervarp;
    cx->cx_u.cx_blk.blk_u.blku_loop.itersave = itersave;

    cx->cx_u.cx_blk.blk_u.blku_loop.oldcomppad = (my_perl->Icomppad);

}




static __inline__ void
Perl_cx_poploop(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);

    ((void)0);
    if ( ((cx)->cx_u.cx_subst.sbu_type & 0xf) == 4
       || ((cx)->cx_u.cx_subst.sbu_type & 0xf) == 5)
    {


        SV *sv = cx->cx_u.cx_blk.blk_u.blku_loop.state_u.lazysv.cur;
        cx->cx_u.cx_blk.blk_u.blku_loop.state_u.lazysv.cur = ((void *)0);
        Perl_SvREFCNT_dec_NN(my_perl, ((SV *)({ void *p_ = (sv); p_; })));
        if (((cx)->cx_u.cx_subst.sbu_type & 0xf) == 5) {
            sv = cx->cx_u.cx_blk.blk_u.blku_loop.state_u.lazysv.end;
            cx->cx_u.cx_blk.blk_u.blku_loop.state_u.lazysv.end = ((void *)0);
            Perl_SvREFCNT_dec_NN(my_perl, ((SV *)({ void *p_ = (sv); p_; })));
        }
    }
    if (cx->cx_u.cx_subst.sbu_type & (0x80|0x40)) {
        SV *cursv;
        SV **svp = (cx)->cx_u.cx_blk.blk_u.blku_loop.itervar_u.svp;
        if ((cx->cx_u.cx_subst.sbu_type & 0x40))
            svp = &((0+((GV*)svp)->sv_u.svu_gp)->gp_sv);
        cursv = *svp;
        *svp = cx->cx_u.cx_blk.blk_u.blku_loop.itersave;
        cx->cx_u.cx_blk.blk_u.blku_loop.itersave = ((void *)0);
        Perl_SvREFCNT_dec(my_perl, ((SV *)({ void *p_ = (cursv); p_; })));
    }
}


static __inline__ void
Perl_cx_pushwhen(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);

    cx->cx_u.cx_blk.blk_u.blku_givwhen.leave_op = ((LOGOP*)((my_perl->Iop)))->op_other;
}


static __inline__ void
Perl_cx_popwhen(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    ((void)0);
    ((void)0);

    ((void)sizeof(cx));
    ((void)sizeof(my_perl));

}


static __inline__ void
Perl_cx_pushgiven(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx, SV *orig_defsv)
{
    ((void)0);

    cx->cx_u.cx_blk.blk_u.blku_givwhen.leave_op = ((LOGOP*)((my_perl->Iop)))->op_other;
    cx->cx_u.cx_blk.blk_u.blku_givwhen.defsv_save = orig_defsv;
}


static __inline__ void
Perl_cx_popgiven(PerlInterpreter* my_perl __attribute__((unused)), PERL_CONTEXT *cx)
{
    SV *sv;

    ((void)0);
    ((void)0);

    sv = ((0+((my_perl->Idefgv))->sv_u.svu_gp)->gp_sv);
    ((0+((my_perl->Idefgv))->sv_u.svu_gp)->gp_sv) = cx->cx_u.cx_blk.blk_u.blku_givwhen.defsv_save;
    cx->cx_u.cx_blk.blk_u.blku_givwhen.defsv_save = ((void *)0);
    Perl_SvREFCNT_dec(my_perl, ((SV *)({ void *p_ = (sv); p_; })));
}
# 2511 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ I32
Perl_foldEQ(const char *s1, const char *s2, I32 len)
{
    const U8 *a = (const U8 *)s1;
    const U8 *b = (const U8 *)s2;

    ((void)0); ((void)0);

    ((void)0);

    while (len--) {
        if (*a != *b && *a != PL_fold[*b])
            return 0;
        a++,b++;
    }
    return 1;
}

static __inline__ I32
Perl_foldEQ_latin1(const char *s1, const char *s2, I32 len)
{





    const U8 *a = (const U8 *)s1;
    const U8 *b = (const U8 *)s2;

    ((void)0); ((void)0);

    ((void)0);

    while (len--) {
        if (*a != *b && *a != PL_fold_latin1[*b]) {
            return 0;
        }
        a++, b++;
    }
    return 1;
}
# 2563 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ I32
Perl_foldEQ_locale(const char *s1, const char *s2, I32 len)
{
    const U8 *a = (const U8 *)s1;
    const U8 *b = (const U8 *)s2;

    ((void)0); ((void)0);

    ((void)0);

    while (len--) {
        if (*a != *b && *a != PL_fold_locale[*b])
            return 0;
        a++,b++;
    }
    return 1;
}
# 2635 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
static __inline__ char *
Perl_mortal_getenv(const char * str)
{
# 2672 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    char * ret;
    PerlInterpreter* my_perl __attribute__((unused)) = ((PerlInterpreter *)pthread_getspecific(PL_thr_key));

    ((void)0);




    if (__builtin_expect((((my_perl->Iscopestack_ix) == 0) ? (_Bool)1 : (_Bool)0),(0))) {
        return getenv(str);
    }
# 2738 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    (void)( { (void)( { int _eC_; if ((_eC_ = pthread_mutex_lock((&(&PL_env_mutex)->lock)))) Perl_croak_nocontext("panic: MUTEX_LOCK (%d) [%s:%d]", _eC_, "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h", 2738); } ); (&PL_env_mutex)->readers_count++; (void)( { int _eC_; if ((_eC_ = pthread_mutex_unlock((&(&PL_env_mutex)->lock)))) Perl_croak_nocontext("panic: MUTEX_UNLOCK (%d) [%s:%d]", _eC_, "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h", 2738); } ); } );
# 2815 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    ret = getenv(str);

    if (ret != ((void *)0)) {
        ret = ((Perl_sv_2mortal(my_perl, Perl_newSVpv(my_perl, ret,0)))->sv_u.svu_pv);
    }

    (void)( { (void)( { int _eC_; if ((_eC_ = pthread_mutex_lock((&(&PL_env_mutex)->lock)))) Perl_croak_nocontext("panic: MUTEX_LOCK (%d) [%s:%d]", _eC_, "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h", 2821); } ); (&PL_env_mutex)->readers_count--; if ((&PL_env_mutex)->readers_count <= 0) { ((void)0); (void)( { int _eC_; if ((_eC_ = pthread_cond_signal((&(&PL_env_mutex)->wakeup)))) Perl_croak_nocontext("panic: COND_SIGNAL (%d) [%s:%d]", _eC_, "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h", 2821); } ); (&PL_env_mutex)->readers_count = 0; } (void)( { int _eC_; if ((_eC_ = pthread_mutex_unlock((&(&PL_env_mutex)->lock)))) Perl_croak_nocontext("panic: MUTEX_UNLOCK (%d) [%s:%d]", _eC_, "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h", 2821); } ); } );
# 2830 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/inline.h" 3 4
    return ret;
}
# 7110 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4


# 7121 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define ENV_LOCALE_LOCK ENV_LOCK
#define ENV_LOCALE_UNLOCK ENV_UNLOCK




#define ENV_LOCALE_READ_LOCK ENV_LOCALE_LOCK
#define ENV_LOCALE_READ_UNLOCK ENV_LOCALE_UNLOCK

#define Atof my_atof
# 7158 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Strtod my_strtod





#define Perl_strtod Strtod
# 7184 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Strtol strtol
# 7197 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Atol atol
# 7218 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Strtoul strtoul





#define Atoul(s) Strtoul(s, NULL, 10)


#define grok_bin(s,lp,fp,rp) grok_bin_oct_hex(s, lp, fp, rp, 1, _CC_BINDIGIT, 'b')

#define grok_oct(s,lp,fp,rp) (*(fp) |= PERL_SCAN_DISALLOW_PREFIX, grok_bin_oct_hex(s, lp, fp, rp, 3, _CC_OCTDIGIT, '\0'))


#define grok_hex(s,lp,fp,rp) grok_bin_oct_hex(s, lp, fp, rp, 4, _CC_XDIGIT, 'x')



#define PERL_SCRIPT_MODE "r"



#define PERL_STACK_OVERFLOW_CHECK() NOOP
# 7251 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_ASYNC_CHECK() if (UNLIKELY(PL_sig_pending)) PL_signalhook(aTHX)
# 7266 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_ALLOC_CHECK(p) NOOP



# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ipc.h" 1 3 4
# 77 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ipc.h" 3 4
#define _SYS_IPC_H_ 
# 94 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ipc.h" 3 4
#pragma pack(4)
# 107 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ipc.h" 3 4
struct ipc_perm {
 uid_t uid;
 gid_t gid;
 uid_t cuid;
 gid_t cgid;
 mode_t mode;
 unsigned short _seq;
 key_t _key;
};
#define __ipc_perm_new ipc_perm
# 138 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/ipc.h" 3 4
#pragma pack()






#define IPC_CREAT 001000
#define IPC_EXCL 002000
#define IPC_NOWAIT 004000


#define IPC_PRIVATE ((key_t)0)


#define IPC_RMID 0
#define IPC_SET 1
#define IPC_STAT 2





#define IPC_R 000400
#define IPC_W 000200
#define IPC_M 010000








key_t ftok(const char *, int);

# 7271 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sem.h" 1 3 4
# 38 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sem.h" 3 4
#define _SYS_SEM_H_ 
# 70 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sem.h" 3 4
#pragma pack(4)
# 84 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sem.h" 3 4
#define semid_ds __semid_ds_new
struct __semid_ds_new

{
 struct ipc_perm sem_perm;
 __int32_t sem_base;
 unsigned short sem_nsems;
 time_t sem_otime;
 __int32_t sem_pad1;
 time_t sem_ctime;


 __int32_t sem_pad2;
 __int32_t sem_pad3[4];
};
#pragma pack()
# 122 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sem.h" 3 4
#define GETNCNT 3
#define GETPID 4
#define GETVAL 5
#define GETALL 6
#define GETZCNT 7
#define SETVAL 8
#define SETALL 9



struct sem {
 unsigned short semval;
 pid_t sempid;
 unsigned short semncnt;
 unsigned short semzcnt;
};





struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};




#define SEM_UNDO 010000
# 177 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/sem.h" 3 4
union semun {
 int val;
 struct __semid_ds_new *buf;
 unsigned short *array;
};
typedef union semun semun_t;





#define SEM_A 0200
#define SEM_R 0400








int semsys(int, ...);

int semctl(int, int, int, ...) __asm("_" "semctl" );
int semget(key_t, int, int);
int semop(int, struct sembuf *, size_t);

# 7272 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 7289 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define Semctl(id,num,cmd,semun) semctl(id, num, cmd, semun)
# 7326 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define START_MY_CXT static int my_cxt_index = -1;
#define MY_CXT_INDEX my_cxt_index
#define MY_CXT_INIT_ARG &my_cxt_index




#define MY_CXT_INIT my_cxt_t *my_cxtp = (my_cxt_t*)Perl_my_cxt_init(aTHX_ MY_CXT_INIT_ARG, sizeof(my_cxt_t)); PERL_UNUSED_VAR(my_cxtp)



#define MY_CXT_INIT_INTERP(my_perl) my_cxt_t *my_cxtp = (my_cxt_t*)Perl_my_cxt_init(my_perl, MY_CXT_INIT_ARG, sizeof(my_cxt_t)); PERL_UNUSED_VAR(my_cxtp)






#define dMY_CXT my_cxt_t *my_cxtp = (my_cxt_t *)PL_my_cxt_list[MY_CXT_INDEX]

#define dMY_CXT_INTERP(my_perl) my_cxt_t *my_cxtp = (my_cxt_t *)(my_perl)->Imy_cxt_list[MY_CXT_INDEX]



#define MY_CXT_CLONE my_cxt_t *my_cxtp = (my_cxt_t*)SvPVX(newSV(sizeof(my_cxt_t)-1)); void * old_my_cxtp = PL_my_cxt_list[MY_CXT_INDEX]; PL_my_cxt_list[MY_CXT_INDEX] = my_cxtp; Copy(old_my_cxtp, my_cxtp, 1, my_cxt_t);
# 7360 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define MY_CXT (*my_cxtp)



#define pMY_CXT my_cxt_t *my_cxtp
#define pMY_CXT_ pMY_CXT,
#define _pMY_CXT ,pMY_CXT
#define aMY_CXT my_cxtp
#define aMY_CXT_ aMY_CXT,
#define _aMY_CXT ,aMY_CXT
# 7401 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
# 1 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/file.h" 1 3 4
# 65 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/file.h" 3 4
#define _SYS_FILE_H_ 
# 83 "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk/usr/include/sys/file.h" 3 4



# 7402 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 2 3 4
# 7417 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define O_BINARY 0



#define O_TEXT 0
# 7446 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define EXEC_ARGV_CAST(x) (char **)x


#define IS_NUMBER_IN_UV 0x01


#define IS_NUMBER_GREATER_THAN_UV_MAX 0x02
#define IS_NUMBER_NOT_INT 0x04
#define IS_NUMBER_NEG 0x08
#define IS_NUMBER_INFINITY 0x10
#define IS_NUMBER_NAN 0x20
#define IS_NUMBER_TRAILING 0x40
# 7468 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define GROK_NUMERIC_RADIX(sp,send) grok_numeric_radix(sp, send)



#define PERL_SCAN_ALLOW_UNDERSCORES 0x01
#define PERL_SCAN_DISALLOW_PREFIX 0x02


#define PERL_SCAN_GREATER_THAN_UV_MAX 0x04




#define PERL_SCAN_SILENT_ILLDIGIT 0x08

#define PERL_SCAN_TRAILING 0x10
# 7509 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_GPROF_MONCONTROL(x) 




#define NEXT_LINE_CHAR NEXT_LINE_NATIVE


#define PIPESOCK_MODE 



#define SOCKET_OPEN_MODE PIPESOCK_MODE



#define PIPE_OPEN_MODE PIPESOCK_MODE


#define PERL_MAGIC_UTF8_CACHESIZE 2
# 7581 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_SIGNALS_UNSAFE_FLAG 0x0001
# 7597 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_ABS(x) ((x) < 0 ? -(x) : (x))





#define do_open(g,n,l,a,rm,rp,sf) do_openn(g, n, l, a, rm, rp, sf, (SV **) NULL, 0)


#define do_exec(cmd) do_exec3(cmd,0,0)




#define do_aexec(really,mark,sp) do_aexec5(really, mark, sp, 0, 0)
# 7626 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define IS_SAFE_SYSCALL(p,len,what,op_name) (Perl_is_safe_syscall(aTHX_ (p), (len), (what), (op_name)))

#define IS_SAFE_PATHNAME(p,len,op_name) IS_SAFE_SYSCALL((p), (len), "pathname", (op_name))
# 7641 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define PERL_PV_ESCAPE_QUOTE 0x000001
#define PERL_PV_PRETTY_QUOTE PERL_PV_ESCAPE_QUOTE

#define PERL_PV_PRETTY_ELLIPSES 0x000002
#define PERL_PV_PRETTY_LTGT 0x000004
#define PERL_PV_PRETTY_EXACTSIZE 0x000008

#define PERL_PV_ESCAPE_UNI 0x000100
#define PERL_PV_ESCAPE_UNI_DETECT 0x000200
#define PERL_PV_ESCAPE_NONASCII 0x000400
#define PERL_PV_ESCAPE_FIRSTCHAR 0x000800

#define PERL_PV_ESCAPE_ALL 0x001000
#define PERL_PV_ESCAPE_NOBACKSLASH 0x002000
#define PERL_PV_ESCAPE_NOCLEAR 0x004000
#define PERL_PV_PRETTY_NOCLEAR PERL_PV_ESCAPE_NOCLEAR
#define PERL_PV_ESCAPE_RE 0x008000

#define PERL_PV_ESCAPE_DWIM 0x010000



#define PERL_PV_PRETTY_DUMP PERL_PV_PRETTY_ELLIPSES|PERL_PV_PRETTY_QUOTE
#define PERL_PV_PRETTY_REGPROP PERL_PV_PRETTY_ELLIPSES|PERL_PV_PRETTY_LTGT|PERL_PV_ESCAPE_RE|PERL_PV_ESCAPE_NONASCII






#define DOUBLE_IS_IEEE_FORMAT 





#define DOUBLE_LITTLE_ENDIAN 
# 7758 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_IMPLICIT_BIT 







#define LONGDOUBLE_LITTLE_ENDIAN 
# 7782 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define LONGDOUBLE_X86_80_BIT 
# 7812 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_LITTLE_ENDIAN 
# 7859 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define DOUBLE_HAS_INF 
#define DOUBLE_HAS_NAN 





# 7970 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
extern const union { NV nv; U8 u8[8]; } PL_inf;
extern const union { NV nv; U8 u8[8]; } PL_nan;











#define NV_INF PL_inf.nv


#define NV_NAN PL_nan.nv
# 8091 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_NAN_BITS (NVMANTBITS - 1)
# 8127 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_NAN_QS_BYTE_OFFSET 6
# 8145 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_NAN_QS_BYTE(nvp) (((U8*)(nvp))[NV_NAN_QS_BYTE_OFFSET])
# 8159 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_NAN_QS_BIT_SHIFT ((NV_NAN_BITS) % 8)

#define NV_NAN_QS_BIT (1 << (NV_NAN_QS_BIT_SHIFT))



#define NV_NAN_QS_BIT_OFFSET (8 * (NV_NAN_QS_BYTE_OFFSET) + (NV_NAN_QS_BIT_SHIFT))




#define NV_NAN_QS_QUIET ((NV_NAN_QS_BYTE(PL_nan.u8) & NV_NAN_QS_BIT) == NV_NAN_QS_BIT)

#define NV_NAN_QS_SIGNALING (!(NV_NAN_QS_QUIET))
#define NV_NAN_QS_TEST(nvp) (NV_NAN_QS_BYTE(nvp) & NV_NAN_QS_BIT)



#define NV_NAN_IS_QUIET(nvp) (NV_NAN_QS_TEST(nvp) == (NV_NAN_QS_QUIET ? NV_NAN_QS_BIT : 0))

#define NV_NAN_IS_SIGNALING(nvp) (NV_NAN_QS_TEST(nvp) == (NV_NAN_QS_QUIET ? 0 : NV_NAN_QS_BIT))

#define NV_NAN_SET_QUIET(nvp) (NV_NAN_QS_QUIET ? (NV_NAN_QS_BYTE(nvp) |= NV_NAN_QS_BIT) : (NV_NAN_QS_BYTE(nvp) &= ~NV_NAN_QS_BIT))



#define NV_NAN_SET_SIGNALING(nvp) (NV_NAN_QS_QUIET ? (NV_NAN_QS_BYTE(nvp) &= ~NV_NAN_QS_BIT) : (NV_NAN_QS_BYTE(nvp) |= NV_NAN_QS_BIT))



#define NV_NAN_QS_XOR(nvp) (NV_NAN_QS_BYTE(nvp) ^= NV_NAN_QS_BIT)







#define NV_NAN_PAYLOAD_MASK_SKIP_EIGHT 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0

#define NV_NAN_PAYLOAD_PERM_SKIP_EIGHT 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

#define NV_NAN_PAYLOAD_PERM_0_TO_7 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7

#define NV_NAN_PAYLOAD_PERM_7_TO_0 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0

#define NV_NAN_PAYLOAD_MASK_IEEE_754_128_LE 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00


#define NV_NAN_PAYLOAD_PERM_IEEE_754_128_LE NV_NAN_PAYLOAD_PERM_0_TO_7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xFF, 0xFF


#define NV_NAN_PAYLOAD_MASK_IEEE_754_128_BE 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff


#define NV_NAN_PAYLOAD_PERM_IEEE_754_128_BE 0xFF, 0xFF, 0xd, 0xc, 0xb, 0xa, 0x9, 0x8, NV_NAN_PAYLOAD_PERM_7_TO_0


#define NV_NAN_PAYLOAD_MASK_IEEE_754_64_LE 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00

#define NV_NAN_PAYLOAD_PERM_IEEE_754_64_LE 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0xFF

#define NV_NAN_PAYLOAD_MASK_IEEE_754_64_BE 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

#define NV_NAN_PAYLOAD_PERM_IEEE_754_64_BE 0xFF, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0
# 8322 "/usr/local/Cellar/perl/5.34.0/lib/perl5/5.34.0/darwin-thread-multi-2level/CORE/perl.h" 3 4
#define NV_NAN_PAYLOAD_MASK NV_NAN_PAYLOAD_MASK_IEEE_754_64_LE
#define NV_NAN_PAYLOAD_PERM NV_NAN_PAYLOAD_PERM_IEEE_754_64_LE
# 19 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h" 2



# 21 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h"
typedef ngx_http_request_t *nginx;

typedef struct {
    ngx_http_request_t *request;

    ngx_str_t filename;
    ngx_str_t redirect_uri;

    SV *next;

    ngx_int_t status;

    unsigned done:1;
    unsigned error:1;
    unsigned variable:1;
    unsigned header_sent:1;

    ngx_array_t *variables;


    ngx_http_ssi_ctx_t *ssi;

} ngx_http_perl_ctx_t;


typedef struct {
    ngx_uint_t hash;
    ngx_str_t name;
    ngx_str_t value;
} ngx_http_perl_var_t;


extern ngx_module_t ngx_http_perl_module;
# 66 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h"
extern void boot_DynaLoader(
# 66 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h" 3 4
                           PerlInterpreter* my_perl __attribute__((unused)), 
# 66 "project/nginx/src/http/modules/perl/ngx_http_perl_module.h"
                                 CV* cv);


void ngx_http_perl_handle_request(ngx_http_request_t *r);
void ngx_http_perl_sleep_handler(ngx_http_request_t *r);
