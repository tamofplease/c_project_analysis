# 0 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
# 63 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
enum attributeBits {
 ATTR_NONE = 0x00, ATTR_64BIT = (0x1 << 0), ATTR_XS = (0x1 << 1), ATTR_XD = (0x1 << 2), ATTR_REXW = (0x1 << 3), ATTR_OPSIZE = (0x1 << 4), ATTR_ADSIZE = (0x1 << 5), ATTR_VEX = (0x1 << 6), ATTR_VEXL = (0x1 << 7), ATTR_EVEX = (0x1 << 8), ATTR_EVEXL = (0x1 << 9), ATTR_EVEXL2 = (0x1 << 10), ATTR_EVEXK = (0x1 << 11), ATTR_EVEXKZ = (0x1 << 12), ATTR_EVEXB = (0x1 << 13),
 ATTR_max
};
# 281 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
typedef enum {
 IC, IC_64BIT, IC_OPSIZE, IC_ADSIZE, IC_OPSIZE_ADSIZE, IC_XD, IC_XS, IC_XD_OPSIZE, IC_XS_OPSIZE, IC_XD_ADSIZE, IC_XS_ADSIZE, IC_64BIT_REXW, IC_64BIT_REXW_ADSIZE, IC_64BIT_OPSIZE, IC_64BIT_ADSIZE, IC_64BIT_OPSIZE_ADSIZE, IC_64BIT_XD, IC_64BIT_XS, IC_64BIT_XD_OPSIZE, IC_64BIT_XS_OPSIZE, IC_64BIT_XD_ADSIZE, IC_64BIT_XS_ADSIZE, IC_64BIT_REXW_XS, IC_64BIT_REXW_XD, IC_64BIT_REXW_OPSIZE, IC_VEX, IC_VEX_XS, IC_VEX_XD, IC_VEX_OPSIZE, IC_VEX_W, IC_VEX_W_XS, IC_VEX_W_XD, IC_VEX_W_OPSIZE, IC_VEX_L, IC_VEX_L_XS, IC_VEX_L_XD, IC_VEX_L_OPSIZE, IC_VEX_L_W, IC_VEX_L_W_XS, IC_VEX_L_W_XD, IC_VEX_L_W_OPSIZE, IC_EVEX, IC_EVEX_XS, IC_EVEX_XD, IC_EVEX_OPSIZE, IC_EVEX_W, IC_EVEX_W_XS, IC_EVEX_W_XD, IC_EVEX_W_OPSIZE, IC_EVEX_L, IC_EVEX_L_XS, IC_EVEX_L_XD, IC_EVEX_L_OPSIZE, IC_EVEX_L_W, IC_EVEX_L_W_XS, IC_EVEX_L_W_XD, IC_EVEX_L_W_OPSIZE, IC_EVEX_L2, IC_EVEX_L2_XS, IC_EVEX_L2_XD, IC_EVEX_L2_OPSIZE, IC_EVEX_L2_W, IC_EVEX_L2_W_XS, IC_EVEX_L2_W_XD, IC_EVEX_L2_W_OPSIZE, IC_EVEX_K, IC_EVEX_XS_K, IC_EVEX_XD_K, IC_EVEX_OPSIZE_K, IC_EVEX_W_K, IC_EVEX_W_XS_K, IC_EVEX_W_XD_K, IC_EVEX_W_OPSIZE_K, IC_EVEX_L_K, IC_EVEX_L_XS_K, IC_EVEX_L_XD_K, IC_EVEX_L_OPSIZE_K, IC_EVEX_L_W_K, IC_EVEX_L_W_XS_K, IC_EVEX_L_W_XD_K, IC_EVEX_L_W_OPSIZE_K, IC_EVEX_L2_K, IC_EVEX_L2_XS_K, IC_EVEX_L2_XD_K, IC_EVEX_L2_OPSIZE_K, IC_EVEX_L2_W_K, IC_EVEX_L2_W_XS_K, IC_EVEX_L2_W_XD_K, IC_EVEX_L2_W_OPSIZE_K, IC_EVEX_B, IC_EVEX_XS_B, IC_EVEX_XD_B, IC_EVEX_OPSIZE_B, IC_EVEX_W_B, IC_EVEX_W_XS_B, IC_EVEX_W_XD_B, IC_EVEX_W_OPSIZE_B, IC_EVEX_L_B, IC_EVEX_L_XS_B, IC_EVEX_L_XD_B, IC_EVEX_L_OPSIZE_B, IC_EVEX_L_W_B, IC_EVEX_L_W_XS_B, IC_EVEX_L_W_XD_B, IC_EVEX_L_W_OPSIZE_B, IC_EVEX_L2_B, IC_EVEX_L2_XS_B, IC_EVEX_L2_XD_B, IC_EVEX_L2_OPSIZE_B, IC_EVEX_L2_W_B, IC_EVEX_L2_W_XS_B, IC_EVEX_L2_W_XD_B, IC_EVEX_L2_W_OPSIZE_B, IC_EVEX_K_B, IC_EVEX_XS_K_B, IC_EVEX_XD_K_B, IC_EVEX_OPSIZE_K_B, IC_EVEX_W_K_B, IC_EVEX_W_XS_K_B, IC_EVEX_W_XD_K_B, IC_EVEX_W_OPSIZE_K_B, IC_EVEX_L_K_B, IC_EVEX_L_XS_K_B, IC_EVEX_L_XD_K_B, IC_EVEX_L_OPSIZE_K_B, IC_EVEX_L_W_K_B, IC_EVEX_L_W_XS_K_B, IC_EVEX_L_W_XD_K_B, IC_EVEX_L_W_OPSIZE_K_B, IC_EVEX_L2_K_B, IC_EVEX_L2_XS_K_B, IC_EVEX_L2_XD_K_B, IC_EVEX_L2_OPSIZE_K_B, IC_EVEX_L2_W_K_B, IC_EVEX_L2_W_XS_K_B, IC_EVEX_L2_W_XD_K_B, IC_EVEX_L2_W_OPSIZE_K_B, IC_EVEX_KZ_B, IC_EVEX_XS_KZ_B, IC_EVEX_XD_KZ_B, IC_EVEX_OPSIZE_KZ_B, IC_EVEX_W_KZ_B, IC_EVEX_W_XS_KZ_B, IC_EVEX_W_XD_KZ_B, IC_EVEX_W_OPSIZE_KZ_B, IC_EVEX_L_KZ_B, IC_EVEX_L_XS_KZ_B, IC_EVEX_L_XD_KZ_B, IC_EVEX_L_OPSIZE_KZ_B, IC_EVEX_L_W_KZ_B, IC_EVEX_L_W_XS_KZ_B, IC_EVEX_L_W_XD_KZ_B, IC_EVEX_L_W_OPSIZE_KZ_B, IC_EVEX_L2_KZ_B, IC_EVEX_L2_XS_KZ_B, IC_EVEX_L2_XD_KZ_B, IC_EVEX_L2_OPSIZE_KZ_B, IC_EVEX_L2_W_KZ_B, IC_EVEX_L2_W_XS_KZ_B, IC_EVEX_L2_W_XD_KZ_B, IC_EVEX_L2_W_OPSIZE_KZ_B, IC_EVEX_KZ, IC_EVEX_XS_KZ, IC_EVEX_XD_KZ, IC_EVEX_OPSIZE_KZ, IC_EVEX_W_KZ, IC_EVEX_W_XS_KZ, IC_EVEX_W_XD_KZ, IC_EVEX_W_OPSIZE_KZ, IC_EVEX_L_KZ, IC_EVEX_L_XS_KZ, IC_EVEX_L_XD_KZ, IC_EVEX_L_OPSIZE_KZ, IC_EVEX_L_W_KZ, IC_EVEX_L_W_XS_KZ, IC_EVEX_L_W_XD_KZ, IC_EVEX_L_W_OPSIZE_KZ, IC_EVEX_L2_KZ, IC_EVEX_L2_XS_KZ, IC_EVEX_L2_XD_KZ, IC_EVEX_L2_OPSIZE_KZ, IC_EVEX_L2_W_KZ, IC_EVEX_L2_W_XS_KZ, IC_EVEX_L2_W_XD_KZ, IC_EVEX_L2_W_OPSIZE_KZ,
 IC_max
} InstructionContext;






typedef enum {
 ONEBYTE = 0,
 TWOBYTE = 1,
 THREEBYTE_38 = 2,
 THREEBYTE_3A = 3,
 XOP8_MAP = 4,
 XOP9_MAP = 5,
 XOPA_MAP = 6,
 THREEDNOW_MAP = 7
} OpcodeType;
# 312 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
typedef uint16_t InstrUID;
# 341 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
typedef enum {
 MODRM_ONEENTRY, MODRM_SPLITRM, MODRM_SPLITMISC, MODRM_SPLITREG, MODRM_FULL,
 MODRM_max
} ModRMDecisionType;
# 408 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
typedef enum {
 ENCODING_NONE, ENCODING_REG, ENCODING_RM, ENCODING_RM_CD2, ENCODING_RM_CD4, ENCODING_RM_CD8, ENCODING_RM_CD16, ENCODING_RM_CD32, ENCODING_RM_CD64, ENCODING_VSIB, ENCODING_VSIB_CD2, ENCODING_VSIB_CD4, ENCODING_VSIB_CD8, ENCODING_VSIB_CD16, ENCODING_VSIB_CD32, ENCODING_VSIB_CD64, ENCODING_VVVV, ENCODING_WRITEMASK, ENCODING_IB, ENCODING_IW, ENCODING_ID, ENCODING_IO, ENCODING_RB, ENCODING_RW, ENCODING_RD, ENCODING_RO, ENCODING_FP, ENCODING_Iv, ENCODING_Ia, ENCODING_IRC, ENCODING_Rv, ENCODING_DUP, ENCODING_SI, ENCODING_DI,
 ENCODING_max
} OperandEncoding;
# 456 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
typedef enum {
 TYPE_NONE, TYPE_REL, TYPE_R8, TYPE_R16, TYPE_R32, TYPE_R64, TYPE_IMM, TYPE_IMM3, TYPE_IMM5, TYPE_AVX512ICC, TYPE_UIMM8, TYPE_M, TYPE_MVSIBX, TYPE_MVSIBY, TYPE_MVSIBZ, TYPE_SRCIDX, TYPE_DSTIDX, TYPE_MOFFS, TYPE_ST, TYPE_MM64, TYPE_XMM, TYPE_YMM, TYPE_ZMM, TYPE_VK, TYPE_SEGMENTREG, TYPE_DEBUGREG, TYPE_CONTROLREG, TYPE_BNDR, TYPE_Rv, TYPE_RELv, TYPE_DUP0, TYPE_DUP1, TYPE_DUP2, TYPE_DUP3, TYPE_DUP4,
 TYPE_max
} OperandType;





typedef struct OperandSpecifier {
 uint8_t encoding;
 uint8_t type;
} OperandSpecifier;
# 477 "project/radare2/shlr/capstone/arch/X86/X86DisassemblerDecoderCommon.h"
typedef enum {
 MODE_16BIT,
 MODE_32BIT,
 MODE_64BIT
} DisassemblerMode;
