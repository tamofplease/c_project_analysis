# 0 "project/radare2/libr/asm/arch/gb/gb_op_table.h"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "project/radare2/libr/asm/arch/gb/gb_op_table.h"
# 10 "project/radare2/libr/asm/arch/gb/gb_op_table.h"
typedef struct{
 const char *name;
 const int type;
} gb_opcode;

static const char *cb_ops[]={ "rlc","rrc","rl","rr","sla","sra","swap","srl",
    "bit 0,","bit 1,","bit 2,","bit 3,","bit 4,","bit 5,","bit 6,","bit 7,",
    "res 0,","res 1,","res 2,","res 3,","res 4,","res 5,","res 6,","res 7,",
    "set 0,","set 1,","set 2,","set 3,","set 4,","set 5,","set 6,","set 7,"};

static const char *cb_regs[]={ "b","c","d","e","h","l","[hl]","a"};

static gb_opcode gb_op[] = {
 {"nop" ,1},
 {"ld bc, 0x%04x" ,1 +8},
 {"ld [bc], a" ,1},
 {"inc bc" ,1},
 {"inc b" ,1},
 {"dec b" ,1},
 {"ld b, 0x%02x" ,1 +4},
 {"rlca" ,1},
 {"ld [0x%04x], sp" ,1 +8},
 {"add hl, bc" ,1},
 {"ld a, [bc]" ,1},
 {"dec bc" ,1},
 {"inc c" ,1},
 {"dec c" ,1},
 {"ld c, 0x%02x" ,1 +4},
 {"rrca" ,1},

 {"stop" ,1},
 {"ld de, 0x%04x" ,1 +8},
 {"ld [de], a" ,1},
 {"inc de" ,1},
 {"inc d" ,1},
 {"dec d" ,1},
 {"ld d, 0x%02x" ,1 +4},
 {"rla" ,1},
 {"jr 0x%02x" ,1 +4},
 {"add hl, de" ,1},
 {"ld a, [de]" ,1},
 {"dec de" ,1},
 {"inc e" ,1},
 {"dec e" ,1},
 {"ld e, 0x%02x" ,1 +4},
 {"rra" ,1},

 {"jr nZ, 0x%02x" ,1 +4},
 {"ld hl, 0x%04x" ,1 +8},
 {"ldi [hl], a" ,1},
 {"inc hl" ,1},
 {"inc h" ,1},
 {"dec h" ,1},
 {"ld h, 0x%02x" ,1 +4},
 {"daa" ,1},
 {"jr Z, 0x%02x" ,1 +4},
 {"add hl, hl" ,1},
 {"ldi a, [hl]" ,1},
 {"dec hl" ,1},
 {"inc l" ,1},
 {"dec l" ,1},
 {"ld l, 0x%02x" ,1 +4},
 {"cpl" ,1},

 {"jr nC, 0x%02x" ,1 +4},
 {"ld sp, 0x%04x" ,1 +8},
 {"ldd [hl], a" ,1},
 {"inc sp" ,1},
 {"inc [hl]" ,1},
 {"dec [hl]" ,1},
 {"ld [hl], 0x%02x" ,1 +4},
 {"scf" ,1},
 {"jr C, 0x%02x" ,1 +4},
 {"add hl, sp" ,1},
 {"ldd a, [hl]" ,1},
 {"dec sp" ,1},
 {"inc a" ,1},
 {"dec a" ,1},
 {"ld a, 0x%02x" ,1 +4},
 {"ccf" ,1},

 {"ld b, b" ,1},
 {"ld b, c" ,1},
 {"ld b, d" ,1},
 {"ld b, e" ,1},
 {"ld b, h" ,1},
 {"ld b, l" ,1},
 {"ld b, [hl]" ,1},
 {"ld b, a" ,1},
 {"ld c, b" ,1},
 {"ld c, c" ,1},
 {"ld c, d" ,1},
 {"ld c, e" ,1},
 {"ld c, h" ,1},
 {"ld c, l" ,1},
 {"ld c, [hl]" ,1},
 {"ld c, a" ,1},

 {"ld d, b" ,1},
 {"ld d, c" ,1},
 {"ld d, d" ,1},
 {"ld d, e" ,1},
 {"ld d, h" ,1},
 {"ld d, l" ,1},
 {"ld d, [hl]" ,1},
 {"ld d, a" ,1},
 {"ld e, b" ,1},
 {"ld e, c" ,1},
 {"ld e, d" ,1},
 {"ld e, e" ,1},
 {"ld e, h" ,1},
 {"ld e, l" ,1},
 {"ld e, [hl]" ,1},
 {"ld e, a" ,1},

 {"ld h, b" ,1},
 {"ld h, c" ,1},
 {"ld h, d" ,1},
 {"ld h, e" ,1},
 {"ld h, h" ,1},
 {"ld h, l" ,1},
 {"ld h, [hl]" ,1},
 {"ld h, a" ,1},
 {"ld l, b" ,1},
 {"ld l, c" ,1},
 {"ld l, d" ,1},
 {"ld l, e" ,1},
 {"ld l, h" ,1},
 {"ld l, l" ,1},
 {"ld l, [hl]" ,1},
 {"ld l, a" ,1},

 {"ld [hl], b" ,1},
 {"ld [hl], c" ,1},
 {"ld [hl], d" ,1},
 {"ld [hl], e" ,1},
 {"ld [hl], h" ,1},
 {"ld [hl], l" ,1},
 {"halt" ,1},
 {"ld [hl], a" ,1},
 {"ld a, b" ,1},
 {"ld a, c" ,1},
 {"ld a, d" ,1},
 {"ld a, e" ,1},
 {"ld a, h" ,1},
 {"ld a, l" ,1},
 {"ld a, [hl]" ,1},
 {"ld a, a" ,1},

 {"add b" ,1},
 {"add c" ,1},
 {"add d" ,1},
 {"add e" ,1},
 {"add h" ,1},
 {"add l" ,1},
 {"add [hl]" ,1},
 {"add a" ,1},
 {"adc b" ,1},
 {"adc c" ,1},
 {"adc d" ,1},
 {"adc e" ,1},
 {"adc h" ,1},
 {"adc l" ,1},
 {"adc [hl]" ,1},
 {"adc a" ,1},

 {"sub b" ,1},
 {"sub c" ,1},
 {"sub d" ,1},
 {"sub e" ,1},
 {"sub h" ,1},
 {"sub l" ,1},
 {"sub [hl]" ,1},
 {"sub a" ,1},
 {"sbc b" ,1},
 {"sbc c" ,1},
 {"sbc d" ,1},
 {"sbc e" ,1},
 {"sbc h" ,1},
 {"sbc l" ,1},
 {"sbc [hl]" ,1},
 {"sbc a" ,1},

 {"and b" ,1},
 {"and c" ,1},
 {"and d" ,1},
 {"and e" ,1},
 {"and h" ,1},
 {"and l" ,1},
 {"and [hl]" ,1},
 {"and a" ,1},
 {"xor b" ,1},
 {"xor c" ,1},
 {"xor d" ,1},
 {"xor e" ,1},
 {"xor h" ,1},
 {"xor l" ,1},
 {"xor [hl]" ,1},
 {"xor a" ,1},

 {"or b" ,1},
 {"or c" ,1},
 {"or d" ,1},
 {"or e" ,1},
 {"or h" ,1},
 {"or l" ,1},
 {"or [hl]" ,1},
 {"or a" ,1},
 {"cp b" ,1},
 {"cp c" ,1},
 {"cp d" ,1},
 {"cp e" ,1},
 {"cp h" ,1},
 {"cp l" ,1},
 {"cp [hl]" ,1},
 {"cp a" ,1},

 {"ret nZ" ,1},
 {"pop bc" ,1},
 {"jp nZ, 0x%04x" ,1 +8},
 {"jp 0x%04x" ,1 +8},
 {"call nZ, 0x%04x" ,1 +8},
 {"push bc" ,1},
 {"add 0x%02x" ,1 +4},
 {"rst 0" ,1},
 {"ret Z" ,1},
 {"ret" ,1},
 {"jp Z, 0x%04x" ,1 +8},
 {"" ,2},
 {"call Z, 0x%04x" ,1 +8},
 {"call 0x%04x" ,1 +8},
 {"adc 0x%02x" ,1 +4},
 {"rst 8" ,1},

 {"ret nC" ,1},
 {"pop de" ,1},
 {"jp nC, 0x%04x" ,1 +8},
 {"invalid" ,1},
 {"call nC, 0x%04x" ,1 +8},
 {"push de" ,1},
 {"sub 0x%02x" ,1 +4},
 {"rst 16" ,1},
 {"ret C" ,1},
 {"reti" ,1},
 {"jp C, 0x%04x" ,1 +8},
 {"invalid" ,1},
 {"call C, 0x%04x" ,1 +8},
 {"invalid" ,1},
 {"sbc 0x%02x" ,1 +4},
 {"rst 24" ,1},

 {"ld [%s], a" ,1 +4 +16},
 {"pop hl" ,1},
 {"ld [0xff00 + c], a" ,1},
 {"invalid" ,1},
 {"invalid" ,1},
 {"push hl" ,1},
 {"and 0x%02x" ,1 +4},
 {"rst 32" ,1},
 {"add sp, 0x%02x" ,1 +4},
 {"jp hl" ,1},
 {"ld [0x%04x], a" ,1 +8},
 {"invalid" ,1},
 {"invalid" ,1},
 {"invalid" ,1},
 {"xor 0x%02x" ,1 +4},
 {"rst 40" ,1},

 {"ld a, [%s]" ,1 +4 +16},
 {"pop af" ,1},
 {"ld a, [0xff00 + c]" ,1},
 {"di" ,1},
 {"invalid" ,1},
 {"push af" ,1},
 {"or 0x%02x" ,1 +4},
 {"rst 48" ,1},
 {"ld hl, sp + 0x%02x" ,1 +4},
 {"ld sp, hl" ,1},
 {"ld a, [0x%04x]" ,1 +8},
 {"ei" ,1},
 {"invalid" ,1},
 {"invalid" ,1},
 {"cp 0x%02x" ,1 +4},
 {"rst 56" ,1},
};
